// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMClusterList is a list of VMCluster
type VMClusterList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMClusterTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMClusterList registers a new resource with the given unique name, arguments, and options.
func NewVMClusterList(ctx *pulumi.Context,
	name string, args *VMClusterListArgs, opts ...pulumi.ResourceOption) (*VMClusterList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMClusterList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMClusterList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMClusterList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMClusterList gets an existing VMClusterList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMClusterList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMClusterListState, opts ...pulumi.ResourceOption) (*VMClusterList, error) {
	var resource VMClusterList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMClusterList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMClusterList resources.
type vmclusterListState struct {
}

type VMClusterListState struct {
}

func (VMClusterListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmclusterListState)(nil)).Elem()
}

type vmclusterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMClusterType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMClusterList resource.
type VMClusterListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMClusterTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMClusterListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmclusterListArgs)(nil)).Elem()
}

type VMClusterListInput interface {
	pulumi.Input

	ToVMClusterListOutput() VMClusterListOutput
	ToVMClusterListOutputWithContext(ctx context.Context) VMClusterListOutput
}

func (*VMClusterList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMClusterList)(nil)).Elem()
}

func (i *VMClusterList) ToVMClusterListOutput() VMClusterListOutput {
	return i.ToVMClusterListOutputWithContext(context.Background())
}

func (i *VMClusterList) ToVMClusterListOutputWithContext(ctx context.Context) VMClusterListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterListOutput)
}

// VMClusterListArrayInput is an input type that accepts VMClusterListArray and VMClusterListArrayOutput values.
// You can construct a concrete instance of `VMClusterListArrayInput` via:
//
//	VMClusterListArray{ VMClusterListArgs{...} }
type VMClusterListArrayInput interface {
	pulumi.Input

	ToVMClusterListArrayOutput() VMClusterListArrayOutput
	ToVMClusterListArrayOutputWithContext(context.Context) VMClusterListArrayOutput
}

type VMClusterListArray []VMClusterListInput

func (VMClusterListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMClusterList)(nil)).Elem()
}

func (i VMClusterListArray) ToVMClusterListArrayOutput() VMClusterListArrayOutput {
	return i.ToVMClusterListArrayOutputWithContext(context.Background())
}

func (i VMClusterListArray) ToVMClusterListArrayOutputWithContext(ctx context.Context) VMClusterListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterListArrayOutput)
}

// VMClusterListMapInput is an input type that accepts VMClusterListMap and VMClusterListMapOutput values.
// You can construct a concrete instance of `VMClusterListMapInput` via:
//
//	VMClusterListMap{ "key": VMClusterListArgs{...} }
type VMClusterListMapInput interface {
	pulumi.Input

	ToVMClusterListMapOutput() VMClusterListMapOutput
	ToVMClusterListMapOutputWithContext(context.Context) VMClusterListMapOutput
}

type VMClusterListMap map[string]VMClusterListInput

func (VMClusterListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMClusterList)(nil)).Elem()
}

func (i VMClusterListMap) ToVMClusterListMapOutput() VMClusterListMapOutput {
	return i.ToVMClusterListMapOutputWithContext(context.Background())
}

func (i VMClusterListMap) ToVMClusterListMapOutputWithContext(ctx context.Context) VMClusterListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterListMapOutput)
}

type VMClusterListOutput struct{ *pulumi.OutputState }

func (VMClusterListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMClusterList)(nil)).Elem()
}

func (o VMClusterListOutput) ToVMClusterListOutput() VMClusterListOutput {
	return o
}

func (o VMClusterListOutput) ToVMClusterListOutputWithContext(ctx context.Context) VMClusterListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMClusterListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMClusterList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmclusters. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMClusterListOutput) Items() VMClusterTypeArrayOutput {
	return o.ApplyT(func(v *VMClusterList) VMClusterTypeArrayOutput { return v.Items }).(VMClusterTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMClusterListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMClusterList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMClusterListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMClusterList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMClusterListArrayOutput struct{ *pulumi.OutputState }

func (VMClusterListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMClusterList)(nil)).Elem()
}

func (o VMClusterListArrayOutput) ToVMClusterListArrayOutput() VMClusterListArrayOutput {
	return o
}

func (o VMClusterListArrayOutput) ToVMClusterListArrayOutputWithContext(ctx context.Context) VMClusterListArrayOutput {
	return o
}

func (o VMClusterListArrayOutput) Index(i pulumi.IntInput) VMClusterListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMClusterList {
		return vs[0].([]*VMClusterList)[vs[1].(int)]
	}).(VMClusterListOutput)
}

type VMClusterListMapOutput struct{ *pulumi.OutputState }

func (VMClusterListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMClusterList)(nil)).Elem()
}

func (o VMClusterListMapOutput) ToVMClusterListMapOutput() VMClusterListMapOutput {
	return o
}

func (o VMClusterListMapOutput) ToVMClusterListMapOutputWithContext(ctx context.Context) VMClusterListMapOutput {
	return o
}

func (o VMClusterListMapOutput) MapIndex(k pulumi.StringInput) VMClusterListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMClusterList {
		return vs[0].(map[string]*VMClusterList)[vs[1].(string)]
	}).(VMClusterListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterListInput)(nil)).Elem(), &VMClusterList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterListArrayInput)(nil)).Elem(), VMClusterListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterListMapInput)(nil)).Elem(), VMClusterListMap{})
	pulumi.RegisterOutputType(VMClusterListOutput{})
	pulumi.RegisterOutputType(VMClusterListArrayOutput{})
	pulumi.RegisterOutputType(VMClusterListMapOutput{})
}
