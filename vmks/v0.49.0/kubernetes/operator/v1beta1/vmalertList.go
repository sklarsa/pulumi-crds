// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMAlertList is a list of VMAlert
type VMAlertList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmalerts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMAlertTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMAlertList registers a new resource with the given unique name, arguments, and options.
func NewVMAlertList(ctx *pulumi.Context,
	name string, args *VMAlertListArgs, opts ...pulumi.ResourceOption) (*VMAlertList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAlertList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAlertList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAlertList gets an existing VMAlertList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAlertList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAlertListState, opts ...pulumi.ResourceOption) (*VMAlertList, error) {
	var resource VMAlertList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAlertList resources.
type vmalertListState struct {
}

type VMAlertListState struct {
}

func (VMAlertListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertListState)(nil)).Elem()
}

type vmalertListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmalerts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMAlertType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMAlertList resource.
type VMAlertListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmalerts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMAlertTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMAlertListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertListArgs)(nil)).Elem()
}

type VMAlertListInput interface {
	pulumi.Input

	ToVMAlertListOutput() VMAlertListOutput
	ToVMAlertListOutputWithContext(ctx context.Context) VMAlertListOutput
}

func (*VMAlertList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertList)(nil)).Elem()
}

func (i *VMAlertList) ToVMAlertListOutput() VMAlertListOutput {
	return i.ToVMAlertListOutputWithContext(context.Background())
}

func (i *VMAlertList) ToVMAlertListOutputWithContext(ctx context.Context) VMAlertListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertListOutput)
}

// VMAlertListArrayInput is an input type that accepts VMAlertListArray and VMAlertListArrayOutput values.
// You can construct a concrete instance of `VMAlertListArrayInput` via:
//
//	VMAlertListArray{ VMAlertListArgs{...} }
type VMAlertListArrayInput interface {
	pulumi.Input

	ToVMAlertListArrayOutput() VMAlertListArrayOutput
	ToVMAlertListArrayOutputWithContext(context.Context) VMAlertListArrayOutput
}

type VMAlertListArray []VMAlertListInput

func (VMAlertListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertList)(nil)).Elem()
}

func (i VMAlertListArray) ToVMAlertListArrayOutput() VMAlertListArrayOutput {
	return i.ToVMAlertListArrayOutputWithContext(context.Background())
}

func (i VMAlertListArray) ToVMAlertListArrayOutputWithContext(ctx context.Context) VMAlertListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertListArrayOutput)
}

// VMAlertListMapInput is an input type that accepts VMAlertListMap and VMAlertListMapOutput values.
// You can construct a concrete instance of `VMAlertListMapInput` via:
//
//	VMAlertListMap{ "key": VMAlertListArgs{...} }
type VMAlertListMapInput interface {
	pulumi.Input

	ToVMAlertListMapOutput() VMAlertListMapOutput
	ToVMAlertListMapOutputWithContext(context.Context) VMAlertListMapOutput
}

type VMAlertListMap map[string]VMAlertListInput

func (VMAlertListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertList)(nil)).Elem()
}

func (i VMAlertListMap) ToVMAlertListMapOutput() VMAlertListMapOutput {
	return i.ToVMAlertListMapOutputWithContext(context.Background())
}

func (i VMAlertListMap) ToVMAlertListMapOutputWithContext(ctx context.Context) VMAlertListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertListMapOutput)
}

type VMAlertListOutput struct{ *pulumi.OutputState }

func (VMAlertListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertList)(nil)).Elem()
}

func (o VMAlertListOutput) ToVMAlertListOutput() VMAlertListOutput {
	return o
}

func (o VMAlertListOutput) ToVMAlertListOutputWithContext(ctx context.Context) VMAlertListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAlertListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmalerts. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMAlertListOutput) Items() VMAlertTypeArrayOutput {
	return o.ApplyT(func(v *VMAlertList) VMAlertTypeArrayOutput { return v.Items }).(VMAlertTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMAlertList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMAlertListArrayOutput struct{ *pulumi.OutputState }

func (VMAlertListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertList)(nil)).Elem()
}

func (o VMAlertListArrayOutput) ToVMAlertListArrayOutput() VMAlertListArrayOutput {
	return o
}

func (o VMAlertListArrayOutput) ToVMAlertListArrayOutputWithContext(ctx context.Context) VMAlertListArrayOutput {
	return o
}

func (o VMAlertListArrayOutput) Index(i pulumi.IntInput) VMAlertListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAlertList {
		return vs[0].([]*VMAlertList)[vs[1].(int)]
	}).(VMAlertListOutput)
}

type VMAlertListMapOutput struct{ *pulumi.OutputState }

func (VMAlertListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertList)(nil)).Elem()
}

func (o VMAlertListMapOutput) ToVMAlertListMapOutput() VMAlertListMapOutput {
	return o
}

func (o VMAlertListMapOutput) ToVMAlertListMapOutputWithContext(ctx context.Context) VMAlertListMapOutput {
	return o
}

func (o VMAlertListMapOutput) MapIndex(k pulumi.StringInput) VMAlertListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAlertList {
		return vs[0].(map[string]*VMAlertList)[vs[1].(string)]
	}).(VMAlertListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertListInput)(nil)).Elem(), &VMAlertList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertListArrayInput)(nil)).Elem(), VMAlertListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertListMapInput)(nil)).Elem(), VMAlertListMap{})
	pulumi.RegisterOutputType(VMAlertListOutput{})
	pulumi.RegisterOutputType(VMAlertListArrayOutput{})
	pulumi.RegisterOutputType(VMAlertListMapOutput{})
}
