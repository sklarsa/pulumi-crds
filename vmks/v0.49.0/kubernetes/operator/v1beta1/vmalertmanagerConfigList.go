// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMAlertmanagerConfigList is a list of VMAlertmanagerConfig
type VMAlertmanagerConfigList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmalertmanagerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMAlertmanagerConfigTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMAlertmanagerConfigList registers a new resource with the given unique name, arguments, and options.
func NewVMAlertmanagerConfigList(ctx *pulumi.Context,
	name string, args *VMAlertmanagerConfigListArgs, opts ...pulumi.ResourceOption) (*VMAlertmanagerConfigList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAlertmanagerConfigList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAlertmanagerConfigList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanagerConfigList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAlertmanagerConfigList gets an existing VMAlertmanagerConfigList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAlertmanagerConfigList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAlertmanagerConfigListState, opts ...pulumi.ResourceOption) (*VMAlertmanagerConfigList, error) {
	var resource VMAlertmanagerConfigList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanagerConfigList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAlertmanagerConfigList resources.
type vmalertmanagerConfigListState struct {
}

type VMAlertmanagerConfigListState struct {
}

func (VMAlertmanagerConfigListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerConfigListState)(nil)).Elem()
}

type vmalertmanagerConfigListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmalertmanagerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMAlertmanagerConfigType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMAlertmanagerConfigList resource.
type VMAlertmanagerConfigListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmalertmanagerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMAlertmanagerConfigTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMAlertmanagerConfigListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerConfigListArgs)(nil)).Elem()
}

type VMAlertmanagerConfigListInput interface {
	pulumi.Input

	ToVMAlertmanagerConfigListOutput() VMAlertmanagerConfigListOutput
	ToVMAlertmanagerConfigListOutputWithContext(ctx context.Context) VMAlertmanagerConfigListOutput
}

func (*VMAlertmanagerConfigList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanagerConfigList)(nil)).Elem()
}

func (i *VMAlertmanagerConfigList) ToVMAlertmanagerConfigListOutput() VMAlertmanagerConfigListOutput {
	return i.ToVMAlertmanagerConfigListOutputWithContext(context.Background())
}

func (i *VMAlertmanagerConfigList) ToVMAlertmanagerConfigListOutputWithContext(ctx context.Context) VMAlertmanagerConfigListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerConfigListOutput)
}

// VMAlertmanagerConfigListArrayInput is an input type that accepts VMAlertmanagerConfigListArray and VMAlertmanagerConfigListArrayOutput values.
// You can construct a concrete instance of `VMAlertmanagerConfigListArrayInput` via:
//
//	VMAlertmanagerConfigListArray{ VMAlertmanagerConfigListArgs{...} }
type VMAlertmanagerConfigListArrayInput interface {
	pulumi.Input

	ToVMAlertmanagerConfigListArrayOutput() VMAlertmanagerConfigListArrayOutput
	ToVMAlertmanagerConfigListArrayOutputWithContext(context.Context) VMAlertmanagerConfigListArrayOutput
}

type VMAlertmanagerConfigListArray []VMAlertmanagerConfigListInput

func (VMAlertmanagerConfigListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanagerConfigList)(nil)).Elem()
}

func (i VMAlertmanagerConfigListArray) ToVMAlertmanagerConfigListArrayOutput() VMAlertmanagerConfigListArrayOutput {
	return i.ToVMAlertmanagerConfigListArrayOutputWithContext(context.Background())
}

func (i VMAlertmanagerConfigListArray) ToVMAlertmanagerConfigListArrayOutputWithContext(ctx context.Context) VMAlertmanagerConfigListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerConfigListArrayOutput)
}

// VMAlertmanagerConfigListMapInput is an input type that accepts VMAlertmanagerConfigListMap and VMAlertmanagerConfigListMapOutput values.
// You can construct a concrete instance of `VMAlertmanagerConfigListMapInput` via:
//
//	VMAlertmanagerConfigListMap{ "key": VMAlertmanagerConfigListArgs{...} }
type VMAlertmanagerConfigListMapInput interface {
	pulumi.Input

	ToVMAlertmanagerConfigListMapOutput() VMAlertmanagerConfigListMapOutput
	ToVMAlertmanagerConfigListMapOutputWithContext(context.Context) VMAlertmanagerConfigListMapOutput
}

type VMAlertmanagerConfigListMap map[string]VMAlertmanagerConfigListInput

func (VMAlertmanagerConfigListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanagerConfigList)(nil)).Elem()
}

func (i VMAlertmanagerConfigListMap) ToVMAlertmanagerConfigListMapOutput() VMAlertmanagerConfigListMapOutput {
	return i.ToVMAlertmanagerConfigListMapOutputWithContext(context.Background())
}

func (i VMAlertmanagerConfigListMap) ToVMAlertmanagerConfigListMapOutputWithContext(ctx context.Context) VMAlertmanagerConfigListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerConfigListMapOutput)
}

type VMAlertmanagerConfigListOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerConfigListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanagerConfigList)(nil)).Elem()
}

func (o VMAlertmanagerConfigListOutput) ToVMAlertmanagerConfigListOutput() VMAlertmanagerConfigListOutput {
	return o
}

func (o VMAlertmanagerConfigListOutput) ToVMAlertmanagerConfigListOutputWithContext(ctx context.Context) VMAlertmanagerConfigListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAlertmanagerConfigListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfigList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmalertmanagerconfigs. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMAlertmanagerConfigListOutput) Items() VMAlertmanagerConfigTypeArrayOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfigList) VMAlertmanagerConfigTypeArrayOutput { return v.Items }).(VMAlertmanagerConfigTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertmanagerConfigListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfigList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertmanagerConfigListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfigList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMAlertmanagerConfigListArrayOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerConfigListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanagerConfigList)(nil)).Elem()
}

func (o VMAlertmanagerConfigListArrayOutput) ToVMAlertmanagerConfigListArrayOutput() VMAlertmanagerConfigListArrayOutput {
	return o
}

func (o VMAlertmanagerConfigListArrayOutput) ToVMAlertmanagerConfigListArrayOutputWithContext(ctx context.Context) VMAlertmanagerConfigListArrayOutput {
	return o
}

func (o VMAlertmanagerConfigListArrayOutput) Index(i pulumi.IntInput) VMAlertmanagerConfigListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAlertmanagerConfigList {
		return vs[0].([]*VMAlertmanagerConfigList)[vs[1].(int)]
	}).(VMAlertmanagerConfigListOutput)
}

type VMAlertmanagerConfigListMapOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerConfigListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanagerConfigList)(nil)).Elem()
}

func (o VMAlertmanagerConfigListMapOutput) ToVMAlertmanagerConfigListMapOutput() VMAlertmanagerConfigListMapOutput {
	return o
}

func (o VMAlertmanagerConfigListMapOutput) ToVMAlertmanagerConfigListMapOutputWithContext(ctx context.Context) VMAlertmanagerConfigListMapOutput {
	return o
}

func (o VMAlertmanagerConfigListMapOutput) MapIndex(k pulumi.StringInput) VMAlertmanagerConfigListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAlertmanagerConfigList {
		return vs[0].(map[string]*VMAlertmanagerConfigList)[vs[1].(string)]
	}).(VMAlertmanagerConfigListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerConfigListInput)(nil)).Elem(), &VMAlertmanagerConfigList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerConfigListArrayInput)(nil)).Elem(), VMAlertmanagerConfigListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerConfigListMapInput)(nil)).Elem(), VMAlertmanagerConfigListMap{})
	pulumi.RegisterOutputType(VMAlertmanagerConfigListOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerConfigListArrayOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerConfigListMapOutput{})
}
