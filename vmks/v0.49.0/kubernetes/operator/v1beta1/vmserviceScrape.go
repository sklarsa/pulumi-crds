// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMServiceScrape is scrape configuration for endpoints associated with
// kubernetes service,
// it generates scrape configuration for vmagent based on selectors.
// result config will scrape service endpoints
type VMServiceScrape struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput        `pulumi:"metadata"`
	Spec     VMServiceScrapeSpecOutput      `pulumi:"spec"`
	Status   VMServiceScrapeStatusPtrOutput `pulumi:"status"`
}

// NewVMServiceScrape registers a new resource with the given unique name, arguments, and options.
func NewVMServiceScrape(ctx *pulumi.Context,
	name string, args *VMServiceScrapeArgs, opts ...pulumi.ResourceOption) (*VMServiceScrape, error) {
	if args == nil {
		args = &VMServiceScrapeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMServiceScrape")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMServiceScrape
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMServiceScrape", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMServiceScrape gets an existing VMServiceScrape resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMServiceScrape(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMServiceScrapeState, opts ...pulumi.ResourceOption) (*VMServiceScrape, error) {
	var resource VMServiceScrape
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMServiceScrape", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMServiceScrape resources.
type vmserviceScrapeState struct {
}

type VMServiceScrapeState struct {
}

func (VMServiceScrapeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmserviceScrapeState)(nil)).Elem()
}

type vmserviceScrapeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta   `pulumi:"metadata"`
	Spec     *VMServiceScrapeSpec `pulumi:"spec"`
}

// The set of arguments for constructing a VMServiceScrape resource.
type VMServiceScrapeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMServiceScrapeSpecPtrInput
}

func (VMServiceScrapeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmserviceScrapeArgs)(nil)).Elem()
}

type VMServiceScrapeInput interface {
	pulumi.Input

	ToVMServiceScrapeOutput() VMServiceScrapeOutput
	ToVMServiceScrapeOutputWithContext(ctx context.Context) VMServiceScrapeOutput
}

func (*VMServiceScrape) ElementType() reflect.Type {
	return reflect.TypeOf((**VMServiceScrape)(nil)).Elem()
}

func (i *VMServiceScrape) ToVMServiceScrapeOutput() VMServiceScrapeOutput {
	return i.ToVMServiceScrapeOutputWithContext(context.Background())
}

func (i *VMServiceScrape) ToVMServiceScrapeOutputWithContext(ctx context.Context) VMServiceScrapeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMServiceScrapeOutput)
}

// VMServiceScrapeArrayInput is an input type that accepts VMServiceScrapeArray and VMServiceScrapeArrayOutput values.
// You can construct a concrete instance of `VMServiceScrapeArrayInput` via:
//
//	VMServiceScrapeArray{ VMServiceScrapeArgs{...} }
type VMServiceScrapeArrayInput interface {
	pulumi.Input

	ToVMServiceScrapeArrayOutput() VMServiceScrapeArrayOutput
	ToVMServiceScrapeArrayOutputWithContext(context.Context) VMServiceScrapeArrayOutput
}

type VMServiceScrapeArray []VMServiceScrapeInput

func (VMServiceScrapeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMServiceScrape)(nil)).Elem()
}

func (i VMServiceScrapeArray) ToVMServiceScrapeArrayOutput() VMServiceScrapeArrayOutput {
	return i.ToVMServiceScrapeArrayOutputWithContext(context.Background())
}

func (i VMServiceScrapeArray) ToVMServiceScrapeArrayOutputWithContext(ctx context.Context) VMServiceScrapeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMServiceScrapeArrayOutput)
}

// VMServiceScrapeMapInput is an input type that accepts VMServiceScrapeMap and VMServiceScrapeMapOutput values.
// You can construct a concrete instance of `VMServiceScrapeMapInput` via:
//
//	VMServiceScrapeMap{ "key": VMServiceScrapeArgs{...} }
type VMServiceScrapeMapInput interface {
	pulumi.Input

	ToVMServiceScrapeMapOutput() VMServiceScrapeMapOutput
	ToVMServiceScrapeMapOutputWithContext(context.Context) VMServiceScrapeMapOutput
}

type VMServiceScrapeMap map[string]VMServiceScrapeInput

func (VMServiceScrapeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMServiceScrape)(nil)).Elem()
}

func (i VMServiceScrapeMap) ToVMServiceScrapeMapOutput() VMServiceScrapeMapOutput {
	return i.ToVMServiceScrapeMapOutputWithContext(context.Background())
}

func (i VMServiceScrapeMap) ToVMServiceScrapeMapOutputWithContext(ctx context.Context) VMServiceScrapeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMServiceScrapeMapOutput)
}

type VMServiceScrapeOutput struct{ *pulumi.OutputState }

func (VMServiceScrapeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMServiceScrape)(nil)).Elem()
}

func (o VMServiceScrapeOutput) ToVMServiceScrapeOutput() VMServiceScrapeOutput {
	return o
}

func (o VMServiceScrapeOutput) ToVMServiceScrapeOutputWithContext(ctx context.Context) VMServiceScrapeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMServiceScrapeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMServiceScrape) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMServiceScrapeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMServiceScrape) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMServiceScrapeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMServiceScrape) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMServiceScrapeOutput) Spec() VMServiceScrapeSpecOutput {
	return o.ApplyT(func(v *VMServiceScrape) VMServiceScrapeSpecOutput { return v.Spec }).(VMServiceScrapeSpecOutput)
}

func (o VMServiceScrapeOutput) Status() VMServiceScrapeStatusPtrOutput {
	return o.ApplyT(func(v *VMServiceScrape) VMServiceScrapeStatusPtrOutput { return v.Status }).(VMServiceScrapeStatusPtrOutput)
}

type VMServiceScrapeArrayOutput struct{ *pulumi.OutputState }

func (VMServiceScrapeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMServiceScrape)(nil)).Elem()
}

func (o VMServiceScrapeArrayOutput) ToVMServiceScrapeArrayOutput() VMServiceScrapeArrayOutput {
	return o
}

func (o VMServiceScrapeArrayOutput) ToVMServiceScrapeArrayOutputWithContext(ctx context.Context) VMServiceScrapeArrayOutput {
	return o
}

func (o VMServiceScrapeArrayOutput) Index(i pulumi.IntInput) VMServiceScrapeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMServiceScrape {
		return vs[0].([]*VMServiceScrape)[vs[1].(int)]
	}).(VMServiceScrapeOutput)
}

type VMServiceScrapeMapOutput struct{ *pulumi.OutputState }

func (VMServiceScrapeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMServiceScrape)(nil)).Elem()
}

func (o VMServiceScrapeMapOutput) ToVMServiceScrapeMapOutput() VMServiceScrapeMapOutput {
	return o
}

func (o VMServiceScrapeMapOutput) ToVMServiceScrapeMapOutputWithContext(ctx context.Context) VMServiceScrapeMapOutput {
	return o
}

func (o VMServiceScrapeMapOutput) MapIndex(k pulumi.StringInput) VMServiceScrapeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMServiceScrape {
		return vs[0].(map[string]*VMServiceScrape)[vs[1].(string)]
	}).(VMServiceScrapeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMServiceScrapeInput)(nil)).Elem(), &VMServiceScrape{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMServiceScrapeArrayInput)(nil)).Elem(), VMServiceScrapeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMServiceScrapeMapInput)(nil)).Elem(), VMServiceScrapeMap{})
	pulumi.RegisterOutputType(VMServiceScrapeOutput{})
	pulumi.RegisterOutputType(VMServiceScrapeArrayOutput{})
	pulumi.RegisterOutputType(VMServiceScrapeMapOutput{})
}
