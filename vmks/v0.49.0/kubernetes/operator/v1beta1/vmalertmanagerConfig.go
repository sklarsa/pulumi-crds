// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMAlertmanagerConfig is the Schema for the vmalertmanagerconfigs API
type VMAlertmanagerConfig struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput             `pulumi:"metadata"`
	Spec     VMAlertmanagerConfigSpecOutput      `pulumi:"spec"`
	Status   VMAlertmanagerConfigStatusPtrOutput `pulumi:"status"`
}

// NewVMAlertmanagerConfig registers a new resource with the given unique name, arguments, and options.
func NewVMAlertmanagerConfig(ctx *pulumi.Context,
	name string, args *VMAlertmanagerConfigArgs, opts ...pulumi.ResourceOption) (*VMAlertmanagerConfig, error) {
	if args == nil {
		args = &VMAlertmanagerConfigArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAlertmanagerConfig")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAlertmanagerConfig
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanagerConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAlertmanagerConfig gets an existing VMAlertmanagerConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAlertmanagerConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAlertmanagerConfigState, opts ...pulumi.ResourceOption) (*VMAlertmanagerConfig, error) {
	var resource VMAlertmanagerConfig
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanagerConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAlertmanagerConfig resources.
type vmalertmanagerConfigState struct {
}

type VMAlertmanagerConfigState struct {
}

func (VMAlertmanagerConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerConfigState)(nil)).Elem()
}

type vmalertmanagerConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta        `pulumi:"metadata"`
	Spec     *VMAlertmanagerConfigSpec `pulumi:"spec"`
}

// The set of arguments for constructing a VMAlertmanagerConfig resource.
type VMAlertmanagerConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMAlertmanagerConfigSpecPtrInput
}

func (VMAlertmanagerConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerConfigArgs)(nil)).Elem()
}

type VMAlertmanagerConfigInput interface {
	pulumi.Input

	ToVMAlertmanagerConfigOutput() VMAlertmanagerConfigOutput
	ToVMAlertmanagerConfigOutputWithContext(ctx context.Context) VMAlertmanagerConfigOutput
}

func (*VMAlertmanagerConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanagerConfig)(nil)).Elem()
}

func (i *VMAlertmanagerConfig) ToVMAlertmanagerConfigOutput() VMAlertmanagerConfigOutput {
	return i.ToVMAlertmanagerConfigOutputWithContext(context.Background())
}

func (i *VMAlertmanagerConfig) ToVMAlertmanagerConfigOutputWithContext(ctx context.Context) VMAlertmanagerConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerConfigOutput)
}

// VMAlertmanagerConfigArrayInput is an input type that accepts VMAlertmanagerConfigArray and VMAlertmanagerConfigArrayOutput values.
// You can construct a concrete instance of `VMAlertmanagerConfigArrayInput` via:
//
//	VMAlertmanagerConfigArray{ VMAlertmanagerConfigArgs{...} }
type VMAlertmanagerConfigArrayInput interface {
	pulumi.Input

	ToVMAlertmanagerConfigArrayOutput() VMAlertmanagerConfigArrayOutput
	ToVMAlertmanagerConfigArrayOutputWithContext(context.Context) VMAlertmanagerConfigArrayOutput
}

type VMAlertmanagerConfigArray []VMAlertmanagerConfigInput

func (VMAlertmanagerConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanagerConfig)(nil)).Elem()
}

func (i VMAlertmanagerConfigArray) ToVMAlertmanagerConfigArrayOutput() VMAlertmanagerConfigArrayOutput {
	return i.ToVMAlertmanagerConfigArrayOutputWithContext(context.Background())
}

func (i VMAlertmanagerConfigArray) ToVMAlertmanagerConfigArrayOutputWithContext(ctx context.Context) VMAlertmanagerConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerConfigArrayOutput)
}

// VMAlertmanagerConfigMapInput is an input type that accepts VMAlertmanagerConfigMap and VMAlertmanagerConfigMapOutput values.
// You can construct a concrete instance of `VMAlertmanagerConfigMapInput` via:
//
//	VMAlertmanagerConfigMap{ "key": VMAlertmanagerConfigArgs{...} }
type VMAlertmanagerConfigMapInput interface {
	pulumi.Input

	ToVMAlertmanagerConfigMapOutput() VMAlertmanagerConfigMapOutput
	ToVMAlertmanagerConfigMapOutputWithContext(context.Context) VMAlertmanagerConfigMapOutput
}

type VMAlertmanagerConfigMap map[string]VMAlertmanagerConfigInput

func (VMAlertmanagerConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanagerConfig)(nil)).Elem()
}

func (i VMAlertmanagerConfigMap) ToVMAlertmanagerConfigMapOutput() VMAlertmanagerConfigMapOutput {
	return i.ToVMAlertmanagerConfigMapOutputWithContext(context.Background())
}

func (i VMAlertmanagerConfigMap) ToVMAlertmanagerConfigMapOutputWithContext(ctx context.Context) VMAlertmanagerConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerConfigMapOutput)
}

type VMAlertmanagerConfigOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanagerConfig)(nil)).Elem()
}

func (o VMAlertmanagerConfigOutput) ToVMAlertmanagerConfigOutput() VMAlertmanagerConfigOutput {
	return o
}

func (o VMAlertmanagerConfigOutput) ToVMAlertmanagerConfigOutputWithContext(ctx context.Context) VMAlertmanagerConfigOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAlertmanagerConfigOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfig) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertmanagerConfigOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfig) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMAlertmanagerConfigOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfig) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMAlertmanagerConfigOutput) Spec() VMAlertmanagerConfigSpecOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfig) VMAlertmanagerConfigSpecOutput { return v.Spec }).(VMAlertmanagerConfigSpecOutput)
}

func (o VMAlertmanagerConfigOutput) Status() VMAlertmanagerConfigStatusPtrOutput {
	return o.ApplyT(func(v *VMAlertmanagerConfig) VMAlertmanagerConfigStatusPtrOutput { return v.Status }).(VMAlertmanagerConfigStatusPtrOutput)
}

type VMAlertmanagerConfigArrayOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanagerConfig)(nil)).Elem()
}

func (o VMAlertmanagerConfigArrayOutput) ToVMAlertmanagerConfigArrayOutput() VMAlertmanagerConfigArrayOutput {
	return o
}

func (o VMAlertmanagerConfigArrayOutput) ToVMAlertmanagerConfigArrayOutputWithContext(ctx context.Context) VMAlertmanagerConfigArrayOutput {
	return o
}

func (o VMAlertmanagerConfigArrayOutput) Index(i pulumi.IntInput) VMAlertmanagerConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAlertmanagerConfig {
		return vs[0].([]*VMAlertmanagerConfig)[vs[1].(int)]
	}).(VMAlertmanagerConfigOutput)
}

type VMAlertmanagerConfigMapOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanagerConfig)(nil)).Elem()
}

func (o VMAlertmanagerConfigMapOutput) ToVMAlertmanagerConfigMapOutput() VMAlertmanagerConfigMapOutput {
	return o
}

func (o VMAlertmanagerConfigMapOutput) ToVMAlertmanagerConfigMapOutputWithContext(ctx context.Context) VMAlertmanagerConfigMapOutput {
	return o
}

func (o VMAlertmanagerConfigMapOutput) MapIndex(k pulumi.StringInput) VMAlertmanagerConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAlertmanagerConfig {
		return vs[0].(map[string]*VMAlertmanagerConfig)[vs[1].(string)]
	}).(VMAlertmanagerConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerConfigInput)(nil)).Elem(), &VMAlertmanagerConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerConfigArrayInput)(nil)).Elem(), VMAlertmanagerConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerConfigMapInput)(nil)).Elem(), VMAlertmanagerConfigMap{})
	pulumi.RegisterOutputType(VMAlertmanagerConfigOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerConfigArrayOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerConfigMapOutput{})
}
