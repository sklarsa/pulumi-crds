// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMScrapeConfig specifies a set of targets and parameters describing how to scrape them.
type VMScrapeConfigPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput    `pulumi:"metadata"`
	Spec     VMScrapeConfigSpecPatchPtrOutput   `pulumi:"spec"`
	Status   VMScrapeConfigStatusPatchPtrOutput `pulumi:"status"`
}

// NewVMScrapeConfigPatch registers a new resource with the given unique name, arguments, and options.
func NewVMScrapeConfigPatch(ctx *pulumi.Context,
	name string, args *VMScrapeConfigPatchArgs, opts ...pulumi.ResourceOption) (*VMScrapeConfigPatch, error) {
	if args == nil {
		args = &VMScrapeConfigPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMScrapeConfig")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMScrapeConfigPatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMScrapeConfigPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMScrapeConfigPatch gets an existing VMScrapeConfigPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMScrapeConfigPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMScrapeConfigPatchState, opts ...pulumi.ResourceOption) (*VMScrapeConfigPatch, error) {
	var resource VMScrapeConfigPatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMScrapeConfigPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMScrapeConfigPatch resources.
type vmscrapeConfigPatchState struct {
}

type VMScrapeConfigPatchState struct {
}

func (VMScrapeConfigPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmscrapeConfigPatchState)(nil)).Elem()
}

type vmscrapeConfigPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *VMScrapeConfigSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a VMScrapeConfigPatch resource.
type VMScrapeConfigPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMScrapeConfigSpecPatchPtrInput
}

func (VMScrapeConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmscrapeConfigPatchArgs)(nil)).Elem()
}

type VMScrapeConfigPatchInput interface {
	pulumi.Input

	ToVMScrapeConfigPatchOutput() VMScrapeConfigPatchOutput
	ToVMScrapeConfigPatchOutputWithContext(ctx context.Context) VMScrapeConfigPatchOutput
}

func (*VMScrapeConfigPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMScrapeConfigPatch)(nil)).Elem()
}

func (i *VMScrapeConfigPatch) ToVMScrapeConfigPatchOutput() VMScrapeConfigPatchOutput {
	return i.ToVMScrapeConfigPatchOutputWithContext(context.Background())
}

func (i *VMScrapeConfigPatch) ToVMScrapeConfigPatchOutputWithContext(ctx context.Context) VMScrapeConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMScrapeConfigPatchOutput)
}

// VMScrapeConfigPatchArrayInput is an input type that accepts VMScrapeConfigPatchArray and VMScrapeConfigPatchArrayOutput values.
// You can construct a concrete instance of `VMScrapeConfigPatchArrayInput` via:
//
//	VMScrapeConfigPatchArray{ VMScrapeConfigPatchArgs{...} }
type VMScrapeConfigPatchArrayInput interface {
	pulumi.Input

	ToVMScrapeConfigPatchArrayOutput() VMScrapeConfigPatchArrayOutput
	ToVMScrapeConfigPatchArrayOutputWithContext(context.Context) VMScrapeConfigPatchArrayOutput
}

type VMScrapeConfigPatchArray []VMScrapeConfigPatchInput

func (VMScrapeConfigPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMScrapeConfigPatch)(nil)).Elem()
}

func (i VMScrapeConfigPatchArray) ToVMScrapeConfigPatchArrayOutput() VMScrapeConfigPatchArrayOutput {
	return i.ToVMScrapeConfigPatchArrayOutputWithContext(context.Background())
}

func (i VMScrapeConfigPatchArray) ToVMScrapeConfigPatchArrayOutputWithContext(ctx context.Context) VMScrapeConfigPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMScrapeConfigPatchArrayOutput)
}

// VMScrapeConfigPatchMapInput is an input type that accepts VMScrapeConfigPatchMap and VMScrapeConfigPatchMapOutput values.
// You can construct a concrete instance of `VMScrapeConfigPatchMapInput` via:
//
//	VMScrapeConfigPatchMap{ "key": VMScrapeConfigPatchArgs{...} }
type VMScrapeConfigPatchMapInput interface {
	pulumi.Input

	ToVMScrapeConfigPatchMapOutput() VMScrapeConfigPatchMapOutput
	ToVMScrapeConfigPatchMapOutputWithContext(context.Context) VMScrapeConfigPatchMapOutput
}

type VMScrapeConfigPatchMap map[string]VMScrapeConfigPatchInput

func (VMScrapeConfigPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMScrapeConfigPatch)(nil)).Elem()
}

func (i VMScrapeConfigPatchMap) ToVMScrapeConfigPatchMapOutput() VMScrapeConfigPatchMapOutput {
	return i.ToVMScrapeConfigPatchMapOutputWithContext(context.Background())
}

func (i VMScrapeConfigPatchMap) ToVMScrapeConfigPatchMapOutputWithContext(ctx context.Context) VMScrapeConfigPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMScrapeConfigPatchMapOutput)
}

type VMScrapeConfigPatchOutput struct{ *pulumi.OutputState }

func (VMScrapeConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMScrapeConfigPatch)(nil)).Elem()
}

func (o VMScrapeConfigPatchOutput) ToVMScrapeConfigPatchOutput() VMScrapeConfigPatchOutput {
	return o
}

func (o VMScrapeConfigPatchOutput) ToVMScrapeConfigPatchOutputWithContext(ctx context.Context) VMScrapeConfigPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMScrapeConfigPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMScrapeConfigPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMScrapeConfigPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMScrapeConfigPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMScrapeConfigPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMScrapeConfigPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMScrapeConfigPatchOutput) Spec() VMScrapeConfigSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMScrapeConfigPatch) VMScrapeConfigSpecPatchPtrOutput { return v.Spec }).(VMScrapeConfigSpecPatchPtrOutput)
}

func (o VMScrapeConfigPatchOutput) Status() VMScrapeConfigStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMScrapeConfigPatch) VMScrapeConfigStatusPatchPtrOutput { return v.Status }).(VMScrapeConfigStatusPatchPtrOutput)
}

type VMScrapeConfigPatchArrayOutput struct{ *pulumi.OutputState }

func (VMScrapeConfigPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMScrapeConfigPatch)(nil)).Elem()
}

func (o VMScrapeConfigPatchArrayOutput) ToVMScrapeConfigPatchArrayOutput() VMScrapeConfigPatchArrayOutput {
	return o
}

func (o VMScrapeConfigPatchArrayOutput) ToVMScrapeConfigPatchArrayOutputWithContext(ctx context.Context) VMScrapeConfigPatchArrayOutput {
	return o
}

func (o VMScrapeConfigPatchArrayOutput) Index(i pulumi.IntInput) VMScrapeConfigPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMScrapeConfigPatch {
		return vs[0].([]*VMScrapeConfigPatch)[vs[1].(int)]
	}).(VMScrapeConfigPatchOutput)
}

type VMScrapeConfigPatchMapOutput struct{ *pulumi.OutputState }

func (VMScrapeConfigPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMScrapeConfigPatch)(nil)).Elem()
}

func (o VMScrapeConfigPatchMapOutput) ToVMScrapeConfigPatchMapOutput() VMScrapeConfigPatchMapOutput {
	return o
}

func (o VMScrapeConfigPatchMapOutput) ToVMScrapeConfigPatchMapOutputWithContext(ctx context.Context) VMScrapeConfigPatchMapOutput {
	return o
}

func (o VMScrapeConfigPatchMapOutput) MapIndex(k pulumi.StringInput) VMScrapeConfigPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMScrapeConfigPatch {
		return vs[0].(map[string]*VMScrapeConfigPatch)[vs[1].(string)]
	}).(VMScrapeConfigPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMScrapeConfigPatchInput)(nil)).Elem(), &VMScrapeConfigPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMScrapeConfigPatchArrayInput)(nil)).Elem(), VMScrapeConfigPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMScrapeConfigPatchMapInput)(nil)).Elem(), VMScrapeConfigPatchMap{})
	pulumi.RegisterOutputType(VMScrapeConfigPatchOutput{})
	pulumi.RegisterOutputType(VMScrapeConfigPatchArrayOutput{})
	pulumi.RegisterOutputType(VMScrapeConfigPatchMapOutput{})
}
