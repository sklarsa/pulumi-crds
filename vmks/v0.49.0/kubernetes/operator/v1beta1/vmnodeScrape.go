// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMNodeScrape defines discovery for targets placed on kubernetes nodes,
// usually its node-exporters and other host services.
// InternalIP is used as __address__ for scraping.
type VMNodeScrape struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput     `pulumi:"metadata"`
	Spec     VMNodeScrapeSpecOutput      `pulumi:"spec"`
	Status   VMNodeScrapeStatusPtrOutput `pulumi:"status"`
}

// NewVMNodeScrape registers a new resource with the given unique name, arguments, and options.
func NewVMNodeScrape(ctx *pulumi.Context,
	name string, args *VMNodeScrapeArgs, opts ...pulumi.ResourceOption) (*VMNodeScrape, error) {
	if args == nil {
		args = &VMNodeScrapeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMNodeScrape")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMNodeScrape
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMNodeScrape", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMNodeScrape gets an existing VMNodeScrape resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMNodeScrape(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMNodeScrapeState, opts ...pulumi.ResourceOption) (*VMNodeScrape, error) {
	var resource VMNodeScrape
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMNodeScrape", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMNodeScrape resources.
type vmnodeScrapeState struct {
}

type VMNodeScrapeState struct {
}

func (VMNodeScrapeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmnodeScrapeState)(nil)).Elem()
}

type vmnodeScrapeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *VMNodeScrapeSpec  `pulumi:"spec"`
}

// The set of arguments for constructing a VMNodeScrape resource.
type VMNodeScrapeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMNodeScrapeSpecPtrInput
}

func (VMNodeScrapeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmnodeScrapeArgs)(nil)).Elem()
}

type VMNodeScrapeInput interface {
	pulumi.Input

	ToVMNodeScrapeOutput() VMNodeScrapeOutput
	ToVMNodeScrapeOutputWithContext(ctx context.Context) VMNodeScrapeOutput
}

func (*VMNodeScrape) ElementType() reflect.Type {
	return reflect.TypeOf((**VMNodeScrape)(nil)).Elem()
}

func (i *VMNodeScrape) ToVMNodeScrapeOutput() VMNodeScrapeOutput {
	return i.ToVMNodeScrapeOutputWithContext(context.Background())
}

func (i *VMNodeScrape) ToVMNodeScrapeOutputWithContext(ctx context.Context) VMNodeScrapeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapeOutput)
}

// VMNodeScrapeArrayInput is an input type that accepts VMNodeScrapeArray and VMNodeScrapeArrayOutput values.
// You can construct a concrete instance of `VMNodeScrapeArrayInput` via:
//
//	VMNodeScrapeArray{ VMNodeScrapeArgs{...} }
type VMNodeScrapeArrayInput interface {
	pulumi.Input

	ToVMNodeScrapeArrayOutput() VMNodeScrapeArrayOutput
	ToVMNodeScrapeArrayOutputWithContext(context.Context) VMNodeScrapeArrayOutput
}

type VMNodeScrapeArray []VMNodeScrapeInput

func (VMNodeScrapeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMNodeScrape)(nil)).Elem()
}

func (i VMNodeScrapeArray) ToVMNodeScrapeArrayOutput() VMNodeScrapeArrayOutput {
	return i.ToVMNodeScrapeArrayOutputWithContext(context.Background())
}

func (i VMNodeScrapeArray) ToVMNodeScrapeArrayOutputWithContext(ctx context.Context) VMNodeScrapeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapeArrayOutput)
}

// VMNodeScrapeMapInput is an input type that accepts VMNodeScrapeMap and VMNodeScrapeMapOutput values.
// You can construct a concrete instance of `VMNodeScrapeMapInput` via:
//
//	VMNodeScrapeMap{ "key": VMNodeScrapeArgs{...} }
type VMNodeScrapeMapInput interface {
	pulumi.Input

	ToVMNodeScrapeMapOutput() VMNodeScrapeMapOutput
	ToVMNodeScrapeMapOutputWithContext(context.Context) VMNodeScrapeMapOutput
}

type VMNodeScrapeMap map[string]VMNodeScrapeInput

func (VMNodeScrapeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMNodeScrape)(nil)).Elem()
}

func (i VMNodeScrapeMap) ToVMNodeScrapeMapOutput() VMNodeScrapeMapOutput {
	return i.ToVMNodeScrapeMapOutputWithContext(context.Background())
}

func (i VMNodeScrapeMap) ToVMNodeScrapeMapOutputWithContext(ctx context.Context) VMNodeScrapeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapeMapOutput)
}

type VMNodeScrapeOutput struct{ *pulumi.OutputState }

func (VMNodeScrapeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMNodeScrape)(nil)).Elem()
}

func (o VMNodeScrapeOutput) ToVMNodeScrapeOutput() VMNodeScrapeOutput {
	return o
}

func (o VMNodeScrapeOutput) ToVMNodeScrapeOutputWithContext(ctx context.Context) VMNodeScrapeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMNodeScrapeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMNodeScrape) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMNodeScrapeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMNodeScrape) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMNodeScrapeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMNodeScrape) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMNodeScrapeOutput) Spec() VMNodeScrapeSpecOutput {
	return o.ApplyT(func(v *VMNodeScrape) VMNodeScrapeSpecOutput { return v.Spec }).(VMNodeScrapeSpecOutput)
}

func (o VMNodeScrapeOutput) Status() VMNodeScrapeStatusPtrOutput {
	return o.ApplyT(func(v *VMNodeScrape) VMNodeScrapeStatusPtrOutput { return v.Status }).(VMNodeScrapeStatusPtrOutput)
}

type VMNodeScrapeArrayOutput struct{ *pulumi.OutputState }

func (VMNodeScrapeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMNodeScrape)(nil)).Elem()
}

func (o VMNodeScrapeArrayOutput) ToVMNodeScrapeArrayOutput() VMNodeScrapeArrayOutput {
	return o
}

func (o VMNodeScrapeArrayOutput) ToVMNodeScrapeArrayOutputWithContext(ctx context.Context) VMNodeScrapeArrayOutput {
	return o
}

func (o VMNodeScrapeArrayOutput) Index(i pulumi.IntInput) VMNodeScrapeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMNodeScrape {
		return vs[0].([]*VMNodeScrape)[vs[1].(int)]
	}).(VMNodeScrapeOutput)
}

type VMNodeScrapeMapOutput struct{ *pulumi.OutputState }

func (VMNodeScrapeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMNodeScrape)(nil)).Elem()
}

func (o VMNodeScrapeMapOutput) ToVMNodeScrapeMapOutput() VMNodeScrapeMapOutput {
	return o
}

func (o VMNodeScrapeMapOutput) ToVMNodeScrapeMapOutputWithContext(ctx context.Context) VMNodeScrapeMapOutput {
	return o
}

func (o VMNodeScrapeMapOutput) MapIndex(k pulumi.StringInput) VMNodeScrapeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMNodeScrape {
		return vs[0].(map[string]*VMNodeScrape)[vs[1].(string)]
	}).(VMNodeScrapeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapeInput)(nil)).Elem(), &VMNodeScrape{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapeArrayInput)(nil)).Elem(), VMNodeScrapeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapeMapInput)(nil)).Elem(), VMNodeScrapeMap{})
	pulumi.RegisterOutputType(VMNodeScrapeOutput{})
	pulumi.RegisterOutputType(VMNodeScrapeArrayOutput{})
	pulumi.RegisterOutputType(VMNodeScrapeMapOutput{})
}
