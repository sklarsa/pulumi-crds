// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMNodeScrapeList is a list of VMNodeScrape
type VMNodeScrapeList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmnodescrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMNodeScrapeTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMNodeScrapeList registers a new resource with the given unique name, arguments, and options.
func NewVMNodeScrapeList(ctx *pulumi.Context,
	name string, args *VMNodeScrapeListArgs, opts ...pulumi.ResourceOption) (*VMNodeScrapeList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMNodeScrapeList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMNodeScrapeList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMNodeScrapeList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMNodeScrapeList gets an existing VMNodeScrapeList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMNodeScrapeList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMNodeScrapeListState, opts ...pulumi.ResourceOption) (*VMNodeScrapeList, error) {
	var resource VMNodeScrapeList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMNodeScrapeList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMNodeScrapeList resources.
type vmnodeScrapeListState struct {
}

type VMNodeScrapeListState struct {
}

func (VMNodeScrapeListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmnodeScrapeListState)(nil)).Elem()
}

type vmnodeScrapeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmnodescrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMNodeScrapeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMNodeScrapeList resource.
type VMNodeScrapeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmnodescrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMNodeScrapeTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMNodeScrapeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmnodeScrapeListArgs)(nil)).Elem()
}

type VMNodeScrapeListInput interface {
	pulumi.Input

	ToVMNodeScrapeListOutput() VMNodeScrapeListOutput
	ToVMNodeScrapeListOutputWithContext(ctx context.Context) VMNodeScrapeListOutput
}

func (*VMNodeScrapeList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMNodeScrapeList)(nil)).Elem()
}

func (i *VMNodeScrapeList) ToVMNodeScrapeListOutput() VMNodeScrapeListOutput {
	return i.ToVMNodeScrapeListOutputWithContext(context.Background())
}

func (i *VMNodeScrapeList) ToVMNodeScrapeListOutputWithContext(ctx context.Context) VMNodeScrapeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapeListOutput)
}

// VMNodeScrapeListArrayInput is an input type that accepts VMNodeScrapeListArray and VMNodeScrapeListArrayOutput values.
// You can construct a concrete instance of `VMNodeScrapeListArrayInput` via:
//
//	VMNodeScrapeListArray{ VMNodeScrapeListArgs{...} }
type VMNodeScrapeListArrayInput interface {
	pulumi.Input

	ToVMNodeScrapeListArrayOutput() VMNodeScrapeListArrayOutput
	ToVMNodeScrapeListArrayOutputWithContext(context.Context) VMNodeScrapeListArrayOutput
}

type VMNodeScrapeListArray []VMNodeScrapeListInput

func (VMNodeScrapeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMNodeScrapeList)(nil)).Elem()
}

func (i VMNodeScrapeListArray) ToVMNodeScrapeListArrayOutput() VMNodeScrapeListArrayOutput {
	return i.ToVMNodeScrapeListArrayOutputWithContext(context.Background())
}

func (i VMNodeScrapeListArray) ToVMNodeScrapeListArrayOutputWithContext(ctx context.Context) VMNodeScrapeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapeListArrayOutput)
}

// VMNodeScrapeListMapInput is an input type that accepts VMNodeScrapeListMap and VMNodeScrapeListMapOutput values.
// You can construct a concrete instance of `VMNodeScrapeListMapInput` via:
//
//	VMNodeScrapeListMap{ "key": VMNodeScrapeListArgs{...} }
type VMNodeScrapeListMapInput interface {
	pulumi.Input

	ToVMNodeScrapeListMapOutput() VMNodeScrapeListMapOutput
	ToVMNodeScrapeListMapOutputWithContext(context.Context) VMNodeScrapeListMapOutput
}

type VMNodeScrapeListMap map[string]VMNodeScrapeListInput

func (VMNodeScrapeListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMNodeScrapeList)(nil)).Elem()
}

func (i VMNodeScrapeListMap) ToVMNodeScrapeListMapOutput() VMNodeScrapeListMapOutput {
	return i.ToVMNodeScrapeListMapOutputWithContext(context.Background())
}

func (i VMNodeScrapeListMap) ToVMNodeScrapeListMapOutputWithContext(ctx context.Context) VMNodeScrapeListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapeListMapOutput)
}

type VMNodeScrapeListOutput struct{ *pulumi.OutputState }

func (VMNodeScrapeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMNodeScrapeList)(nil)).Elem()
}

func (o VMNodeScrapeListOutput) ToVMNodeScrapeListOutput() VMNodeScrapeListOutput {
	return o
}

func (o VMNodeScrapeListOutput) ToVMNodeScrapeListOutputWithContext(ctx context.Context) VMNodeScrapeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMNodeScrapeListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMNodeScrapeList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmnodescrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMNodeScrapeListOutput) Items() VMNodeScrapeTypeArrayOutput {
	return o.ApplyT(func(v *VMNodeScrapeList) VMNodeScrapeTypeArrayOutput { return v.Items }).(VMNodeScrapeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMNodeScrapeListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMNodeScrapeList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMNodeScrapeListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMNodeScrapeList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMNodeScrapeListArrayOutput struct{ *pulumi.OutputState }

func (VMNodeScrapeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMNodeScrapeList)(nil)).Elem()
}

func (o VMNodeScrapeListArrayOutput) ToVMNodeScrapeListArrayOutput() VMNodeScrapeListArrayOutput {
	return o
}

func (o VMNodeScrapeListArrayOutput) ToVMNodeScrapeListArrayOutputWithContext(ctx context.Context) VMNodeScrapeListArrayOutput {
	return o
}

func (o VMNodeScrapeListArrayOutput) Index(i pulumi.IntInput) VMNodeScrapeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMNodeScrapeList {
		return vs[0].([]*VMNodeScrapeList)[vs[1].(int)]
	}).(VMNodeScrapeListOutput)
}

type VMNodeScrapeListMapOutput struct{ *pulumi.OutputState }

func (VMNodeScrapeListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMNodeScrapeList)(nil)).Elem()
}

func (o VMNodeScrapeListMapOutput) ToVMNodeScrapeListMapOutput() VMNodeScrapeListMapOutput {
	return o
}

func (o VMNodeScrapeListMapOutput) ToVMNodeScrapeListMapOutputWithContext(ctx context.Context) VMNodeScrapeListMapOutput {
	return o
}

func (o VMNodeScrapeListMapOutput) MapIndex(k pulumi.StringInput) VMNodeScrapeListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMNodeScrapeList {
		return vs[0].(map[string]*VMNodeScrapeList)[vs[1].(string)]
	}).(VMNodeScrapeListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapeListInput)(nil)).Elem(), &VMNodeScrapeList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapeListArrayInput)(nil)).Elem(), VMNodeScrapeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapeListMapInput)(nil)).Elem(), VMNodeScrapeListMap{})
	pulumi.RegisterOutputType(VMNodeScrapeListOutput{})
	pulumi.RegisterOutputType(VMNodeScrapeListArrayOutput{})
	pulumi.RegisterOutputType(VMNodeScrapeListMapOutput{})
}
