// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMPodScrapeList is a list of VMPodScrape
type VMPodScrapeList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmpodscrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMPodScrapeTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMPodScrapeList registers a new resource with the given unique name, arguments, and options.
func NewVMPodScrapeList(ctx *pulumi.Context,
	name string, args *VMPodScrapeListArgs, opts ...pulumi.ResourceOption) (*VMPodScrapeList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMPodScrapeList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMPodScrapeList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMPodScrapeList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMPodScrapeList gets an existing VMPodScrapeList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMPodScrapeList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMPodScrapeListState, opts ...pulumi.ResourceOption) (*VMPodScrapeList, error) {
	var resource VMPodScrapeList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMPodScrapeList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMPodScrapeList resources.
type vmpodScrapeListState struct {
}

type VMPodScrapeListState struct {
}

func (VMPodScrapeListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmpodScrapeListState)(nil)).Elem()
}

type vmpodScrapeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmpodscrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMPodScrapeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMPodScrapeList resource.
type VMPodScrapeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmpodscrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMPodScrapeTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMPodScrapeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmpodScrapeListArgs)(nil)).Elem()
}

type VMPodScrapeListInput interface {
	pulumi.Input

	ToVMPodScrapeListOutput() VMPodScrapeListOutput
	ToVMPodScrapeListOutputWithContext(ctx context.Context) VMPodScrapeListOutput
}

func (*VMPodScrapeList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMPodScrapeList)(nil)).Elem()
}

func (i *VMPodScrapeList) ToVMPodScrapeListOutput() VMPodScrapeListOutput {
	return i.ToVMPodScrapeListOutputWithContext(context.Background())
}

func (i *VMPodScrapeList) ToVMPodScrapeListOutputWithContext(ctx context.Context) VMPodScrapeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMPodScrapeListOutput)
}

// VMPodScrapeListArrayInput is an input type that accepts VMPodScrapeListArray and VMPodScrapeListArrayOutput values.
// You can construct a concrete instance of `VMPodScrapeListArrayInput` via:
//
//	VMPodScrapeListArray{ VMPodScrapeListArgs{...} }
type VMPodScrapeListArrayInput interface {
	pulumi.Input

	ToVMPodScrapeListArrayOutput() VMPodScrapeListArrayOutput
	ToVMPodScrapeListArrayOutputWithContext(context.Context) VMPodScrapeListArrayOutput
}

type VMPodScrapeListArray []VMPodScrapeListInput

func (VMPodScrapeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMPodScrapeList)(nil)).Elem()
}

func (i VMPodScrapeListArray) ToVMPodScrapeListArrayOutput() VMPodScrapeListArrayOutput {
	return i.ToVMPodScrapeListArrayOutputWithContext(context.Background())
}

func (i VMPodScrapeListArray) ToVMPodScrapeListArrayOutputWithContext(ctx context.Context) VMPodScrapeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMPodScrapeListArrayOutput)
}

// VMPodScrapeListMapInput is an input type that accepts VMPodScrapeListMap and VMPodScrapeListMapOutput values.
// You can construct a concrete instance of `VMPodScrapeListMapInput` via:
//
//	VMPodScrapeListMap{ "key": VMPodScrapeListArgs{...} }
type VMPodScrapeListMapInput interface {
	pulumi.Input

	ToVMPodScrapeListMapOutput() VMPodScrapeListMapOutput
	ToVMPodScrapeListMapOutputWithContext(context.Context) VMPodScrapeListMapOutput
}

type VMPodScrapeListMap map[string]VMPodScrapeListInput

func (VMPodScrapeListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMPodScrapeList)(nil)).Elem()
}

func (i VMPodScrapeListMap) ToVMPodScrapeListMapOutput() VMPodScrapeListMapOutput {
	return i.ToVMPodScrapeListMapOutputWithContext(context.Background())
}

func (i VMPodScrapeListMap) ToVMPodScrapeListMapOutputWithContext(ctx context.Context) VMPodScrapeListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMPodScrapeListMapOutput)
}

type VMPodScrapeListOutput struct{ *pulumi.OutputState }

func (VMPodScrapeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMPodScrapeList)(nil)).Elem()
}

func (o VMPodScrapeListOutput) ToVMPodScrapeListOutput() VMPodScrapeListOutput {
	return o
}

func (o VMPodScrapeListOutput) ToVMPodScrapeListOutputWithContext(ctx context.Context) VMPodScrapeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMPodScrapeListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMPodScrapeList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmpodscrapes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMPodScrapeListOutput) Items() VMPodScrapeTypeArrayOutput {
	return o.ApplyT(func(v *VMPodScrapeList) VMPodScrapeTypeArrayOutput { return v.Items }).(VMPodScrapeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMPodScrapeListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMPodScrapeList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMPodScrapeListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMPodScrapeList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMPodScrapeListArrayOutput struct{ *pulumi.OutputState }

func (VMPodScrapeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMPodScrapeList)(nil)).Elem()
}

func (o VMPodScrapeListArrayOutput) ToVMPodScrapeListArrayOutput() VMPodScrapeListArrayOutput {
	return o
}

func (o VMPodScrapeListArrayOutput) ToVMPodScrapeListArrayOutputWithContext(ctx context.Context) VMPodScrapeListArrayOutput {
	return o
}

func (o VMPodScrapeListArrayOutput) Index(i pulumi.IntInput) VMPodScrapeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMPodScrapeList {
		return vs[0].([]*VMPodScrapeList)[vs[1].(int)]
	}).(VMPodScrapeListOutput)
}

type VMPodScrapeListMapOutput struct{ *pulumi.OutputState }

func (VMPodScrapeListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMPodScrapeList)(nil)).Elem()
}

func (o VMPodScrapeListMapOutput) ToVMPodScrapeListMapOutput() VMPodScrapeListMapOutput {
	return o
}

func (o VMPodScrapeListMapOutput) ToVMPodScrapeListMapOutputWithContext(ctx context.Context) VMPodScrapeListMapOutput {
	return o
}

func (o VMPodScrapeListMapOutput) MapIndex(k pulumi.StringInput) VMPodScrapeListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMPodScrapeList {
		return vs[0].(map[string]*VMPodScrapeList)[vs[1].(string)]
	}).(VMPodScrapeListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMPodScrapeListInput)(nil)).Elem(), &VMPodScrapeList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMPodScrapeListArrayInput)(nil)).Elem(), VMPodScrapeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMPodScrapeListMapInput)(nil)).Elem(), VMPodScrapeListMap{})
	pulumi.RegisterOutputType(VMPodScrapeListOutput{})
	pulumi.RegisterOutputType(VMPodScrapeListArrayOutput{})
	pulumi.RegisterOutputType(VMPodScrapeListMapOutput{})
}
