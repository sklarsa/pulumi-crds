// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMCluster is fast, cost-effective and scalable time-series database.
// Cluster version with
type VMClusterPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     VMClusterSpecPatchPtrOutput     `pulumi:"spec"`
	Status   VMClusterStatusPatchPtrOutput   `pulumi:"status"`
}

// NewVMClusterPatch registers a new resource with the given unique name, arguments, and options.
func NewVMClusterPatch(ctx *pulumi.Context,
	name string, args *VMClusterPatchArgs, opts ...pulumi.ResourceOption) (*VMClusterPatch, error) {
	if args == nil {
		args = &VMClusterPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMClusterPatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMClusterPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMClusterPatch gets an existing VMClusterPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMClusterPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMClusterPatchState, opts ...pulumi.ResourceOption) (*VMClusterPatch, error) {
	var resource VMClusterPatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMClusterPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMClusterPatch resources.
type vmclusterPatchState struct {
}

type VMClusterPatchState struct {
}

func (VMClusterPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmclusterPatchState)(nil)).Elem()
}

type vmclusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VMClusterSpecPatch     `pulumi:"spec"`
}

// The set of arguments for constructing a VMClusterPatch resource.
type VMClusterPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMClusterSpecPatchPtrInput
}

func (VMClusterPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmclusterPatchArgs)(nil)).Elem()
}

type VMClusterPatchInput interface {
	pulumi.Input

	ToVMClusterPatchOutput() VMClusterPatchOutput
	ToVMClusterPatchOutputWithContext(ctx context.Context) VMClusterPatchOutput
}

func (*VMClusterPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMClusterPatch)(nil)).Elem()
}

func (i *VMClusterPatch) ToVMClusterPatchOutput() VMClusterPatchOutput {
	return i.ToVMClusterPatchOutputWithContext(context.Background())
}

func (i *VMClusterPatch) ToVMClusterPatchOutputWithContext(ctx context.Context) VMClusterPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterPatchOutput)
}

// VMClusterPatchArrayInput is an input type that accepts VMClusterPatchArray and VMClusterPatchArrayOutput values.
// You can construct a concrete instance of `VMClusterPatchArrayInput` via:
//
//	VMClusterPatchArray{ VMClusterPatchArgs{...} }
type VMClusterPatchArrayInput interface {
	pulumi.Input

	ToVMClusterPatchArrayOutput() VMClusterPatchArrayOutput
	ToVMClusterPatchArrayOutputWithContext(context.Context) VMClusterPatchArrayOutput
}

type VMClusterPatchArray []VMClusterPatchInput

func (VMClusterPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMClusterPatch)(nil)).Elem()
}

func (i VMClusterPatchArray) ToVMClusterPatchArrayOutput() VMClusterPatchArrayOutput {
	return i.ToVMClusterPatchArrayOutputWithContext(context.Background())
}

func (i VMClusterPatchArray) ToVMClusterPatchArrayOutputWithContext(ctx context.Context) VMClusterPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterPatchArrayOutput)
}

// VMClusterPatchMapInput is an input type that accepts VMClusterPatchMap and VMClusterPatchMapOutput values.
// You can construct a concrete instance of `VMClusterPatchMapInput` via:
//
//	VMClusterPatchMap{ "key": VMClusterPatchArgs{...} }
type VMClusterPatchMapInput interface {
	pulumi.Input

	ToVMClusterPatchMapOutput() VMClusterPatchMapOutput
	ToVMClusterPatchMapOutputWithContext(context.Context) VMClusterPatchMapOutput
}

type VMClusterPatchMap map[string]VMClusterPatchInput

func (VMClusterPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMClusterPatch)(nil)).Elem()
}

func (i VMClusterPatchMap) ToVMClusterPatchMapOutput() VMClusterPatchMapOutput {
	return i.ToVMClusterPatchMapOutputWithContext(context.Background())
}

func (i VMClusterPatchMap) ToVMClusterPatchMapOutputWithContext(ctx context.Context) VMClusterPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterPatchMapOutput)
}

type VMClusterPatchOutput struct{ *pulumi.OutputState }

func (VMClusterPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMClusterPatch)(nil)).Elem()
}

func (o VMClusterPatchOutput) ToVMClusterPatchOutput() VMClusterPatchOutput {
	return o
}

func (o VMClusterPatchOutput) ToVMClusterPatchOutputWithContext(ctx context.Context) VMClusterPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMClusterPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMClusterPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMClusterPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMClusterPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMClusterPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMClusterPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMClusterPatchOutput) Spec() VMClusterSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMClusterPatch) VMClusterSpecPatchPtrOutput { return v.Spec }).(VMClusterSpecPatchPtrOutput)
}

func (o VMClusterPatchOutput) Status() VMClusterStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMClusterPatch) VMClusterStatusPatchPtrOutput { return v.Status }).(VMClusterStatusPatchPtrOutput)
}

type VMClusterPatchArrayOutput struct{ *pulumi.OutputState }

func (VMClusterPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMClusterPatch)(nil)).Elem()
}

func (o VMClusterPatchArrayOutput) ToVMClusterPatchArrayOutput() VMClusterPatchArrayOutput {
	return o
}

func (o VMClusterPatchArrayOutput) ToVMClusterPatchArrayOutputWithContext(ctx context.Context) VMClusterPatchArrayOutput {
	return o
}

func (o VMClusterPatchArrayOutput) Index(i pulumi.IntInput) VMClusterPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMClusterPatch {
		return vs[0].([]*VMClusterPatch)[vs[1].(int)]
	}).(VMClusterPatchOutput)
}

type VMClusterPatchMapOutput struct{ *pulumi.OutputState }

func (VMClusterPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMClusterPatch)(nil)).Elem()
}

func (o VMClusterPatchMapOutput) ToVMClusterPatchMapOutput() VMClusterPatchMapOutput {
	return o
}

func (o VMClusterPatchMapOutput) ToVMClusterPatchMapOutputWithContext(ctx context.Context) VMClusterPatchMapOutput {
	return o
}

func (o VMClusterPatchMapOutput) MapIndex(k pulumi.StringInput) VMClusterPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMClusterPatch {
		return vs[0].(map[string]*VMClusterPatch)[vs[1].(string)]
	}).(VMClusterPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterPatchInput)(nil)).Elem(), &VMClusterPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterPatchArrayInput)(nil)).Elem(), VMClusterPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterPatchMapInput)(nil)).Elem(), VMClusterPatchMap{})
	pulumi.RegisterOutputType(VMClusterPatchOutput{})
	pulumi.RegisterOutputType(VMClusterPatchArrayOutput{})
	pulumi.RegisterOutputType(VMClusterPatchMapOutput{})
}
