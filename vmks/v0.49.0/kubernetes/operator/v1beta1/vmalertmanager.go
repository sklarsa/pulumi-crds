// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMAlertmanager represents Victoria-Metrics deployment for Alertmanager.
type VMAlertmanager struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     VMAlertmanagerSpecOutput      `pulumi:"spec"`
	Status   VMAlertmanagerStatusPtrOutput `pulumi:"status"`
}

// NewVMAlertmanager registers a new resource with the given unique name, arguments, and options.
func NewVMAlertmanager(ctx *pulumi.Context,
	name string, args *VMAlertmanagerArgs, opts ...pulumi.ResourceOption) (*VMAlertmanager, error) {
	if args == nil {
		args = &VMAlertmanagerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAlertmanager")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAlertmanager
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAlertmanager gets an existing VMAlertmanager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAlertmanager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAlertmanagerState, opts ...pulumi.ResourceOption) (*VMAlertmanager, error) {
	var resource VMAlertmanager
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAlertmanager resources.
type vmalertmanagerState struct {
}

type VMAlertmanagerState struct {
}

func (VMAlertmanagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerState)(nil)).Elem()
}

type vmalertmanagerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *VMAlertmanagerSpec `pulumi:"spec"`
}

// The set of arguments for constructing a VMAlertmanager resource.
type VMAlertmanagerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMAlertmanagerSpecPtrInput
}

func (VMAlertmanagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerArgs)(nil)).Elem()
}

type VMAlertmanagerInput interface {
	pulumi.Input

	ToVMAlertmanagerOutput() VMAlertmanagerOutput
	ToVMAlertmanagerOutputWithContext(ctx context.Context) VMAlertmanagerOutput
}

func (*VMAlertmanager) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanager)(nil)).Elem()
}

func (i *VMAlertmanager) ToVMAlertmanagerOutput() VMAlertmanagerOutput {
	return i.ToVMAlertmanagerOutputWithContext(context.Background())
}

func (i *VMAlertmanager) ToVMAlertmanagerOutputWithContext(ctx context.Context) VMAlertmanagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerOutput)
}

// VMAlertmanagerArrayInput is an input type that accepts VMAlertmanagerArray and VMAlertmanagerArrayOutput values.
// You can construct a concrete instance of `VMAlertmanagerArrayInput` via:
//
//	VMAlertmanagerArray{ VMAlertmanagerArgs{...} }
type VMAlertmanagerArrayInput interface {
	pulumi.Input

	ToVMAlertmanagerArrayOutput() VMAlertmanagerArrayOutput
	ToVMAlertmanagerArrayOutputWithContext(context.Context) VMAlertmanagerArrayOutput
}

type VMAlertmanagerArray []VMAlertmanagerInput

func (VMAlertmanagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanager)(nil)).Elem()
}

func (i VMAlertmanagerArray) ToVMAlertmanagerArrayOutput() VMAlertmanagerArrayOutput {
	return i.ToVMAlertmanagerArrayOutputWithContext(context.Background())
}

func (i VMAlertmanagerArray) ToVMAlertmanagerArrayOutputWithContext(ctx context.Context) VMAlertmanagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerArrayOutput)
}

// VMAlertmanagerMapInput is an input type that accepts VMAlertmanagerMap and VMAlertmanagerMapOutput values.
// You can construct a concrete instance of `VMAlertmanagerMapInput` via:
//
//	VMAlertmanagerMap{ "key": VMAlertmanagerArgs{...} }
type VMAlertmanagerMapInput interface {
	pulumi.Input

	ToVMAlertmanagerMapOutput() VMAlertmanagerMapOutput
	ToVMAlertmanagerMapOutputWithContext(context.Context) VMAlertmanagerMapOutput
}

type VMAlertmanagerMap map[string]VMAlertmanagerInput

func (VMAlertmanagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanager)(nil)).Elem()
}

func (i VMAlertmanagerMap) ToVMAlertmanagerMapOutput() VMAlertmanagerMapOutput {
	return i.ToVMAlertmanagerMapOutputWithContext(context.Background())
}

func (i VMAlertmanagerMap) ToVMAlertmanagerMapOutputWithContext(ctx context.Context) VMAlertmanagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerMapOutput)
}

type VMAlertmanagerOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanager)(nil)).Elem()
}

func (o VMAlertmanagerOutput) ToVMAlertmanagerOutput() VMAlertmanagerOutput {
	return o
}

func (o VMAlertmanagerOutput) ToVMAlertmanagerOutputWithContext(ctx context.Context) VMAlertmanagerOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAlertmanagerOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertmanager) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertmanagerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAlertmanager) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMAlertmanagerOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMAlertmanager) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMAlertmanagerOutput) Spec() VMAlertmanagerSpecOutput {
	return o.ApplyT(func(v *VMAlertmanager) VMAlertmanagerSpecOutput { return v.Spec }).(VMAlertmanagerSpecOutput)
}

func (o VMAlertmanagerOutput) Status() VMAlertmanagerStatusPtrOutput {
	return o.ApplyT(func(v *VMAlertmanager) VMAlertmanagerStatusPtrOutput { return v.Status }).(VMAlertmanagerStatusPtrOutput)
}

type VMAlertmanagerArrayOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanager)(nil)).Elem()
}

func (o VMAlertmanagerArrayOutput) ToVMAlertmanagerArrayOutput() VMAlertmanagerArrayOutput {
	return o
}

func (o VMAlertmanagerArrayOutput) ToVMAlertmanagerArrayOutputWithContext(ctx context.Context) VMAlertmanagerArrayOutput {
	return o
}

func (o VMAlertmanagerArrayOutput) Index(i pulumi.IntInput) VMAlertmanagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAlertmanager {
		return vs[0].([]*VMAlertmanager)[vs[1].(int)]
	}).(VMAlertmanagerOutput)
}

type VMAlertmanagerMapOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanager)(nil)).Elem()
}

func (o VMAlertmanagerMapOutput) ToVMAlertmanagerMapOutput() VMAlertmanagerMapOutput {
	return o
}

func (o VMAlertmanagerMapOutput) ToVMAlertmanagerMapOutputWithContext(ctx context.Context) VMAlertmanagerMapOutput {
	return o
}

func (o VMAlertmanagerMapOutput) MapIndex(k pulumi.StringInput) VMAlertmanagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAlertmanager {
		return vs[0].(map[string]*VMAlertmanager)[vs[1].(string)]
	}).(VMAlertmanagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerInput)(nil)).Elem(), &VMAlertmanager{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerArrayInput)(nil)).Elem(), VMAlertmanagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerMapInput)(nil)).Elem(), VMAlertmanagerMap{})
	pulumi.RegisterOutputType(VMAlertmanagerOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerArrayOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerMapOutput{})
}
