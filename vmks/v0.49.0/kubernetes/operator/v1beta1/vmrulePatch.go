// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMRule defines rule records for vmalert application
type VMRulePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     VMRuleSpecPatchPtrOutput        `pulumi:"spec"`
	Status   VMRuleStatusPatchPtrOutput      `pulumi:"status"`
}

// NewVMRulePatch registers a new resource with the given unique name, arguments, and options.
func NewVMRulePatch(ctx *pulumi.Context,
	name string, args *VMRulePatchArgs, opts ...pulumi.ResourceOption) (*VMRulePatch, error) {
	if args == nil {
		args = &VMRulePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMRule")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMRulePatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMRulePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMRulePatch gets an existing VMRulePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMRulePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMRulePatchState, opts ...pulumi.ResourceOption) (*VMRulePatch, error) {
	var resource VMRulePatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMRulePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMRulePatch resources.
type vmrulePatchState struct {
}

type VMRulePatchState struct {
}

func (VMRulePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmrulePatchState)(nil)).Elem()
}

type vmrulePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VMRuleSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a VMRulePatch resource.
type VMRulePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMRuleSpecPatchPtrInput
}

func (VMRulePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmrulePatchArgs)(nil)).Elem()
}

type VMRulePatchInput interface {
	pulumi.Input

	ToVMRulePatchOutput() VMRulePatchOutput
	ToVMRulePatchOutputWithContext(ctx context.Context) VMRulePatchOutput
}

func (*VMRulePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMRulePatch)(nil)).Elem()
}

func (i *VMRulePatch) ToVMRulePatchOutput() VMRulePatchOutput {
	return i.ToVMRulePatchOutputWithContext(context.Background())
}

func (i *VMRulePatch) ToVMRulePatchOutputWithContext(ctx context.Context) VMRulePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRulePatchOutput)
}

// VMRulePatchArrayInput is an input type that accepts VMRulePatchArray and VMRulePatchArrayOutput values.
// You can construct a concrete instance of `VMRulePatchArrayInput` via:
//
//	VMRulePatchArray{ VMRulePatchArgs{...} }
type VMRulePatchArrayInput interface {
	pulumi.Input

	ToVMRulePatchArrayOutput() VMRulePatchArrayOutput
	ToVMRulePatchArrayOutputWithContext(context.Context) VMRulePatchArrayOutput
}

type VMRulePatchArray []VMRulePatchInput

func (VMRulePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMRulePatch)(nil)).Elem()
}

func (i VMRulePatchArray) ToVMRulePatchArrayOutput() VMRulePatchArrayOutput {
	return i.ToVMRulePatchArrayOutputWithContext(context.Background())
}

func (i VMRulePatchArray) ToVMRulePatchArrayOutputWithContext(ctx context.Context) VMRulePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRulePatchArrayOutput)
}

// VMRulePatchMapInput is an input type that accepts VMRulePatchMap and VMRulePatchMapOutput values.
// You can construct a concrete instance of `VMRulePatchMapInput` via:
//
//	VMRulePatchMap{ "key": VMRulePatchArgs{...} }
type VMRulePatchMapInput interface {
	pulumi.Input

	ToVMRulePatchMapOutput() VMRulePatchMapOutput
	ToVMRulePatchMapOutputWithContext(context.Context) VMRulePatchMapOutput
}

type VMRulePatchMap map[string]VMRulePatchInput

func (VMRulePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMRulePatch)(nil)).Elem()
}

func (i VMRulePatchMap) ToVMRulePatchMapOutput() VMRulePatchMapOutput {
	return i.ToVMRulePatchMapOutputWithContext(context.Background())
}

func (i VMRulePatchMap) ToVMRulePatchMapOutputWithContext(ctx context.Context) VMRulePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRulePatchMapOutput)
}

type VMRulePatchOutput struct{ *pulumi.OutputState }

func (VMRulePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMRulePatch)(nil)).Elem()
}

func (o VMRulePatchOutput) ToVMRulePatchOutput() VMRulePatchOutput {
	return o
}

func (o VMRulePatchOutput) ToVMRulePatchOutputWithContext(ctx context.Context) VMRulePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMRulePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMRulePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMRulePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMRulePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMRulePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMRulePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMRulePatchOutput) Spec() VMRuleSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMRulePatch) VMRuleSpecPatchPtrOutput { return v.Spec }).(VMRuleSpecPatchPtrOutput)
}

func (o VMRulePatchOutput) Status() VMRuleStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMRulePatch) VMRuleStatusPatchPtrOutput { return v.Status }).(VMRuleStatusPatchPtrOutput)
}

type VMRulePatchArrayOutput struct{ *pulumi.OutputState }

func (VMRulePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMRulePatch)(nil)).Elem()
}

func (o VMRulePatchArrayOutput) ToVMRulePatchArrayOutput() VMRulePatchArrayOutput {
	return o
}

func (o VMRulePatchArrayOutput) ToVMRulePatchArrayOutputWithContext(ctx context.Context) VMRulePatchArrayOutput {
	return o
}

func (o VMRulePatchArrayOutput) Index(i pulumi.IntInput) VMRulePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMRulePatch {
		return vs[0].([]*VMRulePatch)[vs[1].(int)]
	}).(VMRulePatchOutput)
}

type VMRulePatchMapOutput struct{ *pulumi.OutputState }

func (VMRulePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMRulePatch)(nil)).Elem()
}

func (o VMRulePatchMapOutput) ToVMRulePatchMapOutput() VMRulePatchMapOutput {
	return o
}

func (o VMRulePatchMapOutput) ToVMRulePatchMapOutputWithContext(ctx context.Context) VMRulePatchMapOutput {
	return o
}

func (o VMRulePatchMapOutput) MapIndex(k pulumi.StringInput) VMRulePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMRulePatch {
		return vs[0].(map[string]*VMRulePatch)[vs[1].(string)]
	}).(VMRulePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMRulePatchInput)(nil)).Elem(), &VMRulePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMRulePatchArrayInput)(nil)).Elem(), VMRulePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMRulePatchMapInput)(nil)).Elem(), VMRulePatchMap{})
	pulumi.RegisterOutputType(VMRulePatchOutput{})
	pulumi.RegisterOutputType(VMRulePatchArrayOutput{})
	pulumi.RegisterOutputType(VMRulePatchMapOutput{})
}
