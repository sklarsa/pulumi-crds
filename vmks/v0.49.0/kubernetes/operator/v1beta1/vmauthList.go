// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMAuthList is a list of VMAuth
type VMAuthList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmauths. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMAuthTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMAuthList registers a new resource with the given unique name, arguments, and options.
func NewVMAuthList(ctx *pulumi.Context,
	name string, args *VMAuthListArgs, opts ...pulumi.ResourceOption) (*VMAuthList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAuthList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAuthList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAuthList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAuthList gets an existing VMAuthList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAuthList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAuthListState, opts ...pulumi.ResourceOption) (*VMAuthList, error) {
	var resource VMAuthList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAuthList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAuthList resources.
type vmauthListState struct {
}

type VMAuthListState struct {
}

func (VMAuthListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmauthListState)(nil)).Elem()
}

type vmauthListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmauths. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMAuthType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMAuthList resource.
type VMAuthListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmauths. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMAuthTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMAuthListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmauthListArgs)(nil)).Elem()
}

type VMAuthListInput interface {
	pulumi.Input

	ToVMAuthListOutput() VMAuthListOutput
	ToVMAuthListOutputWithContext(ctx context.Context) VMAuthListOutput
}

func (*VMAuthList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAuthList)(nil)).Elem()
}

func (i *VMAuthList) ToVMAuthListOutput() VMAuthListOutput {
	return i.ToVMAuthListOutputWithContext(context.Background())
}

func (i *VMAuthList) ToVMAuthListOutputWithContext(ctx context.Context) VMAuthListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAuthListOutput)
}

// VMAuthListArrayInput is an input type that accepts VMAuthListArray and VMAuthListArrayOutput values.
// You can construct a concrete instance of `VMAuthListArrayInput` via:
//
//	VMAuthListArray{ VMAuthListArgs{...} }
type VMAuthListArrayInput interface {
	pulumi.Input

	ToVMAuthListArrayOutput() VMAuthListArrayOutput
	ToVMAuthListArrayOutputWithContext(context.Context) VMAuthListArrayOutput
}

type VMAuthListArray []VMAuthListInput

func (VMAuthListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAuthList)(nil)).Elem()
}

func (i VMAuthListArray) ToVMAuthListArrayOutput() VMAuthListArrayOutput {
	return i.ToVMAuthListArrayOutputWithContext(context.Background())
}

func (i VMAuthListArray) ToVMAuthListArrayOutputWithContext(ctx context.Context) VMAuthListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAuthListArrayOutput)
}

// VMAuthListMapInput is an input type that accepts VMAuthListMap and VMAuthListMapOutput values.
// You can construct a concrete instance of `VMAuthListMapInput` via:
//
//	VMAuthListMap{ "key": VMAuthListArgs{...} }
type VMAuthListMapInput interface {
	pulumi.Input

	ToVMAuthListMapOutput() VMAuthListMapOutput
	ToVMAuthListMapOutputWithContext(context.Context) VMAuthListMapOutput
}

type VMAuthListMap map[string]VMAuthListInput

func (VMAuthListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAuthList)(nil)).Elem()
}

func (i VMAuthListMap) ToVMAuthListMapOutput() VMAuthListMapOutput {
	return i.ToVMAuthListMapOutputWithContext(context.Background())
}

func (i VMAuthListMap) ToVMAuthListMapOutputWithContext(ctx context.Context) VMAuthListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAuthListMapOutput)
}

type VMAuthListOutput struct{ *pulumi.OutputState }

func (VMAuthListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAuthList)(nil)).Elem()
}

func (o VMAuthListOutput) ToVMAuthListOutput() VMAuthListOutput {
	return o
}

func (o VMAuthListOutput) ToVMAuthListOutputWithContext(ctx context.Context) VMAuthListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAuthListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAuthList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmauths. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMAuthListOutput) Items() VMAuthTypeArrayOutput {
	return o.ApplyT(func(v *VMAuthList) VMAuthTypeArrayOutput { return v.Items }).(VMAuthTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAuthListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMAuthList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAuthListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMAuthList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMAuthListArrayOutput struct{ *pulumi.OutputState }

func (VMAuthListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAuthList)(nil)).Elem()
}

func (o VMAuthListArrayOutput) ToVMAuthListArrayOutput() VMAuthListArrayOutput {
	return o
}

func (o VMAuthListArrayOutput) ToVMAuthListArrayOutputWithContext(ctx context.Context) VMAuthListArrayOutput {
	return o
}

func (o VMAuthListArrayOutput) Index(i pulumi.IntInput) VMAuthListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAuthList {
		return vs[0].([]*VMAuthList)[vs[1].(int)]
	}).(VMAuthListOutput)
}

type VMAuthListMapOutput struct{ *pulumi.OutputState }

func (VMAuthListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAuthList)(nil)).Elem()
}

func (o VMAuthListMapOutput) ToVMAuthListMapOutput() VMAuthListMapOutput {
	return o
}

func (o VMAuthListMapOutput) ToVMAuthListMapOutputWithContext(ctx context.Context) VMAuthListMapOutput {
	return o
}

func (o VMAuthListMapOutput) MapIndex(k pulumi.StringInput) VMAuthListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAuthList {
		return vs[0].(map[string]*VMAuthList)[vs[1].(string)]
	}).(VMAuthListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAuthListInput)(nil)).Elem(), &VMAuthList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAuthListArrayInput)(nil)).Elem(), VMAuthListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAuthListMapInput)(nil)).Elem(), VMAuthListMap{})
	pulumi.RegisterOutputType(VMAuthListOutput{})
	pulumi.RegisterOutputType(VMAuthListArrayOutput{})
	pulumi.RegisterOutputType(VMAuthListMapOutput{})
}
