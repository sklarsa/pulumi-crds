// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMUser is the Schema for the vmusers API
type VMUser struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     VMUserSpecOutput        `pulumi:"spec"`
	Status   VMUserStatusPtrOutput   `pulumi:"status"`
}

// NewVMUser registers a new resource with the given unique name, arguments, and options.
func NewVMUser(ctx *pulumi.Context,
	name string, args *VMUserArgs, opts ...pulumi.ResourceOption) (*VMUser, error) {
	if args == nil {
		args = &VMUserArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMUser")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMUser
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMUser gets an existing VMUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMUserState, opts ...pulumi.ResourceOption) (*VMUser, error) {
	var resource VMUser
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMUser resources.
type vmuserState struct {
}

type VMUserState struct {
}

func (VMUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmuserState)(nil)).Elem()
}

type vmuserArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *VMUserSpec        `pulumi:"spec"`
}

// The set of arguments for constructing a VMUser resource.
type VMUserArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMUserSpecPtrInput
}

func (VMUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmuserArgs)(nil)).Elem()
}

type VMUserInput interface {
	pulumi.Input

	ToVMUserOutput() VMUserOutput
	ToVMUserOutputWithContext(ctx context.Context) VMUserOutput
}

func (*VMUser) ElementType() reflect.Type {
	return reflect.TypeOf((**VMUser)(nil)).Elem()
}

func (i *VMUser) ToVMUserOutput() VMUserOutput {
	return i.ToVMUserOutputWithContext(context.Background())
}

func (i *VMUser) ToVMUserOutputWithContext(ctx context.Context) VMUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMUserOutput)
}

// VMUserArrayInput is an input type that accepts VMUserArray and VMUserArrayOutput values.
// You can construct a concrete instance of `VMUserArrayInput` via:
//
//	VMUserArray{ VMUserArgs{...} }
type VMUserArrayInput interface {
	pulumi.Input

	ToVMUserArrayOutput() VMUserArrayOutput
	ToVMUserArrayOutputWithContext(context.Context) VMUserArrayOutput
}

type VMUserArray []VMUserInput

func (VMUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMUser)(nil)).Elem()
}

func (i VMUserArray) ToVMUserArrayOutput() VMUserArrayOutput {
	return i.ToVMUserArrayOutputWithContext(context.Background())
}

func (i VMUserArray) ToVMUserArrayOutputWithContext(ctx context.Context) VMUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMUserArrayOutput)
}

// VMUserMapInput is an input type that accepts VMUserMap and VMUserMapOutput values.
// You can construct a concrete instance of `VMUserMapInput` via:
//
//	VMUserMap{ "key": VMUserArgs{...} }
type VMUserMapInput interface {
	pulumi.Input

	ToVMUserMapOutput() VMUserMapOutput
	ToVMUserMapOutputWithContext(context.Context) VMUserMapOutput
}

type VMUserMap map[string]VMUserInput

func (VMUserMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMUser)(nil)).Elem()
}

func (i VMUserMap) ToVMUserMapOutput() VMUserMapOutput {
	return i.ToVMUserMapOutputWithContext(context.Background())
}

func (i VMUserMap) ToVMUserMapOutputWithContext(ctx context.Context) VMUserMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMUserMapOutput)
}

type VMUserOutput struct{ *pulumi.OutputState }

func (VMUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMUser)(nil)).Elem()
}

func (o VMUserOutput) ToVMUserOutput() VMUserOutput {
	return o
}

func (o VMUserOutput) ToVMUserOutputWithContext(ctx context.Context) VMUserOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMUserOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMUser) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMUserOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMUser) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMUserOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMUser) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMUserOutput) Spec() VMUserSpecOutput {
	return o.ApplyT(func(v *VMUser) VMUserSpecOutput { return v.Spec }).(VMUserSpecOutput)
}

func (o VMUserOutput) Status() VMUserStatusPtrOutput {
	return o.ApplyT(func(v *VMUser) VMUserStatusPtrOutput { return v.Status }).(VMUserStatusPtrOutput)
}

type VMUserArrayOutput struct{ *pulumi.OutputState }

func (VMUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMUser)(nil)).Elem()
}

func (o VMUserArrayOutput) ToVMUserArrayOutput() VMUserArrayOutput {
	return o
}

func (o VMUserArrayOutput) ToVMUserArrayOutputWithContext(ctx context.Context) VMUserArrayOutput {
	return o
}

func (o VMUserArrayOutput) Index(i pulumi.IntInput) VMUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMUser {
		return vs[0].([]*VMUser)[vs[1].(int)]
	}).(VMUserOutput)
}

type VMUserMapOutput struct{ *pulumi.OutputState }

func (VMUserMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMUser)(nil)).Elem()
}

func (o VMUserMapOutput) ToVMUserMapOutput() VMUserMapOutput {
	return o
}

func (o VMUserMapOutput) ToVMUserMapOutputWithContext(ctx context.Context) VMUserMapOutput {
	return o
}

func (o VMUserMapOutput) MapIndex(k pulumi.StringInput) VMUserOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMUser {
		return vs[0].(map[string]*VMUser)[vs[1].(string)]
	}).(VMUserOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMUserInput)(nil)).Elem(), &VMUser{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMUserArrayInput)(nil)).Elem(), VMUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMUserMapInput)(nil)).Elem(), VMUserMap{})
	pulumi.RegisterOutputType(VMUserOutput{})
	pulumi.RegisterOutputType(VMUserArrayOutput{})
	pulumi.RegisterOutputType(VMUserMapOutput{})
}
