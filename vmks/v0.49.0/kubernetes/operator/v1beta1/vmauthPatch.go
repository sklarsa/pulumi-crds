// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMAuth is the Schema for the vmauths API
type VMAuthPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     VMAuthSpecPatchPtrOutput        `pulumi:"spec"`
	Status   VMAuthStatusPatchPtrOutput      `pulumi:"status"`
}

// NewVMAuthPatch registers a new resource with the given unique name, arguments, and options.
func NewVMAuthPatch(ctx *pulumi.Context,
	name string, args *VMAuthPatchArgs, opts ...pulumi.ResourceOption) (*VMAuthPatch, error) {
	if args == nil {
		args = &VMAuthPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAuth")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAuthPatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAuthPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAuthPatch gets an existing VMAuthPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAuthPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAuthPatchState, opts ...pulumi.ResourceOption) (*VMAuthPatch, error) {
	var resource VMAuthPatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAuthPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAuthPatch resources.
type vmauthPatchState struct {
}

type VMAuthPatchState struct {
}

func (VMAuthPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmauthPatchState)(nil)).Elem()
}

type vmauthPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VMAuthSpecPatch        `pulumi:"spec"`
}

// The set of arguments for constructing a VMAuthPatch resource.
type VMAuthPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMAuthSpecPatchPtrInput
}

func (VMAuthPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmauthPatchArgs)(nil)).Elem()
}

type VMAuthPatchInput interface {
	pulumi.Input

	ToVMAuthPatchOutput() VMAuthPatchOutput
	ToVMAuthPatchOutputWithContext(ctx context.Context) VMAuthPatchOutput
}

func (*VMAuthPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAuthPatch)(nil)).Elem()
}

func (i *VMAuthPatch) ToVMAuthPatchOutput() VMAuthPatchOutput {
	return i.ToVMAuthPatchOutputWithContext(context.Background())
}

func (i *VMAuthPatch) ToVMAuthPatchOutputWithContext(ctx context.Context) VMAuthPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAuthPatchOutput)
}

// VMAuthPatchArrayInput is an input type that accepts VMAuthPatchArray and VMAuthPatchArrayOutput values.
// You can construct a concrete instance of `VMAuthPatchArrayInput` via:
//
//	VMAuthPatchArray{ VMAuthPatchArgs{...} }
type VMAuthPatchArrayInput interface {
	pulumi.Input

	ToVMAuthPatchArrayOutput() VMAuthPatchArrayOutput
	ToVMAuthPatchArrayOutputWithContext(context.Context) VMAuthPatchArrayOutput
}

type VMAuthPatchArray []VMAuthPatchInput

func (VMAuthPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAuthPatch)(nil)).Elem()
}

func (i VMAuthPatchArray) ToVMAuthPatchArrayOutput() VMAuthPatchArrayOutput {
	return i.ToVMAuthPatchArrayOutputWithContext(context.Background())
}

func (i VMAuthPatchArray) ToVMAuthPatchArrayOutputWithContext(ctx context.Context) VMAuthPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAuthPatchArrayOutput)
}

// VMAuthPatchMapInput is an input type that accepts VMAuthPatchMap and VMAuthPatchMapOutput values.
// You can construct a concrete instance of `VMAuthPatchMapInput` via:
//
//	VMAuthPatchMap{ "key": VMAuthPatchArgs{...} }
type VMAuthPatchMapInput interface {
	pulumi.Input

	ToVMAuthPatchMapOutput() VMAuthPatchMapOutput
	ToVMAuthPatchMapOutputWithContext(context.Context) VMAuthPatchMapOutput
}

type VMAuthPatchMap map[string]VMAuthPatchInput

func (VMAuthPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAuthPatch)(nil)).Elem()
}

func (i VMAuthPatchMap) ToVMAuthPatchMapOutput() VMAuthPatchMapOutput {
	return i.ToVMAuthPatchMapOutputWithContext(context.Background())
}

func (i VMAuthPatchMap) ToVMAuthPatchMapOutputWithContext(ctx context.Context) VMAuthPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAuthPatchMapOutput)
}

type VMAuthPatchOutput struct{ *pulumi.OutputState }

func (VMAuthPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAuthPatch)(nil)).Elem()
}

func (o VMAuthPatchOutput) ToVMAuthPatchOutput() VMAuthPatchOutput {
	return o
}

func (o VMAuthPatchOutput) ToVMAuthPatchOutputWithContext(ctx context.Context) VMAuthPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAuthPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAuthPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAuthPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAuthPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMAuthPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMAuthPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMAuthPatchOutput) Spec() VMAuthSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMAuthPatch) VMAuthSpecPatchPtrOutput { return v.Spec }).(VMAuthSpecPatchPtrOutput)
}

func (o VMAuthPatchOutput) Status() VMAuthStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMAuthPatch) VMAuthStatusPatchPtrOutput { return v.Status }).(VMAuthStatusPatchPtrOutput)
}

type VMAuthPatchArrayOutput struct{ *pulumi.OutputState }

func (VMAuthPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAuthPatch)(nil)).Elem()
}

func (o VMAuthPatchArrayOutput) ToVMAuthPatchArrayOutput() VMAuthPatchArrayOutput {
	return o
}

func (o VMAuthPatchArrayOutput) ToVMAuthPatchArrayOutputWithContext(ctx context.Context) VMAuthPatchArrayOutput {
	return o
}

func (o VMAuthPatchArrayOutput) Index(i pulumi.IntInput) VMAuthPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAuthPatch {
		return vs[0].([]*VMAuthPatch)[vs[1].(int)]
	}).(VMAuthPatchOutput)
}

type VMAuthPatchMapOutput struct{ *pulumi.OutputState }

func (VMAuthPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAuthPatch)(nil)).Elem()
}

func (o VMAuthPatchMapOutput) ToVMAuthPatchMapOutput() VMAuthPatchMapOutput {
	return o
}

func (o VMAuthPatchMapOutput) ToVMAuthPatchMapOutputWithContext(ctx context.Context) VMAuthPatchMapOutput {
	return o
}

func (o VMAuthPatchMapOutput) MapIndex(k pulumi.StringInput) VMAuthPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAuthPatch {
		return vs[0].(map[string]*VMAuthPatch)[vs[1].(string)]
	}).(VMAuthPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAuthPatchInput)(nil)).Elem(), &VMAuthPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAuthPatchArrayInput)(nil)).Elem(), VMAuthPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAuthPatchMapInput)(nil)).Elem(), VMAuthPatchMap{})
	pulumi.RegisterOutputType(VMAuthPatchOutput{})
	pulumi.RegisterOutputType(VMAuthPatchArrayOutput{})
	pulumi.RegisterOutputType(VMAuthPatchMapOutput{})
}
