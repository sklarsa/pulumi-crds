// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMSingleList is a list of VMSingle
type VMSingleList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmsingles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMSingleTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMSingleList registers a new resource with the given unique name, arguments, and options.
func NewVMSingleList(ctx *pulumi.Context,
	name string, args *VMSingleListArgs, opts ...pulumi.ResourceOption) (*VMSingleList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMSingleList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMSingleList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMSingleList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMSingleList gets an existing VMSingleList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMSingleList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMSingleListState, opts ...pulumi.ResourceOption) (*VMSingleList, error) {
	var resource VMSingleList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMSingleList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMSingleList resources.
type vmsingleListState struct {
}

type VMSingleListState struct {
}

func (VMSingleListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmsingleListState)(nil)).Elem()
}

type vmsingleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmsingles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMSingleType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMSingleList resource.
type VMSingleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmsingles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMSingleTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMSingleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmsingleListArgs)(nil)).Elem()
}

type VMSingleListInput interface {
	pulumi.Input

	ToVMSingleListOutput() VMSingleListOutput
	ToVMSingleListOutputWithContext(ctx context.Context) VMSingleListOutput
}

func (*VMSingleList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMSingleList)(nil)).Elem()
}

func (i *VMSingleList) ToVMSingleListOutput() VMSingleListOutput {
	return i.ToVMSingleListOutputWithContext(context.Background())
}

func (i *VMSingleList) ToVMSingleListOutputWithContext(ctx context.Context) VMSingleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSingleListOutput)
}

// VMSingleListArrayInput is an input type that accepts VMSingleListArray and VMSingleListArrayOutput values.
// You can construct a concrete instance of `VMSingleListArrayInput` via:
//
//	VMSingleListArray{ VMSingleListArgs{...} }
type VMSingleListArrayInput interface {
	pulumi.Input

	ToVMSingleListArrayOutput() VMSingleListArrayOutput
	ToVMSingleListArrayOutputWithContext(context.Context) VMSingleListArrayOutput
}

type VMSingleListArray []VMSingleListInput

func (VMSingleListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMSingleList)(nil)).Elem()
}

func (i VMSingleListArray) ToVMSingleListArrayOutput() VMSingleListArrayOutput {
	return i.ToVMSingleListArrayOutputWithContext(context.Background())
}

func (i VMSingleListArray) ToVMSingleListArrayOutputWithContext(ctx context.Context) VMSingleListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSingleListArrayOutput)
}

// VMSingleListMapInput is an input type that accepts VMSingleListMap and VMSingleListMapOutput values.
// You can construct a concrete instance of `VMSingleListMapInput` via:
//
//	VMSingleListMap{ "key": VMSingleListArgs{...} }
type VMSingleListMapInput interface {
	pulumi.Input

	ToVMSingleListMapOutput() VMSingleListMapOutput
	ToVMSingleListMapOutputWithContext(context.Context) VMSingleListMapOutput
}

type VMSingleListMap map[string]VMSingleListInput

func (VMSingleListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMSingleList)(nil)).Elem()
}

func (i VMSingleListMap) ToVMSingleListMapOutput() VMSingleListMapOutput {
	return i.ToVMSingleListMapOutputWithContext(context.Background())
}

func (i VMSingleListMap) ToVMSingleListMapOutputWithContext(ctx context.Context) VMSingleListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSingleListMapOutput)
}

type VMSingleListOutput struct{ *pulumi.OutputState }

func (VMSingleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMSingleList)(nil)).Elem()
}

func (o VMSingleListOutput) ToVMSingleListOutput() VMSingleListOutput {
	return o
}

func (o VMSingleListOutput) ToVMSingleListOutputWithContext(ctx context.Context) VMSingleListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMSingleListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMSingleList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmsingles. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMSingleListOutput) Items() VMSingleTypeArrayOutput {
	return o.ApplyT(func(v *VMSingleList) VMSingleTypeArrayOutput { return v.Items }).(VMSingleTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMSingleListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMSingleList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMSingleListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMSingleList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMSingleListArrayOutput struct{ *pulumi.OutputState }

func (VMSingleListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMSingleList)(nil)).Elem()
}

func (o VMSingleListArrayOutput) ToVMSingleListArrayOutput() VMSingleListArrayOutput {
	return o
}

func (o VMSingleListArrayOutput) ToVMSingleListArrayOutputWithContext(ctx context.Context) VMSingleListArrayOutput {
	return o
}

func (o VMSingleListArrayOutput) Index(i pulumi.IntInput) VMSingleListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMSingleList {
		return vs[0].([]*VMSingleList)[vs[1].(int)]
	}).(VMSingleListOutput)
}

type VMSingleListMapOutput struct{ *pulumi.OutputState }

func (VMSingleListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMSingleList)(nil)).Elem()
}

func (o VMSingleListMapOutput) ToVMSingleListMapOutput() VMSingleListMapOutput {
	return o
}

func (o VMSingleListMapOutput) ToVMSingleListMapOutputWithContext(ctx context.Context) VMSingleListMapOutput {
	return o
}

func (o VMSingleListMapOutput) MapIndex(k pulumi.StringInput) VMSingleListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMSingleList {
		return vs[0].(map[string]*VMSingleList)[vs[1].(string)]
	}).(VMSingleListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMSingleListInput)(nil)).Elem(), &VMSingleList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMSingleListArrayInput)(nil)).Elem(), VMSingleListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMSingleListMapInput)(nil)).Elem(), VMSingleListMap{})
	pulumi.RegisterOutputType(VMSingleListOutput{})
	pulumi.RegisterOutputType(VMSingleListArrayOutput{})
	pulumi.RegisterOutputType(VMSingleListMapOutput{})
}
