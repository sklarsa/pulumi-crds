// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMPodScrape is scrape configuration for pods,
// it generates vmagent's config for scraping pod targets
// based on selectors.
type VMPodScrape struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput    `pulumi:"metadata"`
	Spec     VMPodScrapeSpecOutput      `pulumi:"spec"`
	Status   VMPodScrapeStatusPtrOutput `pulumi:"status"`
}

// NewVMPodScrape registers a new resource with the given unique name, arguments, and options.
func NewVMPodScrape(ctx *pulumi.Context,
	name string, args *VMPodScrapeArgs, opts ...pulumi.ResourceOption) (*VMPodScrape, error) {
	if args == nil {
		args = &VMPodScrapeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMPodScrape")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMPodScrape
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMPodScrape", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMPodScrape gets an existing VMPodScrape resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMPodScrape(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMPodScrapeState, opts ...pulumi.ResourceOption) (*VMPodScrape, error) {
	var resource VMPodScrape
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMPodScrape", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMPodScrape resources.
type vmpodScrapeState struct {
}

type VMPodScrapeState struct {
}

func (VMPodScrapeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmpodScrapeState)(nil)).Elem()
}

type vmpodScrapeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *VMPodScrapeSpec   `pulumi:"spec"`
}

// The set of arguments for constructing a VMPodScrape resource.
type VMPodScrapeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMPodScrapeSpecPtrInput
}

func (VMPodScrapeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmpodScrapeArgs)(nil)).Elem()
}

type VMPodScrapeInput interface {
	pulumi.Input

	ToVMPodScrapeOutput() VMPodScrapeOutput
	ToVMPodScrapeOutputWithContext(ctx context.Context) VMPodScrapeOutput
}

func (*VMPodScrape) ElementType() reflect.Type {
	return reflect.TypeOf((**VMPodScrape)(nil)).Elem()
}

func (i *VMPodScrape) ToVMPodScrapeOutput() VMPodScrapeOutput {
	return i.ToVMPodScrapeOutputWithContext(context.Background())
}

func (i *VMPodScrape) ToVMPodScrapeOutputWithContext(ctx context.Context) VMPodScrapeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMPodScrapeOutput)
}

// VMPodScrapeArrayInput is an input type that accepts VMPodScrapeArray and VMPodScrapeArrayOutput values.
// You can construct a concrete instance of `VMPodScrapeArrayInput` via:
//
//	VMPodScrapeArray{ VMPodScrapeArgs{...} }
type VMPodScrapeArrayInput interface {
	pulumi.Input

	ToVMPodScrapeArrayOutput() VMPodScrapeArrayOutput
	ToVMPodScrapeArrayOutputWithContext(context.Context) VMPodScrapeArrayOutput
}

type VMPodScrapeArray []VMPodScrapeInput

func (VMPodScrapeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMPodScrape)(nil)).Elem()
}

func (i VMPodScrapeArray) ToVMPodScrapeArrayOutput() VMPodScrapeArrayOutput {
	return i.ToVMPodScrapeArrayOutputWithContext(context.Background())
}

func (i VMPodScrapeArray) ToVMPodScrapeArrayOutputWithContext(ctx context.Context) VMPodScrapeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMPodScrapeArrayOutput)
}

// VMPodScrapeMapInput is an input type that accepts VMPodScrapeMap and VMPodScrapeMapOutput values.
// You can construct a concrete instance of `VMPodScrapeMapInput` via:
//
//	VMPodScrapeMap{ "key": VMPodScrapeArgs{...} }
type VMPodScrapeMapInput interface {
	pulumi.Input

	ToVMPodScrapeMapOutput() VMPodScrapeMapOutput
	ToVMPodScrapeMapOutputWithContext(context.Context) VMPodScrapeMapOutput
}

type VMPodScrapeMap map[string]VMPodScrapeInput

func (VMPodScrapeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMPodScrape)(nil)).Elem()
}

func (i VMPodScrapeMap) ToVMPodScrapeMapOutput() VMPodScrapeMapOutput {
	return i.ToVMPodScrapeMapOutputWithContext(context.Background())
}

func (i VMPodScrapeMap) ToVMPodScrapeMapOutputWithContext(ctx context.Context) VMPodScrapeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMPodScrapeMapOutput)
}

type VMPodScrapeOutput struct{ *pulumi.OutputState }

func (VMPodScrapeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMPodScrape)(nil)).Elem()
}

func (o VMPodScrapeOutput) ToVMPodScrapeOutput() VMPodScrapeOutput {
	return o
}

func (o VMPodScrapeOutput) ToVMPodScrapeOutputWithContext(ctx context.Context) VMPodScrapeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMPodScrapeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMPodScrape) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMPodScrapeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMPodScrape) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMPodScrapeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMPodScrape) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMPodScrapeOutput) Spec() VMPodScrapeSpecOutput {
	return o.ApplyT(func(v *VMPodScrape) VMPodScrapeSpecOutput { return v.Spec }).(VMPodScrapeSpecOutput)
}

func (o VMPodScrapeOutput) Status() VMPodScrapeStatusPtrOutput {
	return o.ApplyT(func(v *VMPodScrape) VMPodScrapeStatusPtrOutput { return v.Status }).(VMPodScrapeStatusPtrOutput)
}

type VMPodScrapeArrayOutput struct{ *pulumi.OutputState }

func (VMPodScrapeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMPodScrape)(nil)).Elem()
}

func (o VMPodScrapeArrayOutput) ToVMPodScrapeArrayOutput() VMPodScrapeArrayOutput {
	return o
}

func (o VMPodScrapeArrayOutput) ToVMPodScrapeArrayOutputWithContext(ctx context.Context) VMPodScrapeArrayOutput {
	return o
}

func (o VMPodScrapeArrayOutput) Index(i pulumi.IntInput) VMPodScrapeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMPodScrape {
		return vs[0].([]*VMPodScrape)[vs[1].(int)]
	}).(VMPodScrapeOutput)
}

type VMPodScrapeMapOutput struct{ *pulumi.OutputState }

func (VMPodScrapeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMPodScrape)(nil)).Elem()
}

func (o VMPodScrapeMapOutput) ToVMPodScrapeMapOutput() VMPodScrapeMapOutput {
	return o
}

func (o VMPodScrapeMapOutput) ToVMPodScrapeMapOutputWithContext(ctx context.Context) VMPodScrapeMapOutput {
	return o
}

func (o VMPodScrapeMapOutput) MapIndex(k pulumi.StringInput) VMPodScrapeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMPodScrape {
		return vs[0].(map[string]*VMPodScrape)[vs[1].(string)]
	}).(VMPodScrapeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMPodScrapeInput)(nil)).Elem(), &VMPodScrape{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMPodScrapeArrayInput)(nil)).Elem(), VMPodScrapeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMPodScrapeMapInput)(nil)).Elem(), VMPodScrapeMap{})
	pulumi.RegisterOutputType(VMPodScrapeOutput{})
	pulumi.RegisterOutputType(VMPodScrapeArrayOutput{})
	pulumi.RegisterOutputType(VMPodScrapeMapOutput{})
}
