// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMAgent - is a tiny but brave agent, which helps you collect metrics from various sources and stores them in VictoriaMetrics
// or any other Prometheus-compatible storage system that supports the remote_write protocol.
type VMAgentPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     VMAgentSpecPatchPtrOutput       `pulumi:"spec"`
	Status   VMAgentStatusPatchPtrOutput     `pulumi:"status"`
}

// NewVMAgentPatch registers a new resource with the given unique name, arguments, and options.
func NewVMAgentPatch(ctx *pulumi.Context,
	name string, args *VMAgentPatchArgs, opts ...pulumi.ResourceOption) (*VMAgentPatch, error) {
	if args == nil {
		args = &VMAgentPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAgent")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAgentPatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAgentPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAgentPatch gets an existing VMAgentPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAgentPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAgentPatchState, opts ...pulumi.ResourceOption) (*VMAgentPatch, error) {
	var resource VMAgentPatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAgentPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAgentPatch resources.
type vmagentPatchState struct {
}

type VMAgentPatchState struct {
}

func (VMAgentPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmagentPatchState)(nil)).Elem()
}

type vmagentPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VMAgentSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a VMAgentPatch resource.
type VMAgentPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMAgentSpecPatchPtrInput
}

func (VMAgentPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmagentPatchArgs)(nil)).Elem()
}

type VMAgentPatchInput interface {
	pulumi.Input

	ToVMAgentPatchOutput() VMAgentPatchOutput
	ToVMAgentPatchOutputWithContext(ctx context.Context) VMAgentPatchOutput
}

func (*VMAgentPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAgentPatch)(nil)).Elem()
}

func (i *VMAgentPatch) ToVMAgentPatchOutput() VMAgentPatchOutput {
	return i.ToVMAgentPatchOutputWithContext(context.Background())
}

func (i *VMAgentPatch) ToVMAgentPatchOutputWithContext(ctx context.Context) VMAgentPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAgentPatchOutput)
}

// VMAgentPatchArrayInput is an input type that accepts VMAgentPatchArray and VMAgentPatchArrayOutput values.
// You can construct a concrete instance of `VMAgentPatchArrayInput` via:
//
//	VMAgentPatchArray{ VMAgentPatchArgs{...} }
type VMAgentPatchArrayInput interface {
	pulumi.Input

	ToVMAgentPatchArrayOutput() VMAgentPatchArrayOutput
	ToVMAgentPatchArrayOutputWithContext(context.Context) VMAgentPatchArrayOutput
}

type VMAgentPatchArray []VMAgentPatchInput

func (VMAgentPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAgentPatch)(nil)).Elem()
}

func (i VMAgentPatchArray) ToVMAgentPatchArrayOutput() VMAgentPatchArrayOutput {
	return i.ToVMAgentPatchArrayOutputWithContext(context.Background())
}

func (i VMAgentPatchArray) ToVMAgentPatchArrayOutputWithContext(ctx context.Context) VMAgentPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAgentPatchArrayOutput)
}

// VMAgentPatchMapInput is an input type that accepts VMAgentPatchMap and VMAgentPatchMapOutput values.
// You can construct a concrete instance of `VMAgentPatchMapInput` via:
//
//	VMAgentPatchMap{ "key": VMAgentPatchArgs{...} }
type VMAgentPatchMapInput interface {
	pulumi.Input

	ToVMAgentPatchMapOutput() VMAgentPatchMapOutput
	ToVMAgentPatchMapOutputWithContext(context.Context) VMAgentPatchMapOutput
}

type VMAgentPatchMap map[string]VMAgentPatchInput

func (VMAgentPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAgentPatch)(nil)).Elem()
}

func (i VMAgentPatchMap) ToVMAgentPatchMapOutput() VMAgentPatchMapOutput {
	return i.ToVMAgentPatchMapOutputWithContext(context.Background())
}

func (i VMAgentPatchMap) ToVMAgentPatchMapOutputWithContext(ctx context.Context) VMAgentPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAgentPatchMapOutput)
}

type VMAgentPatchOutput struct{ *pulumi.OutputState }

func (VMAgentPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAgentPatch)(nil)).Elem()
}

func (o VMAgentPatchOutput) ToVMAgentPatchOutput() VMAgentPatchOutput {
	return o
}

func (o VMAgentPatchOutput) ToVMAgentPatchOutputWithContext(ctx context.Context) VMAgentPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAgentPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAgentPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAgentPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAgentPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMAgentPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMAgentPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMAgentPatchOutput) Spec() VMAgentSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMAgentPatch) VMAgentSpecPatchPtrOutput { return v.Spec }).(VMAgentSpecPatchPtrOutput)
}

func (o VMAgentPatchOutput) Status() VMAgentStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMAgentPatch) VMAgentStatusPatchPtrOutput { return v.Status }).(VMAgentStatusPatchPtrOutput)
}

type VMAgentPatchArrayOutput struct{ *pulumi.OutputState }

func (VMAgentPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAgentPatch)(nil)).Elem()
}

func (o VMAgentPatchArrayOutput) ToVMAgentPatchArrayOutput() VMAgentPatchArrayOutput {
	return o
}

func (o VMAgentPatchArrayOutput) ToVMAgentPatchArrayOutputWithContext(ctx context.Context) VMAgentPatchArrayOutput {
	return o
}

func (o VMAgentPatchArrayOutput) Index(i pulumi.IntInput) VMAgentPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAgentPatch {
		return vs[0].([]*VMAgentPatch)[vs[1].(int)]
	}).(VMAgentPatchOutput)
}

type VMAgentPatchMapOutput struct{ *pulumi.OutputState }

func (VMAgentPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAgentPatch)(nil)).Elem()
}

func (o VMAgentPatchMapOutput) ToVMAgentPatchMapOutput() VMAgentPatchMapOutput {
	return o
}

func (o VMAgentPatchMapOutput) ToVMAgentPatchMapOutputWithContext(ctx context.Context) VMAgentPatchMapOutput {
	return o
}

func (o VMAgentPatchMapOutput) MapIndex(k pulumi.StringInput) VMAgentPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAgentPatch {
		return vs[0].(map[string]*VMAgentPatch)[vs[1].(string)]
	}).(VMAgentPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAgentPatchInput)(nil)).Elem(), &VMAgentPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAgentPatchArrayInput)(nil)).Elem(), VMAgentPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAgentPatchMapInput)(nil)).Elem(), VMAgentPatchMap{})
	pulumi.RegisterOutputType(VMAgentPatchOutput{})
	pulumi.RegisterOutputType(VMAgentPatchArrayOutput{})
	pulumi.RegisterOutputType(VMAgentPatchMapOutput{})
}
