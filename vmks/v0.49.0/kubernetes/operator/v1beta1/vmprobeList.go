// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMProbeList is a list of VMProbe
type VMProbeList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmprobes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMProbeTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMProbeList registers a new resource with the given unique name, arguments, and options.
func NewVMProbeList(ctx *pulumi.Context,
	name string, args *VMProbeListArgs, opts ...pulumi.ResourceOption) (*VMProbeList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMProbeList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMProbeList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMProbeList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMProbeList gets an existing VMProbeList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMProbeList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMProbeListState, opts ...pulumi.ResourceOption) (*VMProbeList, error) {
	var resource VMProbeList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMProbeList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMProbeList resources.
type vmprobeListState struct {
}

type VMProbeListState struct {
}

func (VMProbeListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmprobeListState)(nil)).Elem()
}

type vmprobeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmprobes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMProbeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMProbeList resource.
type VMProbeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmprobes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMProbeTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMProbeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmprobeListArgs)(nil)).Elem()
}

type VMProbeListInput interface {
	pulumi.Input

	ToVMProbeListOutput() VMProbeListOutput
	ToVMProbeListOutputWithContext(ctx context.Context) VMProbeListOutput
}

func (*VMProbeList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMProbeList)(nil)).Elem()
}

func (i *VMProbeList) ToVMProbeListOutput() VMProbeListOutput {
	return i.ToVMProbeListOutputWithContext(context.Background())
}

func (i *VMProbeList) ToVMProbeListOutputWithContext(ctx context.Context) VMProbeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMProbeListOutput)
}

// VMProbeListArrayInput is an input type that accepts VMProbeListArray and VMProbeListArrayOutput values.
// You can construct a concrete instance of `VMProbeListArrayInput` via:
//
//	VMProbeListArray{ VMProbeListArgs{...} }
type VMProbeListArrayInput interface {
	pulumi.Input

	ToVMProbeListArrayOutput() VMProbeListArrayOutput
	ToVMProbeListArrayOutputWithContext(context.Context) VMProbeListArrayOutput
}

type VMProbeListArray []VMProbeListInput

func (VMProbeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMProbeList)(nil)).Elem()
}

func (i VMProbeListArray) ToVMProbeListArrayOutput() VMProbeListArrayOutput {
	return i.ToVMProbeListArrayOutputWithContext(context.Background())
}

func (i VMProbeListArray) ToVMProbeListArrayOutputWithContext(ctx context.Context) VMProbeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMProbeListArrayOutput)
}

// VMProbeListMapInput is an input type that accepts VMProbeListMap and VMProbeListMapOutput values.
// You can construct a concrete instance of `VMProbeListMapInput` via:
//
//	VMProbeListMap{ "key": VMProbeListArgs{...} }
type VMProbeListMapInput interface {
	pulumi.Input

	ToVMProbeListMapOutput() VMProbeListMapOutput
	ToVMProbeListMapOutputWithContext(context.Context) VMProbeListMapOutput
}

type VMProbeListMap map[string]VMProbeListInput

func (VMProbeListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMProbeList)(nil)).Elem()
}

func (i VMProbeListMap) ToVMProbeListMapOutput() VMProbeListMapOutput {
	return i.ToVMProbeListMapOutputWithContext(context.Background())
}

func (i VMProbeListMap) ToVMProbeListMapOutputWithContext(ctx context.Context) VMProbeListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMProbeListMapOutput)
}

type VMProbeListOutput struct{ *pulumi.OutputState }

func (VMProbeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMProbeList)(nil)).Elem()
}

func (o VMProbeListOutput) ToVMProbeListOutput() VMProbeListOutput {
	return o
}

func (o VMProbeListOutput) ToVMProbeListOutputWithContext(ctx context.Context) VMProbeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMProbeListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMProbeList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmprobes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMProbeListOutput) Items() VMProbeTypeArrayOutput {
	return o.ApplyT(func(v *VMProbeList) VMProbeTypeArrayOutput { return v.Items }).(VMProbeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMProbeListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMProbeList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMProbeListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMProbeList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMProbeListArrayOutput struct{ *pulumi.OutputState }

func (VMProbeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMProbeList)(nil)).Elem()
}

func (o VMProbeListArrayOutput) ToVMProbeListArrayOutput() VMProbeListArrayOutput {
	return o
}

func (o VMProbeListArrayOutput) ToVMProbeListArrayOutputWithContext(ctx context.Context) VMProbeListArrayOutput {
	return o
}

func (o VMProbeListArrayOutput) Index(i pulumi.IntInput) VMProbeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMProbeList {
		return vs[0].([]*VMProbeList)[vs[1].(int)]
	}).(VMProbeListOutput)
}

type VMProbeListMapOutput struct{ *pulumi.OutputState }

func (VMProbeListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMProbeList)(nil)).Elem()
}

func (o VMProbeListMapOutput) ToVMProbeListMapOutput() VMProbeListMapOutput {
	return o
}

func (o VMProbeListMapOutput) ToVMProbeListMapOutputWithContext(ctx context.Context) VMProbeListMapOutput {
	return o
}

func (o VMProbeListMapOutput) MapIndex(k pulumi.StringInput) VMProbeListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMProbeList {
		return vs[0].(map[string]*VMProbeList)[vs[1].(string)]
	}).(VMProbeListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMProbeListInput)(nil)).Elem(), &VMProbeList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMProbeListArrayInput)(nil)).Elem(), VMProbeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMProbeListMapInput)(nil)).Elem(), VMProbeListMap{})
	pulumi.RegisterOutputType(VMProbeListOutput{})
	pulumi.RegisterOutputType(VMProbeListArrayOutput{})
	pulumi.RegisterOutputType(VMProbeListMapOutput{})
}
