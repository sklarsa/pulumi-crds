// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMUserList is a list of VMUser
type VMUserList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmusers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMUserTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMUserList registers a new resource with the given unique name, arguments, and options.
func NewVMUserList(ctx *pulumi.Context,
	name string, args *VMUserListArgs, opts ...pulumi.ResourceOption) (*VMUserList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMUserList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMUserList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMUserList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMUserList gets an existing VMUserList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMUserList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMUserListState, opts ...pulumi.ResourceOption) (*VMUserList, error) {
	var resource VMUserList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMUserList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMUserList resources.
type vmuserListState struct {
}

type VMUserListState struct {
}

func (VMUserListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmuserListState)(nil)).Elem()
}

type vmuserListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmusers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMUserType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMUserList resource.
type VMUserListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmusers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMUserTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMUserListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmuserListArgs)(nil)).Elem()
}

type VMUserListInput interface {
	pulumi.Input

	ToVMUserListOutput() VMUserListOutput
	ToVMUserListOutputWithContext(ctx context.Context) VMUserListOutput
}

func (*VMUserList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMUserList)(nil)).Elem()
}

func (i *VMUserList) ToVMUserListOutput() VMUserListOutput {
	return i.ToVMUserListOutputWithContext(context.Background())
}

func (i *VMUserList) ToVMUserListOutputWithContext(ctx context.Context) VMUserListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMUserListOutput)
}

// VMUserListArrayInput is an input type that accepts VMUserListArray and VMUserListArrayOutput values.
// You can construct a concrete instance of `VMUserListArrayInput` via:
//
//	VMUserListArray{ VMUserListArgs{...} }
type VMUserListArrayInput interface {
	pulumi.Input

	ToVMUserListArrayOutput() VMUserListArrayOutput
	ToVMUserListArrayOutputWithContext(context.Context) VMUserListArrayOutput
}

type VMUserListArray []VMUserListInput

func (VMUserListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMUserList)(nil)).Elem()
}

func (i VMUserListArray) ToVMUserListArrayOutput() VMUserListArrayOutput {
	return i.ToVMUserListArrayOutputWithContext(context.Background())
}

func (i VMUserListArray) ToVMUserListArrayOutputWithContext(ctx context.Context) VMUserListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMUserListArrayOutput)
}

// VMUserListMapInput is an input type that accepts VMUserListMap and VMUserListMapOutput values.
// You can construct a concrete instance of `VMUserListMapInput` via:
//
//	VMUserListMap{ "key": VMUserListArgs{...} }
type VMUserListMapInput interface {
	pulumi.Input

	ToVMUserListMapOutput() VMUserListMapOutput
	ToVMUserListMapOutputWithContext(context.Context) VMUserListMapOutput
}

type VMUserListMap map[string]VMUserListInput

func (VMUserListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMUserList)(nil)).Elem()
}

func (i VMUserListMap) ToVMUserListMapOutput() VMUserListMapOutput {
	return i.ToVMUserListMapOutputWithContext(context.Background())
}

func (i VMUserListMap) ToVMUserListMapOutputWithContext(ctx context.Context) VMUserListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMUserListMapOutput)
}

type VMUserListOutput struct{ *pulumi.OutputState }

func (VMUserListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMUserList)(nil)).Elem()
}

func (o VMUserListOutput) ToVMUserListOutput() VMUserListOutput {
	return o
}

func (o VMUserListOutput) ToVMUserListOutputWithContext(ctx context.Context) VMUserListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMUserListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMUserList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmusers. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMUserListOutput) Items() VMUserTypeArrayOutput {
	return o.ApplyT(func(v *VMUserList) VMUserTypeArrayOutput { return v.Items }).(VMUserTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMUserListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMUserList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMUserListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMUserList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMUserListArrayOutput struct{ *pulumi.OutputState }

func (VMUserListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMUserList)(nil)).Elem()
}

func (o VMUserListArrayOutput) ToVMUserListArrayOutput() VMUserListArrayOutput {
	return o
}

func (o VMUserListArrayOutput) ToVMUserListArrayOutputWithContext(ctx context.Context) VMUserListArrayOutput {
	return o
}

func (o VMUserListArrayOutput) Index(i pulumi.IntInput) VMUserListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMUserList {
		return vs[0].([]*VMUserList)[vs[1].(int)]
	}).(VMUserListOutput)
}

type VMUserListMapOutput struct{ *pulumi.OutputState }

func (VMUserListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMUserList)(nil)).Elem()
}

func (o VMUserListMapOutput) ToVMUserListMapOutput() VMUserListMapOutput {
	return o
}

func (o VMUserListMapOutput) ToVMUserListMapOutputWithContext(ctx context.Context) VMUserListMapOutput {
	return o
}

func (o VMUserListMapOutput) MapIndex(k pulumi.StringInput) VMUserListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMUserList {
		return vs[0].(map[string]*VMUserList)[vs[1].(string)]
	}).(VMUserListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMUserListInput)(nil)).Elem(), &VMUserList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMUserListArrayInput)(nil)).Elem(), VMUserListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMUserListMapInput)(nil)).Elem(), VMUserListMap{})
	pulumi.RegisterOutputType(VMUserListOutput{})
	pulumi.RegisterOutputType(VMUserListArrayOutput{})
	pulumi.RegisterOutputType(VMUserListMapOutput{})
}
