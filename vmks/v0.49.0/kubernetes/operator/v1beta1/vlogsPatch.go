// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VLogs is the Schema for the vlogs API
type VLogsPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     VLogsSpecPatchPtrOutput         `pulumi:"spec"`
	Status   VLogsStatusPatchPtrOutput       `pulumi:"status"`
}

// NewVLogsPatch registers a new resource with the given unique name, arguments, and options.
func NewVLogsPatch(ctx *pulumi.Context,
	name string, args *VLogsPatchArgs, opts ...pulumi.ResourceOption) (*VLogsPatch, error) {
	if args == nil {
		args = &VLogsPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VLogs")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VLogsPatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VLogsPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVLogsPatch gets an existing VLogsPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVLogsPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VLogsPatchState, opts ...pulumi.ResourceOption) (*VLogsPatch, error) {
	var resource VLogsPatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VLogsPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VLogsPatch resources.
type vlogsPatchState struct {
}

type VLogsPatchState struct {
}

func (VLogsPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vlogsPatchState)(nil)).Elem()
}

type vlogsPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VLogsSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a VLogsPatch resource.
type VLogsPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VLogsSpecPatchPtrInput
}

func (VLogsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vlogsPatchArgs)(nil)).Elem()
}

type VLogsPatchInput interface {
	pulumi.Input

	ToVLogsPatchOutput() VLogsPatchOutput
	ToVLogsPatchOutputWithContext(ctx context.Context) VLogsPatchOutput
}

func (*VLogsPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VLogsPatch)(nil)).Elem()
}

func (i *VLogsPatch) ToVLogsPatchOutput() VLogsPatchOutput {
	return i.ToVLogsPatchOutputWithContext(context.Background())
}

func (i *VLogsPatch) ToVLogsPatchOutputWithContext(ctx context.Context) VLogsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VLogsPatchOutput)
}

// VLogsPatchArrayInput is an input type that accepts VLogsPatchArray and VLogsPatchArrayOutput values.
// You can construct a concrete instance of `VLogsPatchArrayInput` via:
//
//	VLogsPatchArray{ VLogsPatchArgs{...} }
type VLogsPatchArrayInput interface {
	pulumi.Input

	ToVLogsPatchArrayOutput() VLogsPatchArrayOutput
	ToVLogsPatchArrayOutputWithContext(context.Context) VLogsPatchArrayOutput
}

type VLogsPatchArray []VLogsPatchInput

func (VLogsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VLogsPatch)(nil)).Elem()
}

func (i VLogsPatchArray) ToVLogsPatchArrayOutput() VLogsPatchArrayOutput {
	return i.ToVLogsPatchArrayOutputWithContext(context.Background())
}

func (i VLogsPatchArray) ToVLogsPatchArrayOutputWithContext(ctx context.Context) VLogsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VLogsPatchArrayOutput)
}

// VLogsPatchMapInput is an input type that accepts VLogsPatchMap and VLogsPatchMapOutput values.
// You can construct a concrete instance of `VLogsPatchMapInput` via:
//
//	VLogsPatchMap{ "key": VLogsPatchArgs{...} }
type VLogsPatchMapInput interface {
	pulumi.Input

	ToVLogsPatchMapOutput() VLogsPatchMapOutput
	ToVLogsPatchMapOutputWithContext(context.Context) VLogsPatchMapOutput
}

type VLogsPatchMap map[string]VLogsPatchInput

func (VLogsPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VLogsPatch)(nil)).Elem()
}

func (i VLogsPatchMap) ToVLogsPatchMapOutput() VLogsPatchMapOutput {
	return i.ToVLogsPatchMapOutputWithContext(context.Background())
}

func (i VLogsPatchMap) ToVLogsPatchMapOutputWithContext(ctx context.Context) VLogsPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VLogsPatchMapOutput)
}

type VLogsPatchOutput struct{ *pulumi.OutputState }

func (VLogsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VLogsPatch)(nil)).Elem()
}

func (o VLogsPatchOutput) ToVLogsPatchOutput() VLogsPatchOutput {
	return o
}

func (o VLogsPatchOutput) ToVLogsPatchOutputWithContext(ctx context.Context) VLogsPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VLogsPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VLogsPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VLogsPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VLogsPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VLogsPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VLogsPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VLogsPatchOutput) Spec() VLogsSpecPatchPtrOutput {
	return o.ApplyT(func(v *VLogsPatch) VLogsSpecPatchPtrOutput { return v.Spec }).(VLogsSpecPatchPtrOutput)
}

func (o VLogsPatchOutput) Status() VLogsStatusPatchPtrOutput {
	return o.ApplyT(func(v *VLogsPatch) VLogsStatusPatchPtrOutput { return v.Status }).(VLogsStatusPatchPtrOutput)
}

type VLogsPatchArrayOutput struct{ *pulumi.OutputState }

func (VLogsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VLogsPatch)(nil)).Elem()
}

func (o VLogsPatchArrayOutput) ToVLogsPatchArrayOutput() VLogsPatchArrayOutput {
	return o
}

func (o VLogsPatchArrayOutput) ToVLogsPatchArrayOutputWithContext(ctx context.Context) VLogsPatchArrayOutput {
	return o
}

func (o VLogsPatchArrayOutput) Index(i pulumi.IntInput) VLogsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VLogsPatch {
		return vs[0].([]*VLogsPatch)[vs[1].(int)]
	}).(VLogsPatchOutput)
}

type VLogsPatchMapOutput struct{ *pulumi.OutputState }

func (VLogsPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VLogsPatch)(nil)).Elem()
}

func (o VLogsPatchMapOutput) ToVLogsPatchMapOutput() VLogsPatchMapOutput {
	return o
}

func (o VLogsPatchMapOutput) ToVLogsPatchMapOutputWithContext(ctx context.Context) VLogsPatchMapOutput {
	return o
}

func (o VLogsPatchMapOutput) MapIndex(k pulumi.StringInput) VLogsPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VLogsPatch {
		return vs[0].(map[string]*VLogsPatch)[vs[1].(string)]
	}).(VLogsPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VLogsPatchInput)(nil)).Elem(), &VLogsPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VLogsPatchArrayInput)(nil)).Elem(), VLogsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VLogsPatchMapInput)(nil)).Elem(), VLogsPatchMap{})
	pulumi.RegisterOutputType(VLogsPatchOutput{})
	pulumi.RegisterOutputType(VLogsPatchArrayOutput{})
	pulumi.RegisterOutputType(VLogsPatchMapOutput{})
}
