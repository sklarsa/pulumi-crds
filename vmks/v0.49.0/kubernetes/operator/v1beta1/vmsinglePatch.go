// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMSingle  is fast, cost-effective and scalable time-series database.
type VMSinglePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     VMSingleSpecPatchPtrOutput      `pulumi:"spec"`
	Status   VMSingleStatusPatchPtrOutput    `pulumi:"status"`
}

// NewVMSinglePatch registers a new resource with the given unique name, arguments, and options.
func NewVMSinglePatch(ctx *pulumi.Context,
	name string, args *VMSinglePatchArgs, opts ...pulumi.ResourceOption) (*VMSinglePatch, error) {
	if args == nil {
		args = &VMSinglePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMSingle")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMSinglePatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMSinglePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMSinglePatch gets an existing VMSinglePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMSinglePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMSinglePatchState, opts ...pulumi.ResourceOption) (*VMSinglePatch, error) {
	var resource VMSinglePatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMSinglePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMSinglePatch resources.
type vmsinglePatchState struct {
}

type VMSinglePatchState struct {
}

func (VMSinglePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmsinglePatchState)(nil)).Elem()
}

type vmsinglePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VMSingleSpecPatch      `pulumi:"spec"`
}

// The set of arguments for constructing a VMSinglePatch resource.
type VMSinglePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMSingleSpecPatchPtrInput
}

func (VMSinglePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmsinglePatchArgs)(nil)).Elem()
}

type VMSinglePatchInput interface {
	pulumi.Input

	ToVMSinglePatchOutput() VMSinglePatchOutput
	ToVMSinglePatchOutputWithContext(ctx context.Context) VMSinglePatchOutput
}

func (*VMSinglePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMSinglePatch)(nil)).Elem()
}

func (i *VMSinglePatch) ToVMSinglePatchOutput() VMSinglePatchOutput {
	return i.ToVMSinglePatchOutputWithContext(context.Background())
}

func (i *VMSinglePatch) ToVMSinglePatchOutputWithContext(ctx context.Context) VMSinglePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSinglePatchOutput)
}

// VMSinglePatchArrayInput is an input type that accepts VMSinglePatchArray and VMSinglePatchArrayOutput values.
// You can construct a concrete instance of `VMSinglePatchArrayInput` via:
//
//	VMSinglePatchArray{ VMSinglePatchArgs{...} }
type VMSinglePatchArrayInput interface {
	pulumi.Input

	ToVMSinglePatchArrayOutput() VMSinglePatchArrayOutput
	ToVMSinglePatchArrayOutputWithContext(context.Context) VMSinglePatchArrayOutput
}

type VMSinglePatchArray []VMSinglePatchInput

func (VMSinglePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMSinglePatch)(nil)).Elem()
}

func (i VMSinglePatchArray) ToVMSinglePatchArrayOutput() VMSinglePatchArrayOutput {
	return i.ToVMSinglePatchArrayOutputWithContext(context.Background())
}

func (i VMSinglePatchArray) ToVMSinglePatchArrayOutputWithContext(ctx context.Context) VMSinglePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSinglePatchArrayOutput)
}

// VMSinglePatchMapInput is an input type that accepts VMSinglePatchMap and VMSinglePatchMapOutput values.
// You can construct a concrete instance of `VMSinglePatchMapInput` via:
//
//	VMSinglePatchMap{ "key": VMSinglePatchArgs{...} }
type VMSinglePatchMapInput interface {
	pulumi.Input

	ToVMSinglePatchMapOutput() VMSinglePatchMapOutput
	ToVMSinglePatchMapOutputWithContext(context.Context) VMSinglePatchMapOutput
}

type VMSinglePatchMap map[string]VMSinglePatchInput

func (VMSinglePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMSinglePatch)(nil)).Elem()
}

func (i VMSinglePatchMap) ToVMSinglePatchMapOutput() VMSinglePatchMapOutput {
	return i.ToVMSinglePatchMapOutputWithContext(context.Background())
}

func (i VMSinglePatchMap) ToVMSinglePatchMapOutputWithContext(ctx context.Context) VMSinglePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMSinglePatchMapOutput)
}

type VMSinglePatchOutput struct{ *pulumi.OutputState }

func (VMSinglePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMSinglePatch)(nil)).Elem()
}

func (o VMSinglePatchOutput) ToVMSinglePatchOutput() VMSinglePatchOutput {
	return o
}

func (o VMSinglePatchOutput) ToVMSinglePatchOutputWithContext(ctx context.Context) VMSinglePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMSinglePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMSinglePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMSinglePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMSinglePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMSinglePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMSinglePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMSinglePatchOutput) Spec() VMSingleSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMSinglePatch) VMSingleSpecPatchPtrOutput { return v.Spec }).(VMSingleSpecPatchPtrOutput)
}

func (o VMSinglePatchOutput) Status() VMSingleStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMSinglePatch) VMSingleStatusPatchPtrOutput { return v.Status }).(VMSingleStatusPatchPtrOutput)
}

type VMSinglePatchArrayOutput struct{ *pulumi.OutputState }

func (VMSinglePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMSinglePatch)(nil)).Elem()
}

func (o VMSinglePatchArrayOutput) ToVMSinglePatchArrayOutput() VMSinglePatchArrayOutput {
	return o
}

func (o VMSinglePatchArrayOutput) ToVMSinglePatchArrayOutputWithContext(ctx context.Context) VMSinglePatchArrayOutput {
	return o
}

func (o VMSinglePatchArrayOutput) Index(i pulumi.IntInput) VMSinglePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMSinglePatch {
		return vs[0].([]*VMSinglePatch)[vs[1].(int)]
	}).(VMSinglePatchOutput)
}

type VMSinglePatchMapOutput struct{ *pulumi.OutputState }

func (VMSinglePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMSinglePatch)(nil)).Elem()
}

func (o VMSinglePatchMapOutput) ToVMSinglePatchMapOutput() VMSinglePatchMapOutput {
	return o
}

func (o VMSinglePatchMapOutput) ToVMSinglePatchMapOutputWithContext(ctx context.Context) VMSinglePatchMapOutput {
	return o
}

func (o VMSinglePatchMapOutput) MapIndex(k pulumi.StringInput) VMSinglePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMSinglePatch {
		return vs[0].(map[string]*VMSinglePatch)[vs[1].(string)]
	}).(VMSinglePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMSinglePatchInput)(nil)).Elem(), &VMSinglePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMSinglePatchArrayInput)(nil)).Elem(), VMSinglePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMSinglePatchMapInput)(nil)).Elem(), VMSinglePatchMap{})
	pulumi.RegisterOutputType(VMSinglePatchOutput{})
	pulumi.RegisterOutputType(VMSinglePatchArrayOutput{})
	pulumi.RegisterOutputType(VMSinglePatchMapOutput{})
}
