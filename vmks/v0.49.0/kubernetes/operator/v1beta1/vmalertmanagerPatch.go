// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMAlertmanager represents Victoria-Metrics deployment for Alertmanager.
type VMAlertmanagerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput    `pulumi:"metadata"`
	Spec     VMAlertmanagerSpecPatchPtrOutput   `pulumi:"spec"`
	Status   VMAlertmanagerStatusPatchPtrOutput `pulumi:"status"`
}

// NewVMAlertmanagerPatch registers a new resource with the given unique name, arguments, and options.
func NewVMAlertmanagerPatch(ctx *pulumi.Context,
	name string, args *VMAlertmanagerPatchArgs, opts ...pulumi.ResourceOption) (*VMAlertmanagerPatch, error) {
	if args == nil {
		args = &VMAlertmanagerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAlertmanager")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAlertmanagerPatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanagerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAlertmanagerPatch gets an existing VMAlertmanagerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAlertmanagerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAlertmanagerPatchState, opts ...pulumi.ResourceOption) (*VMAlertmanagerPatch, error) {
	var resource VMAlertmanagerPatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertmanagerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAlertmanagerPatch resources.
type vmalertmanagerPatchState struct {
}

type VMAlertmanagerPatchState struct {
}

func (VMAlertmanagerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerPatchState)(nil)).Elem()
}

type vmalertmanagerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *VMAlertmanagerSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a VMAlertmanagerPatch resource.
type VMAlertmanagerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMAlertmanagerSpecPatchPtrInput
}

func (VMAlertmanagerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertmanagerPatchArgs)(nil)).Elem()
}

type VMAlertmanagerPatchInput interface {
	pulumi.Input

	ToVMAlertmanagerPatchOutput() VMAlertmanagerPatchOutput
	ToVMAlertmanagerPatchOutputWithContext(ctx context.Context) VMAlertmanagerPatchOutput
}

func (*VMAlertmanagerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanagerPatch)(nil)).Elem()
}

func (i *VMAlertmanagerPatch) ToVMAlertmanagerPatchOutput() VMAlertmanagerPatchOutput {
	return i.ToVMAlertmanagerPatchOutputWithContext(context.Background())
}

func (i *VMAlertmanagerPatch) ToVMAlertmanagerPatchOutputWithContext(ctx context.Context) VMAlertmanagerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerPatchOutput)
}

// VMAlertmanagerPatchArrayInput is an input type that accepts VMAlertmanagerPatchArray and VMAlertmanagerPatchArrayOutput values.
// You can construct a concrete instance of `VMAlertmanagerPatchArrayInput` via:
//
//	VMAlertmanagerPatchArray{ VMAlertmanagerPatchArgs{...} }
type VMAlertmanagerPatchArrayInput interface {
	pulumi.Input

	ToVMAlertmanagerPatchArrayOutput() VMAlertmanagerPatchArrayOutput
	ToVMAlertmanagerPatchArrayOutputWithContext(context.Context) VMAlertmanagerPatchArrayOutput
}

type VMAlertmanagerPatchArray []VMAlertmanagerPatchInput

func (VMAlertmanagerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanagerPatch)(nil)).Elem()
}

func (i VMAlertmanagerPatchArray) ToVMAlertmanagerPatchArrayOutput() VMAlertmanagerPatchArrayOutput {
	return i.ToVMAlertmanagerPatchArrayOutputWithContext(context.Background())
}

func (i VMAlertmanagerPatchArray) ToVMAlertmanagerPatchArrayOutputWithContext(ctx context.Context) VMAlertmanagerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerPatchArrayOutput)
}

// VMAlertmanagerPatchMapInput is an input type that accepts VMAlertmanagerPatchMap and VMAlertmanagerPatchMapOutput values.
// You can construct a concrete instance of `VMAlertmanagerPatchMapInput` via:
//
//	VMAlertmanagerPatchMap{ "key": VMAlertmanagerPatchArgs{...} }
type VMAlertmanagerPatchMapInput interface {
	pulumi.Input

	ToVMAlertmanagerPatchMapOutput() VMAlertmanagerPatchMapOutput
	ToVMAlertmanagerPatchMapOutputWithContext(context.Context) VMAlertmanagerPatchMapOutput
}

type VMAlertmanagerPatchMap map[string]VMAlertmanagerPatchInput

func (VMAlertmanagerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanagerPatch)(nil)).Elem()
}

func (i VMAlertmanagerPatchMap) ToVMAlertmanagerPatchMapOutput() VMAlertmanagerPatchMapOutput {
	return i.ToVMAlertmanagerPatchMapOutputWithContext(context.Background())
}

func (i VMAlertmanagerPatchMap) ToVMAlertmanagerPatchMapOutputWithContext(ctx context.Context) VMAlertmanagerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertmanagerPatchMapOutput)
}

type VMAlertmanagerPatchOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertmanagerPatch)(nil)).Elem()
}

func (o VMAlertmanagerPatchOutput) ToVMAlertmanagerPatchOutput() VMAlertmanagerPatchOutput {
	return o
}

func (o VMAlertmanagerPatchOutput) ToVMAlertmanagerPatchOutputWithContext(ctx context.Context) VMAlertmanagerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAlertmanagerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAlertmanagerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertmanagerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAlertmanagerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMAlertmanagerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMAlertmanagerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMAlertmanagerPatchOutput) Spec() VMAlertmanagerSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMAlertmanagerPatch) VMAlertmanagerSpecPatchPtrOutput { return v.Spec }).(VMAlertmanagerSpecPatchPtrOutput)
}

func (o VMAlertmanagerPatchOutput) Status() VMAlertmanagerStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMAlertmanagerPatch) VMAlertmanagerStatusPatchPtrOutput { return v.Status }).(VMAlertmanagerStatusPatchPtrOutput)
}

type VMAlertmanagerPatchArrayOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertmanagerPatch)(nil)).Elem()
}

func (o VMAlertmanagerPatchArrayOutput) ToVMAlertmanagerPatchArrayOutput() VMAlertmanagerPatchArrayOutput {
	return o
}

func (o VMAlertmanagerPatchArrayOutput) ToVMAlertmanagerPatchArrayOutputWithContext(ctx context.Context) VMAlertmanagerPatchArrayOutput {
	return o
}

func (o VMAlertmanagerPatchArrayOutput) Index(i pulumi.IntInput) VMAlertmanagerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAlertmanagerPatch {
		return vs[0].([]*VMAlertmanagerPatch)[vs[1].(int)]
	}).(VMAlertmanagerPatchOutput)
}

type VMAlertmanagerPatchMapOutput struct{ *pulumi.OutputState }

func (VMAlertmanagerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertmanagerPatch)(nil)).Elem()
}

func (o VMAlertmanagerPatchMapOutput) ToVMAlertmanagerPatchMapOutput() VMAlertmanagerPatchMapOutput {
	return o
}

func (o VMAlertmanagerPatchMapOutput) ToVMAlertmanagerPatchMapOutputWithContext(ctx context.Context) VMAlertmanagerPatchMapOutput {
	return o
}

func (o VMAlertmanagerPatchMapOutput) MapIndex(k pulumi.StringInput) VMAlertmanagerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAlertmanagerPatch {
		return vs[0].(map[string]*VMAlertmanagerPatch)[vs[1].(string)]
	}).(VMAlertmanagerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerPatchInput)(nil)).Elem(), &VMAlertmanagerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerPatchArrayInput)(nil)).Elem(), VMAlertmanagerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertmanagerPatchMapInput)(nil)).Elem(), VMAlertmanagerPatchMap{})
	pulumi.RegisterOutputType(VMAlertmanagerPatchOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerPatchArrayOutput{})
	pulumi.RegisterOutputType(VMAlertmanagerPatchMapOutput{})
}
