// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMProbe defines a probe for targets, that will be executed with prober,
// like blackbox exporter.
// It helps to monitor reachability of target with various checks.
type VMProbe struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     VMProbeSpecOutput       `pulumi:"spec"`
	Status   VMProbeStatusPtrOutput  `pulumi:"status"`
}

// NewVMProbe registers a new resource with the given unique name, arguments, and options.
func NewVMProbe(ctx *pulumi.Context,
	name string, args *VMProbeArgs, opts ...pulumi.ResourceOption) (*VMProbe, error) {
	if args == nil {
		args = &VMProbeArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMProbe")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMProbe
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMProbe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMProbe gets an existing VMProbe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMProbe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMProbeState, opts ...pulumi.ResourceOption) (*VMProbe, error) {
	var resource VMProbe
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMProbe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMProbe resources.
type vmprobeState struct {
}

type VMProbeState struct {
}

func (VMProbeState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmprobeState)(nil)).Elem()
}

type vmprobeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *VMProbeSpec       `pulumi:"spec"`
}

// The set of arguments for constructing a VMProbe resource.
type VMProbeArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMProbeSpecPtrInput
}

func (VMProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmprobeArgs)(nil)).Elem()
}

type VMProbeInput interface {
	pulumi.Input

	ToVMProbeOutput() VMProbeOutput
	ToVMProbeOutputWithContext(ctx context.Context) VMProbeOutput
}

func (*VMProbe) ElementType() reflect.Type {
	return reflect.TypeOf((**VMProbe)(nil)).Elem()
}

func (i *VMProbe) ToVMProbeOutput() VMProbeOutput {
	return i.ToVMProbeOutputWithContext(context.Background())
}

func (i *VMProbe) ToVMProbeOutputWithContext(ctx context.Context) VMProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMProbeOutput)
}

// VMProbeArrayInput is an input type that accepts VMProbeArray and VMProbeArrayOutput values.
// You can construct a concrete instance of `VMProbeArrayInput` via:
//
//	VMProbeArray{ VMProbeArgs{...} }
type VMProbeArrayInput interface {
	pulumi.Input

	ToVMProbeArrayOutput() VMProbeArrayOutput
	ToVMProbeArrayOutputWithContext(context.Context) VMProbeArrayOutput
}

type VMProbeArray []VMProbeInput

func (VMProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMProbe)(nil)).Elem()
}

func (i VMProbeArray) ToVMProbeArrayOutput() VMProbeArrayOutput {
	return i.ToVMProbeArrayOutputWithContext(context.Background())
}

func (i VMProbeArray) ToVMProbeArrayOutputWithContext(ctx context.Context) VMProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMProbeArrayOutput)
}

// VMProbeMapInput is an input type that accepts VMProbeMap and VMProbeMapOutput values.
// You can construct a concrete instance of `VMProbeMapInput` via:
//
//	VMProbeMap{ "key": VMProbeArgs{...} }
type VMProbeMapInput interface {
	pulumi.Input

	ToVMProbeMapOutput() VMProbeMapOutput
	ToVMProbeMapOutputWithContext(context.Context) VMProbeMapOutput
}

type VMProbeMap map[string]VMProbeInput

func (VMProbeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMProbe)(nil)).Elem()
}

func (i VMProbeMap) ToVMProbeMapOutput() VMProbeMapOutput {
	return i.ToVMProbeMapOutputWithContext(context.Background())
}

func (i VMProbeMap) ToVMProbeMapOutputWithContext(ctx context.Context) VMProbeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMProbeMapOutput)
}

type VMProbeOutput struct{ *pulumi.OutputState }

func (VMProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMProbe)(nil)).Elem()
}

func (o VMProbeOutput) ToVMProbeOutput() VMProbeOutput {
	return o
}

func (o VMProbeOutput) ToVMProbeOutputWithContext(ctx context.Context) VMProbeOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMProbeOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMProbe) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMProbeOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMProbe) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMProbeOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMProbe) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMProbeOutput) Spec() VMProbeSpecOutput {
	return o.ApplyT(func(v *VMProbe) VMProbeSpecOutput { return v.Spec }).(VMProbeSpecOutput)
}

func (o VMProbeOutput) Status() VMProbeStatusPtrOutput {
	return o.ApplyT(func(v *VMProbe) VMProbeStatusPtrOutput { return v.Status }).(VMProbeStatusPtrOutput)
}

type VMProbeArrayOutput struct{ *pulumi.OutputState }

func (VMProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMProbe)(nil)).Elem()
}

func (o VMProbeArrayOutput) ToVMProbeArrayOutput() VMProbeArrayOutput {
	return o
}

func (o VMProbeArrayOutput) ToVMProbeArrayOutputWithContext(ctx context.Context) VMProbeArrayOutput {
	return o
}

func (o VMProbeArrayOutput) Index(i pulumi.IntInput) VMProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMProbe {
		return vs[0].([]*VMProbe)[vs[1].(int)]
	}).(VMProbeOutput)
}

type VMProbeMapOutput struct{ *pulumi.OutputState }

func (VMProbeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMProbe)(nil)).Elem()
}

func (o VMProbeMapOutput) ToVMProbeMapOutput() VMProbeMapOutput {
	return o
}

func (o VMProbeMapOutput) ToVMProbeMapOutputWithContext(ctx context.Context) VMProbeMapOutput {
	return o
}

func (o VMProbeMapOutput) MapIndex(k pulumi.StringInput) VMProbeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMProbe {
		return vs[0].(map[string]*VMProbe)[vs[1].(string)]
	}).(VMProbeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMProbeInput)(nil)).Elem(), &VMProbe{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMProbeArrayInput)(nil)).Elem(), VMProbeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMProbeMapInput)(nil)).Elem(), VMProbeMap{})
	pulumi.RegisterOutputType(VMProbeOutput{})
	pulumi.RegisterOutputType(VMProbeArrayOutput{})
	pulumi.RegisterOutputType(VMProbeMapOutput{})
}
