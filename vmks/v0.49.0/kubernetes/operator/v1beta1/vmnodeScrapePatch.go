// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMNodeScrape defines discovery for targets placed on kubernetes nodes,
// usually its node-exporters and other host services.
// InternalIP is used as __address__ for scraping.
type VMNodeScrapePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     VMNodeScrapeSpecPatchPtrOutput   `pulumi:"spec"`
	Status   VMNodeScrapeStatusPatchPtrOutput `pulumi:"status"`
}

// NewVMNodeScrapePatch registers a new resource with the given unique name, arguments, and options.
func NewVMNodeScrapePatch(ctx *pulumi.Context,
	name string, args *VMNodeScrapePatchArgs, opts ...pulumi.ResourceOption) (*VMNodeScrapePatch, error) {
	if args == nil {
		args = &VMNodeScrapePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMNodeScrape")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMNodeScrapePatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMNodeScrapePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMNodeScrapePatch gets an existing VMNodeScrapePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMNodeScrapePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMNodeScrapePatchState, opts ...pulumi.ResourceOption) (*VMNodeScrapePatch, error) {
	var resource VMNodeScrapePatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMNodeScrapePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMNodeScrapePatch resources.
type vmnodeScrapePatchState struct {
}

type VMNodeScrapePatchState struct {
}

func (VMNodeScrapePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmnodeScrapePatchState)(nil)).Elem()
}

type vmnodeScrapePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VMNodeScrapeSpecPatch  `pulumi:"spec"`
}

// The set of arguments for constructing a VMNodeScrapePatch resource.
type VMNodeScrapePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMNodeScrapeSpecPatchPtrInput
}

func (VMNodeScrapePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmnodeScrapePatchArgs)(nil)).Elem()
}

type VMNodeScrapePatchInput interface {
	pulumi.Input

	ToVMNodeScrapePatchOutput() VMNodeScrapePatchOutput
	ToVMNodeScrapePatchOutputWithContext(ctx context.Context) VMNodeScrapePatchOutput
}

func (*VMNodeScrapePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMNodeScrapePatch)(nil)).Elem()
}

func (i *VMNodeScrapePatch) ToVMNodeScrapePatchOutput() VMNodeScrapePatchOutput {
	return i.ToVMNodeScrapePatchOutputWithContext(context.Background())
}

func (i *VMNodeScrapePatch) ToVMNodeScrapePatchOutputWithContext(ctx context.Context) VMNodeScrapePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapePatchOutput)
}

// VMNodeScrapePatchArrayInput is an input type that accepts VMNodeScrapePatchArray and VMNodeScrapePatchArrayOutput values.
// You can construct a concrete instance of `VMNodeScrapePatchArrayInput` via:
//
//	VMNodeScrapePatchArray{ VMNodeScrapePatchArgs{...} }
type VMNodeScrapePatchArrayInput interface {
	pulumi.Input

	ToVMNodeScrapePatchArrayOutput() VMNodeScrapePatchArrayOutput
	ToVMNodeScrapePatchArrayOutputWithContext(context.Context) VMNodeScrapePatchArrayOutput
}

type VMNodeScrapePatchArray []VMNodeScrapePatchInput

func (VMNodeScrapePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMNodeScrapePatch)(nil)).Elem()
}

func (i VMNodeScrapePatchArray) ToVMNodeScrapePatchArrayOutput() VMNodeScrapePatchArrayOutput {
	return i.ToVMNodeScrapePatchArrayOutputWithContext(context.Background())
}

func (i VMNodeScrapePatchArray) ToVMNodeScrapePatchArrayOutputWithContext(ctx context.Context) VMNodeScrapePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapePatchArrayOutput)
}

// VMNodeScrapePatchMapInput is an input type that accepts VMNodeScrapePatchMap and VMNodeScrapePatchMapOutput values.
// You can construct a concrete instance of `VMNodeScrapePatchMapInput` via:
//
//	VMNodeScrapePatchMap{ "key": VMNodeScrapePatchArgs{...} }
type VMNodeScrapePatchMapInput interface {
	pulumi.Input

	ToVMNodeScrapePatchMapOutput() VMNodeScrapePatchMapOutput
	ToVMNodeScrapePatchMapOutputWithContext(context.Context) VMNodeScrapePatchMapOutput
}

type VMNodeScrapePatchMap map[string]VMNodeScrapePatchInput

func (VMNodeScrapePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMNodeScrapePatch)(nil)).Elem()
}

func (i VMNodeScrapePatchMap) ToVMNodeScrapePatchMapOutput() VMNodeScrapePatchMapOutput {
	return i.ToVMNodeScrapePatchMapOutputWithContext(context.Background())
}

func (i VMNodeScrapePatchMap) ToVMNodeScrapePatchMapOutputWithContext(ctx context.Context) VMNodeScrapePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMNodeScrapePatchMapOutput)
}

type VMNodeScrapePatchOutput struct{ *pulumi.OutputState }

func (VMNodeScrapePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMNodeScrapePatch)(nil)).Elem()
}

func (o VMNodeScrapePatchOutput) ToVMNodeScrapePatchOutput() VMNodeScrapePatchOutput {
	return o
}

func (o VMNodeScrapePatchOutput) ToVMNodeScrapePatchOutputWithContext(ctx context.Context) VMNodeScrapePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMNodeScrapePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMNodeScrapePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMNodeScrapePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMNodeScrapePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMNodeScrapePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMNodeScrapePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMNodeScrapePatchOutput) Spec() VMNodeScrapeSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMNodeScrapePatch) VMNodeScrapeSpecPatchPtrOutput { return v.Spec }).(VMNodeScrapeSpecPatchPtrOutput)
}

func (o VMNodeScrapePatchOutput) Status() VMNodeScrapeStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMNodeScrapePatch) VMNodeScrapeStatusPatchPtrOutput { return v.Status }).(VMNodeScrapeStatusPatchPtrOutput)
}

type VMNodeScrapePatchArrayOutput struct{ *pulumi.OutputState }

func (VMNodeScrapePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMNodeScrapePatch)(nil)).Elem()
}

func (o VMNodeScrapePatchArrayOutput) ToVMNodeScrapePatchArrayOutput() VMNodeScrapePatchArrayOutput {
	return o
}

func (o VMNodeScrapePatchArrayOutput) ToVMNodeScrapePatchArrayOutputWithContext(ctx context.Context) VMNodeScrapePatchArrayOutput {
	return o
}

func (o VMNodeScrapePatchArrayOutput) Index(i pulumi.IntInput) VMNodeScrapePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMNodeScrapePatch {
		return vs[0].([]*VMNodeScrapePatch)[vs[1].(int)]
	}).(VMNodeScrapePatchOutput)
}

type VMNodeScrapePatchMapOutput struct{ *pulumi.OutputState }

func (VMNodeScrapePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMNodeScrapePatch)(nil)).Elem()
}

func (o VMNodeScrapePatchMapOutput) ToVMNodeScrapePatchMapOutput() VMNodeScrapePatchMapOutput {
	return o
}

func (o VMNodeScrapePatchMapOutput) ToVMNodeScrapePatchMapOutputWithContext(ctx context.Context) VMNodeScrapePatchMapOutput {
	return o
}

func (o VMNodeScrapePatchMapOutput) MapIndex(k pulumi.StringInput) VMNodeScrapePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMNodeScrapePatch {
		return vs[0].(map[string]*VMNodeScrapePatch)[vs[1].(string)]
	}).(VMNodeScrapePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapePatchInput)(nil)).Elem(), &VMNodeScrapePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapePatchArrayInput)(nil)).Elem(), VMNodeScrapePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMNodeScrapePatchMapInput)(nil)).Elem(), VMNodeScrapePatchMap{})
	pulumi.RegisterOutputType(VMNodeScrapePatchOutput{})
	pulumi.RegisterOutputType(VMNodeScrapePatchArrayOutput{})
	pulumi.RegisterOutputType(VMNodeScrapePatchMapOutput{})
}
