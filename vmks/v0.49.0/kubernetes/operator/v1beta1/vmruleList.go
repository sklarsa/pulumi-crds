// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMRuleList is a list of VMRule
type VMRuleList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of vmrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMRuleTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewVMRuleList registers a new resource with the given unique name, arguments, and options.
func NewVMRuleList(ctx *pulumi.Context,
	name string, args *VMRuleListArgs, opts ...pulumi.ResourceOption) (*VMRuleList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMRuleList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMRuleList
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMRuleList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMRuleList gets an existing VMRuleList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMRuleList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMRuleListState, opts ...pulumi.ResourceOption) (*VMRuleList, error) {
	var resource VMRuleList
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMRuleList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMRuleList resources.
type vmruleListState struct {
}

type VMRuleListState struct {
}

func (VMRuleListState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmruleListState)(nil)).Elem()
}

type vmruleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of vmrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []VMRuleType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a VMRuleList resource.
type VMRuleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of vmrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items VMRuleTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (VMRuleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmruleListArgs)(nil)).Elem()
}

type VMRuleListInput interface {
	pulumi.Input

	ToVMRuleListOutput() VMRuleListOutput
	ToVMRuleListOutputWithContext(ctx context.Context) VMRuleListOutput
}

func (*VMRuleList) ElementType() reflect.Type {
	return reflect.TypeOf((**VMRuleList)(nil)).Elem()
}

func (i *VMRuleList) ToVMRuleListOutput() VMRuleListOutput {
	return i.ToVMRuleListOutputWithContext(context.Background())
}

func (i *VMRuleList) ToVMRuleListOutputWithContext(ctx context.Context) VMRuleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRuleListOutput)
}

// VMRuleListArrayInput is an input type that accepts VMRuleListArray and VMRuleListArrayOutput values.
// You can construct a concrete instance of `VMRuleListArrayInput` via:
//
//	VMRuleListArray{ VMRuleListArgs{...} }
type VMRuleListArrayInput interface {
	pulumi.Input

	ToVMRuleListArrayOutput() VMRuleListArrayOutput
	ToVMRuleListArrayOutputWithContext(context.Context) VMRuleListArrayOutput
}

type VMRuleListArray []VMRuleListInput

func (VMRuleListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMRuleList)(nil)).Elem()
}

func (i VMRuleListArray) ToVMRuleListArrayOutput() VMRuleListArrayOutput {
	return i.ToVMRuleListArrayOutputWithContext(context.Background())
}

func (i VMRuleListArray) ToVMRuleListArrayOutputWithContext(ctx context.Context) VMRuleListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRuleListArrayOutput)
}

// VMRuleListMapInput is an input type that accepts VMRuleListMap and VMRuleListMapOutput values.
// You can construct a concrete instance of `VMRuleListMapInput` via:
//
//	VMRuleListMap{ "key": VMRuleListArgs{...} }
type VMRuleListMapInput interface {
	pulumi.Input

	ToVMRuleListMapOutput() VMRuleListMapOutput
	ToVMRuleListMapOutputWithContext(context.Context) VMRuleListMapOutput
}

type VMRuleListMap map[string]VMRuleListInput

func (VMRuleListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMRuleList)(nil)).Elem()
}

func (i VMRuleListMap) ToVMRuleListMapOutput() VMRuleListMapOutput {
	return i.ToVMRuleListMapOutputWithContext(context.Background())
}

func (i VMRuleListMap) ToVMRuleListMapOutputWithContext(ctx context.Context) VMRuleListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRuleListMapOutput)
}

type VMRuleListOutput struct{ *pulumi.OutputState }

func (VMRuleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMRuleList)(nil)).Elem()
}

func (o VMRuleListOutput) ToVMRuleListOutput() VMRuleListOutput {
	return o
}

func (o VMRuleListOutput) ToVMRuleListOutputWithContext(ctx context.Context) VMRuleListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMRuleListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMRuleList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of vmrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o VMRuleListOutput) Items() VMRuleTypeArrayOutput {
	return o.ApplyT(func(v *VMRuleList) VMRuleTypeArrayOutput { return v.Items }).(VMRuleTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMRuleListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMRuleList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMRuleListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *VMRuleList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type VMRuleListArrayOutput struct{ *pulumi.OutputState }

func (VMRuleListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMRuleList)(nil)).Elem()
}

func (o VMRuleListArrayOutput) ToVMRuleListArrayOutput() VMRuleListArrayOutput {
	return o
}

func (o VMRuleListArrayOutput) ToVMRuleListArrayOutputWithContext(ctx context.Context) VMRuleListArrayOutput {
	return o
}

func (o VMRuleListArrayOutput) Index(i pulumi.IntInput) VMRuleListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMRuleList {
		return vs[0].([]*VMRuleList)[vs[1].(int)]
	}).(VMRuleListOutput)
}

type VMRuleListMapOutput struct{ *pulumi.OutputState }

func (VMRuleListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMRuleList)(nil)).Elem()
}

func (o VMRuleListMapOutput) ToVMRuleListMapOutput() VMRuleListMapOutput {
	return o
}

func (o VMRuleListMapOutput) ToVMRuleListMapOutputWithContext(ctx context.Context) VMRuleListMapOutput {
	return o
}

func (o VMRuleListMapOutput) MapIndex(k pulumi.StringInput) VMRuleListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMRuleList {
		return vs[0].(map[string]*VMRuleList)[vs[1].(string)]
	}).(VMRuleListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMRuleListInput)(nil)).Elem(), &VMRuleList{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMRuleListArrayInput)(nil)).Elem(), VMRuleListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMRuleListMapInput)(nil)).Elem(), VMRuleListMap{})
	pulumi.RegisterOutputType(VMRuleListOutput{})
	pulumi.RegisterOutputType(VMRuleListArrayOutput{})
	pulumi.RegisterOutputType(VMRuleListMapOutput{})
}
