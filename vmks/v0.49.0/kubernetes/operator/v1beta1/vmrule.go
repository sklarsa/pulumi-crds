// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMRule defines rule records for vmalert application
type VMRule struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     VMRuleSpecOutput        `pulumi:"spec"`
	Status   VMRuleStatusPtrOutput   `pulumi:"status"`
}

// NewVMRule registers a new resource with the given unique name, arguments, and options.
func NewVMRule(ctx *pulumi.Context,
	name string, args *VMRuleArgs, opts ...pulumi.ResourceOption) (*VMRule, error) {
	if args == nil {
		args = &VMRuleArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMRule")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMRule
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMRule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMRule gets an existing VMRule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMRule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMRuleState, opts ...pulumi.ResourceOption) (*VMRule, error) {
	var resource VMRule
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMRule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMRule resources.
type vmruleState struct {
}

type VMRuleState struct {
}

func (VMRuleState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmruleState)(nil)).Elem()
}

type vmruleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *VMRuleSpec        `pulumi:"spec"`
}

// The set of arguments for constructing a VMRule resource.
type VMRuleArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMRuleSpecPtrInput
}

func (VMRuleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmruleArgs)(nil)).Elem()
}

type VMRuleInput interface {
	pulumi.Input

	ToVMRuleOutput() VMRuleOutput
	ToVMRuleOutputWithContext(ctx context.Context) VMRuleOutput
}

func (*VMRule) ElementType() reflect.Type {
	return reflect.TypeOf((**VMRule)(nil)).Elem()
}

func (i *VMRule) ToVMRuleOutput() VMRuleOutput {
	return i.ToVMRuleOutputWithContext(context.Background())
}

func (i *VMRule) ToVMRuleOutputWithContext(ctx context.Context) VMRuleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRuleOutput)
}

// VMRuleArrayInput is an input type that accepts VMRuleArray and VMRuleArrayOutput values.
// You can construct a concrete instance of `VMRuleArrayInput` via:
//
//	VMRuleArray{ VMRuleArgs{...} }
type VMRuleArrayInput interface {
	pulumi.Input

	ToVMRuleArrayOutput() VMRuleArrayOutput
	ToVMRuleArrayOutputWithContext(context.Context) VMRuleArrayOutput
}

type VMRuleArray []VMRuleInput

func (VMRuleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMRule)(nil)).Elem()
}

func (i VMRuleArray) ToVMRuleArrayOutput() VMRuleArrayOutput {
	return i.ToVMRuleArrayOutputWithContext(context.Background())
}

func (i VMRuleArray) ToVMRuleArrayOutputWithContext(ctx context.Context) VMRuleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRuleArrayOutput)
}

// VMRuleMapInput is an input type that accepts VMRuleMap and VMRuleMapOutput values.
// You can construct a concrete instance of `VMRuleMapInput` via:
//
//	VMRuleMap{ "key": VMRuleArgs{...} }
type VMRuleMapInput interface {
	pulumi.Input

	ToVMRuleMapOutput() VMRuleMapOutput
	ToVMRuleMapOutputWithContext(context.Context) VMRuleMapOutput
}

type VMRuleMap map[string]VMRuleInput

func (VMRuleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMRule)(nil)).Elem()
}

func (i VMRuleMap) ToVMRuleMapOutput() VMRuleMapOutput {
	return i.ToVMRuleMapOutputWithContext(context.Background())
}

func (i VMRuleMap) ToVMRuleMapOutputWithContext(ctx context.Context) VMRuleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMRuleMapOutput)
}

type VMRuleOutput struct{ *pulumi.OutputState }

func (VMRuleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMRule)(nil)).Elem()
}

func (o VMRuleOutput) ToVMRuleOutput() VMRuleOutput {
	return o
}

func (o VMRuleOutput) ToVMRuleOutputWithContext(ctx context.Context) VMRuleOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMRuleOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMRule) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMRuleOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMRule) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMRuleOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMRule) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMRuleOutput) Spec() VMRuleSpecOutput {
	return o.ApplyT(func(v *VMRule) VMRuleSpecOutput { return v.Spec }).(VMRuleSpecOutput)
}

func (o VMRuleOutput) Status() VMRuleStatusPtrOutput {
	return o.ApplyT(func(v *VMRule) VMRuleStatusPtrOutput { return v.Status }).(VMRuleStatusPtrOutput)
}

type VMRuleArrayOutput struct{ *pulumi.OutputState }

func (VMRuleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMRule)(nil)).Elem()
}

func (o VMRuleArrayOutput) ToVMRuleArrayOutput() VMRuleArrayOutput {
	return o
}

func (o VMRuleArrayOutput) ToVMRuleArrayOutputWithContext(ctx context.Context) VMRuleArrayOutput {
	return o
}

func (o VMRuleArrayOutput) Index(i pulumi.IntInput) VMRuleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMRule {
		return vs[0].([]*VMRule)[vs[1].(int)]
	}).(VMRuleOutput)
}

type VMRuleMapOutput struct{ *pulumi.OutputState }

func (VMRuleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMRule)(nil)).Elem()
}

func (o VMRuleMapOutput) ToVMRuleMapOutput() VMRuleMapOutput {
	return o
}

func (o VMRuleMapOutput) ToVMRuleMapOutputWithContext(ctx context.Context) VMRuleMapOutput {
	return o
}

func (o VMRuleMapOutput) MapIndex(k pulumi.StringInput) VMRuleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMRule {
		return vs[0].(map[string]*VMRule)[vs[1].(string)]
	}).(VMRuleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMRuleInput)(nil)).Elem(), &VMRule{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMRuleArrayInput)(nil)).Elem(), VMRuleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMRuleMapInput)(nil)).Elem(), VMRuleMap{})
	pulumi.RegisterOutputType(VMRuleOutput{})
	pulumi.RegisterOutputType(VMRuleArrayOutput{})
	pulumi.RegisterOutputType(VMRuleMapOutput{})
}
