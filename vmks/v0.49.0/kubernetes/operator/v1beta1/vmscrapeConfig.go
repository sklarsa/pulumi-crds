// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMScrapeConfig specifies a set of targets and parameters describing how to scrape them.
type VMScrapeConfig struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput       `pulumi:"metadata"`
	Spec     VMScrapeConfigSpecOutput      `pulumi:"spec"`
	Status   VMScrapeConfigStatusPtrOutput `pulumi:"status"`
}

// NewVMScrapeConfig registers a new resource with the given unique name, arguments, and options.
func NewVMScrapeConfig(ctx *pulumi.Context,
	name string, args *VMScrapeConfigArgs, opts ...pulumi.ResourceOption) (*VMScrapeConfig, error) {
	if args == nil {
		args = &VMScrapeConfigArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMScrapeConfig")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMScrapeConfig
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMScrapeConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMScrapeConfig gets an existing VMScrapeConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMScrapeConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMScrapeConfigState, opts ...pulumi.ResourceOption) (*VMScrapeConfig, error) {
	var resource VMScrapeConfig
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMScrapeConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMScrapeConfig resources.
type vmscrapeConfigState struct {
}

type VMScrapeConfigState struct {
}

func (VMScrapeConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmscrapeConfigState)(nil)).Elem()
}

type vmscrapeConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *VMScrapeConfigSpec `pulumi:"spec"`
}

// The set of arguments for constructing a VMScrapeConfig resource.
type VMScrapeConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMScrapeConfigSpecPtrInput
}

func (VMScrapeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmscrapeConfigArgs)(nil)).Elem()
}

type VMScrapeConfigInput interface {
	pulumi.Input

	ToVMScrapeConfigOutput() VMScrapeConfigOutput
	ToVMScrapeConfigOutputWithContext(ctx context.Context) VMScrapeConfigOutput
}

func (*VMScrapeConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**VMScrapeConfig)(nil)).Elem()
}

func (i *VMScrapeConfig) ToVMScrapeConfigOutput() VMScrapeConfigOutput {
	return i.ToVMScrapeConfigOutputWithContext(context.Background())
}

func (i *VMScrapeConfig) ToVMScrapeConfigOutputWithContext(ctx context.Context) VMScrapeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMScrapeConfigOutput)
}

// VMScrapeConfigArrayInput is an input type that accepts VMScrapeConfigArray and VMScrapeConfigArrayOutput values.
// You can construct a concrete instance of `VMScrapeConfigArrayInput` via:
//
//	VMScrapeConfigArray{ VMScrapeConfigArgs{...} }
type VMScrapeConfigArrayInput interface {
	pulumi.Input

	ToVMScrapeConfigArrayOutput() VMScrapeConfigArrayOutput
	ToVMScrapeConfigArrayOutputWithContext(context.Context) VMScrapeConfigArrayOutput
}

type VMScrapeConfigArray []VMScrapeConfigInput

func (VMScrapeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMScrapeConfig)(nil)).Elem()
}

func (i VMScrapeConfigArray) ToVMScrapeConfigArrayOutput() VMScrapeConfigArrayOutput {
	return i.ToVMScrapeConfigArrayOutputWithContext(context.Background())
}

func (i VMScrapeConfigArray) ToVMScrapeConfigArrayOutputWithContext(ctx context.Context) VMScrapeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMScrapeConfigArrayOutput)
}

// VMScrapeConfigMapInput is an input type that accepts VMScrapeConfigMap and VMScrapeConfigMapOutput values.
// You can construct a concrete instance of `VMScrapeConfigMapInput` via:
//
//	VMScrapeConfigMap{ "key": VMScrapeConfigArgs{...} }
type VMScrapeConfigMapInput interface {
	pulumi.Input

	ToVMScrapeConfigMapOutput() VMScrapeConfigMapOutput
	ToVMScrapeConfigMapOutputWithContext(context.Context) VMScrapeConfigMapOutput
}

type VMScrapeConfigMap map[string]VMScrapeConfigInput

func (VMScrapeConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMScrapeConfig)(nil)).Elem()
}

func (i VMScrapeConfigMap) ToVMScrapeConfigMapOutput() VMScrapeConfigMapOutput {
	return i.ToVMScrapeConfigMapOutputWithContext(context.Background())
}

func (i VMScrapeConfigMap) ToVMScrapeConfigMapOutputWithContext(ctx context.Context) VMScrapeConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMScrapeConfigMapOutput)
}

type VMScrapeConfigOutput struct{ *pulumi.OutputState }

func (VMScrapeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMScrapeConfig)(nil)).Elem()
}

func (o VMScrapeConfigOutput) ToVMScrapeConfigOutput() VMScrapeConfigOutput {
	return o
}

func (o VMScrapeConfigOutput) ToVMScrapeConfigOutputWithContext(ctx context.Context) VMScrapeConfigOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMScrapeConfigOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMScrapeConfig) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMScrapeConfigOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMScrapeConfig) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMScrapeConfigOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMScrapeConfig) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMScrapeConfigOutput) Spec() VMScrapeConfigSpecOutput {
	return o.ApplyT(func(v *VMScrapeConfig) VMScrapeConfigSpecOutput { return v.Spec }).(VMScrapeConfigSpecOutput)
}

func (o VMScrapeConfigOutput) Status() VMScrapeConfigStatusPtrOutput {
	return o.ApplyT(func(v *VMScrapeConfig) VMScrapeConfigStatusPtrOutput { return v.Status }).(VMScrapeConfigStatusPtrOutput)
}

type VMScrapeConfigArrayOutput struct{ *pulumi.OutputState }

func (VMScrapeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMScrapeConfig)(nil)).Elem()
}

func (o VMScrapeConfigArrayOutput) ToVMScrapeConfigArrayOutput() VMScrapeConfigArrayOutput {
	return o
}

func (o VMScrapeConfigArrayOutput) ToVMScrapeConfigArrayOutputWithContext(ctx context.Context) VMScrapeConfigArrayOutput {
	return o
}

func (o VMScrapeConfigArrayOutput) Index(i pulumi.IntInput) VMScrapeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMScrapeConfig {
		return vs[0].([]*VMScrapeConfig)[vs[1].(int)]
	}).(VMScrapeConfigOutput)
}

type VMScrapeConfigMapOutput struct{ *pulumi.OutputState }

func (VMScrapeConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMScrapeConfig)(nil)).Elem()
}

func (o VMScrapeConfigMapOutput) ToVMScrapeConfigMapOutput() VMScrapeConfigMapOutput {
	return o
}

func (o VMScrapeConfigMapOutput) ToVMScrapeConfigMapOutputWithContext(ctx context.Context) VMScrapeConfigMapOutput {
	return o
}

func (o VMScrapeConfigMapOutput) MapIndex(k pulumi.StringInput) VMScrapeConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMScrapeConfig {
		return vs[0].(map[string]*VMScrapeConfig)[vs[1].(string)]
	}).(VMScrapeConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMScrapeConfigInput)(nil)).Elem(), &VMScrapeConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMScrapeConfigArrayInput)(nil)).Elem(), VMScrapeConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMScrapeConfigMapInput)(nil)).Elem(), VMScrapeConfigMap{})
	pulumi.RegisterOutputType(VMScrapeConfigOutput{})
	pulumi.RegisterOutputType(VMScrapeConfigArrayOutput{})
	pulumi.RegisterOutputType(VMScrapeConfigMapOutput{})
}
