// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMServiceScrape is scrape configuration for endpoints associated with
// kubernetes service,
// it generates scrape configuration for vmagent based on selectors.
// result config will scrape service endpoints
type VMServiceScrapePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput     `pulumi:"metadata"`
	Spec     VMServiceScrapeSpecPatchPtrOutput   `pulumi:"spec"`
	Status   VMServiceScrapeStatusPatchPtrOutput `pulumi:"status"`
}

// NewVMServiceScrapePatch registers a new resource with the given unique name, arguments, and options.
func NewVMServiceScrapePatch(ctx *pulumi.Context,
	name string, args *VMServiceScrapePatchArgs, opts ...pulumi.ResourceOption) (*VMServiceScrapePatch, error) {
	if args == nil {
		args = &VMServiceScrapePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMServiceScrape")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMServiceScrapePatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMServiceScrapePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMServiceScrapePatch gets an existing VMServiceScrapePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMServiceScrapePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMServiceScrapePatchState, opts ...pulumi.ResourceOption) (*VMServiceScrapePatch, error) {
	var resource VMServiceScrapePatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMServiceScrapePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMServiceScrapePatch resources.
type vmserviceScrapePatchState struct {
}

type VMServiceScrapePatchState struct {
}

func (VMServiceScrapePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmserviceScrapePatchState)(nil)).Elem()
}

type vmserviceScrapePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch   `pulumi:"metadata"`
	Spec     *VMServiceScrapeSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a VMServiceScrapePatch resource.
type VMServiceScrapePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMServiceScrapeSpecPatchPtrInput
}

func (VMServiceScrapePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmserviceScrapePatchArgs)(nil)).Elem()
}

type VMServiceScrapePatchInput interface {
	pulumi.Input

	ToVMServiceScrapePatchOutput() VMServiceScrapePatchOutput
	ToVMServiceScrapePatchOutputWithContext(ctx context.Context) VMServiceScrapePatchOutput
}

func (*VMServiceScrapePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMServiceScrapePatch)(nil)).Elem()
}

func (i *VMServiceScrapePatch) ToVMServiceScrapePatchOutput() VMServiceScrapePatchOutput {
	return i.ToVMServiceScrapePatchOutputWithContext(context.Background())
}

func (i *VMServiceScrapePatch) ToVMServiceScrapePatchOutputWithContext(ctx context.Context) VMServiceScrapePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMServiceScrapePatchOutput)
}

// VMServiceScrapePatchArrayInput is an input type that accepts VMServiceScrapePatchArray and VMServiceScrapePatchArrayOutput values.
// You can construct a concrete instance of `VMServiceScrapePatchArrayInput` via:
//
//	VMServiceScrapePatchArray{ VMServiceScrapePatchArgs{...} }
type VMServiceScrapePatchArrayInput interface {
	pulumi.Input

	ToVMServiceScrapePatchArrayOutput() VMServiceScrapePatchArrayOutput
	ToVMServiceScrapePatchArrayOutputWithContext(context.Context) VMServiceScrapePatchArrayOutput
}

type VMServiceScrapePatchArray []VMServiceScrapePatchInput

func (VMServiceScrapePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMServiceScrapePatch)(nil)).Elem()
}

func (i VMServiceScrapePatchArray) ToVMServiceScrapePatchArrayOutput() VMServiceScrapePatchArrayOutput {
	return i.ToVMServiceScrapePatchArrayOutputWithContext(context.Background())
}

func (i VMServiceScrapePatchArray) ToVMServiceScrapePatchArrayOutputWithContext(ctx context.Context) VMServiceScrapePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMServiceScrapePatchArrayOutput)
}

// VMServiceScrapePatchMapInput is an input type that accepts VMServiceScrapePatchMap and VMServiceScrapePatchMapOutput values.
// You can construct a concrete instance of `VMServiceScrapePatchMapInput` via:
//
//	VMServiceScrapePatchMap{ "key": VMServiceScrapePatchArgs{...} }
type VMServiceScrapePatchMapInput interface {
	pulumi.Input

	ToVMServiceScrapePatchMapOutput() VMServiceScrapePatchMapOutput
	ToVMServiceScrapePatchMapOutputWithContext(context.Context) VMServiceScrapePatchMapOutput
}

type VMServiceScrapePatchMap map[string]VMServiceScrapePatchInput

func (VMServiceScrapePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMServiceScrapePatch)(nil)).Elem()
}

func (i VMServiceScrapePatchMap) ToVMServiceScrapePatchMapOutput() VMServiceScrapePatchMapOutput {
	return i.ToVMServiceScrapePatchMapOutputWithContext(context.Background())
}

func (i VMServiceScrapePatchMap) ToVMServiceScrapePatchMapOutputWithContext(ctx context.Context) VMServiceScrapePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMServiceScrapePatchMapOutput)
}

type VMServiceScrapePatchOutput struct{ *pulumi.OutputState }

func (VMServiceScrapePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMServiceScrapePatch)(nil)).Elem()
}

func (o VMServiceScrapePatchOutput) ToVMServiceScrapePatchOutput() VMServiceScrapePatchOutput {
	return o
}

func (o VMServiceScrapePatchOutput) ToVMServiceScrapePatchOutputWithContext(ctx context.Context) VMServiceScrapePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMServiceScrapePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMServiceScrapePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMServiceScrapePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMServiceScrapePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMServiceScrapePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMServiceScrapePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMServiceScrapePatchOutput) Spec() VMServiceScrapeSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMServiceScrapePatch) VMServiceScrapeSpecPatchPtrOutput { return v.Spec }).(VMServiceScrapeSpecPatchPtrOutput)
}

func (o VMServiceScrapePatchOutput) Status() VMServiceScrapeStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMServiceScrapePatch) VMServiceScrapeStatusPatchPtrOutput { return v.Status }).(VMServiceScrapeStatusPatchPtrOutput)
}

type VMServiceScrapePatchArrayOutput struct{ *pulumi.OutputState }

func (VMServiceScrapePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMServiceScrapePatch)(nil)).Elem()
}

func (o VMServiceScrapePatchArrayOutput) ToVMServiceScrapePatchArrayOutput() VMServiceScrapePatchArrayOutput {
	return o
}

func (o VMServiceScrapePatchArrayOutput) ToVMServiceScrapePatchArrayOutputWithContext(ctx context.Context) VMServiceScrapePatchArrayOutput {
	return o
}

func (o VMServiceScrapePatchArrayOutput) Index(i pulumi.IntInput) VMServiceScrapePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMServiceScrapePatch {
		return vs[0].([]*VMServiceScrapePatch)[vs[1].(int)]
	}).(VMServiceScrapePatchOutput)
}

type VMServiceScrapePatchMapOutput struct{ *pulumi.OutputState }

func (VMServiceScrapePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMServiceScrapePatch)(nil)).Elem()
}

func (o VMServiceScrapePatchMapOutput) ToVMServiceScrapePatchMapOutput() VMServiceScrapePatchMapOutput {
	return o
}

func (o VMServiceScrapePatchMapOutput) ToVMServiceScrapePatchMapOutputWithContext(ctx context.Context) VMServiceScrapePatchMapOutput {
	return o
}

func (o VMServiceScrapePatchMapOutput) MapIndex(k pulumi.StringInput) VMServiceScrapePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMServiceScrapePatch {
		return vs[0].(map[string]*VMServiceScrapePatch)[vs[1].(string)]
	}).(VMServiceScrapePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMServiceScrapePatchInput)(nil)).Elem(), &VMServiceScrapePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMServiceScrapePatchArrayInput)(nil)).Elem(), VMServiceScrapePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMServiceScrapePatchMapInput)(nil)).Elem(), VMServiceScrapePatchMap{})
	pulumi.RegisterOutputType(VMServiceScrapePatchOutput{})
	pulumi.RegisterOutputType(VMServiceScrapePatchArrayOutput{})
	pulumi.RegisterOutputType(VMServiceScrapePatchMapOutput{})
}
