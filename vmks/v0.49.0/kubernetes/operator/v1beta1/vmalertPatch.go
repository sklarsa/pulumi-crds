// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// VMAlert  executes a list of given alerting or recording rules against configured address.
type VMAlertPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     VMAlertSpecPatchPtrOutput       `pulumi:"spec"`
	Status   VMAlertStatusPatchPtrOutput     `pulumi:"status"`
}

// NewVMAlertPatch registers a new resource with the given unique name, arguments, and options.
func NewVMAlertPatch(ctx *pulumi.Context,
	name string, args *VMAlertPatchArgs, opts ...pulumi.ResourceOption) (*VMAlertPatch, error) {
	if args == nil {
		args = &VMAlertPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMAlert")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMAlertPatch
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMAlertPatch gets an existing VMAlertPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMAlertPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMAlertPatchState, opts ...pulumi.ResourceOption) (*VMAlertPatch, error) {
	var resource VMAlertPatch
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMAlertPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMAlertPatch resources.
type vmalertPatchState struct {
}

type VMAlertPatchState struct {
}

func (VMAlertPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertPatchState)(nil)).Elem()
}

type vmalertPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *VMAlertSpecPatch       `pulumi:"spec"`
}

// The set of arguments for constructing a VMAlertPatch resource.
type VMAlertPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     VMAlertSpecPatchPtrInput
}

func (VMAlertPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmalertPatchArgs)(nil)).Elem()
}

type VMAlertPatchInput interface {
	pulumi.Input

	ToVMAlertPatchOutput() VMAlertPatchOutput
	ToVMAlertPatchOutputWithContext(ctx context.Context) VMAlertPatchOutput
}

func (*VMAlertPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertPatch)(nil)).Elem()
}

func (i *VMAlertPatch) ToVMAlertPatchOutput() VMAlertPatchOutput {
	return i.ToVMAlertPatchOutputWithContext(context.Background())
}

func (i *VMAlertPatch) ToVMAlertPatchOutputWithContext(ctx context.Context) VMAlertPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertPatchOutput)
}

// VMAlertPatchArrayInput is an input type that accepts VMAlertPatchArray and VMAlertPatchArrayOutput values.
// You can construct a concrete instance of `VMAlertPatchArrayInput` via:
//
//	VMAlertPatchArray{ VMAlertPatchArgs{...} }
type VMAlertPatchArrayInput interface {
	pulumi.Input

	ToVMAlertPatchArrayOutput() VMAlertPatchArrayOutput
	ToVMAlertPatchArrayOutputWithContext(context.Context) VMAlertPatchArrayOutput
}

type VMAlertPatchArray []VMAlertPatchInput

func (VMAlertPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertPatch)(nil)).Elem()
}

func (i VMAlertPatchArray) ToVMAlertPatchArrayOutput() VMAlertPatchArrayOutput {
	return i.ToVMAlertPatchArrayOutputWithContext(context.Background())
}

func (i VMAlertPatchArray) ToVMAlertPatchArrayOutputWithContext(ctx context.Context) VMAlertPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertPatchArrayOutput)
}

// VMAlertPatchMapInput is an input type that accepts VMAlertPatchMap and VMAlertPatchMapOutput values.
// You can construct a concrete instance of `VMAlertPatchMapInput` via:
//
//	VMAlertPatchMap{ "key": VMAlertPatchArgs{...} }
type VMAlertPatchMapInput interface {
	pulumi.Input

	ToVMAlertPatchMapOutput() VMAlertPatchMapOutput
	ToVMAlertPatchMapOutputWithContext(context.Context) VMAlertPatchMapOutput
}

type VMAlertPatchMap map[string]VMAlertPatchInput

func (VMAlertPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertPatch)(nil)).Elem()
}

func (i VMAlertPatchMap) ToVMAlertPatchMapOutput() VMAlertPatchMapOutput {
	return i.ToVMAlertPatchMapOutputWithContext(context.Background())
}

func (i VMAlertPatchMap) ToVMAlertPatchMapOutputWithContext(ctx context.Context) VMAlertPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMAlertPatchMapOutput)
}

type VMAlertPatchOutput struct{ *pulumi.OutputState }

func (VMAlertPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMAlertPatch)(nil)).Elem()
}

func (o VMAlertPatchOutput) ToVMAlertPatchOutput() VMAlertPatchOutput {
	return o
}

func (o VMAlertPatchOutput) ToVMAlertPatchOutputWithContext(ctx context.Context) VMAlertPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMAlertPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAlertPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMAlertPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *VMAlertPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMAlertPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *VMAlertPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o VMAlertPatchOutput) Spec() VMAlertSpecPatchPtrOutput {
	return o.ApplyT(func(v *VMAlertPatch) VMAlertSpecPatchPtrOutput { return v.Spec }).(VMAlertSpecPatchPtrOutput)
}

func (o VMAlertPatchOutput) Status() VMAlertStatusPatchPtrOutput {
	return o.ApplyT(func(v *VMAlertPatch) VMAlertStatusPatchPtrOutput { return v.Status }).(VMAlertStatusPatchPtrOutput)
}

type VMAlertPatchArrayOutput struct{ *pulumi.OutputState }

func (VMAlertPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMAlertPatch)(nil)).Elem()
}

func (o VMAlertPatchArrayOutput) ToVMAlertPatchArrayOutput() VMAlertPatchArrayOutput {
	return o
}

func (o VMAlertPatchArrayOutput) ToVMAlertPatchArrayOutputWithContext(ctx context.Context) VMAlertPatchArrayOutput {
	return o
}

func (o VMAlertPatchArrayOutput) Index(i pulumi.IntInput) VMAlertPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMAlertPatch {
		return vs[0].([]*VMAlertPatch)[vs[1].(int)]
	}).(VMAlertPatchOutput)
}

type VMAlertPatchMapOutput struct{ *pulumi.OutputState }

func (VMAlertPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMAlertPatch)(nil)).Elem()
}

func (o VMAlertPatchMapOutput) ToVMAlertPatchMapOutput() VMAlertPatchMapOutput {
	return o
}

func (o VMAlertPatchMapOutput) ToVMAlertPatchMapOutputWithContext(ctx context.Context) VMAlertPatchMapOutput {
	return o
}

func (o VMAlertPatchMapOutput) MapIndex(k pulumi.StringInput) VMAlertPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMAlertPatch {
		return vs[0].(map[string]*VMAlertPatch)[vs[1].(string)]
	}).(VMAlertPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertPatchInput)(nil)).Elem(), &VMAlertPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertPatchArrayInput)(nil)).Elem(), VMAlertPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMAlertPatchMapInput)(nil)).Elem(), VMAlertPatchMap{})
	pulumi.RegisterOutputType(VMAlertPatchOutput{})
	pulumi.RegisterOutputType(VMAlertPatchArrayOutput{})
	pulumi.RegisterOutputType(VMAlertPatchMapOutput{})
}
