// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1beta1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// VMCluster is fast, cost-effective and scalable time-series database.
// Cluster version with
type VMCluster struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     VMClusterSpecOutput      `pulumi:"spec"`
	Status   VMClusterStatusPtrOutput `pulumi:"status"`
}

// NewVMCluster registers a new resource with the given unique name, arguments, and options.
func NewVMCluster(ctx *pulumi.Context,
	name string, args *VMClusterArgs, opts ...pulumi.ResourceOption) (*VMCluster, error) {
	if args == nil {
		args = &VMClusterArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("operator.victoriametrics.com/v1beta1")
	args.Kind = pulumi.StringPtr("VMCluster")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource VMCluster
	err := ctx.RegisterResource("kubernetes:operator.victoriametrics.com/v1beta1:VMCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetVMCluster gets an existing VMCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetVMCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *VMClusterState, opts ...pulumi.ResourceOption) (*VMCluster, error) {
	var resource VMCluster
	err := ctx.ReadResource("kubernetes:operator.victoriametrics.com/v1beta1:VMCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering VMCluster resources.
type vmclusterState struct {
}

type VMClusterState struct {
}

func (VMClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*vmclusterState)(nil)).Elem()
}

type vmclusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *VMClusterSpec     `pulumi:"spec"`
}

// The set of arguments for constructing a VMCluster resource.
type VMClusterArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     VMClusterSpecPtrInput
}

func (VMClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*vmclusterArgs)(nil)).Elem()
}

type VMClusterInput interface {
	pulumi.Input

	ToVMClusterOutput() VMClusterOutput
	ToVMClusterOutputWithContext(ctx context.Context) VMClusterOutput
}

func (*VMCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**VMCluster)(nil)).Elem()
}

func (i *VMCluster) ToVMClusterOutput() VMClusterOutput {
	return i.ToVMClusterOutputWithContext(context.Background())
}

func (i *VMCluster) ToVMClusterOutputWithContext(ctx context.Context) VMClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterOutput)
}

// VMClusterArrayInput is an input type that accepts VMClusterArray and VMClusterArrayOutput values.
// You can construct a concrete instance of `VMClusterArrayInput` via:
//
//	VMClusterArray{ VMClusterArgs{...} }
type VMClusterArrayInput interface {
	pulumi.Input

	ToVMClusterArrayOutput() VMClusterArrayOutput
	ToVMClusterArrayOutputWithContext(context.Context) VMClusterArrayOutput
}

type VMClusterArray []VMClusterInput

func (VMClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMCluster)(nil)).Elem()
}

func (i VMClusterArray) ToVMClusterArrayOutput() VMClusterArrayOutput {
	return i.ToVMClusterArrayOutputWithContext(context.Background())
}

func (i VMClusterArray) ToVMClusterArrayOutputWithContext(ctx context.Context) VMClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterArrayOutput)
}

// VMClusterMapInput is an input type that accepts VMClusterMap and VMClusterMapOutput values.
// You can construct a concrete instance of `VMClusterMapInput` via:
//
//	VMClusterMap{ "key": VMClusterArgs{...} }
type VMClusterMapInput interface {
	pulumi.Input

	ToVMClusterMapOutput() VMClusterMapOutput
	ToVMClusterMapOutputWithContext(context.Context) VMClusterMapOutput
}

type VMClusterMap map[string]VMClusterInput

func (VMClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMCluster)(nil)).Elem()
}

func (i VMClusterMap) ToVMClusterMapOutput() VMClusterMapOutput {
	return i.ToVMClusterMapOutputWithContext(context.Background())
}

func (i VMClusterMap) ToVMClusterMapOutputWithContext(ctx context.Context) VMClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(VMClusterMapOutput)
}

type VMClusterOutput struct{ *pulumi.OutputState }

func (VMClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**VMCluster)(nil)).Elem()
}

func (o VMClusterOutput) ToVMClusterOutput() VMClusterOutput {
	return o
}

func (o VMClusterOutput) ToVMClusterOutputWithContext(ctx context.Context) VMClusterOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o VMClusterOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *VMCluster) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o VMClusterOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *VMCluster) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o VMClusterOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *VMCluster) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o VMClusterOutput) Spec() VMClusterSpecOutput {
	return o.ApplyT(func(v *VMCluster) VMClusterSpecOutput { return v.Spec }).(VMClusterSpecOutput)
}

func (o VMClusterOutput) Status() VMClusterStatusPtrOutput {
	return o.ApplyT(func(v *VMCluster) VMClusterStatusPtrOutput { return v.Status }).(VMClusterStatusPtrOutput)
}

type VMClusterArrayOutput struct{ *pulumi.OutputState }

func (VMClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*VMCluster)(nil)).Elem()
}

func (o VMClusterArrayOutput) ToVMClusterArrayOutput() VMClusterArrayOutput {
	return o
}

func (o VMClusterArrayOutput) ToVMClusterArrayOutputWithContext(ctx context.Context) VMClusterArrayOutput {
	return o
}

func (o VMClusterArrayOutput) Index(i pulumi.IntInput) VMClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *VMCluster {
		return vs[0].([]*VMCluster)[vs[1].(int)]
	}).(VMClusterOutput)
}

type VMClusterMapOutput struct{ *pulumi.OutputState }

func (VMClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*VMCluster)(nil)).Elem()
}

func (o VMClusterMapOutput) ToVMClusterMapOutput() VMClusterMapOutput {
	return o
}

func (o VMClusterMapOutput) ToVMClusterMapOutputWithContext(ctx context.Context) VMClusterMapOutput {
	return o
}

func (o VMClusterMapOutput) MapIndex(k pulumi.StringInput) VMClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *VMCluster {
		return vs[0].(map[string]*VMCluster)[vs[1].(string)]
	}).(VMClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterInput)(nil)).Elem(), &VMCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterArrayInput)(nil)).Elem(), VMClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*VMClusterMapInput)(nil)).Elem(), VMClusterMap{})
	pulumi.RegisterOutputType(VMClusterOutput{})
	pulumi.RegisterOutputType(VMClusterArrayOutput{})
	pulumi.RegisterOutputType(VMClusterMapOutput{})
}
