// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ScrapeConfig defines a namespaced Prometheus scrape_config to be aggregated across
// multiple namespaces into the Prometheus configuration.
type ScrapeConfig struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     ScrapeConfigSpecOutput  `pulumi:"spec"`
}

// NewScrapeConfig registers a new resource with the given unique name, arguments, and options.
func NewScrapeConfig(ctx *pulumi.Context,
	name string, args *ScrapeConfigArgs, opts ...pulumi.ResourceOption) (*ScrapeConfig, error) {
	if args == nil {
		args = &ScrapeConfigArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1alpha1")
	args.Kind = pulumi.StringPtr("ScrapeConfig")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ScrapeConfig
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1alpha1:ScrapeConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScrapeConfig gets an existing ScrapeConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScrapeConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScrapeConfigState, opts ...pulumi.ResourceOption) (*ScrapeConfig, error) {
	var resource ScrapeConfig
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1alpha1:ScrapeConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScrapeConfig resources.
type scrapeConfigState struct {
}

type ScrapeConfigState struct {
}

func (ScrapeConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*scrapeConfigState)(nil)).Elem()
}

type scrapeConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *ScrapeConfigSpec  `pulumi:"spec"`
}

// The set of arguments for constructing a ScrapeConfig resource.
type ScrapeConfigArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ScrapeConfigSpecPtrInput
}

func (ScrapeConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scrapeConfigArgs)(nil)).Elem()
}

type ScrapeConfigInput interface {
	pulumi.Input

	ToScrapeConfigOutput() ScrapeConfigOutput
	ToScrapeConfigOutputWithContext(ctx context.Context) ScrapeConfigOutput
}

func (*ScrapeConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**ScrapeConfig)(nil)).Elem()
}

func (i *ScrapeConfig) ToScrapeConfigOutput() ScrapeConfigOutput {
	return i.ToScrapeConfigOutputWithContext(context.Background())
}

func (i *ScrapeConfig) ToScrapeConfigOutputWithContext(ctx context.Context) ScrapeConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScrapeConfigOutput)
}

// ScrapeConfigArrayInput is an input type that accepts ScrapeConfigArray and ScrapeConfigArrayOutput values.
// You can construct a concrete instance of `ScrapeConfigArrayInput` via:
//
//	ScrapeConfigArray{ ScrapeConfigArgs{...} }
type ScrapeConfigArrayInput interface {
	pulumi.Input

	ToScrapeConfigArrayOutput() ScrapeConfigArrayOutput
	ToScrapeConfigArrayOutputWithContext(context.Context) ScrapeConfigArrayOutput
}

type ScrapeConfigArray []ScrapeConfigInput

func (ScrapeConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScrapeConfig)(nil)).Elem()
}

func (i ScrapeConfigArray) ToScrapeConfigArrayOutput() ScrapeConfigArrayOutput {
	return i.ToScrapeConfigArrayOutputWithContext(context.Background())
}

func (i ScrapeConfigArray) ToScrapeConfigArrayOutputWithContext(ctx context.Context) ScrapeConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScrapeConfigArrayOutput)
}

// ScrapeConfigMapInput is an input type that accepts ScrapeConfigMap and ScrapeConfigMapOutput values.
// You can construct a concrete instance of `ScrapeConfigMapInput` via:
//
//	ScrapeConfigMap{ "key": ScrapeConfigArgs{...} }
type ScrapeConfigMapInput interface {
	pulumi.Input

	ToScrapeConfigMapOutput() ScrapeConfigMapOutput
	ToScrapeConfigMapOutputWithContext(context.Context) ScrapeConfigMapOutput
}

type ScrapeConfigMap map[string]ScrapeConfigInput

func (ScrapeConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScrapeConfig)(nil)).Elem()
}

func (i ScrapeConfigMap) ToScrapeConfigMapOutput() ScrapeConfigMapOutput {
	return i.ToScrapeConfigMapOutputWithContext(context.Background())
}

func (i ScrapeConfigMap) ToScrapeConfigMapOutputWithContext(ctx context.Context) ScrapeConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScrapeConfigMapOutput)
}

type ScrapeConfigOutput struct{ *pulumi.OutputState }

func (ScrapeConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScrapeConfig)(nil)).Elem()
}

func (o ScrapeConfigOutput) ToScrapeConfigOutput() ScrapeConfigOutput {
	return o
}

func (o ScrapeConfigOutput) ToScrapeConfigOutputWithContext(ctx context.Context) ScrapeConfigOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScrapeConfigOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ScrapeConfig) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScrapeConfigOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ScrapeConfig) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ScrapeConfigOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ScrapeConfig) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ScrapeConfigOutput) Spec() ScrapeConfigSpecOutput {
	return o.ApplyT(func(v *ScrapeConfig) ScrapeConfigSpecOutput { return v.Spec }).(ScrapeConfigSpecOutput)
}

type ScrapeConfigArrayOutput struct{ *pulumi.OutputState }

func (ScrapeConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScrapeConfig)(nil)).Elem()
}

func (o ScrapeConfigArrayOutput) ToScrapeConfigArrayOutput() ScrapeConfigArrayOutput {
	return o
}

func (o ScrapeConfigArrayOutput) ToScrapeConfigArrayOutputWithContext(ctx context.Context) ScrapeConfigArrayOutput {
	return o
}

func (o ScrapeConfigArrayOutput) Index(i pulumi.IntInput) ScrapeConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScrapeConfig {
		return vs[0].([]*ScrapeConfig)[vs[1].(int)]
	}).(ScrapeConfigOutput)
}

type ScrapeConfigMapOutput struct{ *pulumi.OutputState }

func (ScrapeConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScrapeConfig)(nil)).Elem()
}

func (o ScrapeConfigMapOutput) ToScrapeConfigMapOutput() ScrapeConfigMapOutput {
	return o
}

func (o ScrapeConfigMapOutput) ToScrapeConfigMapOutputWithContext(ctx context.Context) ScrapeConfigMapOutput {
	return o
}

func (o ScrapeConfigMapOutput) MapIndex(k pulumi.StringInput) ScrapeConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScrapeConfig {
		return vs[0].(map[string]*ScrapeConfig)[vs[1].(string)]
	}).(ScrapeConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScrapeConfigInput)(nil)).Elem(), &ScrapeConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScrapeConfigArrayInput)(nil)).Elem(), ScrapeConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScrapeConfigMapInput)(nil)).Elem(), ScrapeConfigMap{})
	pulumi.RegisterOutputType(ScrapeConfigOutput{})
	pulumi.RegisterOutputType(ScrapeConfigArrayOutput{})
	pulumi.RegisterOutputType(ScrapeConfigMapOutput{})
}
