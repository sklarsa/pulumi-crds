// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1alpha1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// ScrapeConfig defines a namespaced Prometheus scrape_config to be aggregated across
// multiple namespaces into the Prometheus configuration.
type ScrapeConfigPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ScrapeConfigSpecPatchPtrOutput  `pulumi:"spec"`
}

// NewScrapeConfigPatch registers a new resource with the given unique name, arguments, and options.
func NewScrapeConfigPatch(ctx *pulumi.Context,
	name string, args *ScrapeConfigPatchArgs, opts ...pulumi.ResourceOption) (*ScrapeConfigPatch, error) {
	if args == nil {
		args = &ScrapeConfigPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1alpha1")
	args.Kind = pulumi.StringPtr("ScrapeConfig")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ScrapeConfigPatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1alpha1:ScrapeConfigPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetScrapeConfigPatch gets an existing ScrapeConfigPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetScrapeConfigPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ScrapeConfigPatchState, opts ...pulumi.ResourceOption) (*ScrapeConfigPatch, error) {
	var resource ScrapeConfigPatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1alpha1:ScrapeConfigPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ScrapeConfigPatch resources.
type scrapeConfigPatchState struct {
}

type ScrapeConfigPatchState struct {
}

func (ScrapeConfigPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*scrapeConfigPatchState)(nil)).Elem()
}

type scrapeConfigPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ScrapeConfigSpecPatch  `pulumi:"spec"`
}

// The set of arguments for constructing a ScrapeConfigPatch resource.
type ScrapeConfigPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ScrapeConfigSpecPatchPtrInput
}

func (ScrapeConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*scrapeConfigPatchArgs)(nil)).Elem()
}

type ScrapeConfigPatchInput interface {
	pulumi.Input

	ToScrapeConfigPatchOutput() ScrapeConfigPatchOutput
	ToScrapeConfigPatchOutputWithContext(ctx context.Context) ScrapeConfigPatchOutput
}

func (*ScrapeConfigPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ScrapeConfigPatch)(nil)).Elem()
}

func (i *ScrapeConfigPatch) ToScrapeConfigPatchOutput() ScrapeConfigPatchOutput {
	return i.ToScrapeConfigPatchOutputWithContext(context.Background())
}

func (i *ScrapeConfigPatch) ToScrapeConfigPatchOutputWithContext(ctx context.Context) ScrapeConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScrapeConfigPatchOutput)
}

// ScrapeConfigPatchArrayInput is an input type that accepts ScrapeConfigPatchArray and ScrapeConfigPatchArrayOutput values.
// You can construct a concrete instance of `ScrapeConfigPatchArrayInput` via:
//
//	ScrapeConfigPatchArray{ ScrapeConfigPatchArgs{...} }
type ScrapeConfigPatchArrayInput interface {
	pulumi.Input

	ToScrapeConfigPatchArrayOutput() ScrapeConfigPatchArrayOutput
	ToScrapeConfigPatchArrayOutputWithContext(context.Context) ScrapeConfigPatchArrayOutput
}

type ScrapeConfigPatchArray []ScrapeConfigPatchInput

func (ScrapeConfigPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScrapeConfigPatch)(nil)).Elem()
}

func (i ScrapeConfigPatchArray) ToScrapeConfigPatchArrayOutput() ScrapeConfigPatchArrayOutput {
	return i.ToScrapeConfigPatchArrayOutputWithContext(context.Background())
}

func (i ScrapeConfigPatchArray) ToScrapeConfigPatchArrayOutputWithContext(ctx context.Context) ScrapeConfigPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScrapeConfigPatchArrayOutput)
}

// ScrapeConfigPatchMapInput is an input type that accepts ScrapeConfigPatchMap and ScrapeConfigPatchMapOutput values.
// You can construct a concrete instance of `ScrapeConfigPatchMapInput` via:
//
//	ScrapeConfigPatchMap{ "key": ScrapeConfigPatchArgs{...} }
type ScrapeConfigPatchMapInput interface {
	pulumi.Input

	ToScrapeConfigPatchMapOutput() ScrapeConfigPatchMapOutput
	ToScrapeConfigPatchMapOutputWithContext(context.Context) ScrapeConfigPatchMapOutput
}

type ScrapeConfigPatchMap map[string]ScrapeConfigPatchInput

func (ScrapeConfigPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScrapeConfigPatch)(nil)).Elem()
}

func (i ScrapeConfigPatchMap) ToScrapeConfigPatchMapOutput() ScrapeConfigPatchMapOutput {
	return i.ToScrapeConfigPatchMapOutputWithContext(context.Background())
}

func (i ScrapeConfigPatchMap) ToScrapeConfigPatchMapOutputWithContext(ctx context.Context) ScrapeConfigPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ScrapeConfigPatchMapOutput)
}

type ScrapeConfigPatchOutput struct{ *pulumi.OutputState }

func (ScrapeConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ScrapeConfigPatch)(nil)).Elem()
}

func (o ScrapeConfigPatchOutput) ToScrapeConfigPatchOutput() ScrapeConfigPatchOutput {
	return o
}

func (o ScrapeConfigPatchOutput) ToScrapeConfigPatchOutputWithContext(ctx context.Context) ScrapeConfigPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ScrapeConfigPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScrapeConfigPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ScrapeConfigPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ScrapeConfigPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ScrapeConfigPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ScrapeConfigPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ScrapeConfigPatchOutput) Spec() ScrapeConfigSpecPatchPtrOutput {
	return o.ApplyT(func(v *ScrapeConfigPatch) ScrapeConfigSpecPatchPtrOutput { return v.Spec }).(ScrapeConfigSpecPatchPtrOutput)
}

type ScrapeConfigPatchArrayOutput struct{ *pulumi.OutputState }

func (ScrapeConfigPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ScrapeConfigPatch)(nil)).Elem()
}

func (o ScrapeConfigPatchArrayOutput) ToScrapeConfigPatchArrayOutput() ScrapeConfigPatchArrayOutput {
	return o
}

func (o ScrapeConfigPatchArrayOutput) ToScrapeConfigPatchArrayOutputWithContext(ctx context.Context) ScrapeConfigPatchArrayOutput {
	return o
}

func (o ScrapeConfigPatchArrayOutput) Index(i pulumi.IntInput) ScrapeConfigPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ScrapeConfigPatch {
		return vs[0].([]*ScrapeConfigPatch)[vs[1].(int)]
	}).(ScrapeConfigPatchOutput)
}

type ScrapeConfigPatchMapOutput struct{ *pulumi.OutputState }

func (ScrapeConfigPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ScrapeConfigPatch)(nil)).Elem()
}

func (o ScrapeConfigPatchMapOutput) ToScrapeConfigPatchMapOutput() ScrapeConfigPatchMapOutput {
	return o
}

func (o ScrapeConfigPatchMapOutput) ToScrapeConfigPatchMapOutputWithContext(ctx context.Context) ScrapeConfigPatchMapOutput {
	return o
}

func (o ScrapeConfigPatchMapOutput) MapIndex(k pulumi.StringInput) ScrapeConfigPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ScrapeConfigPatch {
		return vs[0].(map[string]*ScrapeConfigPatch)[vs[1].(string)]
	}).(ScrapeConfigPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ScrapeConfigPatchInput)(nil)).Elem(), &ScrapeConfigPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScrapeConfigPatchArrayInput)(nil)).Elem(), ScrapeConfigPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ScrapeConfigPatchMapInput)(nil)).Elem(), ScrapeConfigPatchMap{})
	pulumi.RegisterOutputType(ScrapeConfigPatchOutput{})
	pulumi.RegisterOutputType(ScrapeConfigPatchArrayOutput{})
	pulumi.RegisterOutputType(ScrapeConfigPatchMapOutput{})
}
