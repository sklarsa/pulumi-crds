// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The `ServiceMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of services.
// Among other things, it allows to specify:
// * The services to scrape via label selectors.
// * The container ports to scrape.
// * Authentication credentials to use.
// * Target and metric relabeling.
//
// `Prometheus` and `PrometheusAgent` objects select `ServiceMonitor` objects using label and namespace selectors.
type ServiceMonitorPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     ServiceMonitorSpecPatchPtrOutput `pulumi:"spec"`
}

// NewServiceMonitorPatch registers a new resource with the given unique name, arguments, and options.
func NewServiceMonitorPatch(ctx *pulumi.Context,
	name string, args *ServiceMonitorPatchArgs, opts ...pulumi.ResourceOption) (*ServiceMonitorPatch, error) {
	if args == nil {
		args = &ServiceMonitorPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("ServiceMonitor")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ServiceMonitorPatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:ServiceMonitorPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceMonitorPatch gets an existing ServiceMonitorPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceMonitorPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceMonitorPatchState, opts ...pulumi.ResourceOption) (*ServiceMonitorPatch, error) {
	var resource ServiceMonitorPatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:ServiceMonitorPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceMonitorPatch resources.
type serviceMonitorPatchState struct {
}

type ServiceMonitorPatchState struct {
}

func (ServiceMonitorPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceMonitorPatchState)(nil)).Elem()
}

type serviceMonitorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *ServiceMonitorSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a ServiceMonitorPatch resource.
type ServiceMonitorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ServiceMonitorSpecPatchPtrInput
}

func (ServiceMonitorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceMonitorPatchArgs)(nil)).Elem()
}

type ServiceMonitorPatchInput interface {
	pulumi.Input

	ToServiceMonitorPatchOutput() ServiceMonitorPatchOutput
	ToServiceMonitorPatchOutputWithContext(ctx context.Context) ServiceMonitorPatchOutput
}

func (*ServiceMonitorPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMonitorPatch)(nil)).Elem()
}

func (i *ServiceMonitorPatch) ToServiceMonitorPatchOutput() ServiceMonitorPatchOutput {
	return i.ToServiceMonitorPatchOutputWithContext(context.Background())
}

func (i *ServiceMonitorPatch) ToServiceMonitorPatchOutputWithContext(ctx context.Context) ServiceMonitorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorPatchOutput)
}

// ServiceMonitorPatchArrayInput is an input type that accepts ServiceMonitorPatchArray and ServiceMonitorPatchArrayOutput values.
// You can construct a concrete instance of `ServiceMonitorPatchArrayInput` via:
//
//	ServiceMonitorPatchArray{ ServiceMonitorPatchArgs{...} }
type ServiceMonitorPatchArrayInput interface {
	pulumi.Input

	ToServiceMonitorPatchArrayOutput() ServiceMonitorPatchArrayOutput
	ToServiceMonitorPatchArrayOutputWithContext(context.Context) ServiceMonitorPatchArrayOutput
}

type ServiceMonitorPatchArray []ServiceMonitorPatchInput

func (ServiceMonitorPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceMonitorPatch)(nil)).Elem()
}

func (i ServiceMonitorPatchArray) ToServiceMonitorPatchArrayOutput() ServiceMonitorPatchArrayOutput {
	return i.ToServiceMonitorPatchArrayOutputWithContext(context.Background())
}

func (i ServiceMonitorPatchArray) ToServiceMonitorPatchArrayOutputWithContext(ctx context.Context) ServiceMonitorPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorPatchArrayOutput)
}

// ServiceMonitorPatchMapInput is an input type that accepts ServiceMonitorPatchMap and ServiceMonitorPatchMapOutput values.
// You can construct a concrete instance of `ServiceMonitorPatchMapInput` via:
//
//	ServiceMonitorPatchMap{ "key": ServiceMonitorPatchArgs{...} }
type ServiceMonitorPatchMapInput interface {
	pulumi.Input

	ToServiceMonitorPatchMapOutput() ServiceMonitorPatchMapOutput
	ToServiceMonitorPatchMapOutputWithContext(context.Context) ServiceMonitorPatchMapOutput
}

type ServiceMonitorPatchMap map[string]ServiceMonitorPatchInput

func (ServiceMonitorPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceMonitorPatch)(nil)).Elem()
}

func (i ServiceMonitorPatchMap) ToServiceMonitorPatchMapOutput() ServiceMonitorPatchMapOutput {
	return i.ToServiceMonitorPatchMapOutputWithContext(context.Background())
}

func (i ServiceMonitorPatchMap) ToServiceMonitorPatchMapOutputWithContext(ctx context.Context) ServiceMonitorPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorPatchMapOutput)
}

type ServiceMonitorPatchOutput struct{ *pulumi.OutputState }

func (ServiceMonitorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMonitorPatch)(nil)).Elem()
}

func (o ServiceMonitorPatchOutput) ToServiceMonitorPatchOutput() ServiceMonitorPatchOutput {
	return o
}

func (o ServiceMonitorPatchOutput) ToServiceMonitorPatchOutputWithContext(ctx context.Context) ServiceMonitorPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceMonitorPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMonitorPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceMonitorPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ServiceMonitorPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceMonitorPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ServiceMonitorPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ServiceMonitorPatchOutput) Spec() ServiceMonitorSpecPatchPtrOutput {
	return o.ApplyT(func(v *ServiceMonitorPatch) ServiceMonitorSpecPatchPtrOutput { return v.Spec }).(ServiceMonitorSpecPatchPtrOutput)
}

type ServiceMonitorPatchArrayOutput struct{ *pulumi.OutputState }

func (ServiceMonitorPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceMonitorPatch)(nil)).Elem()
}

func (o ServiceMonitorPatchArrayOutput) ToServiceMonitorPatchArrayOutput() ServiceMonitorPatchArrayOutput {
	return o
}

func (o ServiceMonitorPatchArrayOutput) ToServiceMonitorPatchArrayOutputWithContext(ctx context.Context) ServiceMonitorPatchArrayOutput {
	return o
}

func (o ServiceMonitorPatchArrayOutput) Index(i pulumi.IntInput) ServiceMonitorPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceMonitorPatch {
		return vs[0].([]*ServiceMonitorPatch)[vs[1].(int)]
	}).(ServiceMonitorPatchOutput)
}

type ServiceMonitorPatchMapOutput struct{ *pulumi.OutputState }

func (ServiceMonitorPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceMonitorPatch)(nil)).Elem()
}

func (o ServiceMonitorPatchMapOutput) ToServiceMonitorPatchMapOutput() ServiceMonitorPatchMapOutput {
	return o
}

func (o ServiceMonitorPatchMapOutput) ToServiceMonitorPatchMapOutputWithContext(ctx context.Context) ServiceMonitorPatchMapOutput {
	return o
}

func (o ServiceMonitorPatchMapOutput) MapIndex(k pulumi.StringInput) ServiceMonitorPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceMonitorPatch {
		return vs[0].(map[string]*ServiceMonitorPatch)[vs[1].(string)]
	}).(ServiceMonitorPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorPatchInput)(nil)).Elem(), &ServiceMonitorPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorPatchArrayInput)(nil)).Elem(), ServiceMonitorPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorPatchMapInput)(nil)).Elem(), ServiceMonitorPatchMap{})
	pulumi.RegisterOutputType(ServiceMonitorPatchOutput{})
	pulumi.RegisterOutputType(ServiceMonitorPatchArrayOutput{})
	pulumi.RegisterOutputType(ServiceMonitorPatchMapOutput{})
}
