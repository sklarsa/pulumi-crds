// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Prometheus` custom resource definition (CRD) defines a desired [Prometheus](https://prometheus.io/docs/prometheus) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage, and Alertmanagers where firing alerts should be sent and many more.
//
// For each `Prometheus` resource, the Operator deploys one or several `StatefulSet` objects in the same namespace. The number of StatefulSets is equal to the number of shards which is 1 by default.
//
// The resource defines via label and namespace selectors which `ServiceMonitor`, `PodMonitor`, `Probe` and `PrometheusRule` objects should be associated to the deployed Prometheus instances.
//
// The Operator continuously reconciles the scrape and rules configuration and a sidecar container running in the Prometheus pods triggers a reload of the configuration when needed.
type Prometheus struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput   `pulumi:"metadata"`
	Spec     PrometheusSpecOutput      `pulumi:"spec"`
	Status   PrometheusStatusPtrOutput `pulumi:"status"`
}

// NewPrometheus registers a new resource with the given unique name, arguments, and options.
func NewPrometheus(ctx *pulumi.Context,
	name string, args *PrometheusArgs, opts ...pulumi.ResourceOption) (*Prometheus, error) {
	if args == nil {
		args = &PrometheusArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("Prometheus")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Prometheus
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:Prometheus", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrometheus gets an existing Prometheus resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrometheus(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrometheusState, opts ...pulumi.ResourceOption) (*Prometheus, error) {
	var resource Prometheus
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:Prometheus", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Prometheus resources.
type prometheusState struct {
}

type PrometheusState struct {
}

func (PrometheusState) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusState)(nil)).Elem()
}

type prometheusArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *PrometheusSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a Prometheus resource.
type PrometheusArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PrometheusSpecPtrInput
}

func (PrometheusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusArgs)(nil)).Elem()
}

type PrometheusInput interface {
	pulumi.Input

	ToPrometheusOutput() PrometheusOutput
	ToPrometheusOutputWithContext(ctx context.Context) PrometheusOutput
}

func (*Prometheus) ElementType() reflect.Type {
	return reflect.TypeOf((**Prometheus)(nil)).Elem()
}

func (i *Prometheus) ToPrometheusOutput() PrometheusOutput {
	return i.ToPrometheusOutputWithContext(context.Background())
}

func (i *Prometheus) ToPrometheusOutputWithContext(ctx context.Context) PrometheusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusOutput)
}

// PrometheusArrayInput is an input type that accepts PrometheusArray and PrometheusArrayOutput values.
// You can construct a concrete instance of `PrometheusArrayInput` via:
//
//	PrometheusArray{ PrometheusArgs{...} }
type PrometheusArrayInput interface {
	pulumi.Input

	ToPrometheusArrayOutput() PrometheusArrayOutput
	ToPrometheusArrayOutputWithContext(context.Context) PrometheusArrayOutput
}

type PrometheusArray []PrometheusInput

func (PrometheusArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prometheus)(nil)).Elem()
}

func (i PrometheusArray) ToPrometheusArrayOutput() PrometheusArrayOutput {
	return i.ToPrometheusArrayOutputWithContext(context.Background())
}

func (i PrometheusArray) ToPrometheusArrayOutputWithContext(ctx context.Context) PrometheusArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusArrayOutput)
}

// PrometheusMapInput is an input type that accepts PrometheusMap and PrometheusMapOutput values.
// You can construct a concrete instance of `PrometheusMapInput` via:
//
//	PrometheusMap{ "key": PrometheusArgs{...} }
type PrometheusMapInput interface {
	pulumi.Input

	ToPrometheusMapOutput() PrometheusMapOutput
	ToPrometheusMapOutputWithContext(context.Context) PrometheusMapOutput
}

type PrometheusMap map[string]PrometheusInput

func (PrometheusMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prometheus)(nil)).Elem()
}

func (i PrometheusMap) ToPrometheusMapOutput() PrometheusMapOutput {
	return i.ToPrometheusMapOutputWithContext(context.Background())
}

func (i PrometheusMap) ToPrometheusMapOutputWithContext(ctx context.Context) PrometheusMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusMapOutput)
}

type PrometheusOutput struct{ *pulumi.OutputState }

func (PrometheusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Prometheus)(nil)).Elem()
}

func (o PrometheusOutput) ToPrometheusOutput() PrometheusOutput {
	return o
}

func (o PrometheusOutput) ToPrometheusOutputWithContext(ctx context.Context) PrometheusOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PrometheusOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PrometheusOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Prometheus) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PrometheusOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Prometheus) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PrometheusOutput) Spec() PrometheusSpecOutput {
	return o.ApplyT(func(v *Prometheus) PrometheusSpecOutput { return v.Spec }).(PrometheusSpecOutput)
}

func (o PrometheusOutput) Status() PrometheusStatusPtrOutput {
	return o.ApplyT(func(v *Prometheus) PrometheusStatusPtrOutput { return v.Status }).(PrometheusStatusPtrOutput)
}

type PrometheusArrayOutput struct{ *pulumi.OutputState }

func (PrometheusArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Prometheus)(nil)).Elem()
}

func (o PrometheusArrayOutput) ToPrometheusArrayOutput() PrometheusArrayOutput {
	return o
}

func (o PrometheusArrayOutput) ToPrometheusArrayOutputWithContext(ctx context.Context) PrometheusArrayOutput {
	return o
}

func (o PrometheusArrayOutput) Index(i pulumi.IntInput) PrometheusOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Prometheus {
		return vs[0].([]*Prometheus)[vs[1].(int)]
	}).(PrometheusOutput)
}

type PrometheusMapOutput struct{ *pulumi.OutputState }

func (PrometheusMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Prometheus)(nil)).Elem()
}

func (o PrometheusMapOutput) ToPrometheusMapOutput() PrometheusMapOutput {
	return o
}

func (o PrometheusMapOutput) ToPrometheusMapOutputWithContext(ctx context.Context) PrometheusMapOutput {
	return o
}

func (o PrometheusMapOutput) MapIndex(k pulumi.StringInput) PrometheusOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Prometheus {
		return vs[0].(map[string]*Prometheus)[vs[1].(string)]
	}).(PrometheusOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusInput)(nil)).Elem(), &Prometheus{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusArrayInput)(nil)).Elem(), PrometheusArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusMapInput)(nil)).Elem(), PrometheusMap{})
	pulumi.RegisterOutputType(PrometheusOutput{})
	pulumi.RegisterOutputType(PrometheusArrayOutput{})
	pulumi.RegisterOutputType(PrometheusMapOutput{})
}
