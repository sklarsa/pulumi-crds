// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The `PrometheusRule` custom resource definition (CRD) defines [alerting](https://prometheus.io/docs/prometheus/latest/configuration/alerting_rules/) and [recording](https://prometheus.io/docs/prometheus/latest/configuration/recording_rules/) rules to be evaluated by `Prometheus` or `ThanosRuler` objects.
//
// `Prometheus` and `ThanosRuler` objects select `PrometheusRule` objects using label and namespace selectors.
type PrometheusRulePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     PrometheusRuleSpecPatchPtrOutput `pulumi:"spec"`
}

// NewPrometheusRulePatch registers a new resource with the given unique name, arguments, and options.
func NewPrometheusRulePatch(ctx *pulumi.Context,
	name string, args *PrometheusRulePatchArgs, opts ...pulumi.ResourceOption) (*PrometheusRulePatch, error) {
	if args == nil {
		args = &PrometheusRulePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("PrometheusRule")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PrometheusRulePatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:PrometheusRulePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrometheusRulePatch gets an existing PrometheusRulePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrometheusRulePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrometheusRulePatchState, opts ...pulumi.ResourceOption) (*PrometheusRulePatch, error) {
	var resource PrometheusRulePatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:PrometheusRulePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrometheusRulePatch resources.
type prometheusRulePatchState struct {
}

type PrometheusRulePatchState struct {
}

func (PrometheusRulePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusRulePatchState)(nil)).Elem()
}

type prometheusRulePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch  `pulumi:"metadata"`
	Spec     *PrometheusRuleSpecPatch `pulumi:"spec"`
}

// The set of arguments for constructing a PrometheusRulePatch resource.
type PrometheusRulePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PrometheusRuleSpecPatchPtrInput
}

func (PrometheusRulePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusRulePatchArgs)(nil)).Elem()
}

type PrometheusRulePatchInput interface {
	pulumi.Input

	ToPrometheusRulePatchOutput() PrometheusRulePatchOutput
	ToPrometheusRulePatchOutputWithContext(ctx context.Context) PrometheusRulePatchOutput
}

func (*PrometheusRulePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusRulePatch)(nil)).Elem()
}

func (i *PrometheusRulePatch) ToPrometheusRulePatchOutput() PrometheusRulePatchOutput {
	return i.ToPrometheusRulePatchOutputWithContext(context.Background())
}

func (i *PrometheusRulePatch) ToPrometheusRulePatchOutputWithContext(ctx context.Context) PrometheusRulePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusRulePatchOutput)
}

// PrometheusRulePatchArrayInput is an input type that accepts PrometheusRulePatchArray and PrometheusRulePatchArrayOutput values.
// You can construct a concrete instance of `PrometheusRulePatchArrayInput` via:
//
//	PrometheusRulePatchArray{ PrometheusRulePatchArgs{...} }
type PrometheusRulePatchArrayInput interface {
	pulumi.Input

	ToPrometheusRulePatchArrayOutput() PrometheusRulePatchArrayOutput
	ToPrometheusRulePatchArrayOutputWithContext(context.Context) PrometheusRulePatchArrayOutput
}

type PrometheusRulePatchArray []PrometheusRulePatchInput

func (PrometheusRulePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusRulePatch)(nil)).Elem()
}

func (i PrometheusRulePatchArray) ToPrometheusRulePatchArrayOutput() PrometheusRulePatchArrayOutput {
	return i.ToPrometheusRulePatchArrayOutputWithContext(context.Background())
}

func (i PrometheusRulePatchArray) ToPrometheusRulePatchArrayOutputWithContext(ctx context.Context) PrometheusRulePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusRulePatchArrayOutput)
}

// PrometheusRulePatchMapInput is an input type that accepts PrometheusRulePatchMap and PrometheusRulePatchMapOutput values.
// You can construct a concrete instance of `PrometheusRulePatchMapInput` via:
//
//	PrometheusRulePatchMap{ "key": PrometheusRulePatchArgs{...} }
type PrometheusRulePatchMapInput interface {
	pulumi.Input

	ToPrometheusRulePatchMapOutput() PrometheusRulePatchMapOutput
	ToPrometheusRulePatchMapOutputWithContext(context.Context) PrometheusRulePatchMapOutput
}

type PrometheusRulePatchMap map[string]PrometheusRulePatchInput

func (PrometheusRulePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusRulePatch)(nil)).Elem()
}

func (i PrometheusRulePatchMap) ToPrometheusRulePatchMapOutput() PrometheusRulePatchMapOutput {
	return i.ToPrometheusRulePatchMapOutputWithContext(context.Background())
}

func (i PrometheusRulePatchMap) ToPrometheusRulePatchMapOutputWithContext(ctx context.Context) PrometheusRulePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusRulePatchMapOutput)
}

type PrometheusRulePatchOutput struct{ *pulumi.OutputState }

func (PrometheusRulePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusRulePatch)(nil)).Elem()
}

func (o PrometheusRulePatchOutput) ToPrometheusRulePatchOutput() PrometheusRulePatchOutput {
	return o
}

func (o PrometheusRulePatchOutput) ToPrometheusRulePatchOutputWithContext(ctx context.Context) PrometheusRulePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PrometheusRulePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusRulePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PrometheusRulePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusRulePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PrometheusRulePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PrometheusRulePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PrometheusRulePatchOutput) Spec() PrometheusRuleSpecPatchPtrOutput {
	return o.ApplyT(func(v *PrometheusRulePatch) PrometheusRuleSpecPatchPtrOutput { return v.Spec }).(PrometheusRuleSpecPatchPtrOutput)
}

type PrometheusRulePatchArrayOutput struct{ *pulumi.OutputState }

func (PrometheusRulePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusRulePatch)(nil)).Elem()
}

func (o PrometheusRulePatchArrayOutput) ToPrometheusRulePatchArrayOutput() PrometheusRulePatchArrayOutput {
	return o
}

func (o PrometheusRulePatchArrayOutput) ToPrometheusRulePatchArrayOutputWithContext(ctx context.Context) PrometheusRulePatchArrayOutput {
	return o
}

func (o PrometheusRulePatchArrayOutput) Index(i pulumi.IntInput) PrometheusRulePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrometheusRulePatch {
		return vs[0].([]*PrometheusRulePatch)[vs[1].(int)]
	}).(PrometheusRulePatchOutput)
}

type PrometheusRulePatchMapOutput struct{ *pulumi.OutputState }

func (PrometheusRulePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusRulePatch)(nil)).Elem()
}

func (o PrometheusRulePatchMapOutput) ToPrometheusRulePatchMapOutput() PrometheusRulePatchMapOutput {
	return o
}

func (o PrometheusRulePatchMapOutput) ToPrometheusRulePatchMapOutputWithContext(ctx context.Context) PrometheusRulePatchMapOutput {
	return o
}

func (o PrometheusRulePatchMapOutput) MapIndex(k pulumi.StringInput) PrometheusRulePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrometheusRulePatch {
		return vs[0].(map[string]*PrometheusRulePatch)[vs[1].(string)]
	}).(PrometheusRulePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusRulePatchInput)(nil)).Elem(), &PrometheusRulePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusRulePatchArrayInput)(nil)).Elem(), PrometheusRulePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusRulePatchMapInput)(nil)).Elem(), PrometheusRulePatchMap{})
	pulumi.RegisterOutputType(PrometheusRulePatchOutput{})
	pulumi.RegisterOutputType(PrometheusRulePatchArrayOutput{})
	pulumi.RegisterOutputType(PrometheusRulePatchMapOutput{})
}
