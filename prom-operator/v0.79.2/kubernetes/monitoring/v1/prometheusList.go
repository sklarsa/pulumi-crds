// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PrometheusList is a list of Prometheus
type PrometheusList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of prometheuses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PrometheusTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPrometheusList registers a new resource with the given unique name, arguments, and options.
func NewPrometheusList(ctx *pulumi.Context,
	name string, args *PrometheusListArgs, opts ...pulumi.ResourceOption) (*PrometheusList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("PrometheusList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PrometheusList
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:PrometheusList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrometheusList gets an existing PrometheusList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrometheusList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrometheusListState, opts ...pulumi.ResourceOption) (*PrometheusList, error) {
	var resource PrometheusList
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:PrometheusList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrometheusList resources.
type prometheusListState struct {
}

type PrometheusListState struct {
}

func (PrometheusListState) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusListState)(nil)).Elem()
}

type prometheusListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of prometheuses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PrometheusType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PrometheusList resource.
type PrometheusListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of prometheuses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PrometheusTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PrometheusListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusListArgs)(nil)).Elem()
}

type PrometheusListInput interface {
	pulumi.Input

	ToPrometheusListOutput() PrometheusListOutput
	ToPrometheusListOutputWithContext(ctx context.Context) PrometheusListOutput
}

func (*PrometheusList) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusList)(nil)).Elem()
}

func (i *PrometheusList) ToPrometheusListOutput() PrometheusListOutput {
	return i.ToPrometheusListOutputWithContext(context.Background())
}

func (i *PrometheusList) ToPrometheusListOutputWithContext(ctx context.Context) PrometheusListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusListOutput)
}

// PrometheusListArrayInput is an input type that accepts PrometheusListArray and PrometheusListArrayOutput values.
// You can construct a concrete instance of `PrometheusListArrayInput` via:
//
//	PrometheusListArray{ PrometheusListArgs{...} }
type PrometheusListArrayInput interface {
	pulumi.Input

	ToPrometheusListArrayOutput() PrometheusListArrayOutput
	ToPrometheusListArrayOutputWithContext(context.Context) PrometheusListArrayOutput
}

type PrometheusListArray []PrometheusListInput

func (PrometheusListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusList)(nil)).Elem()
}

func (i PrometheusListArray) ToPrometheusListArrayOutput() PrometheusListArrayOutput {
	return i.ToPrometheusListArrayOutputWithContext(context.Background())
}

func (i PrometheusListArray) ToPrometheusListArrayOutputWithContext(ctx context.Context) PrometheusListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusListArrayOutput)
}

// PrometheusListMapInput is an input type that accepts PrometheusListMap and PrometheusListMapOutput values.
// You can construct a concrete instance of `PrometheusListMapInput` via:
//
//	PrometheusListMap{ "key": PrometheusListArgs{...} }
type PrometheusListMapInput interface {
	pulumi.Input

	ToPrometheusListMapOutput() PrometheusListMapOutput
	ToPrometheusListMapOutputWithContext(context.Context) PrometheusListMapOutput
}

type PrometheusListMap map[string]PrometheusListInput

func (PrometheusListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusList)(nil)).Elem()
}

func (i PrometheusListMap) ToPrometheusListMapOutput() PrometheusListMapOutput {
	return i.ToPrometheusListMapOutputWithContext(context.Background())
}

func (i PrometheusListMap) ToPrometheusListMapOutputWithContext(ctx context.Context) PrometheusListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusListMapOutput)
}

type PrometheusListOutput struct{ *pulumi.OutputState }

func (PrometheusListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusList)(nil)).Elem()
}

func (o PrometheusListOutput) ToPrometheusListOutput() PrometheusListOutput {
	return o
}

func (o PrometheusListOutput) ToPrometheusListOutputWithContext(ctx context.Context) PrometheusListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PrometheusListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PrometheusList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of prometheuses. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PrometheusListOutput) Items() PrometheusTypeArrayOutput {
	return o.ApplyT(func(v *PrometheusList) PrometheusTypeArrayOutput { return v.Items }).(PrometheusTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PrometheusListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PrometheusList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PrometheusListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PrometheusList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PrometheusListArrayOutput struct{ *pulumi.OutputState }

func (PrometheusListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusList)(nil)).Elem()
}

func (o PrometheusListArrayOutput) ToPrometheusListArrayOutput() PrometheusListArrayOutput {
	return o
}

func (o PrometheusListArrayOutput) ToPrometheusListArrayOutputWithContext(ctx context.Context) PrometheusListArrayOutput {
	return o
}

func (o PrometheusListArrayOutput) Index(i pulumi.IntInput) PrometheusListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrometheusList {
		return vs[0].([]*PrometheusList)[vs[1].(int)]
	}).(PrometheusListOutput)
}

type PrometheusListMapOutput struct{ *pulumi.OutputState }

func (PrometheusListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusList)(nil)).Elem()
}

func (o PrometheusListMapOutput) ToPrometheusListMapOutput() PrometheusListMapOutput {
	return o
}

func (o PrometheusListMapOutput) ToPrometheusListMapOutputWithContext(ctx context.Context) PrometheusListMapOutput {
	return o
}

func (o PrometheusListMapOutput) MapIndex(k pulumi.StringInput) PrometheusListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrometheusList {
		return vs[0].(map[string]*PrometheusList)[vs[1].(string)]
	}).(PrometheusListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusListInput)(nil)).Elem(), &PrometheusList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusListArrayInput)(nil)).Elem(), PrometheusListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusListMapInput)(nil)).Elem(), PrometheusListMap{})
	pulumi.RegisterOutputType(PrometheusListOutput{})
	pulumi.RegisterOutputType(PrometheusListArrayOutput{})
	pulumi.RegisterOutputType(PrometheusListMapOutput{})
}
