// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The `ThanosRuler` custom resource definition (CRD) defines a desired [Thanos Ruler](https://github.com/thanos-io/thanos/blob/main/docs/components/rule.md) setup to run in a Kubernetes cluster.
//
// A `ThanosRuler` instance requires at least one compatible Prometheus API endpoint (either Thanos Querier or Prometheus services).
//
// The resource defines via label and namespace selectors which `PrometheusRule` objects should be associated to the deployed Thanos Ruler instances.
type ThanosRulerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ThanosRulerSpecPatchPtrOutput   `pulumi:"spec"`
	Status   ThanosRulerStatusPatchPtrOutput `pulumi:"status"`
}

// NewThanosRulerPatch registers a new resource with the given unique name, arguments, and options.
func NewThanosRulerPatch(ctx *pulumi.Context,
	name string, args *ThanosRulerPatchArgs, opts ...pulumi.ResourceOption) (*ThanosRulerPatch, error) {
	if args == nil {
		args = &ThanosRulerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("ThanosRuler")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ThanosRulerPatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:ThanosRulerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetThanosRulerPatch gets an existing ThanosRulerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetThanosRulerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ThanosRulerPatchState, opts ...pulumi.ResourceOption) (*ThanosRulerPatch, error) {
	var resource ThanosRulerPatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:ThanosRulerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ThanosRulerPatch resources.
type thanosRulerPatchState struct {
}

type ThanosRulerPatchState struct {
}

func (ThanosRulerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*thanosRulerPatchState)(nil)).Elem()
}

type thanosRulerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ThanosRulerSpecPatch   `pulumi:"spec"`
}

// The set of arguments for constructing a ThanosRulerPatch resource.
type ThanosRulerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ThanosRulerSpecPatchPtrInput
}

func (ThanosRulerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*thanosRulerPatchArgs)(nil)).Elem()
}

type ThanosRulerPatchInput interface {
	pulumi.Input

	ToThanosRulerPatchOutput() ThanosRulerPatchOutput
	ToThanosRulerPatchOutputWithContext(ctx context.Context) ThanosRulerPatchOutput
}

func (*ThanosRulerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerPatch)(nil)).Elem()
}

func (i *ThanosRulerPatch) ToThanosRulerPatchOutput() ThanosRulerPatchOutput {
	return i.ToThanosRulerPatchOutputWithContext(context.Background())
}

func (i *ThanosRulerPatch) ToThanosRulerPatchOutputWithContext(ctx context.Context) ThanosRulerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerPatchOutput)
}

// ThanosRulerPatchArrayInput is an input type that accepts ThanosRulerPatchArray and ThanosRulerPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerPatchArrayInput` via:
//
//	ThanosRulerPatchArray{ ThanosRulerPatchArgs{...} }
type ThanosRulerPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerPatchArrayOutput() ThanosRulerPatchArrayOutput
	ToThanosRulerPatchArrayOutputWithContext(context.Context) ThanosRulerPatchArrayOutput
}

type ThanosRulerPatchArray []ThanosRulerPatchInput

func (ThanosRulerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThanosRulerPatch)(nil)).Elem()
}

func (i ThanosRulerPatchArray) ToThanosRulerPatchArrayOutput() ThanosRulerPatchArrayOutput {
	return i.ToThanosRulerPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerPatchArray) ToThanosRulerPatchArrayOutputWithContext(ctx context.Context) ThanosRulerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerPatchArrayOutput)
}

// ThanosRulerPatchMapInput is an input type that accepts ThanosRulerPatchMap and ThanosRulerPatchMapOutput values.
// You can construct a concrete instance of `ThanosRulerPatchMapInput` via:
//
//	ThanosRulerPatchMap{ "key": ThanosRulerPatchArgs{...} }
type ThanosRulerPatchMapInput interface {
	pulumi.Input

	ToThanosRulerPatchMapOutput() ThanosRulerPatchMapOutput
	ToThanosRulerPatchMapOutputWithContext(context.Context) ThanosRulerPatchMapOutput
}

type ThanosRulerPatchMap map[string]ThanosRulerPatchInput

func (ThanosRulerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThanosRulerPatch)(nil)).Elem()
}

func (i ThanosRulerPatchMap) ToThanosRulerPatchMapOutput() ThanosRulerPatchMapOutput {
	return i.ToThanosRulerPatchMapOutputWithContext(context.Background())
}

func (i ThanosRulerPatchMap) ToThanosRulerPatchMapOutputWithContext(ctx context.Context) ThanosRulerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerPatchMapOutput)
}

type ThanosRulerPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerPatch)(nil)).Elem()
}

func (o ThanosRulerPatchOutput) ToThanosRulerPatchOutput() ThanosRulerPatchOutput {
	return o
}

func (o ThanosRulerPatchOutput) ToThanosRulerPatchOutputWithContext(ctx context.Context) ThanosRulerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ThanosRulerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ThanosRulerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ThanosRulerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ThanosRulerPatchOutput) Spec() ThanosRulerSpecPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerPatch) ThanosRulerSpecPatchPtrOutput { return v.Spec }).(ThanosRulerSpecPatchPtrOutput)
}

func (o ThanosRulerPatchOutput) Status() ThanosRulerStatusPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerPatch) ThanosRulerStatusPatchPtrOutput { return v.Status }).(ThanosRulerStatusPatchPtrOutput)
}

type ThanosRulerPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ThanosRulerPatch)(nil)).Elem()
}

func (o ThanosRulerPatchArrayOutput) ToThanosRulerPatchArrayOutput() ThanosRulerPatchArrayOutput {
	return o
}

func (o ThanosRulerPatchArrayOutput) ToThanosRulerPatchArrayOutputWithContext(ctx context.Context) ThanosRulerPatchArrayOutput {
	return o
}

func (o ThanosRulerPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ThanosRulerPatch {
		return vs[0].([]*ThanosRulerPatch)[vs[1].(int)]
	}).(ThanosRulerPatchOutput)
}

type ThanosRulerPatchMapOutput struct{ *pulumi.OutputState }

func (ThanosRulerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ThanosRulerPatch)(nil)).Elem()
}

func (o ThanosRulerPatchMapOutput) ToThanosRulerPatchMapOutput() ThanosRulerPatchMapOutput {
	return o
}

func (o ThanosRulerPatchMapOutput) ToThanosRulerPatchMapOutputWithContext(ctx context.Context) ThanosRulerPatchMapOutput {
	return o
}

func (o ThanosRulerPatchMapOutput) MapIndex(k pulumi.StringInput) ThanosRulerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ThanosRulerPatch {
		return vs[0].(map[string]*ThanosRulerPatch)[vs[1].(string)]
	}).(ThanosRulerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerPatchInput)(nil)).Elem(), &ThanosRulerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerPatchArrayInput)(nil)).Elem(), ThanosRulerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerPatchMapInput)(nil)).Elem(), ThanosRulerPatchMap{})
	pulumi.RegisterOutputType(ThanosRulerPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerPatchMapOutput{})
}
