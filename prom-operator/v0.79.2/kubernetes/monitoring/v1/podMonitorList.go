// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PodMonitorList is a list of PodMonitor
type PodMonitorList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of podmonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PodMonitorTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPodMonitorList registers a new resource with the given unique name, arguments, and options.
func NewPodMonitorList(ctx *pulumi.Context,
	name string, args *PodMonitorListArgs, opts ...pulumi.ResourceOption) (*PodMonitorList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("PodMonitorList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PodMonitorList
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:PodMonitorList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPodMonitorList gets an existing PodMonitorList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPodMonitorList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PodMonitorListState, opts ...pulumi.ResourceOption) (*PodMonitorList, error) {
	var resource PodMonitorList
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:PodMonitorList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PodMonitorList resources.
type podMonitorListState struct {
}

type PodMonitorListState struct {
}

func (PodMonitorListState) ElementType() reflect.Type {
	return reflect.TypeOf((*podMonitorListState)(nil)).Elem()
}

type podMonitorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of podmonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PodMonitorType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PodMonitorList resource.
type PodMonitorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of podmonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PodMonitorTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PodMonitorListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*podMonitorListArgs)(nil)).Elem()
}

type PodMonitorListInput interface {
	pulumi.Input

	ToPodMonitorListOutput() PodMonitorListOutput
	ToPodMonitorListOutputWithContext(ctx context.Context) PodMonitorListOutput
}

func (*PodMonitorList) ElementType() reflect.Type {
	return reflect.TypeOf((**PodMonitorList)(nil)).Elem()
}

func (i *PodMonitorList) ToPodMonitorListOutput() PodMonitorListOutput {
	return i.ToPodMonitorListOutputWithContext(context.Background())
}

func (i *PodMonitorList) ToPodMonitorListOutputWithContext(ctx context.Context) PodMonitorListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorListOutput)
}

// PodMonitorListArrayInput is an input type that accepts PodMonitorListArray and PodMonitorListArrayOutput values.
// You can construct a concrete instance of `PodMonitorListArrayInput` via:
//
//	PodMonitorListArray{ PodMonitorListArgs{...} }
type PodMonitorListArrayInput interface {
	pulumi.Input

	ToPodMonitorListArrayOutput() PodMonitorListArrayOutput
	ToPodMonitorListArrayOutputWithContext(context.Context) PodMonitorListArrayOutput
}

type PodMonitorListArray []PodMonitorListInput

func (PodMonitorListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodMonitorList)(nil)).Elem()
}

func (i PodMonitorListArray) ToPodMonitorListArrayOutput() PodMonitorListArrayOutput {
	return i.ToPodMonitorListArrayOutputWithContext(context.Background())
}

func (i PodMonitorListArray) ToPodMonitorListArrayOutputWithContext(ctx context.Context) PodMonitorListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorListArrayOutput)
}

// PodMonitorListMapInput is an input type that accepts PodMonitorListMap and PodMonitorListMapOutput values.
// You can construct a concrete instance of `PodMonitorListMapInput` via:
//
//	PodMonitorListMap{ "key": PodMonitorListArgs{...} }
type PodMonitorListMapInput interface {
	pulumi.Input

	ToPodMonitorListMapOutput() PodMonitorListMapOutput
	ToPodMonitorListMapOutputWithContext(context.Context) PodMonitorListMapOutput
}

type PodMonitorListMap map[string]PodMonitorListInput

func (PodMonitorListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodMonitorList)(nil)).Elem()
}

func (i PodMonitorListMap) ToPodMonitorListMapOutput() PodMonitorListMapOutput {
	return i.ToPodMonitorListMapOutputWithContext(context.Background())
}

func (i PodMonitorListMap) ToPodMonitorListMapOutputWithContext(ctx context.Context) PodMonitorListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorListMapOutput)
}

type PodMonitorListOutput struct{ *pulumi.OutputState }

func (PodMonitorListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodMonitorList)(nil)).Elem()
}

func (o PodMonitorListOutput) ToPodMonitorListOutput() PodMonitorListOutput {
	return o
}

func (o PodMonitorListOutput) ToPodMonitorListOutputWithContext(ctx context.Context) PodMonitorListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodMonitorListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PodMonitorList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of podmonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PodMonitorListOutput) Items() PodMonitorTypeArrayOutput {
	return o.ApplyT(func(v *PodMonitorList) PodMonitorTypeArrayOutput { return v.Items }).(PodMonitorTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodMonitorListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PodMonitorList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodMonitorListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PodMonitorList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PodMonitorListArrayOutput struct{ *pulumi.OutputState }

func (PodMonitorListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodMonitorList)(nil)).Elem()
}

func (o PodMonitorListArrayOutput) ToPodMonitorListArrayOutput() PodMonitorListArrayOutput {
	return o
}

func (o PodMonitorListArrayOutput) ToPodMonitorListArrayOutputWithContext(ctx context.Context) PodMonitorListArrayOutput {
	return o
}

func (o PodMonitorListArrayOutput) Index(i pulumi.IntInput) PodMonitorListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PodMonitorList {
		return vs[0].([]*PodMonitorList)[vs[1].(int)]
	}).(PodMonitorListOutput)
}

type PodMonitorListMapOutput struct{ *pulumi.OutputState }

func (PodMonitorListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodMonitorList)(nil)).Elem()
}

func (o PodMonitorListMapOutput) ToPodMonitorListMapOutput() PodMonitorListMapOutput {
	return o
}

func (o PodMonitorListMapOutput) ToPodMonitorListMapOutputWithContext(ctx context.Context) PodMonitorListMapOutput {
	return o
}

func (o PodMonitorListMapOutput) MapIndex(k pulumi.StringInput) PodMonitorListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PodMonitorList {
		return vs[0].(map[string]*PodMonitorList)[vs[1].(string)]
	}).(PodMonitorListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorListInput)(nil)).Elem(), &PodMonitorList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorListArrayInput)(nil)).Elem(), PodMonitorListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorListMapInput)(nil)).Elem(), PodMonitorListMap{})
	pulumi.RegisterOutputType(PodMonitorListOutput{})
	pulumi.RegisterOutputType(PodMonitorListArrayOutput{})
	pulumi.RegisterOutputType(PodMonitorListMapOutput{})
}
