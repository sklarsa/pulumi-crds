// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `ServiceMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of services.
// Among other things, it allows to specify:
// * The services to scrape via label selectors.
// * The container ports to scrape.
// * Authentication credentials to use.
// * Target and metric relabeling.
//
// `Prometheus` and `PrometheusAgent` objects select `ServiceMonitor` objects using label and namespace selectors.
type ServiceMonitor struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput  `pulumi:"metadata"`
	Spec     ServiceMonitorSpecOutput `pulumi:"spec"`
}

// NewServiceMonitor registers a new resource with the given unique name, arguments, and options.
func NewServiceMonitor(ctx *pulumi.Context,
	name string, args *ServiceMonitorArgs, opts ...pulumi.ResourceOption) (*ServiceMonitor, error) {
	if args == nil {
		args = &ServiceMonitorArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("ServiceMonitor")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ServiceMonitor
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:ServiceMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceMonitor gets an existing ServiceMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceMonitorState, opts ...pulumi.ResourceOption) (*ServiceMonitor, error) {
	var resource ServiceMonitor
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:ServiceMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceMonitor resources.
type serviceMonitorState struct {
}

type ServiceMonitorState struct {
}

func (ServiceMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceMonitorState)(nil)).Elem()
}

type serviceMonitorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta  `pulumi:"metadata"`
	Spec     *ServiceMonitorSpec `pulumi:"spec"`
}

// The set of arguments for constructing a ServiceMonitor resource.
type ServiceMonitorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     ServiceMonitorSpecPtrInput
}

func (ServiceMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceMonitorArgs)(nil)).Elem()
}

type ServiceMonitorInput interface {
	pulumi.Input

	ToServiceMonitorOutput() ServiceMonitorOutput
	ToServiceMonitorOutputWithContext(ctx context.Context) ServiceMonitorOutput
}

func (*ServiceMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMonitor)(nil)).Elem()
}

func (i *ServiceMonitor) ToServiceMonitorOutput() ServiceMonitorOutput {
	return i.ToServiceMonitorOutputWithContext(context.Background())
}

func (i *ServiceMonitor) ToServiceMonitorOutputWithContext(ctx context.Context) ServiceMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorOutput)
}

// ServiceMonitorArrayInput is an input type that accepts ServiceMonitorArray and ServiceMonitorArrayOutput values.
// You can construct a concrete instance of `ServiceMonitorArrayInput` via:
//
//	ServiceMonitorArray{ ServiceMonitorArgs{...} }
type ServiceMonitorArrayInput interface {
	pulumi.Input

	ToServiceMonitorArrayOutput() ServiceMonitorArrayOutput
	ToServiceMonitorArrayOutputWithContext(context.Context) ServiceMonitorArrayOutput
}

type ServiceMonitorArray []ServiceMonitorInput

func (ServiceMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceMonitor)(nil)).Elem()
}

func (i ServiceMonitorArray) ToServiceMonitorArrayOutput() ServiceMonitorArrayOutput {
	return i.ToServiceMonitorArrayOutputWithContext(context.Background())
}

func (i ServiceMonitorArray) ToServiceMonitorArrayOutputWithContext(ctx context.Context) ServiceMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorArrayOutput)
}

// ServiceMonitorMapInput is an input type that accepts ServiceMonitorMap and ServiceMonitorMapOutput values.
// You can construct a concrete instance of `ServiceMonitorMapInput` via:
//
//	ServiceMonitorMap{ "key": ServiceMonitorArgs{...} }
type ServiceMonitorMapInput interface {
	pulumi.Input

	ToServiceMonitorMapOutput() ServiceMonitorMapOutput
	ToServiceMonitorMapOutputWithContext(context.Context) ServiceMonitorMapOutput
}

type ServiceMonitorMap map[string]ServiceMonitorInput

func (ServiceMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceMonitor)(nil)).Elem()
}

func (i ServiceMonitorMap) ToServiceMonitorMapOutput() ServiceMonitorMapOutput {
	return i.ToServiceMonitorMapOutputWithContext(context.Background())
}

func (i ServiceMonitorMap) ToServiceMonitorMapOutputWithContext(ctx context.Context) ServiceMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorMapOutput)
}

type ServiceMonitorOutput struct{ *pulumi.OutputState }

func (ServiceMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMonitor)(nil)).Elem()
}

func (o ServiceMonitorOutput) ToServiceMonitorOutput() ServiceMonitorOutput {
	return o
}

func (o ServiceMonitorOutput) ToServiceMonitorOutputWithContext(ctx context.Context) ServiceMonitorOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceMonitorOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceMonitor) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceMonitorOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceMonitor) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ServiceMonitorOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *ServiceMonitor) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o ServiceMonitorOutput) Spec() ServiceMonitorSpecOutput {
	return o.ApplyT(func(v *ServiceMonitor) ServiceMonitorSpecOutput { return v.Spec }).(ServiceMonitorSpecOutput)
}

type ServiceMonitorArrayOutput struct{ *pulumi.OutputState }

func (ServiceMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceMonitor)(nil)).Elem()
}

func (o ServiceMonitorArrayOutput) ToServiceMonitorArrayOutput() ServiceMonitorArrayOutput {
	return o
}

func (o ServiceMonitorArrayOutput) ToServiceMonitorArrayOutputWithContext(ctx context.Context) ServiceMonitorArrayOutput {
	return o
}

func (o ServiceMonitorArrayOutput) Index(i pulumi.IntInput) ServiceMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceMonitor {
		return vs[0].([]*ServiceMonitor)[vs[1].(int)]
	}).(ServiceMonitorOutput)
}

type ServiceMonitorMapOutput struct{ *pulumi.OutputState }

func (ServiceMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceMonitor)(nil)).Elem()
}

func (o ServiceMonitorMapOutput) ToServiceMonitorMapOutput() ServiceMonitorMapOutput {
	return o
}

func (o ServiceMonitorMapOutput) ToServiceMonitorMapOutputWithContext(ctx context.Context) ServiceMonitorMapOutput {
	return o
}

func (o ServiceMonitorMapOutput) MapIndex(k pulumi.StringInput) ServiceMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceMonitor {
		return vs[0].(map[string]*ServiceMonitor)[vs[1].(string)]
	}).(ServiceMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorInput)(nil)).Elem(), &ServiceMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorArrayInput)(nil)).Elem(), ServiceMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorMapInput)(nil)).Elem(), ServiceMonitorMap{})
	pulumi.RegisterOutputType(ServiceMonitorOutput{})
	pulumi.RegisterOutputType(ServiceMonitorArrayOutput{})
	pulumi.RegisterOutputType(ServiceMonitorMapOutput{})
}
