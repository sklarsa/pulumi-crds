// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

var _ = utilities.GetEnvOrDefault

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersReadinessProbeGrpcPatch struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest
	// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service *string `pulumi:"service"`
}

// ThanosRulerSpecInitContainersReadinessProbeGrpcPatchInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs and ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeGrpcPatchInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs{...}
type ThanosRulerSpecInitContainersReadinessProbeGrpcPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput
	ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest
	// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeGrpcPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput)
}

func (i ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput).ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs, ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtr and ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput
	ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput
}

type thanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrType ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs

func ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtr(v *ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrInput {
	return (*thanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeGrpcPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrType) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrType) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput)
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeGrpcPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersReadinessProbeGrpcPatch) *ThanosRulerSpecInitContainersReadinessProbeGrpcPatch {
		return &v
	}).(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeGrpcPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest
// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeGrpcPatch) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeGrpcPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput) Elem() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeGrpcPatch) ThanosRulerSpecInitContainersReadinessProbeGrpcPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersReadinessProbeGrpcPatch
		return ret
	}).(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeGrpcPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest
// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeGrpcPatch) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersReadinessProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs and ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs{...}
type ThanosRulerSpecInitContainersReadinessProbeHttpGetInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput)
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput).ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs, ThanosRulerSpecInitContainersReadinessProbeHttpGetPtr and ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrInput` via:
//
//	        ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput
}

type thanosRulerSpecInitContainersReadinessProbeHttpGetPtrType ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs

func ThanosRulerSpecInitContainersReadinessProbeHttpGetPtr(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs) ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrInput {
	return (*thanosRulerSpecInitContainersReadinessProbeHttpGetPtrType)(v)
}

func (*thanosRulerSpecInitContainersReadinessProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersReadinessProbeHttpGetPtrType) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersReadinessProbeHttpGetPtrType) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o.ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersReadinessProbeHttpGet) *ThanosRulerSpecInitContainersReadinessProbeHttpGet {
		return &v
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) HttpHeaders() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGet) []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGet) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeHttpGet)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) Elem() ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGet) ThanosRulerSpecInitContainersReadinessProbeHttpGet {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersReadinessProbeHttpGet
		return ret
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) HttpHeaders() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGet) []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGet) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name *string `pulumi:"name"`
	// The header field value
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs and ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs{...}
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput)
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray and ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray{ ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs{...} }
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput
}

type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name.
// This will be canonicalized upon output, so case-variant names will be understood as the same header.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header field value
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders {
		return vs[0].([]ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name *string `pulumi:"name"`
	// The header field value
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs and ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs{...}
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput)
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArray and ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArray{ ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs{...} }
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput
}

type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArray []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchInput

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArray) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArray) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput {
	return o
}

// The header field name.
// This will be canonicalized upon output, so case-variant names will be understood as the same header.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header field value
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
		return vs[0].([]ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs and ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs{...}
type ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput)
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput).ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs, ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtr and ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput
	ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput
}

type thanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrType ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs

func ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtr(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrInput {
	return (*thanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrType) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrType) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch {
		return &v
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) HttpHeaders() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) Elem() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch
		return ret
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) HttpHeaders() ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) []ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatch {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// Periodic probe of container service readiness.
// Container will be removed from service endpoints if the probe fails.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersReadinessProbePatch struct {
	Exec *ThanosRulerSpecInitContainersReadinessProbeExecPatch `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *int                                                     `pulumi:"failureThreshold"`
	Grpc             *ThanosRulerSpecInitContainersReadinessProbeGrpcPatch    `pulumi:"grpc"`
	HttpGet          *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int                                                       `pulumi:"successThreshold"`
	TcpSocket        *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
	// The grace period is the duration in seconds after the processes running in the pod are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
	// value overrides the value provided by the pod spec.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down).
	// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
	// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ThanosRulerSpecInitContainersReadinessProbePatchInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbePatchArgs and ThanosRulerSpecInitContainersReadinessProbePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbePatchInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbePatchArgs{...}
type ThanosRulerSpecInitContainersReadinessProbePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbePatchOutput() ThanosRulerSpecInitContainersReadinessProbePatchOutput
	ToThanosRulerSpecInitContainersReadinessProbePatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbePatchOutput
}

// Periodic probe of container service readiness.
// Container will be removed from service endpoints if the probe fails.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersReadinessProbePatchArgs struct {
	Exec ThanosRulerSpecInitContainersReadinessProbeExecPatchPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput                                              `pulumi:"failureThreshold"`
	Grpc             ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrInput    `pulumi:"grpc"`
	HttpGet          ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput                                                `pulumi:"successThreshold"`
	TcpSocket        ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrInput `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
	// The grace period is the duration in seconds after the processes running in the pod are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
	// value overrides the value provided by the pod spec.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down).
	// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
	// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ThanosRulerSpecInitContainersReadinessProbePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbePatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbePatchArgs) ToThanosRulerSpecInitContainersReadinessProbePatchOutput() ThanosRulerSpecInitContainersReadinessProbePatchOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbePatchArgs) ToThanosRulerSpecInitContainersReadinessProbePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbePatchOutput)
}

func (i ThanosRulerSpecInitContainersReadinessProbePatchArgs) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbePatchArgs) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbePatchOutput).ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersReadinessProbePatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbePatchArgs, ThanosRulerSpecInitContainersReadinessProbePatchPtr and ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbePatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersReadinessProbePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersReadinessProbePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput
	ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput
}

type thanosRulerSpecInitContainersReadinessProbePatchPtrType ThanosRulerSpecInitContainersReadinessProbePatchArgs

func ThanosRulerSpecInitContainersReadinessProbePatchPtr(v *ThanosRulerSpecInitContainersReadinessProbePatchArgs) ThanosRulerSpecInitContainersReadinessProbePatchPtrInput {
	return (*thanosRulerSpecInitContainersReadinessProbePatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersReadinessProbePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbePatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersReadinessProbePatchPtrType) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersReadinessProbePatchPtrType) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput)
}

// Periodic probe of container service readiness.
// Container will be removed from service endpoints if the probe fails.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersReadinessProbePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) ToThanosRulerSpecInitContainersReadinessProbePatchOutput() ThanosRulerSpecInitContainersReadinessProbePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) ToThanosRulerSpecInitContainersReadinessProbePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbePatch {
		return &v
	}).(ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) Exec() ThanosRulerSpecInitContainersReadinessProbeExecPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeExecPatch {
		return v.Exec
	}).(ThanosRulerSpecInitContainersReadinessProbeExecPatchPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.
// Defaults to 3. Minimum value is 1.
func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) Grpc() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeGrpcPatch {
		return v.Grpc
	}).(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) HttpGet() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch {
		return v.HttpGet
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe.
// Default to 10 seconds. Minimum value is 1.
func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed.
// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) TcpSocket() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch {
		return v.TcpSocket
	}).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
// The grace period is the duration in seconds after the processes running in the pod are sent
// a termination signal and the time when the processes are forcibly halted with a kill signal.
// Set this value longer than the expected cleanup time for your process.
// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
// value overrides the value provided by the pod spec.
// Value must be non-negative integer. The value zero indicates stop immediately via
// the kill signal (no opportunity to shut down).
// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is 1.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersReadinessProbePatchOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbePatch) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) Elem() ThanosRulerSpecInitContainersReadinessProbePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) ThanosRulerSpecInitContainersReadinessProbePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersReadinessProbePatch
		return ret
	}).(ThanosRulerSpecInitContainersReadinessProbePatchOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) Exec() ThanosRulerSpecInitContainersReadinessProbeExecPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeExecPatch {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ThanosRulerSpecInitContainersReadinessProbeExecPatchPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.
// Defaults to 3. Minimum value is 1.
func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) Grpc() ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeGrpcPatch {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) HttpGet() ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeHttpGetPatch {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe.
// Default to 10 seconds. Minimum value is 1.
func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed.
// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) TcpSocket() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
// The grace period is the duration in seconds after the processes running in the pod are sent
// a termination signal and the time when the processes are forcibly halted with a kill signal.
// Set this value longer than the expected cleanup time for your process.
// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
// value overrides the value provided by the pod spec.
// Value must be non-negative integer. The value zero indicates stop immediately via
// the kill signal (no opportunity to shut down).
// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is 1.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersReadinessProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
}

// ThanosRulerSpecInitContainersReadinessProbeTcpSocketInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs and ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeTcpSocketInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs{...}
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput
	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
}

func (ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput)
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput).ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs, ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtr and ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrInput` via:
//
//	        ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput
	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput
}

type thanosRulerSpecInitContainersReadinessProbeTcpSocketPtrType ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs

func ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtr(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrInput {
	return (*thanosRulerSpecInitContainersReadinessProbeTcpSocketPtrType)(v)
}

func (*thanosRulerSpecInitContainersReadinessProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersReadinessProbeTcpSocketPtrType) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersReadinessProbeTcpSocketPtrType) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersReadinessProbeTcpSocket) *ThanosRulerSpecInitContainersReadinessProbeTcpSocket {
		return &v
	}).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeTcpSocket) interface{} { return v.Port }).(pulumi.AnyOutput)
}

type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeTcpSocket)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput) Elem() ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocket) ThanosRulerSpecInitContainersReadinessProbeTcpSocket {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersReadinessProbeTcpSocket
		return ret
	}).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocket) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
}

// ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs and ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchInput` via:
//
//	ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs{...}
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput
	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
}

func (ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput)
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput).ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs, ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtr and ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput
	ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput
}

type thanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrType ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs

func ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtr(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrInput {
	return (*thanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrType) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrType) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch) *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch {
		return &v
	}).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch) interface{} { return v.Port }).(pulumi.AnyOutput)
}

type ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput) ToThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput) Elem() ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch) ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch
		return ret
	}).(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// ContainerResizePolicy represents resource resize policy for the container.
type ThanosRulerSpecInitContainersResizePolicy struct {
	// Name of the resource to which this resource resize policy applies.
	// Supported values: cpu, memory.
	ResourceName *string `pulumi:"resourceName"`
	// Restart policy to apply when specified resource is resized.
	// If not specified, it defaults to NotRequired.
	RestartPolicy *string `pulumi:"restartPolicy"`
}

// ThanosRulerSpecInitContainersResizePolicyInput is an input type that accepts ThanosRulerSpecInitContainersResizePolicyArgs and ThanosRulerSpecInitContainersResizePolicyOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResizePolicyInput` via:
//
//	ThanosRulerSpecInitContainersResizePolicyArgs{...}
type ThanosRulerSpecInitContainersResizePolicyInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResizePolicyOutput() ThanosRulerSpecInitContainersResizePolicyOutput
	ToThanosRulerSpecInitContainersResizePolicyOutputWithContext(context.Context) ThanosRulerSpecInitContainersResizePolicyOutput
}

// ContainerResizePolicy represents resource resize policy for the container.
type ThanosRulerSpecInitContainersResizePolicyArgs struct {
	// Name of the resource to which this resource resize policy applies.
	// Supported values: cpu, memory.
	ResourceName pulumi.StringPtrInput `pulumi:"resourceName"`
	// Restart policy to apply when specified resource is resized.
	// If not specified, it defaults to NotRequired.
	RestartPolicy pulumi.StringPtrInput `pulumi:"restartPolicy"`
}

func (ThanosRulerSpecInitContainersResizePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicy)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResizePolicyArgs) ToThanosRulerSpecInitContainersResizePolicyOutput() ThanosRulerSpecInitContainersResizePolicyOutput {
	return i.ToThanosRulerSpecInitContainersResizePolicyOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResizePolicyArgs) ToThanosRulerSpecInitContainersResizePolicyOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResizePolicyOutput)
}

// ThanosRulerSpecInitContainersResizePolicyArrayInput is an input type that accepts ThanosRulerSpecInitContainersResizePolicyArray and ThanosRulerSpecInitContainersResizePolicyArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResizePolicyArrayInput` via:
//
//	ThanosRulerSpecInitContainersResizePolicyArray{ ThanosRulerSpecInitContainersResizePolicyArgs{...} }
type ThanosRulerSpecInitContainersResizePolicyArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResizePolicyArrayOutput() ThanosRulerSpecInitContainersResizePolicyArrayOutput
	ToThanosRulerSpecInitContainersResizePolicyArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersResizePolicyArrayOutput
}

type ThanosRulerSpecInitContainersResizePolicyArray []ThanosRulerSpecInitContainersResizePolicyInput

func (ThanosRulerSpecInitContainersResizePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResizePolicy)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResizePolicyArray) ToThanosRulerSpecInitContainersResizePolicyArrayOutput() ThanosRulerSpecInitContainersResizePolicyArrayOutput {
	return i.ToThanosRulerSpecInitContainersResizePolicyArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResizePolicyArray) ToThanosRulerSpecInitContainersResizePolicyArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResizePolicyArrayOutput)
}

// ContainerResizePolicy represents resource resize policy for the container.
type ThanosRulerSpecInitContainersResizePolicyOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResizePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicy)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResizePolicyOutput) ToThanosRulerSpecInitContainersResizePolicyOutput() ThanosRulerSpecInitContainersResizePolicyOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResizePolicyOutput) ToThanosRulerSpecInitContainersResizePolicyOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyOutput {
	return o
}

// Name of the resource to which this resource resize policy applies.
// Supported values: cpu, memory.
func (o ThanosRulerSpecInitContainersResizePolicyOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResizePolicy) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// Restart policy to apply when specified resource is resized.
// If not specified, it defaults to NotRequired.
func (o ThanosRulerSpecInitContainersResizePolicyOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResizePolicy) *string { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersResizePolicyArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResizePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResizePolicy)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResizePolicyArrayOutput) ToThanosRulerSpecInitContainersResizePolicyArrayOutput() ThanosRulerSpecInitContainersResizePolicyArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResizePolicyArrayOutput) ToThanosRulerSpecInitContainersResizePolicyArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResizePolicyArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersResizePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersResizePolicy {
		return vs[0].([]ThanosRulerSpecInitContainersResizePolicy)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersResizePolicyOutput)
}

// ContainerResizePolicy represents resource resize policy for the container.
type ThanosRulerSpecInitContainersResizePolicyPatch struct {
	// Name of the resource to which this resource resize policy applies.
	// Supported values: cpu, memory.
	ResourceName *string `pulumi:"resourceName"`
	// Restart policy to apply when specified resource is resized.
	// If not specified, it defaults to NotRequired.
	RestartPolicy *string `pulumi:"restartPolicy"`
}

// ThanosRulerSpecInitContainersResizePolicyPatchInput is an input type that accepts ThanosRulerSpecInitContainersResizePolicyPatchArgs and ThanosRulerSpecInitContainersResizePolicyPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResizePolicyPatchInput` via:
//
//	ThanosRulerSpecInitContainersResizePolicyPatchArgs{...}
type ThanosRulerSpecInitContainersResizePolicyPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResizePolicyPatchOutput() ThanosRulerSpecInitContainersResizePolicyPatchOutput
	ToThanosRulerSpecInitContainersResizePolicyPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersResizePolicyPatchOutput
}

// ContainerResizePolicy represents resource resize policy for the container.
type ThanosRulerSpecInitContainersResizePolicyPatchArgs struct {
	// Name of the resource to which this resource resize policy applies.
	// Supported values: cpu, memory.
	ResourceName pulumi.StringPtrInput `pulumi:"resourceName"`
	// Restart policy to apply when specified resource is resized.
	// If not specified, it defaults to NotRequired.
	RestartPolicy pulumi.StringPtrInput `pulumi:"restartPolicy"`
}

func (ThanosRulerSpecInitContainersResizePolicyPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicyPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResizePolicyPatchArgs) ToThanosRulerSpecInitContainersResizePolicyPatchOutput() ThanosRulerSpecInitContainersResizePolicyPatchOutput {
	return i.ToThanosRulerSpecInitContainersResizePolicyPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResizePolicyPatchArgs) ToThanosRulerSpecInitContainersResizePolicyPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResizePolicyPatchOutput)
}

// ThanosRulerSpecInitContainersResizePolicyPatchArrayInput is an input type that accepts ThanosRulerSpecInitContainersResizePolicyPatchArray and ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResizePolicyPatchArrayInput` via:
//
//	ThanosRulerSpecInitContainersResizePolicyPatchArray{ ThanosRulerSpecInitContainersResizePolicyPatchArgs{...} }
type ThanosRulerSpecInitContainersResizePolicyPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResizePolicyPatchArrayOutput() ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput
	ToThanosRulerSpecInitContainersResizePolicyPatchArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput
}

type ThanosRulerSpecInitContainersResizePolicyPatchArray []ThanosRulerSpecInitContainersResizePolicyPatchInput

func (ThanosRulerSpecInitContainersResizePolicyPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResizePolicyPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResizePolicyPatchArray) ToThanosRulerSpecInitContainersResizePolicyPatchArrayOutput() ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput {
	return i.ToThanosRulerSpecInitContainersResizePolicyPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResizePolicyPatchArray) ToThanosRulerSpecInitContainersResizePolicyPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput)
}

// ContainerResizePolicy represents resource resize policy for the container.
type ThanosRulerSpecInitContainersResizePolicyPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResizePolicyPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicyPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResizePolicyPatchOutput) ToThanosRulerSpecInitContainersResizePolicyPatchOutput() ThanosRulerSpecInitContainersResizePolicyPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResizePolicyPatchOutput) ToThanosRulerSpecInitContainersResizePolicyPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyPatchOutput {
	return o
}

// Name of the resource to which this resource resize policy applies.
// Supported values: cpu, memory.
func (o ThanosRulerSpecInitContainersResizePolicyPatchOutput) ResourceName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResizePolicyPatch) *string { return v.ResourceName }).(pulumi.StringPtrOutput)
}

// Restart policy to apply when specified resource is resized.
// If not specified, it defaults to NotRequired.
func (o ThanosRulerSpecInitContainersResizePolicyPatchOutput) RestartPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResizePolicyPatch) *string { return v.RestartPolicy }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResizePolicyPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput) ToThanosRulerSpecInitContainersResizePolicyPatchArrayOutput() ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput) ToThanosRulerSpecInitContainersResizePolicyPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersResizePolicyPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersResizePolicyPatch {
		return vs[0].([]ThanosRulerSpecInitContainersResizePolicyPatch)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersResizePolicyPatchOutput)
}

// Compute Resources required by this container.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ThanosRulerSpecInitContainersResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims []ThanosRulerSpecInitContainersResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecInitContainersResourcesInput is an input type that accepts ThanosRulerSpecInitContainersResourcesArgs and ThanosRulerSpecInitContainersResourcesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesInput` via:
//
//	ThanosRulerSpecInitContainersResourcesArgs{...}
type ThanosRulerSpecInitContainersResourcesInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesOutput() ThanosRulerSpecInitContainersResourcesOutput
	ToThanosRulerSpecInitContainersResourcesOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesOutput
}

// Compute Resources required by this container.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ThanosRulerSpecInitContainersResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims ThanosRulerSpecInitContainersResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecInitContainersResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResources)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResourcesArgs) ToThanosRulerSpecInitContainersResourcesOutput() ThanosRulerSpecInitContainersResourcesOutput {
	return i.ToThanosRulerSpecInitContainersResourcesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesArgs) ToThanosRulerSpecInitContainersResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesOutput)
}

func (i ThanosRulerSpecInitContainersResourcesArgs) ToThanosRulerSpecInitContainersResourcesPtrOutput() ThanosRulerSpecInitContainersResourcesPtrOutput {
	return i.ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesArgs) ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesOutput).ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersResourcesPtrInput is an input type that accepts ThanosRulerSpecInitContainersResourcesArgs, ThanosRulerSpecInitContainersResourcesPtr and ThanosRulerSpecInitContainersResourcesPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesPtrInput` via:
//
//	        ThanosRulerSpecInitContainersResourcesArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersResourcesPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesPtrOutput() ThanosRulerSpecInitContainersResourcesPtrOutput
	ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesPtrOutput
}

type thanosRulerSpecInitContainersResourcesPtrType ThanosRulerSpecInitContainersResourcesArgs

func ThanosRulerSpecInitContainersResourcesPtr(v *ThanosRulerSpecInitContainersResourcesArgs) ThanosRulerSpecInitContainersResourcesPtrInput {
	return (*thanosRulerSpecInitContainersResourcesPtrType)(v)
}

func (*thanosRulerSpecInitContainersResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersResources)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersResourcesPtrType) ToThanosRulerSpecInitContainersResourcesPtrOutput() ThanosRulerSpecInitContainersResourcesPtrOutput {
	return i.ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersResourcesPtrType) ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesPtrOutput)
}

// Compute Resources required by this container.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ThanosRulerSpecInitContainersResourcesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResources)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesOutput) ToThanosRulerSpecInitContainersResourcesOutput() ThanosRulerSpecInitContainersResourcesOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesOutput) ToThanosRulerSpecInitContainersResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesOutput) ToThanosRulerSpecInitContainersResourcesPtrOutput() ThanosRulerSpecInitContainersResourcesPtrOutput {
	return o.ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersResourcesOutput) ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersResources) *ThanosRulerSpecInitContainersResources {
		return &v
	}).(ThanosRulerSpecInitContainersResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecInitContainersResourcesOutput) Claims() ThanosRulerSpecInitContainersResourcesClaimsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResources) []ThanosRulerSpecInitContainersResourcesClaims {
		return v.Claims
	}).(ThanosRulerSpecInitContainersResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type ThanosRulerSpecInitContainersResourcesPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersResources)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesPtrOutput) ToThanosRulerSpecInitContainersResourcesPtrOutput() ThanosRulerSpecInitContainersResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesPtrOutput) ToThanosRulerSpecInitContainersResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesPtrOutput) Elem() ThanosRulerSpecInitContainersResourcesOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResources) ThanosRulerSpecInitContainersResources {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersResources
		return ret
	}).(ThanosRulerSpecInitContainersResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecInitContainersResourcesPtrOutput) Claims() ThanosRulerSpecInitContainersResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResources) []ThanosRulerSpecInitContainersResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(ThanosRulerSpecInitContainersResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecInitContainersResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name *string `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request *string `pulumi:"request"`
}

// ThanosRulerSpecInitContainersResourcesClaimsInput is an input type that accepts ThanosRulerSpecInitContainersResourcesClaimsArgs and ThanosRulerSpecInitContainersResourcesClaimsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesClaimsInput` via:
//
//	ThanosRulerSpecInitContainersResourcesClaimsArgs{...}
type ThanosRulerSpecInitContainersResourcesClaimsInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesClaimsOutput() ThanosRulerSpecInitContainersResourcesClaimsOutput
	ToThanosRulerSpecInitContainersResourcesClaimsOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecInitContainersResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request pulumi.StringPtrInput `pulumi:"request"`
}

func (ThanosRulerSpecInitContainersResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaims)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResourcesClaimsArgs) ToThanosRulerSpecInitContainersResourcesClaimsOutput() ThanosRulerSpecInitContainersResourcesClaimsOutput {
	return i.ToThanosRulerSpecInitContainersResourcesClaimsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesClaimsArgs) ToThanosRulerSpecInitContainersResourcesClaimsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesClaimsOutput)
}

// ThanosRulerSpecInitContainersResourcesClaimsArrayInput is an input type that accepts ThanosRulerSpecInitContainersResourcesClaimsArray and ThanosRulerSpecInitContainersResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesClaimsArrayInput` via:
//
//	ThanosRulerSpecInitContainersResourcesClaimsArray{ ThanosRulerSpecInitContainersResourcesClaimsArgs{...} }
type ThanosRulerSpecInitContainersResourcesClaimsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesClaimsArrayOutput() ThanosRulerSpecInitContainersResourcesClaimsArrayOutput
	ToThanosRulerSpecInitContainersResourcesClaimsArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesClaimsArrayOutput
}

type ThanosRulerSpecInitContainersResourcesClaimsArray []ThanosRulerSpecInitContainersResourcesClaimsInput

func (ThanosRulerSpecInitContainersResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResourcesClaims)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResourcesClaimsArray) ToThanosRulerSpecInitContainersResourcesClaimsArrayOutput() ThanosRulerSpecInitContainersResourcesClaimsArrayOutput {
	return i.ToThanosRulerSpecInitContainersResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesClaimsArray) ToThanosRulerSpecInitContainersResourcesClaimsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecInitContainersResourcesClaimsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaims)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesClaimsOutput) ToThanosRulerSpecInitContainersResourcesClaimsOutput() ThanosRulerSpecInitContainersResourcesClaimsOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesClaimsOutput) ToThanosRulerSpecInitContainersResourcesClaimsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of
// the Pod where this field is used. It makes that resource available
// inside a container.
func (o ThanosRulerSpecInitContainersResourcesClaimsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResourcesClaims) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Request is the name chosen for a request in the referenced claim.
// If empty, everything from the claim is made available, otherwise
// only the result of this request.
func (o ThanosRulerSpecInitContainersResourcesClaimsOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResourcesClaims) *string { return v.Request }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResourcesClaims)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesClaimsArrayOutput) ToThanosRulerSpecInitContainersResourcesClaimsArrayOutput() ThanosRulerSpecInitContainersResourcesClaimsArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesClaimsArrayOutput) ToThanosRulerSpecInitContainersResourcesClaimsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesClaimsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersResourcesClaims {
		return vs[0].([]ThanosRulerSpecInitContainersResourcesClaims)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersResourcesClaimsOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecInitContainersResourcesClaimsPatch struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name *string `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request *string `pulumi:"request"`
}

// ThanosRulerSpecInitContainersResourcesClaimsPatchInput is an input type that accepts ThanosRulerSpecInitContainersResourcesClaimsPatchArgs and ThanosRulerSpecInitContainersResourcesClaimsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesClaimsPatchInput` via:
//
//	ThanosRulerSpecInitContainersResourcesClaimsPatchArgs{...}
type ThanosRulerSpecInitContainersResourcesClaimsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesClaimsPatchOutput() ThanosRulerSpecInitContainersResourcesClaimsPatchOutput
	ToThanosRulerSpecInitContainersResourcesClaimsPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesClaimsPatchOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecInitContainersResourcesClaimsPatchArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request pulumi.StringPtrInput `pulumi:"request"`
}

func (ThanosRulerSpecInitContainersResourcesClaimsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaimsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResourcesClaimsPatchArgs) ToThanosRulerSpecInitContainersResourcesClaimsPatchOutput() ThanosRulerSpecInitContainersResourcesClaimsPatchOutput {
	return i.ToThanosRulerSpecInitContainersResourcesClaimsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesClaimsPatchArgs) ToThanosRulerSpecInitContainersResourcesClaimsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesClaimsPatchOutput)
}

// ThanosRulerSpecInitContainersResourcesClaimsPatchArrayInput is an input type that accepts ThanosRulerSpecInitContainersResourcesClaimsPatchArray and ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesClaimsPatchArrayInput` via:
//
//	ThanosRulerSpecInitContainersResourcesClaimsPatchArray{ ThanosRulerSpecInitContainersResourcesClaimsPatchArgs{...} }
type ThanosRulerSpecInitContainersResourcesClaimsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput() ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput
	ToThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput
}

type ThanosRulerSpecInitContainersResourcesClaimsPatchArray []ThanosRulerSpecInitContainersResourcesClaimsPatchInput

func (ThanosRulerSpecInitContainersResourcesClaimsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResourcesClaimsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResourcesClaimsPatchArray) ToThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput() ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput {
	return i.ToThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesClaimsPatchArray) ToThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecInitContainersResourcesClaimsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesClaimsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaimsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesClaimsPatchOutput) ToThanosRulerSpecInitContainersResourcesClaimsPatchOutput() ThanosRulerSpecInitContainersResourcesClaimsPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesClaimsPatchOutput) ToThanosRulerSpecInitContainersResourcesClaimsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsPatchOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of
// the Pod where this field is used. It makes that resource available
// inside a container.
func (o ThanosRulerSpecInitContainersResourcesClaimsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResourcesClaimsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Request is the name chosen for a request in the referenced claim.
// If empty, everything from the claim is made available, otherwise
// only the result of this request.
func (o ThanosRulerSpecInitContainersResourcesClaimsPatchOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResourcesClaimsPatch) *string { return v.Request }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersResourcesClaimsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput) ToThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput() ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput) ToThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersResourcesClaimsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersResourcesClaimsPatch {
		return vs[0].([]ThanosRulerSpecInitContainersResourcesClaimsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersResourcesClaimsPatchOutput)
}

// Compute Resources required by this container.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ThanosRulerSpecInitContainersResourcesPatch struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims []ThanosRulerSpecInitContainersResourcesClaimsPatch `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecInitContainersResourcesPatchInput is an input type that accepts ThanosRulerSpecInitContainersResourcesPatchArgs and ThanosRulerSpecInitContainersResourcesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesPatchInput` via:
//
//	ThanosRulerSpecInitContainersResourcesPatchArgs{...}
type ThanosRulerSpecInitContainersResourcesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesPatchOutput() ThanosRulerSpecInitContainersResourcesPatchOutput
	ToThanosRulerSpecInitContainersResourcesPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesPatchOutput
}

// Compute Resources required by this container.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ThanosRulerSpecInitContainersResourcesPatchArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims ThanosRulerSpecInitContainersResourcesClaimsPatchArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecInitContainersResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersResourcesPatchArgs) ToThanosRulerSpecInitContainersResourcesPatchOutput() ThanosRulerSpecInitContainersResourcesPatchOutput {
	return i.ToThanosRulerSpecInitContainersResourcesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesPatchArgs) ToThanosRulerSpecInitContainersResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesPatchOutput)
}

func (i ThanosRulerSpecInitContainersResourcesPatchArgs) ToThanosRulerSpecInitContainersResourcesPatchPtrOutput() ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersResourcesPatchArgs) ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesPatchOutput).ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersResourcesPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersResourcesPatchArgs, ThanosRulerSpecInitContainersResourcesPatchPtr and ThanosRulerSpecInitContainersResourcesPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersResourcesPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersResourcesPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersResourcesPatchPtrOutput() ThanosRulerSpecInitContainersResourcesPatchPtrOutput
	ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersResourcesPatchPtrOutput
}

type thanosRulerSpecInitContainersResourcesPatchPtrType ThanosRulerSpecInitContainersResourcesPatchArgs

func ThanosRulerSpecInitContainersResourcesPatchPtr(v *ThanosRulerSpecInitContainersResourcesPatchArgs) ThanosRulerSpecInitContainersResourcesPatchPtrInput {
	return (*thanosRulerSpecInitContainersResourcesPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersResourcesPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersResourcesPatchPtrType) ToThanosRulerSpecInitContainersResourcesPatchPtrOutput() ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersResourcesPatchPtrType) ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersResourcesPatchPtrOutput)
}

// Compute Resources required by this container.
// Cannot be updated.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
type ThanosRulerSpecInitContainersResourcesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesPatchOutput) ToThanosRulerSpecInitContainersResourcesPatchOutput() ThanosRulerSpecInitContainersResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesPatchOutput) ToThanosRulerSpecInitContainersResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesPatchOutput) ToThanosRulerSpecInitContainersResourcesPatchPtrOutput() ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersResourcesPatchOutput) ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersResourcesPatch) *ThanosRulerSpecInitContainersResourcesPatch {
		return &v
	}).(ThanosRulerSpecInitContainersResourcesPatchPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecInitContainersResourcesPatchOutput) Claims() ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResourcesPatch) []ThanosRulerSpecInitContainersResourcesClaimsPatch {
		return v.Claims
	}).(ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResourcesPatch) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersResourcesPatch) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type ThanosRulerSpecInitContainersResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersResourcesPatchPtrOutput) ToThanosRulerSpecInitContainersResourcesPatchPtrOutput() ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesPatchPtrOutput) ToThanosRulerSpecInitContainersResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersResourcesPatchPtrOutput) Elem() ThanosRulerSpecInitContainersResourcesPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResourcesPatch) ThanosRulerSpecInitContainersResourcesPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersResourcesPatch
		return ret
	}).(ThanosRulerSpecInitContainersResourcesPatchOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecInitContainersResourcesPatchPtrOutput) Claims() ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResourcesPatch) []ThanosRulerSpecInitContainersResourcesClaimsPatch {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecInitContainersResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// SecurityContext defines the security options the container should be run with.
// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type ThanosRulerSpecInitContainersSecurityContext struct {
	// AllowPrivilegeEscalation controls whether a process can gain more
	// privileges than its parent process. This bool directly controls if
	// the no_new_privs flag will be set on the container process.
	// AllowPrivilegeEscalation is true always when the container is:
	// 1) run as Privileged
	// 2) has CAP_SYS_ADMIN
	//    Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation *bool                                                        `pulumi:"allowPrivilegeEscalation"`
	AppArmorProfile          *ThanosRulerSpecInitContainersSecurityContextAppArmorProfile `pulumi:"appArmorProfile"`
	Capabilities             *ThanosRulerSpecInitContainersSecurityContextCapabilities    `pulumi:"capabilities"`
	// Run container in privileged mode.
	// Processes in privileged containers are essentially equivalent to root on the host.
	// Defaults to false.
	// Note that this field cannot be set when spec.os.name is windows.
	Privileged *bool `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers.
	// The default value is Default which uses the container runtime defaults for
	// readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled.
	// Note that this field cannot be set when spec.os.name is windows.
	ProcMount *string `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem.
	// Default is false.
	// Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser      *int                                                        `pulumi:"runAsUser"`
	SeLinuxOptions *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions `pulumi:"seLinuxOptions"`
	SeccompProfile *ThanosRulerSpecInitContainersSecurityContextSeccompProfile `pulumi:"seccompProfile"`
	WindowsOptions *ThanosRulerSpecInitContainersSecurityContextWindowsOptions `pulumi:"windowsOptions"`
}

// ThanosRulerSpecInitContainersSecurityContextInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextArgs and ThanosRulerSpecInitContainersSecurityContextOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextArgs{...}
type ThanosRulerSpecInitContainersSecurityContextInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextOutput() ThanosRulerSpecInitContainersSecurityContextOutput
	ToThanosRulerSpecInitContainersSecurityContextOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextOutput
}

// SecurityContext defines the security options the container should be run with.
// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type ThanosRulerSpecInitContainersSecurityContextArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more
	// privileges than its parent process. This bool directly controls if
	// the no_new_privs flag will be set on the container process.
	// AllowPrivilegeEscalation is true always when the container is:
	// 1) run as Privileged
	// 2) has CAP_SYS_ADMIN
	//    Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation pulumi.BoolPtrInput                                                 `pulumi:"allowPrivilegeEscalation"`
	AppArmorProfile          ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrInput `pulumi:"appArmorProfile"`
	Capabilities             ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrInput    `pulumi:"capabilities"`
	// Run container in privileged mode.
	// Processes in privileged containers are essentially equivalent to root on the host.
	// Defaults to false.
	// Note that this field cannot be set when spec.os.name is windows.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers.
	// The default value is Default which uses the container runtime defaults for
	// readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled.
	// Note that this field cannot be set when spec.os.name is windows.
	ProcMount pulumi.StringPtrInput `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem.
	// Default is false.
	// Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser      pulumi.IntPtrInput                                                 `pulumi:"runAsUser"`
	SeLinuxOptions ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	SeccompProfile ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrInput `pulumi:"seccompProfile"`
	WindowsOptions ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrInput `pulumi:"windowsOptions"`
}

func (ThanosRulerSpecInitContainersSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextArgs) ToThanosRulerSpecInitContainersSecurityContextOutput() ThanosRulerSpecInitContainersSecurityContextOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextArgs) ToThanosRulerSpecInitContainersSecurityContextOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextArgs) ToThanosRulerSpecInitContainersSecurityContextPtrOutput() ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextArgs) ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextOutput).ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextArgs, ThanosRulerSpecInitContainersSecurityContextPtr and ThanosRulerSpecInitContainersSecurityContextPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextPtrOutput() ThanosRulerSpecInitContainersSecurityContextPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextPtrType ThanosRulerSpecInitContainersSecurityContextArgs

func ThanosRulerSpecInitContainersSecurityContextPtr(v *ThanosRulerSpecInitContainersSecurityContextArgs) ThanosRulerSpecInitContainersSecurityContextPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextPtrType) ToThanosRulerSpecInitContainersSecurityContextPtrOutput() ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextPtrType) ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextPtrOutput)
}

// SecurityContext defines the security options the container should be run with.
// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type ThanosRulerSpecInitContainersSecurityContextOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) ToThanosRulerSpecInitContainersSecurityContextOutput() ThanosRulerSpecInitContainersSecurityContextOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) ToThanosRulerSpecInitContainersSecurityContextOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) ToThanosRulerSpecInitContainersSecurityContextPtrOutput() ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContext {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextPtrOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more
// privileges than its parent process. This bool directly controls if
// the no_new_privs flag will be set on the container process.
// AllowPrivilegeEscalation is true always when the container is:
//  1. run as Privileged
//  2. has CAP_SYS_ADMIN
//     Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) AppArmorProfile() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextAppArmorProfile {
		return v.AppArmorProfile
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) Capabilities() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextCapabilities {
		return v.Capabilities
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode.
// Processes in privileged containers are essentially equivalent to root on the host.
// Defaults to false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers.
// The default value is Default which uses the container runtime defaults for
// readonly paths and masked paths.
// This requires the ProcMountType feature flag to be enabled.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *string { return v.ProcMount }).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem.
// Default is false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) SeLinuxOptions() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions {
		return v.SeLinuxOptions
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) SeccompProfile() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextSeccompProfile {
		return v.SeccompProfile
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextOutput) WindowsOptions() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextWindowsOptions {
		return v.WindowsOptions
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContext)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) ToThanosRulerSpecInitContainersSecurityContextPtrOutput() ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) ToThanosRulerSpecInitContainersSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) ThanosRulerSpecInitContainersSecurityContext {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContext
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more
// privileges than its parent process. This bool directly controls if
// the no_new_privs flag will be set on the container process.
// AllowPrivilegeEscalation is true always when the container is:
//  1. run as Privileged
//  2. has CAP_SYS_ADMIN
//     Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) AppArmorProfile() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextAppArmorProfile {
		if v == nil {
			return nil
		}
		return v.AppArmorProfile
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) Capabilities() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextCapabilities {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// Run container in privileged mode.
// Processes in privileged containers are essentially equivalent to root on the host.
// Defaults to false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers.
// The default value is Default which uses the container runtime defaults for
// readonly paths and masked paths.
// This requires the ProcMountType feature flag to be enabled.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.ProcMount
	}).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem.
// Default is false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) SeLinuxOptions() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) SeccompProfile() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextSeccompProfile {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPtrOutput) WindowsOptions() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContext) *ThanosRulerSpecInitContainersSecurityContextWindowsOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

// appArmorProfile is the AppArmor options to use by this container. If set, this profile
// overrides the pod's appArmorProfile.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfile struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecInitContainersSecurityContextAppArmorProfileInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs and ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextAppArmorProfileInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs{...}
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfileInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput
	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput
}

// appArmorProfile is the AppArmor options to use by this container. If set, this profile
// overrides the pod's appArmorProfile.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfile)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput).ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs, ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtr and ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput
	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput
}

type thanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrType ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs

func ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtr(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextAppArmorProfile)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrType) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrType) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput)
}

// appArmorProfile is the AppArmor options to use by this container. If set, this profile
// overrides the pod's appArmorProfile.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfile)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextAppArmorProfile) *ThanosRulerSpecInitContainersSecurityContextAppArmorProfile {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextAppArmorProfile) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextAppArmorProfile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextAppArmorProfile)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfile) ThanosRulerSpecInitContainersSecurityContextAppArmorProfile {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextAppArmorProfile
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfile) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfile) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// appArmorProfile is the AppArmor options to use by this container. If set, this profile
// overrides the pod's appArmorProfile.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs and ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs{...}
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput
	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput
}

// appArmorProfile is the AppArmor options to use by this container. If set, this profile
// overrides the pod's appArmorProfile.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput).ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs, ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtr and ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrType ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs

func ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtr(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrType) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrType) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput)
}

// appArmorProfile is the AppArmor options to use by this container. If set, this profile
// overrides the pod's appArmorProfile.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch) *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch) *string {
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch) ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The capabilities to add/drop when running containers.
// Defaults to the default set of capabilities granted by the container runtime.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextCapabilities struct {
	// Added capabilities
	Add []string `pulumi:"add"`
	// Removed capabilities
	Drop []string `pulumi:"drop"`
}

// ThanosRulerSpecInitContainersSecurityContextCapabilitiesInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs and ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextCapabilitiesInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs{...}
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput
	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput
}

// The capabilities to add/drop when running containers.
// Defaults to the default set of capabilities granted by the container runtime.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs struct {
	// Added capabilities
	Add pulumi.StringArrayInput `pulumi:"add"`
	// Removed capabilities
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput).ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs, ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtr and ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextCapabilitiesPtrType ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs

func ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtr(v *ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextCapabilitiesPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextCapabilitiesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextCapabilitiesPtrType) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextCapabilitiesPtrType) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// The capabilities to add/drop when running containers.
// Defaults to the default set of capabilities granted by the container runtime.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextCapabilities) *ThanosRulerSpecInitContainersSecurityContextCapabilities {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput)
}

// Added capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextCapabilities) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextCapabilities) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextCapabilities)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextCapabilities) ThanosRulerSpecInitContainersSecurityContextCapabilities {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextCapabilities
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput)
}

// Added capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextCapabilities) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// The capabilities to add/drop when running containers.
// Defaults to the default set of capabilities granted by the container runtime.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch struct {
	// Added capabilities
	Add []string `pulumi:"add"`
	// Removed capabilities
	Drop []string `pulumi:"drop"`
}

// ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs and ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs{...}
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput
	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput
}

// The capabilities to add/drop when running containers.
// Defaults to the default set of capabilities granted by the container runtime.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs struct {
	// Added capabilities
	Add pulumi.StringArrayInput `pulumi:"add"`
	// Removed capabilities
	Drop pulumi.StringArrayInput `pulumi:"drop"`
}

func (ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput).ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs, ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtr and ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrType ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs

func ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtr(v *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput)
}

// The capabilities to add/drop when running containers.
// Defaults to the default set of capabilities granted by the container runtime.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch) *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput)
}

// Added capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch) []string { return v.Add }).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch) []string { return v.Drop }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch) ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput)
}

// Added capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput) Add() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch) []string {
		if v == nil {
			return nil
		}
		return v.Add
	}).(pulumi.StringArrayOutput)
}

// Removed capabilities
func (o ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput) Drop() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch) []string {
		if v == nil {
			return nil
		}
		return v.Drop
	}).(pulumi.StringArrayOutput)
}

// SecurityContext defines the security options the container should be run with.
// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type ThanosRulerSpecInitContainersSecurityContextPatch struct {
	// AllowPrivilegeEscalation controls whether a process can gain more
	// privileges than its parent process. This bool directly controls if
	// the no_new_privs flag will be set on the container process.
	// AllowPrivilegeEscalation is true always when the container is:
	// 1) run as Privileged
	// 2) has CAP_SYS_ADMIN
	//    Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation *bool                                                             `pulumi:"allowPrivilegeEscalation"`
	AppArmorProfile          *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch `pulumi:"appArmorProfile"`
	Capabilities             *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch    `pulumi:"capabilities"`
	// Run container in privileged mode.
	// Processes in privileged containers are essentially equivalent to root on the host.
	// Defaults to false.
	// Note that this field cannot be set when spec.os.name is windows.
	Privileged *bool `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers.
	// The default value is Default which uses the container runtime defaults for
	// readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled.
	// Note that this field cannot be set when spec.os.name is windows.
	ProcMount *string `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem.
	// Default is false.
	// Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem *bool `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser      *int                                                             `pulumi:"runAsUser"`
	SeLinuxOptions *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch `pulumi:"seLinuxOptions"`
	SeccompProfile *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch `pulumi:"seccompProfile"`
	WindowsOptions *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch `pulumi:"windowsOptions"`
}

// ThanosRulerSpecInitContainersSecurityContextPatchInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextPatchArgs and ThanosRulerSpecInitContainersSecurityContextPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextPatchInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextPatchArgs{...}
type ThanosRulerSpecInitContainersSecurityContextPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextPatchOutput() ThanosRulerSpecInitContainersSecurityContextPatchOutput
	ToThanosRulerSpecInitContainersSecurityContextPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextPatchOutput
}

// SecurityContext defines the security options the container should be run with.
// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type ThanosRulerSpecInitContainersSecurityContextPatchArgs struct {
	// AllowPrivilegeEscalation controls whether a process can gain more
	// privileges than its parent process. This bool directly controls if
	// the no_new_privs flag will be set on the container process.
	// AllowPrivilegeEscalation is true always when the container is:
	// 1) run as Privileged
	// 2) has CAP_SYS_ADMIN
	//    Note that this field cannot be set when spec.os.name is windows.
	AllowPrivilegeEscalation pulumi.BoolPtrInput                                                      `pulumi:"allowPrivilegeEscalation"`
	AppArmorProfile          ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrInput `pulumi:"appArmorProfile"`
	Capabilities             ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrInput    `pulumi:"capabilities"`
	// Run container in privileged mode.
	// Processes in privileged containers are essentially equivalent to root on the host.
	// Defaults to false.
	// Note that this field cannot be set when spec.os.name is windows.
	Privileged pulumi.BoolPtrInput `pulumi:"privileged"`
	// procMount denotes the type of proc mount to use for the containers.
	// The default value is Default which uses the container runtime defaults for
	// readonly paths and masked paths.
	// This requires the ProcMountType feature flag to be enabled.
	// Note that this field cannot be set when spec.os.name is windows.
	ProcMount pulumi.StringPtrInput `pulumi:"procMount"`
	// Whether this container has a read-only root filesystem.
	// Default is false.
	// Note that this field cannot be set when spec.os.name is windows.
	ReadOnlyRootFilesystem pulumi.BoolPtrInput `pulumi:"readOnlyRootFilesystem"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser      pulumi.IntPtrInput                                                      `pulumi:"runAsUser"`
	SeLinuxOptions ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrInput `pulumi:"seLinuxOptions"`
	SeccompProfile ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrInput `pulumi:"seccompProfile"`
	WindowsOptions ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrInput `pulumi:"windowsOptions"`
}

func (ThanosRulerSpecInitContainersSecurityContextPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextPatchArgs) ToThanosRulerSpecInitContainersSecurityContextPatchOutput() ThanosRulerSpecInitContainersSecurityContextPatchOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextPatchArgs) ToThanosRulerSpecInitContainersSecurityContextPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextPatchOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextPatchArgs) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextPatchArgs) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextPatchOutput).ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextPatchArgs, ThanosRulerSpecInitContainersSecurityContextPatchPtr and ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextPatchPtrType ThanosRulerSpecInitContainersSecurityContextPatchArgs

func ThanosRulerSpecInitContainersSecurityContextPatchPtr(v *ThanosRulerSpecInitContainersSecurityContextPatchArgs) ThanosRulerSpecInitContainersSecurityContextPatchPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput)
}

// SecurityContext defines the security options the container should be run with.
// If set, the fields of SecurityContext override the equivalent fields of PodSecurityContext.
// More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
type ThanosRulerSpecInitContainersSecurityContextPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) ToThanosRulerSpecInitContainersSecurityContextPatchOutput() ThanosRulerSpecInitContainersSecurityContextPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) ToThanosRulerSpecInitContainersSecurityContextPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextPatch {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more
// privileges than its parent process. This bool directly controls if
// the no_new_privs flag will be set on the container process.
// AllowPrivilegeEscalation is true always when the container is:
//  1. run as Privileged
//  2. has CAP_SYS_ADMIN
//     Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *bool { return v.AllowPrivilegeEscalation }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) AppArmorProfile() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch {
		return v.AppArmorProfile
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) Capabilities() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch {
		return v.Capabilities
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput)
}

// Run container in privileged mode.
// Processes in privileged containers are essentially equivalent to root on the host.
// Defaults to false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *bool { return v.Privileged }).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers.
// The default value is Default which uses the container runtime defaults for
// readonly paths and masked paths.
// This requires the ProcMountType feature flag to be enabled.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *string { return v.ProcMount }).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem.
// Default is false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *bool { return v.ReadOnlyRootFilesystem }).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) SeLinuxOptions() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch {
		return v.SeLinuxOptions
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) SeccompProfile() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch {
		return v.SeccompProfile
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchOutput) WindowsOptions() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch {
		return v.WindowsOptions
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) ThanosRulerSpecInitContainersSecurityContextPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextPatch
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextPatchOutput)
}

// AllowPrivilegeEscalation controls whether a process can gain more
// privileges than its parent process. This bool directly controls if
// the no_new_privs flag will be set on the container process.
// AllowPrivilegeEscalation is true always when the container is:
//  1. run as Privileged
//  2. has CAP_SYS_ADMIN
//     Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) AllowPrivilegeEscalation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.AllowPrivilegeEscalation
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) AppArmorProfile() ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatch {
		if v == nil {
			return nil
		}
		return v.AppArmorProfile
	}).(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) Capabilities() ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatch {
		if v == nil {
			return nil
		}
		return v.Capabilities
	}).(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput)
}

// Run container in privileged mode.
// Processes in privileged containers are essentially equivalent to root on the host.
// Defaults to false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) Privileged() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Privileged
	}).(pulumi.BoolPtrOutput)
}

// procMount denotes the type of proc mount to use for the containers.
// The default value is Default which uses the container runtime defaults for
// readonly paths and masked paths.
// This requires the ProcMountType feature flag to be enabled.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) ProcMount() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *string {
		if v == nil {
			return nil
		}
		return v.ProcMount
	}).(pulumi.StringPtrOutput)
}

// Whether this container has a read-only root filesystem.
// Default is false.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) ReadOnlyRootFilesystem() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnlyRootFilesystem
	}).(pulumi.BoolPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) SeLinuxOptions() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) SeccompProfile() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput) WindowsOptions() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextPatch) *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput)
}

// The SELinux context to be applied to the container.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs and ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs{...}
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput
	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput
}

// The SELinux context to be applied to the container.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput).ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs, ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtr and ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrType ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs

func ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtr(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrType) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrType) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// The SELinux context to be applied to the container.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The SELinux context to be applied to the container.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs and ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs{...}
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput
	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput
}

// The SELinux context to be applied to the container.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput).ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs, ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtr and ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrType ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs

func ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtr(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput)
}

// The SELinux context to be applied to the container.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in PodSecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are
// provided at both the pod & container level, the container options
// override the pod options.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecInitContainersSecurityContextSeccompProfileInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs and ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeccompProfileInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs{...}
type ThanosRulerSpecInitContainersSecurityContextSeccompProfileInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput
	ToThanosRulerSpecInitContainersSecurityContextSeccompProfileOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput
}

// The seccomp options to use by this container. If seccomp options are
// provided at both the pod & container level, the container options
// override the pod options.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfile)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeccompProfileOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfileOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput).ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs, ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtr and ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput
	ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput
}

type thanosRulerSpecInitContainersSecurityContextSeccompProfilePtrType ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs

func ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtr(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextSeccompProfilePtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextSeccompProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeccompProfile)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextSeccompProfilePtrType) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextSeccompProfilePtrType) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput)
}

// The seccomp options to use by this container. If seccomp options are
// provided at both the pod & container level, the container options
// override the pod options.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfile)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfileOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextSeccompProfile) *ThanosRulerSpecInitContainersSecurityContextSeccompProfile {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeccompProfile) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeccompProfile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeccompProfile)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfile) ThanosRulerSpecInitContainersSecurityContextSeccompProfile {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextSeccompProfile
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are
// provided at both the pod & container level, the container options
// override the pod options.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs and ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs{...}
type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput
	ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput
}

// The seccomp options to use by this container. If seccomp options are
// provided at both the pod & container level, the container options
// override the pod options.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput).ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs, ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtr and ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrType ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs

func ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtr(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrType) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrType) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput)
}

// The seccomp options to use by this container. If seccomp options are
// provided at both the pod & container level, the container options
// override the pod options.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch) *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch) *string {
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch) ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options from the PodSecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecInitContainersSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// ThanosRulerSpecInitContainersSecurityContextWindowsOptionsInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs and ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextWindowsOptionsInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs{...}
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput
	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput
}

// The Windows specific settings applied to all containers.
// If unspecified, the options from the PodSecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput).ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs, ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtr and ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrType ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs

func ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtr(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrType) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrType) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options from the PodSecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *ThanosRulerSpecInitContainersSecurityContextWindowsOptions {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *string {
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *string {
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextWindowsOptions)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptions) ThanosRulerSpecInitContainersSecurityContextWindowsOptions {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextWindowsOptions
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options from the PodSecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs and ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchInput` via:
//
//	ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs{...}
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput
	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput
}

// The Windows specific settings applied to all containers.
// If unspecified, the options from the PodSecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput)
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput).ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs, ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtr and ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput
	ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput
}

type thanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrType ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs

func ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtr(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrInput {
	return (*thanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrType) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options from the PodSecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch {
		return &v
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *string {
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *string {
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *string {
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) ToThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) Elem() ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch
		return ret
	}).(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized.
// If specified, no other probes are executed until this completes successfully.
// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
// when it might take a long time to load data or warm a cache, than during steady-state operation.
// This cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersStartupProbe struct {
	Exec *ThanosRulerSpecInitContainersStartupProbeExec `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *int                                              `pulumi:"failureThreshold"`
	Grpc             *ThanosRulerSpecInitContainersStartupProbeGrpc    `pulumi:"grpc"`
	HttpGet          *ThanosRulerSpecInitContainersStartupProbeHttpGet `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int                                                `pulumi:"successThreshold"`
	TcpSocket        *ThanosRulerSpecInitContainersStartupProbeTcpSocket `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
	// The grace period is the duration in seconds after the processes running in the pod are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
	// value overrides the value provided by the pod spec.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down).
	// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
	// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ThanosRulerSpecInitContainersStartupProbeInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeArgs and ThanosRulerSpecInitContainersStartupProbeOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeArgs{...}
type ThanosRulerSpecInitContainersStartupProbeInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeOutput() ThanosRulerSpecInitContainersStartupProbeOutput
	ToThanosRulerSpecInitContainersStartupProbeOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeOutput
}

// StartupProbe indicates that the Pod has successfully initialized.
// If specified, no other probes are executed until this completes successfully.
// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
// when it might take a long time to load data or warm a cache, than during steady-state operation.
// This cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersStartupProbeArgs struct {
	Exec ThanosRulerSpecInitContainersStartupProbeExecPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput                                       `pulumi:"failureThreshold"`
	Grpc             ThanosRulerSpecInitContainersStartupProbeGrpcPtrInput    `pulumi:"grpc"`
	HttpGet          ThanosRulerSpecInitContainersStartupProbeHttpGetPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput                                         `pulumi:"successThreshold"`
	TcpSocket        ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrInput `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
	// The grace period is the duration in seconds after the processes running in the pod are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
	// value overrides the value provided by the pod spec.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down).
	// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
	// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ThanosRulerSpecInitContainersStartupProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeArgs) ToThanosRulerSpecInitContainersStartupProbeOutput() ThanosRulerSpecInitContainersStartupProbeOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeArgs) ToThanosRulerSpecInitContainersStartupProbeOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeArgs) ToThanosRulerSpecInitContainersStartupProbePtrOutput() ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeArgs) ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeOutput).ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbePtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeArgs, ThanosRulerSpecInitContainersStartupProbePtr and ThanosRulerSpecInitContainersStartupProbePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbePtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbePtrOutput() ThanosRulerSpecInitContainersStartupProbePtrOutput
	ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbePtrOutput
}

type thanosRulerSpecInitContainersStartupProbePtrType ThanosRulerSpecInitContainersStartupProbeArgs

func ThanosRulerSpecInitContainersStartupProbePtr(v *ThanosRulerSpecInitContainersStartupProbeArgs) ThanosRulerSpecInitContainersStartupProbePtrInput {
	return (*thanosRulerSpecInitContainersStartupProbePtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbePtrType) ToThanosRulerSpecInitContainersStartupProbePtrOutput() ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbePtrType) ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbePtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized.
// If specified, no other probes are executed until this completes successfully.
// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
// when it might take a long time to load data or warm a cache, than during steady-state operation.
// This cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersStartupProbeOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) ToThanosRulerSpecInitContainersStartupProbeOutput() ThanosRulerSpecInitContainersStartupProbeOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) ToThanosRulerSpecInitContainersStartupProbeOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) ToThanosRulerSpecInitContainersStartupProbePtrOutput() ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbe {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbePtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) Exec() ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeExec {
		return v.Exec
	}).(ThanosRulerSpecInitContainersStartupProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.
// Defaults to 3. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbeOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) Grpc() ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeGrpc {
		return v.Grpc
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) HttpGet() ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeHttpGet {
		return v.HttpGet
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbeOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe.
// Default to 10 seconds. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbeOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed.
// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbeOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbeOutput) TcpSocket() ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeTcpSocket {
		return v.TcpSocket
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
// The grace period is the duration in seconds after the processes running in the pod are sent
// a termination signal and the time when the processes are forcibly halted with a kill signal.
// Set this value longer than the expected cleanup time for your process.
// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
// value overrides the value provided by the pod spec.
// Value must be non-negative integer. The value zero indicates stop immediately via
// the kill signal (no opportunity to shut down).
// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ThanosRulerSpecInitContainersStartupProbeOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is 1.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbeOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbe) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbe)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) ToThanosRulerSpecInitContainersStartupProbePtrOutput() ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) ToThanosRulerSpecInitContainersStartupProbePtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) ThanosRulerSpecInitContainersStartupProbe {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbe
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) Exec() ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeExec {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ThanosRulerSpecInitContainersStartupProbeExecPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.
// Defaults to 3. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) Grpc() ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeGrpc {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) HttpGet() ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeHttpGet {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe.
// Default to 10 seconds. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed.
// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) TcpSocket() ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *ThanosRulerSpecInitContainersStartupProbeTcpSocket {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
// The grace period is the duration in seconds after the processes running in the pod are sent
// a termination signal and the time when the processes are forcibly halted with a kill signal.
// Set this value longer than the expected cleanup time for your process.
// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
// value overrides the value provided by the pod spec.
// Value must be non-negative integer. The value zero indicates stop immediately via
// the kill signal (no opportunity to shut down).
// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is 1.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbePtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbe) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// Exec specifies a command to execute in the container.
type ThanosRulerSpecInitContainersStartupProbeExec struct {
	// Command is the command line to execute inside the container, the working directory for the
	// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
	// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
	// a shell, you need to explicitly call out to that shell.
	// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// ThanosRulerSpecInitContainersStartupProbeExecInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeExecArgs and ThanosRulerSpecInitContainersStartupProbeExecOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeExecInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeExecArgs{...}
type ThanosRulerSpecInitContainersStartupProbeExecInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeExecOutput() ThanosRulerSpecInitContainersStartupProbeExecOutput
	ToThanosRulerSpecInitContainersStartupProbeExecOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeExecOutput
}

// Exec specifies a command to execute in the container.
type ThanosRulerSpecInitContainersStartupProbeExecArgs struct {
	// Command is the command line to execute inside the container, the working directory for the
	// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
	// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
	// a shell, you need to explicitly call out to that shell.
	// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ThanosRulerSpecInitContainersStartupProbeExecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeExecArgs) ToThanosRulerSpecInitContainersStartupProbeExecOutput() ThanosRulerSpecInitContainersStartupProbeExecOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeExecOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeExecArgs) ToThanosRulerSpecInitContainersStartupProbeExecOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeExecOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeExecArgs) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeExecArgs) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeExecOutput).ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeExecPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeExecArgs, ThanosRulerSpecInitContainersStartupProbeExecPtr and ThanosRulerSpecInitContainersStartupProbeExecPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeExecPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeExecArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeExecPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeExecPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeExecPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeExecPtrType ThanosRulerSpecInitContainersStartupProbeExecArgs

func ThanosRulerSpecInitContainersStartupProbeExecPtr(v *ThanosRulerSpecInitContainersStartupProbeExecArgs) ThanosRulerSpecInitContainersStartupProbeExecPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeExecPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeExecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeExecPtrType) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeExecPtrType) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeExecPtrOutput)
}

// Exec specifies a command to execute in the container.
type ThanosRulerSpecInitContainersStartupProbeExecOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeExecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeExecOutput) ToThanosRulerSpecInitContainersStartupProbeExecOutput() ThanosRulerSpecInitContainersStartupProbeExecOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecOutput) ToThanosRulerSpecInitContainersStartupProbeExecOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecOutput) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeExecOutput) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeExec) *ThanosRulerSpecInitContainersStartupProbeExec {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeExecPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the
// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
// a shell, you need to explicitly call out to that shell.
// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ThanosRulerSpecInitContainersStartupProbeExecOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeExec) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecInitContainersStartupProbeExecPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeExecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeExec)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPtrOutput) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPtrOutput) ToThanosRulerSpecInitContainersStartupProbeExecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeExecOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeExec) ThanosRulerSpecInitContainersStartupProbeExec {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeExec
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeExecOutput)
}

// Command is the command line to execute inside the container, the working directory for the
// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
// a shell, you need to explicitly call out to that shell.
// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ThanosRulerSpecInitContainersStartupProbeExecPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeExec) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// Exec specifies a command to execute in the container.
type ThanosRulerSpecInitContainersStartupProbeExecPatch struct {
	// Command is the command line to execute inside the container, the working directory for the
	// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
	// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
	// a shell, you need to explicitly call out to that shell.
	// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command []string `pulumi:"command"`
}

// ThanosRulerSpecInitContainersStartupProbeExecPatchInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeExecPatchArgs and ThanosRulerSpecInitContainersStartupProbeExecPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeExecPatchInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeExecPatchArgs{...}
type ThanosRulerSpecInitContainersStartupProbeExecPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeExecPatchOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchOutput
	ToThanosRulerSpecInitContainersStartupProbeExecPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchOutput
}

// Exec specifies a command to execute in the container.
type ThanosRulerSpecInitContainersStartupProbeExecPatchArgs struct {
	// Command is the command line to execute inside the container, the working directory for the
	// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
	// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
	// a shell, you need to explicitly call out to that shell.
	// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
	Command pulumi.StringArrayInput `pulumi:"command"`
}

func (ThanosRulerSpecInitContainersStartupProbeExecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExecPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeExecPatchArgs) ToThanosRulerSpecInitContainersStartupProbeExecPatchOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeExecPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeExecPatchArgs) ToThanosRulerSpecInitContainersStartupProbeExecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeExecPatchOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeExecPatchArgs) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeExecPatchArgs) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeExecPatchOutput).ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeExecPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeExecPatchArgs, ThanosRulerSpecInitContainersStartupProbeExecPatchPtr and ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeExecPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeExecPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeExecPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeExecPatchPtrType ThanosRulerSpecInitContainersStartupProbeExecPatchArgs

func ThanosRulerSpecInitContainersStartupProbeExecPatchPtr(v *ThanosRulerSpecInitContainersStartupProbeExecPatchArgs) ThanosRulerSpecInitContainersStartupProbeExecPatchPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeExecPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeExecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeExecPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeExecPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeExecPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput)
}

// Exec specifies a command to execute in the container.
type ThanosRulerSpecInitContainersStartupProbeExecPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeExecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPatchOutput) ToThanosRulerSpecInitContainersStartupProbeExecPatchOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPatchOutput) ToThanosRulerSpecInitContainersStartupProbeExecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPatchOutput) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPatchOutput) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeExecPatch) *ThanosRulerSpecInitContainersStartupProbeExecPatch {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput)
}

// Command is the command line to execute inside the container, the working directory for the
// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
// a shell, you need to explicitly call out to that shell.
// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ThanosRulerSpecInitContainersStartupProbeExecPatchOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeExecPatch) []string { return v.Command }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeExecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeExecPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeExecPatch) ThanosRulerSpecInitContainersStartupProbeExecPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeExecPatch
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeExecPatchOutput)
}

// Command is the command line to execute inside the container, the working directory for the
// command  is root ('/') in the container's filesystem. The command is simply exec'd, it is
// not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use
// a shell, you need to explicitly call out to that shell.
// Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
func (o ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput) Command() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeExecPatch) []string {
		if v == nil {
			return nil
		}
		return v.Command
	}).(pulumi.StringArrayOutput)
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersStartupProbeGrpc struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest
	// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service *string `pulumi:"service"`
}

// ThanosRulerSpecInitContainersStartupProbeGrpcInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeGrpcArgs and ThanosRulerSpecInitContainersStartupProbeGrpcOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeGrpcInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeGrpcArgs{...}
type ThanosRulerSpecInitContainersStartupProbeGrpcInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeGrpcOutput() ThanosRulerSpecInitContainersStartupProbeGrpcOutput
	ToThanosRulerSpecInitContainersStartupProbeGrpcOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcOutput
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersStartupProbeGrpcArgs struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest
	// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (ThanosRulerSpecInitContainersStartupProbeGrpcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpc)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcOutput() ThanosRulerSpecInitContainersStartupProbeGrpcOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeGrpcOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeGrpcOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeGrpcOutput).ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeGrpcPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeGrpcArgs, ThanosRulerSpecInitContainersStartupProbeGrpcPtr and ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeGrpcPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeGrpcArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeGrpcPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeGrpcPtrType ThanosRulerSpecInitContainersStartupProbeGrpcArgs

func ThanosRulerSpecInitContainersStartupProbeGrpcPtr(v *ThanosRulerSpecInitContainersStartupProbeGrpcArgs) ThanosRulerSpecInitContainersStartupProbeGrpcPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeGrpcPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeGrpcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeGrpc)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeGrpcPtrType) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeGrpcPtrType) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput)
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersStartupProbeGrpcOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeGrpcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpc)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcOutput() ThanosRulerSpecInitContainersStartupProbeGrpcOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeGrpc) *ThanosRulerSpecInitContainersStartupProbeGrpc {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeGrpc) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest
// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeGrpc) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeGrpc)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeGrpcOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeGrpc) ThanosRulerSpecInitContainersStartupProbeGrpc {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeGrpc
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeGrpc) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest
// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeGrpc) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersStartupProbeGrpcPatch struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port *int `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest
	// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service *string `pulumi:"service"`
}

// ThanosRulerSpecInitContainersStartupProbeGrpcPatchInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs and ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeGrpcPatchInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs{...}
type ThanosRulerSpecInitContainersStartupProbeGrpcPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput
	ToThanosRulerSpecInitContainersStartupProbeGrpcPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs struct {
	// Port number of the gRPC service. Number must be in the range 1 to 65535.
	Port pulumi.IntPtrInput `pulumi:"port"`
	// Service is the name of the service to place in the gRPC HealthCheckRequest
	// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
	//
	// If this is not specified, the default behavior is defined by gRPC.
	Service pulumi.StringPtrInput `pulumi:"service"`
}

func (ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpcPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeGrpcPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput).ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs, ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtr and ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeGrpcPatchPtrType ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs

func ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtr(v *ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs) ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeGrpcPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeGrpcPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeGrpcPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeGrpcPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeGrpcPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput)
}

// GRPC specifies a GRPC HealthCheckRequest.
type ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpcPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeGrpcPatch) *ThanosRulerSpecInitContainersStartupProbeGrpcPatch {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeGrpcPatch) *int { return v.Port }).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest
// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeGrpcPatch) *string { return v.Service }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeGrpcPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeGrpcPatch) ThanosRulerSpecInitContainersStartupProbeGrpcPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeGrpcPatch
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput)
}

// Port number of the gRPC service. Number must be in the range 1 to 65535.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeGrpcPatch) *int {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.IntPtrOutput)
}

// Service is the name of the service to place in the gRPC HealthCheckRequest
// (see https://github.com/grpc/grpc/blob/master/doc/health-checking.md).
//
// If this is not specified, the default behavior is defined by gRPC.
func (o ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput) Service() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeGrpcPatch) *string {
		if v == nil {
			return nil
		}
		return v.Service
	}).(pulumi.StringPtrOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersStartupProbeHttpGet struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetArgs and ThanosRulerSpecInitContainersStartupProbeHttpGetOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeHttpGetArgs{...}
type ThanosRulerSpecInitContainersStartupProbeHttpGetInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetOutput
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersStartupProbeHttpGetArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ThanosRulerSpecInitContainersStartupProbeHttpGetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetOutput).ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetArgs, ThanosRulerSpecInitContainersStartupProbeHttpGetPtr and ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeHttpGetArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeHttpGetPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeHttpGetPtrType ThanosRulerSpecInitContainersStartupProbeHttpGetArgs

func ThanosRulerSpecInitContainersStartupProbeHttpGetPtr(v *ThanosRulerSpecInitContainersStartupProbeHttpGetArgs) ThanosRulerSpecInitContainersStartupProbeHttpGetPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeHttpGetPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeHttpGetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeHttpGetPtrType) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeHttpGetPtrType) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersStartupProbeHttpGetOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeHttpGet) *ThanosRulerSpecInitContainersStartupProbeHttpGet {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGet) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) HttpHeaders() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGet) []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders {
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGet) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGet) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGet) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeHttpGet)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeHttpGetOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGet) ThanosRulerSpecInitContainersStartupProbeHttpGet {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeHttpGet
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) HttpHeaders() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGet) []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGet) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGet) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name *string `pulumi:"name"`
	// The header field value
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs and ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs{...}
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput)
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArray and ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArray{ ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs{...} }
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput
}

type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArray []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersInput

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArray) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArray) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return o
}

// The header field name.
// This will be canonicalized upon output, so case-variant names will be understood as the same header.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header field value
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders {
		return vs[0].([]ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeaders)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name *string `pulumi:"name"`
	// The header field value
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs and ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs{...}
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs struct {
	// The header field name.
	// This will be canonicalized upon output, so case-variant names will be understood as the same header.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// The header field value
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput)
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArray and ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArray{ ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs{...} }
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput
}

type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArray []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchInput

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArray) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArray) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput)
}

// HTTPHeader describes a custom header to be used in HTTP probes
type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput {
	return o
}

// The header field name.
// This will be canonicalized upon output, so case-variant names will be understood as the same header.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// The header field value
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
		return vs[0].([]ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersStartupProbeHttpGetPatch struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host *string `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path *string `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme *string `pulumi:"scheme"`
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetPatchInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs and ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetPatchInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs{...}
type ThanosRulerSpecInitContainersStartupProbeHttpGetPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs struct {
	// Host name to connect to, defaults to the pod IP. You probably want to set
	// "Host" in httpHeaders instead.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Custom headers to set in the request. HTTP allows repeated headers.
	HttpHeaders ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayInput `pulumi:"httpHeaders"`
	// Path to access on the HTTP server.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Name or number of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
	// Scheme to use for connecting to the host.
	// Defaults to HTTP.
	Scheme pulumi.StringPtrInput `pulumi:"scheme"`
}

func (ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput).ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs, ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtr and ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrType ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs

func ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtr(v *ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeHttpGetPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput)
}

// HTTPGet specifies an HTTP GET request to perform.
type ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) HttpHeaders() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) interface{} { return v.Port }).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) *string { return v.Scheme }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeHttpGetPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) ThanosRulerSpecInitContainersStartupProbeHttpGetPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeHttpGetPatch
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput)
}

// Host name to connect to, defaults to the pod IP. You probably want to set
// "Host" in httpHeaders instead.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Custom headers to set in the request. HTTP allows repeated headers.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) HttpHeaders() ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) []ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatch {
		if v == nil {
			return nil
		}
		return v.HttpHeaders
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput)
}

// Path to access on the HTTP server.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Name or number of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// Scheme to use for connecting to the host.
// Defaults to HTTP.
func (o ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput) Scheme() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch) *string {
		if v == nil {
			return nil
		}
		return v.Scheme
	}).(pulumi.StringPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized.
// If specified, no other probes are executed until this completes successfully.
// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
// when it might take a long time to load data or warm a cache, than during steady-state operation.
// This cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersStartupProbePatch struct {
	Exec *ThanosRulerSpecInitContainersStartupProbeExecPatch `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold *int                                                   `pulumi:"failureThreshold"`
	Grpc             *ThanosRulerSpecInitContainersStartupProbeGrpcPatch    `pulumi:"grpc"`
	HttpGet          *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds *int `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds *int `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold *int                                                     `pulumi:"successThreshold"`
	TcpSocket        *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
	// The grace period is the duration in seconds after the processes running in the pod are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
	// value overrides the value provided by the pod spec.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down).
	// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
	// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds *int `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds *int `pulumi:"timeoutSeconds"`
}

// ThanosRulerSpecInitContainersStartupProbePatchInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbePatchArgs and ThanosRulerSpecInitContainersStartupProbePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbePatchInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbePatchArgs{...}
type ThanosRulerSpecInitContainersStartupProbePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbePatchOutput() ThanosRulerSpecInitContainersStartupProbePatchOutput
	ToThanosRulerSpecInitContainersStartupProbePatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbePatchOutput
}

// StartupProbe indicates that the Pod has successfully initialized.
// If specified, no other probes are executed until this completes successfully.
// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
// when it might take a long time to load data or warm a cache, than during steady-state operation.
// This cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersStartupProbePatchArgs struct {
	Exec ThanosRulerSpecInitContainersStartupProbeExecPatchPtrInput `pulumi:"exec"`
	// Minimum consecutive failures for the probe to be considered failed after having succeeded.
	// Defaults to 3. Minimum value is 1.
	FailureThreshold pulumi.IntPtrInput                                            `pulumi:"failureThreshold"`
	Grpc             ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrInput    `pulumi:"grpc"`
	HttpGet          ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrInput `pulumi:"httpGet"`
	// Number of seconds after the container has started before liveness probes are initiated.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	InitialDelaySeconds pulumi.IntPtrInput `pulumi:"initialDelaySeconds"`
	// How often (in seconds) to perform the probe.
	// Default to 10 seconds. Minimum value is 1.
	PeriodSeconds pulumi.IntPtrInput `pulumi:"periodSeconds"`
	// Minimum consecutive successes for the probe to be considered successful after having failed.
	// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
	SuccessThreshold pulumi.IntPtrInput                                              `pulumi:"successThreshold"`
	TcpSocket        ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrInput `pulumi:"tcpSocket"`
	// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
	// The grace period is the duration in seconds after the processes running in the pod are sent
	// a termination signal and the time when the processes are forcibly halted with a kill signal.
	// Set this value longer than the expected cleanup time for your process.
	// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
	// value overrides the value provided by the pod spec.
	// Value must be non-negative integer. The value zero indicates stop immediately via
	// the kill signal (no opportunity to shut down).
	// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
	// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
	TerminationGracePeriodSeconds pulumi.IntPtrInput `pulumi:"terminationGracePeriodSeconds"`
	// Number of seconds after which the probe times out.
	// Defaults to 1 second. Minimum value is 1.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
	TimeoutSeconds pulumi.IntPtrInput `pulumi:"timeoutSeconds"`
}

func (ThanosRulerSpecInitContainersStartupProbePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbePatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbePatchArgs) ToThanosRulerSpecInitContainersStartupProbePatchOutput() ThanosRulerSpecInitContainersStartupProbePatchOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbePatchArgs) ToThanosRulerSpecInitContainersStartupProbePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbePatchOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbePatchArgs) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutput() ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbePatchArgs) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbePatchOutput).ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbePatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbePatchArgs, ThanosRulerSpecInitContainersStartupProbePatchPtr and ThanosRulerSpecInitContainersStartupProbePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbePatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbePatchPtrOutput() ThanosRulerSpecInitContainersStartupProbePatchPtrOutput
	ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbePatchPtrOutput
}

type thanosRulerSpecInitContainersStartupProbePatchPtrType ThanosRulerSpecInitContainersStartupProbePatchArgs

func ThanosRulerSpecInitContainersStartupProbePatchPtr(v *ThanosRulerSpecInitContainersStartupProbePatchArgs) ThanosRulerSpecInitContainersStartupProbePatchPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbePatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbePatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbePatchPtrType) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutput() ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbePatchPtrType) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbePatchPtrOutput)
}

// StartupProbe indicates that the Pod has successfully initialized.
// If specified, no other probes are executed until this completes successfully.
// If this probe fails, the Pod will be restarted, just as if the livenessProbe failed.
// This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
// when it might take a long time to load data or warm a cache, than during steady-state operation.
// This cannot be updated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
type ThanosRulerSpecInitContainersStartupProbePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) ToThanosRulerSpecInitContainersStartupProbePatchOutput() ThanosRulerSpecInitContainersStartupProbePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) ToThanosRulerSpecInitContainersStartupProbePatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutput() ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbePatch {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbePatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) Exec() ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeExecPatch {
		return v.Exec
	}).(ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.
// Defaults to 3. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *int { return v.FailureThreshold }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) Grpc() ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeGrpcPatch {
		return v.Grpc
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) HttpGet() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch {
		return v.HttpGet
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *int { return v.InitialDelaySeconds }).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe.
// Default to 10 seconds. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *int { return v.PeriodSeconds }).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed.
// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *int { return v.SuccessThreshold }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) TcpSocket() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch {
		return v.TcpSocket
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
// The grace period is the duration in seconds after the processes running in the pod are sent
// a termination signal and the time when the processes are forcibly halted with a kill signal.
// Set this value longer than the expected cleanup time for your process.
// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
// value overrides the value provided by the pod spec.
// Value must be non-negative integer. The value zero indicates stop immediately via
// the kill signal (no opportunity to shut down).
// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *int { return v.TerminationGracePeriodSeconds }).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is 1.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbePatchOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbePatch) *int { return v.TimeoutSeconds }).(pulumi.IntPtrOutput)
}

type ThanosRulerSpecInitContainersStartupProbePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbePatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutput() ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) ThanosRulerSpecInitContainersStartupProbePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbePatch
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbePatchOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) Exec() ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeExecPatch {
		if v == nil {
			return nil
		}
		return v.Exec
	}).(ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput)
}

// Minimum consecutive failures for the probe to be considered failed after having succeeded.
// Defaults to 3. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) FailureThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.FailureThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) Grpc() ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeGrpcPatch {
		if v == nil {
			return nil
		}
		return v.Grpc
	}).(ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) HttpGet() ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeHttpGetPatch {
		if v == nil {
			return nil
		}
		return v.HttpGet
	}).(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput)
}

// Number of seconds after the container has started before liveness probes are initiated.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) InitialDelaySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.InitialDelaySeconds
	}).(pulumi.IntPtrOutput)
}

// How often (in seconds) to perform the probe.
// Default to 10 seconds. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) PeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.PeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Minimum consecutive successes for the probe to be considered successful after having failed.
// Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) SuccessThreshold() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.SuccessThreshold
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) TcpSocket() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch {
		if v == nil {
			return nil
		}
		return v.TcpSocket
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput)
}

// Optional duration in seconds the pod needs to terminate gracefully upon probe failure.
// The grace period is the duration in seconds after the processes running in the pod are sent
// a termination signal and the time when the processes are forcibly halted with a kill signal.
// Set this value longer than the expected cleanup time for your process.
// If this value is nil, the pod's terminationGracePeriodSeconds will be used. Otherwise, this
// value overrides the value provided by the pod spec.
// Value must be non-negative integer. The value zero indicates stop immediately via
// the kill signal (no opportunity to shut down).
// This is a beta field and requires enabling ProbeTerminationGracePeriod feature gate.
// Minimum value is 1. spec.terminationGracePeriodSeconds is used if unset.
func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) TerminationGracePeriodSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.TerminationGracePeriodSeconds
	}).(pulumi.IntPtrOutput)
}

// Number of seconds after which the probe times out.
// Defaults to 1 second. Minimum value is 1.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
func (o ThanosRulerSpecInitContainersStartupProbePatchPtrOutput) TimeoutSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbePatch) *int {
		if v == nil {
			return nil
		}
		return v.TimeoutSeconds
	}).(pulumi.IntPtrOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersStartupProbeTcpSocket struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
}

// ThanosRulerSpecInitContainersStartupProbeTcpSocketInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs and ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeTcpSocketInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs{...}
type ThanosRulerSpecInitContainersStartupProbeTcpSocketInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeTcpSocketOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput
	ToThanosRulerSpecInitContainersStartupProbeTcpSocketOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
}

func (ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeTcpSocketOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput).ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs, ThanosRulerSpecInitContainersStartupProbeTcpSocketPtr and ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeTcpSocketPtrType ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs

func ThanosRulerSpecInitContainersStartupProbeTcpSocketPtr(v *ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs) ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeTcpSocketPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeTcpSocketPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeTcpSocketPtrType) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeTcpSocketPtrType) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeTcpSocket) *ThanosRulerSpecInitContainersStartupProbeTcpSocket {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeTcpSocket) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeTcpSocket) interface{} { return v.Port }).(pulumi.AnyOutput)
}

type ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeTcpSocket)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeTcpSocket) ThanosRulerSpecInitContainersStartupProbeTcpSocket {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeTcpSocket
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeTcpSocket) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeTcpSocket) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host *string `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port interface{} `pulumi:"port"`
}

// ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs and ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchInput` via:
//
//	ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs{...}
type ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput
	ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs struct {
	// Optional: Host name to connect to, defaults to the pod IP.
	Host pulumi.StringPtrInput `pulumi:"host"`
	// Number or name of the port to access on the container.
	// Number must be in the range 1 to 65535.
	// Name must be an IANA_SVC_NAME.
	Port pulumi.Input `pulumi:"port"`
}

func (ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput)
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput).ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrInput is an input type that accepts ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs, ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtr and ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrInput` via:
//
//	        ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput
	ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput
}

type thanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrType ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs

func ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtr(v *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrInput {
	return (*thanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrType)(v)
}

func (*thanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch)(nil)).Elem()
}

func (i *thanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return i.ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrType) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput)
}

// TCPSocket specifies a connection to a TCP port.
type ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return o.ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch) *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch {
		return &v
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch) *string { return v.Host }).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch) interface{} { return v.Port }).(pulumi.AnyOutput)
}

type ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput) ToThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput) Elem() ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch) ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch
		return ret
	}).(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput)
}

// Optional: Host name to connect to, defaults to the pod IP.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch) *string {
		if v == nil {
			return nil
		}
		return v.Host
	}).(pulumi.StringPtrOutput)
}

// Number or name of the port to access on the container.
// Number must be in the range 1 to 65535.
// Name must be an IANA_SVC_NAME.
func (o ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput) Port() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecInitContainersStartupProbeTcpSocketPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Port
	}).(pulumi.AnyOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type ThanosRulerSpecInitContainersVolumeDevices struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath *string `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecInitContainersVolumeDevicesInput is an input type that accepts ThanosRulerSpecInitContainersVolumeDevicesArgs and ThanosRulerSpecInitContainersVolumeDevicesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeDevicesInput` via:
//
//	ThanosRulerSpecInitContainersVolumeDevicesArgs{...}
type ThanosRulerSpecInitContainersVolumeDevicesInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeDevicesOutput() ThanosRulerSpecInitContainersVolumeDevicesOutput
	ToThanosRulerSpecInitContainersVolumeDevicesOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeDevicesOutput
}

// volumeDevice describes a mapping of a raw block device within a container.
type ThanosRulerSpecInitContainersVolumeDevicesArgs struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath pulumi.StringPtrInput `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecInitContainersVolumeDevicesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeDevicesArgs) ToThanosRulerSpecInitContainersVolumeDevicesOutput() ThanosRulerSpecInitContainersVolumeDevicesOutput {
	return i.ToThanosRulerSpecInitContainersVolumeDevicesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeDevicesArgs) ToThanosRulerSpecInitContainersVolumeDevicesOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeDevicesOutput)
}

// ThanosRulerSpecInitContainersVolumeDevicesArrayInput is an input type that accepts ThanosRulerSpecInitContainersVolumeDevicesArray and ThanosRulerSpecInitContainersVolumeDevicesArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeDevicesArrayInput` via:
//
//	ThanosRulerSpecInitContainersVolumeDevicesArray{ ThanosRulerSpecInitContainersVolumeDevicesArgs{...} }
type ThanosRulerSpecInitContainersVolumeDevicesArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeDevicesArrayOutput() ThanosRulerSpecInitContainersVolumeDevicesArrayOutput
	ToThanosRulerSpecInitContainersVolumeDevicesArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeDevicesArrayOutput
}

type ThanosRulerSpecInitContainersVolumeDevicesArray []ThanosRulerSpecInitContainersVolumeDevicesInput

func (ThanosRulerSpecInitContainersVolumeDevicesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeDevicesArray) ToThanosRulerSpecInitContainersVolumeDevicesArrayOutput() ThanosRulerSpecInitContainersVolumeDevicesArrayOutput {
	return i.ToThanosRulerSpecInitContainersVolumeDevicesArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeDevicesArray) ToThanosRulerSpecInitContainersVolumeDevicesArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeDevicesArrayOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type ThanosRulerSpecInitContainersVolumeDevicesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeDevicesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeDevicesOutput) ToThanosRulerSpecInitContainersVolumeDevicesOutput() ThanosRulerSpecInitContainersVolumeDevicesOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeDevicesOutput) ToThanosRulerSpecInitContainersVolumeDevicesOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesOutput {
	return o
}

// devicePath is the path inside of the container that the device will be mapped to.
func (o ThanosRulerSpecInitContainersVolumeDevicesOutput) DevicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeDevices) *string { return v.DevicePath }).(pulumi.StringPtrOutput)
}

// name must match the name of a persistentVolumeClaim in the pod
func (o ThanosRulerSpecInitContainersVolumeDevicesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeDevices) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersVolumeDevicesArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeDevicesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeDevices)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeDevicesArrayOutput) ToThanosRulerSpecInitContainersVolumeDevicesArrayOutput() ThanosRulerSpecInitContainersVolumeDevicesArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeDevicesArrayOutput) ToThanosRulerSpecInitContainersVolumeDevicesArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeDevicesArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersVolumeDevicesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersVolumeDevices {
		return vs[0].([]ThanosRulerSpecInitContainersVolumeDevices)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersVolumeDevicesOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type ThanosRulerSpecInitContainersVolumeDevicesPatch struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath *string `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecInitContainersVolumeDevicesPatchInput is an input type that accepts ThanosRulerSpecInitContainersVolumeDevicesPatchArgs and ThanosRulerSpecInitContainersVolumeDevicesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeDevicesPatchInput` via:
//
//	ThanosRulerSpecInitContainersVolumeDevicesPatchArgs{...}
type ThanosRulerSpecInitContainersVolumeDevicesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeDevicesPatchOutput() ThanosRulerSpecInitContainersVolumeDevicesPatchOutput
	ToThanosRulerSpecInitContainersVolumeDevicesPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeDevicesPatchOutput
}

// volumeDevice describes a mapping of a raw block device within a container.
type ThanosRulerSpecInitContainersVolumeDevicesPatchArgs struct {
	// devicePath is the path inside of the container that the device will be mapped to.
	DevicePath pulumi.StringPtrInput `pulumi:"devicePath"`
	// name must match the name of a persistentVolumeClaim in the pod
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecInitContainersVolumeDevicesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevicesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeDevicesPatchArgs) ToThanosRulerSpecInitContainersVolumeDevicesPatchOutput() ThanosRulerSpecInitContainersVolumeDevicesPatchOutput {
	return i.ToThanosRulerSpecInitContainersVolumeDevicesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeDevicesPatchArgs) ToThanosRulerSpecInitContainersVolumeDevicesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeDevicesPatchOutput)
}

// ThanosRulerSpecInitContainersVolumeDevicesPatchArrayInput is an input type that accepts ThanosRulerSpecInitContainersVolumeDevicesPatchArray and ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeDevicesPatchArrayInput` via:
//
//	ThanosRulerSpecInitContainersVolumeDevicesPatchArray{ ThanosRulerSpecInitContainersVolumeDevicesPatchArgs{...} }
type ThanosRulerSpecInitContainersVolumeDevicesPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput() ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput
	ToThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput
}

type ThanosRulerSpecInitContainersVolumeDevicesPatchArray []ThanosRulerSpecInitContainersVolumeDevicesPatchInput

func (ThanosRulerSpecInitContainersVolumeDevicesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeDevicesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeDevicesPatchArray) ToThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput() ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput {
	return i.ToThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeDevicesPatchArray) ToThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput)
}

// volumeDevice describes a mapping of a raw block device within a container.
type ThanosRulerSpecInitContainersVolumeDevicesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeDevicesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevicesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeDevicesPatchOutput) ToThanosRulerSpecInitContainersVolumeDevicesPatchOutput() ThanosRulerSpecInitContainersVolumeDevicesPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeDevicesPatchOutput) ToThanosRulerSpecInitContainersVolumeDevicesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesPatchOutput {
	return o
}

// devicePath is the path inside of the container that the device will be mapped to.
func (o ThanosRulerSpecInitContainersVolumeDevicesPatchOutput) DevicePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeDevicesPatch) *string { return v.DevicePath }).(pulumi.StringPtrOutput)
}

// name must match the name of a persistentVolumeClaim in the pod
func (o ThanosRulerSpecInitContainersVolumeDevicesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeDevicesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeDevicesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput) ToThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput() ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput) ToThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersVolumeDevicesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersVolumeDevicesPatch {
		return vs[0].([]ThanosRulerSpecInitContainersVolumeDevicesPatch)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersVolumeDevicesPatchOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecInitContainersVolumeMounts struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name *string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly *string `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// ThanosRulerSpecInitContainersVolumeMountsInput is an input type that accepts ThanosRulerSpecInitContainersVolumeMountsArgs and ThanosRulerSpecInitContainersVolumeMountsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeMountsInput` via:
//
//	ThanosRulerSpecInitContainersVolumeMountsArgs{...}
type ThanosRulerSpecInitContainersVolumeMountsInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeMountsOutput() ThanosRulerSpecInitContainersVolumeMountsOutput
	ToThanosRulerSpecInitContainersVolumeMountsOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeMountsOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecInitContainersVolumeMountsArgs struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly pulumi.StringPtrInput `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ThanosRulerSpecInitContainersVolumeMountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeMountsArgs) ToThanosRulerSpecInitContainersVolumeMountsOutput() ThanosRulerSpecInitContainersVolumeMountsOutput {
	return i.ToThanosRulerSpecInitContainersVolumeMountsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeMountsArgs) ToThanosRulerSpecInitContainersVolumeMountsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeMountsOutput)
}

// ThanosRulerSpecInitContainersVolumeMountsArrayInput is an input type that accepts ThanosRulerSpecInitContainersVolumeMountsArray and ThanosRulerSpecInitContainersVolumeMountsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeMountsArrayInput` via:
//
//	ThanosRulerSpecInitContainersVolumeMountsArray{ ThanosRulerSpecInitContainersVolumeMountsArgs{...} }
type ThanosRulerSpecInitContainersVolumeMountsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeMountsArrayOutput() ThanosRulerSpecInitContainersVolumeMountsArrayOutput
	ToThanosRulerSpecInitContainersVolumeMountsArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeMountsArrayOutput
}

type ThanosRulerSpecInitContainersVolumeMountsArray []ThanosRulerSpecInitContainersVolumeMountsInput

func (ThanosRulerSpecInitContainersVolumeMountsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeMountsArray) ToThanosRulerSpecInitContainersVolumeMountsArrayOutput() ThanosRulerSpecInitContainersVolumeMountsArrayOutput {
	return i.ToThanosRulerSpecInitContainersVolumeMountsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeMountsArray) ToThanosRulerSpecInitContainersVolumeMountsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeMountsArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecInitContainersVolumeMountsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeMountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeMountsOutput) ToThanosRulerSpecInitContainersVolumeMountsOutput() ThanosRulerSpecInitContainersVolumeMountsOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeMountsOutput) ToThanosRulerSpecInitContainersVolumeMountsOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must
// not contain ':'.
func (o ThanosRulerSpecInitContainersVolumeMountsOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMounts) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// mountPropagation determines how mounts are propagated from the host
// to container and the other way around.
// When not set, MountPropagationNone is used.
// This field is beta in 1.10.
// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
// (which defaults to None).
func (o ThanosRulerSpecInitContainersVolumeMountsOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMounts) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o ThanosRulerSpecInitContainersVolumeMountsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMounts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified).
// Defaults to false.
func (o ThanosRulerSpecInitContainersVolumeMountsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMounts) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// RecursiveReadOnly specifies whether read-only mounts should be handled
// recursively.
//
// If ReadOnly is false, this field has no meaning and must be unspecified.
//
// If ReadOnly is true, and this field is set to Disabled, the mount is not made
// recursively read-only.  If this field is set to IfPossible, the mount is made
// recursively read-only, if it is supported by the container runtime.  If this
// field is set to Enabled, the mount is made recursively read-only if it is
// supported by the container runtime, otherwise the pod will not be started and
// an error will be generated to indicate the reason.
//
// If this field is set to IfPossible or Enabled, MountPropagation must be set to
// None (or be unspecified, which defaults to None).
//
// If this field is not specified, it is treated as an equivalent of Disabled.
func (o ThanosRulerSpecInitContainersVolumeMountsOutput) RecursiveReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMounts) *string { return v.RecursiveReadOnly }).(pulumi.StringPtrOutput)
}

// Path within the volume from which the container's volume should be mounted.
// Defaults to "" (volume's root).
func (o ThanosRulerSpecInitContainersVolumeMountsOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMounts) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted.
// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
// Defaults to "" (volume's root).
// SubPathExpr and SubPath are mutually exclusive.
func (o ThanosRulerSpecInitContainersVolumeMountsOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMounts) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersVolumeMountsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeMountsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeMounts)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeMountsArrayOutput) ToThanosRulerSpecInitContainersVolumeMountsArrayOutput() ThanosRulerSpecInitContainersVolumeMountsArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeMountsArrayOutput) ToThanosRulerSpecInitContainersVolumeMountsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeMountsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersVolumeMountsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersVolumeMounts {
		return vs[0].([]ThanosRulerSpecInitContainersVolumeMounts)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersVolumeMountsOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecInitContainersVolumeMountsPatch struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name *string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly *string `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// ThanosRulerSpecInitContainersVolumeMountsPatchInput is an input type that accepts ThanosRulerSpecInitContainersVolumeMountsPatchArgs and ThanosRulerSpecInitContainersVolumeMountsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeMountsPatchInput` via:
//
//	ThanosRulerSpecInitContainersVolumeMountsPatchArgs{...}
type ThanosRulerSpecInitContainersVolumeMountsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeMountsPatchOutput() ThanosRulerSpecInitContainersVolumeMountsPatchOutput
	ToThanosRulerSpecInitContainersVolumeMountsPatchOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeMountsPatchOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecInitContainersVolumeMountsPatchArgs struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly pulumi.StringPtrInput `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ThanosRulerSpecInitContainersVolumeMountsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMountsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeMountsPatchArgs) ToThanosRulerSpecInitContainersVolumeMountsPatchOutput() ThanosRulerSpecInitContainersVolumeMountsPatchOutput {
	return i.ToThanosRulerSpecInitContainersVolumeMountsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeMountsPatchArgs) ToThanosRulerSpecInitContainersVolumeMountsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeMountsPatchOutput)
}

// ThanosRulerSpecInitContainersVolumeMountsPatchArrayInput is an input type that accepts ThanosRulerSpecInitContainersVolumeMountsPatchArray and ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecInitContainersVolumeMountsPatchArrayInput` via:
//
//	ThanosRulerSpecInitContainersVolumeMountsPatchArray{ ThanosRulerSpecInitContainersVolumeMountsPatchArgs{...} }
type ThanosRulerSpecInitContainersVolumeMountsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput() ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput
	ToThanosRulerSpecInitContainersVolumeMountsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput
}

type ThanosRulerSpecInitContainersVolumeMountsPatchArray []ThanosRulerSpecInitContainersVolumeMountsPatchInput

func (ThanosRulerSpecInitContainersVolumeMountsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeMountsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecInitContainersVolumeMountsPatchArray) ToThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput() ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput {
	return i.ToThanosRulerSpecInitContainersVolumeMountsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecInitContainersVolumeMountsPatchArray) ToThanosRulerSpecInitContainersVolumeMountsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecInitContainersVolumeMountsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeMountsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMountsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) ToThanosRulerSpecInitContainersVolumeMountsPatchOutput() ThanosRulerSpecInitContainersVolumeMountsPatchOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) ToThanosRulerSpecInitContainersVolumeMountsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsPatchOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must
// not contain ':'.
func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMountsPatch) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// mountPropagation determines how mounts are propagated from the host
// to container and the other way around.
// When not set, MountPropagationNone is used.
// This field is beta in 1.10.
// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
// (which defaults to None).
func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMountsPatch) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMountsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified).
// Defaults to false.
func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMountsPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// RecursiveReadOnly specifies whether read-only mounts should be handled
// recursively.
//
// If ReadOnly is false, this field has no meaning and must be unspecified.
//
// If ReadOnly is true, and this field is set to Disabled, the mount is not made
// recursively read-only.  If this field is set to IfPossible, the mount is made
// recursively read-only, if it is supported by the container runtime.  If this
// field is set to Enabled, the mount is made recursively read-only if it is
// supported by the container runtime, otherwise the pod will not be started and
// an error will be generated to indicate the reason.
//
// If this field is set to IfPossible or Enabled, MountPropagation must be set to
// None (or be unspecified, which defaults to None).
//
// If this field is not specified, it is treated as an equivalent of Disabled.
func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) RecursiveReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMountsPatch) *string { return v.RecursiveReadOnly }).(pulumi.StringPtrOutput)
}

// Path within the volume from which the container's volume should be mounted.
// Defaults to "" (volume's root).
func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMountsPatch) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted.
// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
// Defaults to "" (volume's root).
// SubPathExpr and SubPath are mutually exclusive.
func (o ThanosRulerSpecInitContainersVolumeMountsPatchOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecInitContainersVolumeMountsPatch) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecInitContainersVolumeMountsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput) ToThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput() ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput) ToThanosRulerSpecInitContainersVolumeMountsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecInitContainersVolumeMountsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecInitContainersVolumeMountsPatch {
		return vs[0].([]ThanosRulerSpecInitContainersVolumeMountsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecInitContainersVolumeMountsPatchOutput)
}

// Configures object storage.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration.
//
// `objectStorageConfigFile` takes precedence over this field.
type ThanosRulerSpecObjectStorageConfig struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecObjectStorageConfigInput is an input type that accepts ThanosRulerSpecObjectStorageConfigArgs and ThanosRulerSpecObjectStorageConfigOutput values.
// You can construct a concrete instance of `ThanosRulerSpecObjectStorageConfigInput` via:
//
//	ThanosRulerSpecObjectStorageConfigArgs{...}
type ThanosRulerSpecObjectStorageConfigInput interface {
	pulumi.Input

	ToThanosRulerSpecObjectStorageConfigOutput() ThanosRulerSpecObjectStorageConfigOutput
	ToThanosRulerSpecObjectStorageConfigOutputWithContext(context.Context) ThanosRulerSpecObjectStorageConfigOutput
}

// Configures object storage.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration.
//
// `objectStorageConfigFile` takes precedence over this field.
type ThanosRulerSpecObjectStorageConfigArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecObjectStorageConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecObjectStorageConfig)(nil)).Elem()
}

func (i ThanosRulerSpecObjectStorageConfigArgs) ToThanosRulerSpecObjectStorageConfigOutput() ThanosRulerSpecObjectStorageConfigOutput {
	return i.ToThanosRulerSpecObjectStorageConfigOutputWithContext(context.Background())
}

func (i ThanosRulerSpecObjectStorageConfigArgs) ToThanosRulerSpecObjectStorageConfigOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecObjectStorageConfigOutput)
}

func (i ThanosRulerSpecObjectStorageConfigArgs) ToThanosRulerSpecObjectStorageConfigPtrOutput() ThanosRulerSpecObjectStorageConfigPtrOutput {
	return i.ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecObjectStorageConfigArgs) ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecObjectStorageConfigOutput).ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(ctx)
}

// ThanosRulerSpecObjectStorageConfigPtrInput is an input type that accepts ThanosRulerSpecObjectStorageConfigArgs, ThanosRulerSpecObjectStorageConfigPtr and ThanosRulerSpecObjectStorageConfigPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecObjectStorageConfigPtrInput` via:
//
//	        ThanosRulerSpecObjectStorageConfigArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecObjectStorageConfigPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecObjectStorageConfigPtrOutput() ThanosRulerSpecObjectStorageConfigPtrOutput
	ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(context.Context) ThanosRulerSpecObjectStorageConfigPtrOutput
}

type thanosRulerSpecObjectStorageConfigPtrType ThanosRulerSpecObjectStorageConfigArgs

func ThanosRulerSpecObjectStorageConfigPtr(v *ThanosRulerSpecObjectStorageConfigArgs) ThanosRulerSpecObjectStorageConfigPtrInput {
	return (*thanosRulerSpecObjectStorageConfigPtrType)(v)
}

func (*thanosRulerSpecObjectStorageConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecObjectStorageConfig)(nil)).Elem()
}

func (i *thanosRulerSpecObjectStorageConfigPtrType) ToThanosRulerSpecObjectStorageConfigPtrOutput() ThanosRulerSpecObjectStorageConfigPtrOutput {
	return i.ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecObjectStorageConfigPtrType) ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecObjectStorageConfigPtrOutput)
}

// Configures object storage.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration.
//
// `objectStorageConfigFile` takes precedence over this field.
type ThanosRulerSpecObjectStorageConfigOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecObjectStorageConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecObjectStorageConfig)(nil)).Elem()
}

func (o ThanosRulerSpecObjectStorageConfigOutput) ToThanosRulerSpecObjectStorageConfigOutput() ThanosRulerSpecObjectStorageConfigOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigOutput) ToThanosRulerSpecObjectStorageConfigOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigOutput) ToThanosRulerSpecObjectStorageConfigPtrOutput() ThanosRulerSpecObjectStorageConfigPtrOutput {
	return o.ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecObjectStorageConfigOutput) ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecObjectStorageConfig) *ThanosRulerSpecObjectStorageConfig {
		return &v
	}).(ThanosRulerSpecObjectStorageConfigPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecObjectStorageConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecObjectStorageConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecObjectStorageConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecObjectStorageConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecObjectStorageConfigOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecObjectStorageConfig) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecObjectStorageConfigPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecObjectStorageConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecObjectStorageConfig)(nil)).Elem()
}

func (o ThanosRulerSpecObjectStorageConfigPtrOutput) ToThanosRulerSpecObjectStorageConfigPtrOutput() ThanosRulerSpecObjectStorageConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigPtrOutput) ToThanosRulerSpecObjectStorageConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigPtrOutput) Elem() ThanosRulerSpecObjectStorageConfigOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfig) ThanosRulerSpecObjectStorageConfig {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecObjectStorageConfig
		return ret
	}).(ThanosRulerSpecObjectStorageConfigOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecObjectStorageConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfig) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecObjectStorageConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecObjectStorageConfigPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Configures object storage.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration.
//
// `objectStorageConfigFile` takes precedence over this field.
type ThanosRulerSpecObjectStorageConfigPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecObjectStorageConfigPatchInput is an input type that accepts ThanosRulerSpecObjectStorageConfigPatchArgs and ThanosRulerSpecObjectStorageConfigPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecObjectStorageConfigPatchInput` via:
//
//	ThanosRulerSpecObjectStorageConfigPatchArgs{...}
type ThanosRulerSpecObjectStorageConfigPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecObjectStorageConfigPatchOutput() ThanosRulerSpecObjectStorageConfigPatchOutput
	ToThanosRulerSpecObjectStorageConfigPatchOutputWithContext(context.Context) ThanosRulerSpecObjectStorageConfigPatchOutput
}

// Configures object storage.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration.
//
// `objectStorageConfigFile` takes precedence over this field.
type ThanosRulerSpecObjectStorageConfigPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecObjectStorageConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecObjectStorageConfigPatch)(nil)).Elem()
}

func (i ThanosRulerSpecObjectStorageConfigPatchArgs) ToThanosRulerSpecObjectStorageConfigPatchOutput() ThanosRulerSpecObjectStorageConfigPatchOutput {
	return i.ToThanosRulerSpecObjectStorageConfigPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecObjectStorageConfigPatchArgs) ToThanosRulerSpecObjectStorageConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecObjectStorageConfigPatchOutput)
}

func (i ThanosRulerSpecObjectStorageConfigPatchArgs) ToThanosRulerSpecObjectStorageConfigPatchPtrOutput() ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return i.ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecObjectStorageConfigPatchArgs) ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecObjectStorageConfigPatchOutput).ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecObjectStorageConfigPatchPtrInput is an input type that accepts ThanosRulerSpecObjectStorageConfigPatchArgs, ThanosRulerSpecObjectStorageConfigPatchPtr and ThanosRulerSpecObjectStorageConfigPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecObjectStorageConfigPatchPtrInput` via:
//
//	        ThanosRulerSpecObjectStorageConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecObjectStorageConfigPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecObjectStorageConfigPatchPtrOutput() ThanosRulerSpecObjectStorageConfigPatchPtrOutput
	ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(context.Context) ThanosRulerSpecObjectStorageConfigPatchPtrOutput
}

type thanosRulerSpecObjectStorageConfigPatchPtrType ThanosRulerSpecObjectStorageConfigPatchArgs

func ThanosRulerSpecObjectStorageConfigPatchPtr(v *ThanosRulerSpecObjectStorageConfigPatchArgs) ThanosRulerSpecObjectStorageConfigPatchPtrInput {
	return (*thanosRulerSpecObjectStorageConfigPatchPtrType)(v)
}

func (*thanosRulerSpecObjectStorageConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecObjectStorageConfigPatch)(nil)).Elem()
}

func (i *thanosRulerSpecObjectStorageConfigPatchPtrType) ToThanosRulerSpecObjectStorageConfigPatchPtrOutput() ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return i.ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecObjectStorageConfigPatchPtrType) ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecObjectStorageConfigPatchPtrOutput)
}

// Configures object storage.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration.
//
// `objectStorageConfigFile` takes precedence over this field.
type ThanosRulerSpecObjectStorageConfigPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecObjectStorageConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecObjectStorageConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecObjectStorageConfigPatchOutput) ToThanosRulerSpecObjectStorageConfigPatchOutput() ThanosRulerSpecObjectStorageConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigPatchOutput) ToThanosRulerSpecObjectStorageConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigPatchOutput) ToThanosRulerSpecObjectStorageConfigPatchPtrOutput() ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return o.ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecObjectStorageConfigPatchOutput) ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecObjectStorageConfigPatch) *ThanosRulerSpecObjectStorageConfigPatch {
		return &v
	}).(ThanosRulerSpecObjectStorageConfigPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecObjectStorageConfigPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecObjectStorageConfigPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecObjectStorageConfigPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecObjectStorageConfigPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecObjectStorageConfigPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecObjectStorageConfigPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecObjectStorageConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecObjectStorageConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecObjectStorageConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecObjectStorageConfigPatchPtrOutput) ToThanosRulerSpecObjectStorageConfigPatchPtrOutput() ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigPatchPtrOutput) ToThanosRulerSpecObjectStorageConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecObjectStorageConfigPatchPtrOutput) Elem() ThanosRulerSpecObjectStorageConfigPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfigPatch) ThanosRulerSpecObjectStorageConfigPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecObjectStorageConfigPatch
		return ret
	}).(ThanosRulerSpecObjectStorageConfigPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecObjectStorageConfigPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecObjectStorageConfigPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecObjectStorageConfigPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecObjectStorageConfigPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Specification of the desired behavior of the ThanosRuler cluster. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerSpecPatch struct {
	// AdditionalArgs allows setting additional arguments for the ThanosRuler container.
	// It is intended for e.g. activating hidden flags which are not supported by
	// the dedicated configuration options yet. The arguments are passed as-is to the
	// ThanosRuler container which may cause issues if they are invalid or not supported
	// by the given ThanosRuler version.
	// In case of an argument conflict (e.g. an argument which is already set by the
	// operator itself) or when providing an invalid argument the reconciliation will
	// fail and an error will be logged.
	AdditionalArgs []ThanosRulerSpecAdditionalArgsPatch `pulumi:"additionalArgs"`
	Affinity       *ThanosRulerSpecAffinityPatch        `pulumi:"affinity"`
	// Configures the label names which should be dropped in Thanos Ruler
	// alerts.
	//
	// The replica label `thanos_ruler_replica` will always be dropped from the alerts.
	AlertDropLabels []string `pulumi:"alertDropLabels"`
	// The external Query URL the Thanos Ruler will set in the 'Source' field
	// of all alerts.
	// Maps to the '--alert.query-url' CLI arg.
	AlertQueryUrl *string `pulumi:"alertQueryUrl"`
	// Configures the path to the alert relabeling configuration file.
	//
	// Alert relabel configuration must have the form as specified in the
	// official Prometheus documentation:
	// https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs
	//
	// The operator performs no validation of the configuration file.
	//
	// This field takes precedence over `alertRelabelConfig`.
	AlertRelabelConfigFile *string                                  `pulumi:"alertRelabelConfigFile"`
	AlertRelabelConfigs    *ThanosRulerSpecAlertRelabelConfigsPatch `pulumi:"alertRelabelConfigs"`
	AlertmanagersConfig    *ThanosRulerSpecAlertmanagersConfigPatch `pulumi:"alertmanagersConfig"`
	// Configures the list of Alertmanager endpoints to send alerts to.
	//
	// For Thanos >= v0.10.0, it is recommended to use `alertmanagersConfig` instead.
	//
	// `alertmanagersConfig` takes precedence over this field.
	AlertmanagersUrl []string `pulumi:"alertmanagersUrl"`
	// Containers allows injecting additional containers or modifying operator generated
	// containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or
	// to change the behavior of an operator generated container. Containers described here modify
	// an operator generated container if they share the same name and modifications are done via a
	// strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`.
	// Overriding containers is entirely outside the scope of what the maintainers will support and by doing
	// so, you accept that this behaviour may break at any time without notice.
	Containers []ThanosRulerSpecContainersPatch `pulumi:"containers"`
	DnsConfig  *ThanosRulerSpecDnsConfigPatch   `pulumi:"dnsConfig"`
	// Defines the DNS policy for the pods.
	DnsPolicy *string `pulumi:"dnsPolicy"`
	// EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert
	// and metric that is user created. The label value will always be the namespace of the object that is
	// being created.
	EnforcedNamespaceLabel *string `pulumi:"enforcedNamespaceLabel"`
	// Interval between consecutive evaluations.
	EvaluationInterval *string `pulumi:"evaluationInterval"`
	// List of references to PrometheusRule objects
	// to be excluded from enforcing a namespace label of origin.
	// Applies only if enforcedNamespaceLabel set to true.
	ExcludedFromEnforcement []ThanosRulerSpecExcludedFromEnforcementPatch `pulumi:"excludedFromEnforcement"`
	// The external URL the Thanos Ruler instances will be available under. This is
	// necessary to generate correct URLs. This is necessary if Thanos Ruler is not
	// served from root of a DNS name.
	ExternalPrefix      *string                                  `pulumi:"externalPrefix"`
	GrpcServerTlsConfig *ThanosRulerSpecGrpcServerTlsConfigPatch `pulumi:"grpcServerTlsConfig"`
	// Pods' hostAliases configuration
	HostAliases []ThanosRulerSpecHostAliasesPatch `pulumi:"hostAliases"`
	// Thanos container image URL.
	Image *string `pulumi:"image"`
	// Image pull policy for the 'thanos', 'init-config-reloader' and 'config-reloader' containers.
	// See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
	ImagePullPolicy *string `pulumi:"imagePullPolicy"`
	// An optional list of references to secrets in the same namespace
	// to use for pulling thanos images from registries
	// see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets []ThanosRulerSpecImagePullSecretsPatch `pulumi:"imagePullSecrets"`
	// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
	// fetch secrets for injection into the ThanosRuler configuration from external sources. Any
	// errors during the execution of an initContainer will lead to a restart of the Pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// Using initContainers for any use case other then secret fetching is entirely outside the scope
	// of what the maintainers will support and by doing so, you accept that this behaviour may break
	// at any time without notice.
	InitContainers []ThanosRulerSpecInitContainersPatch `pulumi:"initContainers"`
	// Configures the external label pairs of the ThanosRuler resource.
	//
	// A default replica label `thanos_ruler_replica` will be always added as a
	// label with the value of the pod's name.
	Labels map[string]string `pulumi:"labels"`
	// ListenLocal makes the Thanos ruler listen on loopback, so that it
	// does not bind against the Pod IP.
	ListenLocal *bool `pulumi:"listenLocal"`
	// Log format for ThanosRuler to be configured with.
	LogFormat *string `pulumi:"logFormat"`
	// Log level for ThanosRuler to be configured with.
	LogLevel *string `pulumi:"logLevel"`
	// Minimum number of seconds for which a newly created pod should be ready
	// without any of its container crashing for it to be considered available.
	// Defaults to 0 (pod will be considered available as soon as it is ready)
	// This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.
	MinReadySeconds *int `pulumi:"minReadySeconds"`
	// Define which Nodes the Pods are scheduled on.
	NodeSelector        map[string]string                        `pulumi:"nodeSelector"`
	ObjectStorageConfig *ThanosRulerSpecObjectStorageConfigPatch `pulumi:"objectStorageConfig"`
	// Configures the path of the object storage configuration file.
	//
	// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
	//
	// The operator performs no validation of the configuration file.
	//
	// This field takes precedence over `objectStorageConfig`.
	ObjectStorageConfigFile *string `pulumi:"objectStorageConfigFile"`
	// When a ThanosRuler deployment is paused, no actions except for deletion
	// will be performed on the underlying objects.
	Paused      *bool                            `pulumi:"paused"`
	PodMetadata *ThanosRulerSpecPodMetadataPatch `pulumi:"podMetadata"`
	// Port name used for the pods and governing service.
	// Defaults to `web`.
	PortName *string `pulumi:"portName"`
	// Priority class assigned to the Pods
	PriorityClassName *string `pulumi:"priorityClassName"`
	// PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing
	// of adding namespace labels. Works only if enforcedNamespaceLabel set to true.
	// Make sure both ruleNamespace and ruleName are set for each pair
	// Deprecated: use excludedFromEnforcement instead.
	PrometheusRulesExcludedFromEnforce []ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch `pulumi:"prometheusRulesExcludedFromEnforce"`
	QueryConfig                        *ThanosRulerSpecQueryConfigPatch                         `pulumi:"queryConfig"`
	// Configures the list of Thanos Query endpoints from which to query metrics.
	//
	// For Thanos >= v0.11.0, it is recommended to use `queryConfig` instead.
	//
	// `queryConfig` takes precedence over this field.
	QueryEndpoints []string `pulumi:"queryEndpoints"`
	// Number of thanos ruler instances to deploy.
	Replicas  *int                           `pulumi:"replicas"`
	Resources *ThanosRulerSpecResourcesPatch `pulumi:"resources"`
	// Time duration ThanosRuler shall retain data for. Default is '24h',
	// and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
	Retention *string `pulumi:"retention"`
	// The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.
	RoutePrefix           *string                                    `pulumi:"routePrefix"`
	RuleNamespaceSelector *ThanosRulerSpecRuleNamespaceSelectorPatch `pulumi:"ruleNamespaceSelector"`
	RuleSelector          *ThanosRulerSpecRuleSelectorPatch          `pulumi:"ruleSelector"`
	SecurityContext       *ThanosRulerSpecSecurityContextPatch       `pulumi:"securityContext"`
	// ServiceAccountName is the name of the ServiceAccount to use to run the
	// Thanos Ruler Pods.
	ServiceAccountName *string                      `pulumi:"serviceAccountName"`
	Storage            *ThanosRulerSpecStoragePatch `pulumi:"storage"`
	// If specified, the pod's tolerations.
	Tolerations []ThanosRulerSpecTolerationsPatch `pulumi:"tolerations"`
	// If specified, the pod's topology spread constraints.
	TopologySpreadConstraints []ThanosRulerSpecTopologySpreadConstraintsPatch `pulumi:"topologySpreadConstraints"`
	TracingConfig             *ThanosRulerSpecTracingConfigPatch              `pulumi:"tracingConfig"`
	// Configures the path of the tracing configuration file.
	//
	// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
	//
	// This is an *experimental feature*, it may change in any upcoming release
	// in a breaking way.
	//
	// The operator performs no validation of the configuration file.
	//
	// This field takes precedence over `tracingConfig`.
	TracingConfigFile *string `pulumi:"tracingConfigFile"`
	// Version of Thanos to be deployed.
	Version *string `pulumi:"version"`
	// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
	// VolumeMounts specified will be appended to other VolumeMounts in the ruler container,
	// that are generated as a result of StorageSpec objects.
	VolumeMounts []ThanosRulerSpecVolumeMountsPatch `pulumi:"volumeMounts"`
	// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will
	// be appended to other volumes that are generated as a result of StorageSpec objects.
	Volumes []ThanosRulerSpecVolumesPatch `pulumi:"volumes"`
	Web     *ThanosRulerSpecWebPatch      `pulumi:"web"`
}

// ThanosRulerSpecPatchInput is an input type that accepts ThanosRulerSpecPatchArgs and ThanosRulerSpecPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPatchInput` via:
//
//	ThanosRulerSpecPatchArgs{...}
type ThanosRulerSpecPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecPatchOutput() ThanosRulerSpecPatchOutput
	ToThanosRulerSpecPatchOutputWithContext(context.Context) ThanosRulerSpecPatchOutput
}

// Specification of the desired behavior of the ThanosRuler cluster. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerSpecPatchArgs struct {
	// AdditionalArgs allows setting additional arguments for the ThanosRuler container.
	// It is intended for e.g. activating hidden flags which are not supported by
	// the dedicated configuration options yet. The arguments are passed as-is to the
	// ThanosRuler container which may cause issues if they are invalid or not supported
	// by the given ThanosRuler version.
	// In case of an argument conflict (e.g. an argument which is already set by the
	// operator itself) or when providing an invalid argument the reconciliation will
	// fail and an error will be logged.
	AdditionalArgs ThanosRulerSpecAdditionalArgsPatchArrayInput `pulumi:"additionalArgs"`
	Affinity       ThanosRulerSpecAffinityPatchPtrInput         `pulumi:"affinity"`
	// Configures the label names which should be dropped in Thanos Ruler
	// alerts.
	//
	// The replica label `thanos_ruler_replica` will always be dropped from the alerts.
	AlertDropLabels pulumi.StringArrayInput `pulumi:"alertDropLabels"`
	// The external Query URL the Thanos Ruler will set in the 'Source' field
	// of all alerts.
	// Maps to the '--alert.query-url' CLI arg.
	AlertQueryUrl pulumi.StringPtrInput `pulumi:"alertQueryUrl"`
	// Configures the path to the alert relabeling configuration file.
	//
	// Alert relabel configuration must have the form as specified in the
	// official Prometheus documentation:
	// https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs
	//
	// The operator performs no validation of the configuration file.
	//
	// This field takes precedence over `alertRelabelConfig`.
	AlertRelabelConfigFile pulumi.StringPtrInput                           `pulumi:"alertRelabelConfigFile"`
	AlertRelabelConfigs    ThanosRulerSpecAlertRelabelConfigsPatchPtrInput `pulumi:"alertRelabelConfigs"`
	AlertmanagersConfig    ThanosRulerSpecAlertmanagersConfigPatchPtrInput `pulumi:"alertmanagersConfig"`
	// Configures the list of Alertmanager endpoints to send alerts to.
	//
	// For Thanos >= v0.10.0, it is recommended to use `alertmanagersConfig` instead.
	//
	// `alertmanagersConfig` takes precedence over this field.
	AlertmanagersUrl pulumi.StringArrayInput `pulumi:"alertmanagersUrl"`
	// Containers allows injecting additional containers or modifying operator generated
	// containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or
	// to change the behavior of an operator generated container. Containers described here modify
	// an operator generated container if they share the same name and modifications are done via a
	// strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`.
	// Overriding containers is entirely outside the scope of what the maintainers will support and by doing
	// so, you accept that this behaviour may break at any time without notice.
	Containers ThanosRulerSpecContainersPatchArrayInput `pulumi:"containers"`
	DnsConfig  ThanosRulerSpecDnsConfigPatchPtrInput    `pulumi:"dnsConfig"`
	// Defines the DNS policy for the pods.
	DnsPolicy pulumi.StringPtrInput `pulumi:"dnsPolicy"`
	// EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert
	// and metric that is user created. The label value will always be the namespace of the object that is
	// being created.
	EnforcedNamespaceLabel pulumi.StringPtrInput `pulumi:"enforcedNamespaceLabel"`
	// Interval between consecutive evaluations.
	EvaluationInterval pulumi.StringPtrInput `pulumi:"evaluationInterval"`
	// List of references to PrometheusRule objects
	// to be excluded from enforcing a namespace label of origin.
	// Applies only if enforcedNamespaceLabel set to true.
	ExcludedFromEnforcement ThanosRulerSpecExcludedFromEnforcementPatchArrayInput `pulumi:"excludedFromEnforcement"`
	// The external URL the Thanos Ruler instances will be available under. This is
	// necessary to generate correct URLs. This is necessary if Thanos Ruler is not
	// served from root of a DNS name.
	ExternalPrefix      pulumi.StringPtrInput                           `pulumi:"externalPrefix"`
	GrpcServerTlsConfig ThanosRulerSpecGrpcServerTlsConfigPatchPtrInput `pulumi:"grpcServerTlsConfig"`
	// Pods' hostAliases configuration
	HostAliases ThanosRulerSpecHostAliasesPatchArrayInput `pulumi:"hostAliases"`
	// Thanos container image URL.
	Image pulumi.StringPtrInput `pulumi:"image"`
	// Image pull policy for the 'thanos', 'init-config-reloader' and 'config-reloader' containers.
	// See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
	ImagePullPolicy pulumi.StringPtrInput `pulumi:"imagePullPolicy"`
	// An optional list of references to secrets in the same namespace
	// to use for pulling thanos images from registries
	// see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
	ImagePullSecrets ThanosRulerSpecImagePullSecretsPatchArrayInput `pulumi:"imagePullSecrets"`
	// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
	// fetch secrets for injection into the ThanosRuler configuration from external sources. Any
	// errors during the execution of an initContainer will lead to a restart of the Pod.
	// More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
	// Using initContainers for any use case other then secret fetching is entirely outside the scope
	// of what the maintainers will support and by doing so, you accept that this behaviour may break
	// at any time without notice.
	InitContainers ThanosRulerSpecInitContainersPatchArrayInput `pulumi:"initContainers"`
	// Configures the external label pairs of the ThanosRuler resource.
	//
	// A default replica label `thanos_ruler_replica` will be always added as a
	// label with the value of the pod's name.
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// ListenLocal makes the Thanos ruler listen on loopback, so that it
	// does not bind against the Pod IP.
	ListenLocal pulumi.BoolPtrInput `pulumi:"listenLocal"`
	// Log format for ThanosRuler to be configured with.
	LogFormat pulumi.StringPtrInput `pulumi:"logFormat"`
	// Log level for ThanosRuler to be configured with.
	LogLevel pulumi.StringPtrInput `pulumi:"logLevel"`
	// Minimum number of seconds for which a newly created pod should be ready
	// without any of its container crashing for it to be considered available.
	// Defaults to 0 (pod will be considered available as soon as it is ready)
	// This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.
	MinReadySeconds pulumi.IntPtrInput `pulumi:"minReadySeconds"`
	// Define which Nodes the Pods are scheduled on.
	NodeSelector        pulumi.StringMapInput                           `pulumi:"nodeSelector"`
	ObjectStorageConfig ThanosRulerSpecObjectStorageConfigPatchPtrInput `pulumi:"objectStorageConfig"`
	// Configures the path of the object storage configuration file.
	//
	// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
	//
	// The operator performs no validation of the configuration file.
	//
	// This field takes precedence over `objectStorageConfig`.
	ObjectStorageConfigFile pulumi.StringPtrInput `pulumi:"objectStorageConfigFile"`
	// When a ThanosRuler deployment is paused, no actions except for deletion
	// will be performed on the underlying objects.
	Paused      pulumi.BoolPtrInput                     `pulumi:"paused"`
	PodMetadata ThanosRulerSpecPodMetadataPatchPtrInput `pulumi:"podMetadata"`
	// Port name used for the pods and governing service.
	// Defaults to `web`.
	PortName pulumi.StringPtrInput `pulumi:"portName"`
	// Priority class assigned to the Pods
	PriorityClassName pulumi.StringPtrInput `pulumi:"priorityClassName"`
	// PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing
	// of adding namespace labels. Works only if enforcedNamespaceLabel set to true.
	// Make sure both ruleNamespace and ruleName are set for each pair
	// Deprecated: use excludedFromEnforcement instead.
	PrometheusRulesExcludedFromEnforce ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayInput `pulumi:"prometheusRulesExcludedFromEnforce"`
	QueryConfig                        ThanosRulerSpecQueryConfigPatchPtrInput                          `pulumi:"queryConfig"`
	// Configures the list of Thanos Query endpoints from which to query metrics.
	//
	// For Thanos >= v0.11.0, it is recommended to use `queryConfig` instead.
	//
	// `queryConfig` takes precedence over this field.
	QueryEndpoints pulumi.StringArrayInput `pulumi:"queryEndpoints"`
	// Number of thanos ruler instances to deploy.
	Replicas  pulumi.IntPtrInput                    `pulumi:"replicas"`
	Resources ThanosRulerSpecResourcesPatchPtrInput `pulumi:"resources"`
	// Time duration ThanosRuler shall retain data for. Default is '24h',
	// and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
	Retention pulumi.StringPtrInput `pulumi:"retention"`
	// The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.
	RoutePrefix           pulumi.StringPtrInput                             `pulumi:"routePrefix"`
	RuleNamespaceSelector ThanosRulerSpecRuleNamespaceSelectorPatchPtrInput `pulumi:"ruleNamespaceSelector"`
	RuleSelector          ThanosRulerSpecRuleSelectorPatchPtrInput          `pulumi:"ruleSelector"`
	SecurityContext       ThanosRulerSpecSecurityContextPatchPtrInput       `pulumi:"securityContext"`
	// ServiceAccountName is the name of the ServiceAccount to use to run the
	// Thanos Ruler Pods.
	ServiceAccountName pulumi.StringPtrInput               `pulumi:"serviceAccountName"`
	Storage            ThanosRulerSpecStoragePatchPtrInput `pulumi:"storage"`
	// If specified, the pod's tolerations.
	Tolerations ThanosRulerSpecTolerationsPatchArrayInput `pulumi:"tolerations"`
	// If specified, the pod's topology spread constraints.
	TopologySpreadConstraints ThanosRulerSpecTopologySpreadConstraintsPatchArrayInput `pulumi:"topologySpreadConstraints"`
	TracingConfig             ThanosRulerSpecTracingConfigPatchPtrInput               `pulumi:"tracingConfig"`
	// Configures the path of the tracing configuration file.
	//
	// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
	//
	// This is an *experimental feature*, it may change in any upcoming release
	// in a breaking way.
	//
	// The operator performs no validation of the configuration file.
	//
	// This field takes precedence over `tracingConfig`.
	TracingConfigFile pulumi.StringPtrInput `pulumi:"tracingConfigFile"`
	// Version of Thanos to be deployed.
	Version pulumi.StringPtrInput `pulumi:"version"`
	// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
	// VolumeMounts specified will be appended to other VolumeMounts in the ruler container,
	// that are generated as a result of StorageSpec objects.
	VolumeMounts ThanosRulerSpecVolumeMountsPatchArrayInput `pulumi:"volumeMounts"`
	// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will
	// be appended to other volumes that are generated as a result of StorageSpec objects.
	Volumes ThanosRulerSpecVolumesPatchArrayInput `pulumi:"volumes"`
	Web     ThanosRulerSpecWebPatchPtrInput       `pulumi:"web"`
}

func (ThanosRulerSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPatch)(nil)).Elem()
}

func (i ThanosRulerSpecPatchArgs) ToThanosRulerSpecPatchOutput() ThanosRulerSpecPatchOutput {
	return i.ToThanosRulerSpecPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPatchArgs) ToThanosRulerSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPatchOutput)
}

func (i ThanosRulerSpecPatchArgs) ToThanosRulerSpecPatchPtrOutput() ThanosRulerSpecPatchPtrOutput {
	return i.ToThanosRulerSpecPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPatchArgs) ToThanosRulerSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPatchOutput).ToThanosRulerSpecPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecPatchPtrInput is an input type that accepts ThanosRulerSpecPatchArgs, ThanosRulerSpecPatchPtr and ThanosRulerSpecPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPatchPtrInput` via:
//
//	        ThanosRulerSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecPatchPtrOutput() ThanosRulerSpecPatchPtrOutput
	ToThanosRulerSpecPatchPtrOutputWithContext(context.Context) ThanosRulerSpecPatchPtrOutput
}

type thanosRulerSpecPatchPtrType ThanosRulerSpecPatchArgs

func ThanosRulerSpecPatchPtr(v *ThanosRulerSpecPatchArgs) ThanosRulerSpecPatchPtrInput {
	return (*thanosRulerSpecPatchPtrType)(v)
}

func (*thanosRulerSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecPatch)(nil)).Elem()
}

func (i *thanosRulerSpecPatchPtrType) ToThanosRulerSpecPatchPtrOutput() ThanosRulerSpecPatchPtrOutput {
	return i.ToThanosRulerSpecPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecPatchPtrType) ToThanosRulerSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPatchPtrOutput)
}

// Specification of the desired behavior of the ThanosRuler cluster. More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerSpecPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecPatchOutput) ToThanosRulerSpecPatchOutput() ThanosRulerSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecPatchOutput) ToThanosRulerSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecPatchOutput) ToThanosRulerSpecPatchPtrOutput() ThanosRulerSpecPatchPtrOutput {
	return o.ToThanosRulerSpecPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecPatchOutput) ToThanosRulerSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecPatch) *ThanosRulerSpecPatch {
		return &v
	}).(ThanosRulerSpecPatchPtrOutput)
}

// AdditionalArgs allows setting additional arguments for the ThanosRuler container.
// It is intended for e.g. activating hidden flags which are not supported by
// the dedicated configuration options yet. The arguments are passed as-is to the
// ThanosRuler container which may cause issues if they are invalid or not supported
// by the given ThanosRuler version.
// In case of an argument conflict (e.g. an argument which is already set by the
// operator itself) or when providing an invalid argument the reconciliation will
// fail and an error will be logged.
func (o ThanosRulerSpecPatchOutput) AdditionalArgs() ThanosRulerSpecAdditionalArgsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecAdditionalArgsPatch { return v.AdditionalArgs }).(ThanosRulerSpecAdditionalArgsPatchArrayOutput)
}

func (o ThanosRulerSpecPatchOutput) Affinity() ThanosRulerSpecAffinityPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecAffinityPatch { return v.Affinity }).(ThanosRulerSpecAffinityPatchPtrOutput)
}

// Configures the label names which should be dropped in Thanos Ruler
// alerts.
//
// The replica label `thanos_ruler_replica` will always be dropped from the alerts.
func (o ThanosRulerSpecPatchOutput) AlertDropLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []string { return v.AlertDropLabels }).(pulumi.StringArrayOutput)
}

// The external Query URL the Thanos Ruler will set in the 'Source' field
// of all alerts.
// Maps to the '--alert.query-url' CLI arg.
func (o ThanosRulerSpecPatchOutput) AlertQueryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.AlertQueryUrl }).(pulumi.StringPtrOutput)
}

// Configures the path to the alert relabeling configuration file.
//
// Alert relabel configuration must have the form as specified in the
// official Prometheus documentation:
// https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs
//
// The operator performs no validation of the configuration file.
//
// This field takes precedence over `alertRelabelConfig`.
func (o ThanosRulerSpecPatchOutput) AlertRelabelConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.AlertRelabelConfigFile }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) AlertRelabelConfigs() ThanosRulerSpecAlertRelabelConfigsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecAlertRelabelConfigsPatch { return v.AlertRelabelConfigs }).(ThanosRulerSpecAlertRelabelConfigsPatchPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) AlertmanagersConfig() ThanosRulerSpecAlertmanagersConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecAlertmanagersConfigPatch { return v.AlertmanagersConfig }).(ThanosRulerSpecAlertmanagersConfigPatchPtrOutput)
}

// Configures the list of Alertmanager endpoints to send alerts to.
//
// For Thanos >= v0.10.0, it is recommended to use `alertmanagersConfig` instead.
//
// `alertmanagersConfig` takes precedence over this field.
func (o ThanosRulerSpecPatchOutput) AlertmanagersUrl() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []string { return v.AlertmanagersUrl }).(pulumi.StringArrayOutput)
}

// Containers allows injecting additional containers or modifying operator generated
// containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or
// to change the behavior of an operator generated container. Containers described here modify
// an operator generated container if they share the same name and modifications are done via a
// strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`.
// Overriding containers is entirely outside the scope of what the maintainers will support and by doing
// so, you accept that this behaviour may break at any time without notice.
func (o ThanosRulerSpecPatchOutput) Containers() ThanosRulerSpecContainersPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecContainersPatch { return v.Containers }).(ThanosRulerSpecContainersPatchArrayOutput)
}

func (o ThanosRulerSpecPatchOutput) DnsConfig() ThanosRulerSpecDnsConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecDnsConfigPatch { return v.DnsConfig }).(ThanosRulerSpecDnsConfigPatchPtrOutput)
}

// Defines the DNS policy for the pods.
func (o ThanosRulerSpecPatchOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.DnsPolicy }).(pulumi.StringPtrOutput)
}

// EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert
// and metric that is user created. The label value will always be the namespace of the object that is
// being created.
func (o ThanosRulerSpecPatchOutput) EnforcedNamespaceLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.EnforcedNamespaceLabel }).(pulumi.StringPtrOutput)
}

// Interval between consecutive evaluations.
func (o ThanosRulerSpecPatchOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.EvaluationInterval }).(pulumi.StringPtrOutput)
}

// List of references to PrometheusRule objects
// to be excluded from enforcing a namespace label of origin.
// Applies only if enforcedNamespaceLabel set to true.
func (o ThanosRulerSpecPatchOutput) ExcludedFromEnforcement() ThanosRulerSpecExcludedFromEnforcementPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecExcludedFromEnforcementPatch {
		return v.ExcludedFromEnforcement
	}).(ThanosRulerSpecExcludedFromEnforcementPatchArrayOutput)
}

// The external URL the Thanos Ruler instances will be available under. This is
// necessary to generate correct URLs. This is necessary if Thanos Ruler is not
// served from root of a DNS name.
func (o ThanosRulerSpecPatchOutput) ExternalPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.ExternalPrefix }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) GrpcServerTlsConfig() ThanosRulerSpecGrpcServerTlsConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecGrpcServerTlsConfigPatch { return v.GrpcServerTlsConfig }).(ThanosRulerSpecGrpcServerTlsConfigPatchPtrOutput)
}

// Pods' hostAliases configuration
func (o ThanosRulerSpecPatchOutput) HostAliases() ThanosRulerSpecHostAliasesPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecHostAliasesPatch { return v.HostAliases }).(ThanosRulerSpecHostAliasesPatchArrayOutput)
}

// Thanos container image URL.
func (o ThanosRulerSpecPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// Image pull policy for the 'thanos', 'init-config-reloader' and 'config-reloader' containers.
// See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
func (o ThanosRulerSpecPatchOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.ImagePullPolicy }).(pulumi.StringPtrOutput)
}

// An optional list of references to secrets in the same namespace
// to use for pulling thanos images from registries
// see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
func (o ThanosRulerSpecPatchOutput) ImagePullSecrets() ThanosRulerSpecImagePullSecretsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecImagePullSecretsPatch { return v.ImagePullSecrets }).(ThanosRulerSpecImagePullSecretsPatchArrayOutput)
}

// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
// fetch secrets for injection into the ThanosRuler configuration from external sources. Any
// errors during the execution of an initContainer will lead to a restart of the Pod.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
// Using initContainers for any use case other then secret fetching is entirely outside the scope
// of what the maintainers will support and by doing so, you accept that this behaviour may break
// at any time without notice.
func (o ThanosRulerSpecPatchOutput) InitContainers() ThanosRulerSpecInitContainersPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecInitContainersPatch { return v.InitContainers }).(ThanosRulerSpecInitContainersPatchArrayOutput)
}

// Configures the external label pairs of the ThanosRuler resource.
//
// A default replica label `thanos_ruler_replica` will be always added as a
// label with the value of the pod's name.
func (o ThanosRulerSpecPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// ListenLocal makes the Thanos ruler listen on loopback, so that it
// does not bind against the Pod IP.
func (o ThanosRulerSpecPatchOutput) ListenLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *bool { return v.ListenLocal }).(pulumi.BoolPtrOutput)
}

// Log format for ThanosRuler to be configured with.
func (o ThanosRulerSpecPatchOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.LogFormat }).(pulumi.StringPtrOutput)
}

// Log level for ThanosRuler to be configured with.
func (o ThanosRulerSpecPatchOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.LogLevel }).(pulumi.StringPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready
// without any of its container crashing for it to be considered available.
// Defaults to 0 (pod will be considered available as soon as it is ready)
// This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.
func (o ThanosRulerSpecPatchOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *int { return v.MinReadySeconds }).(pulumi.IntPtrOutput)
}

// Define which Nodes the Pods are scheduled on.
func (o ThanosRulerSpecPatchOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) map[string]string { return v.NodeSelector }).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecPatchOutput) ObjectStorageConfig() ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecObjectStorageConfigPatch { return v.ObjectStorageConfig }).(ThanosRulerSpecObjectStorageConfigPatchPtrOutput)
}

// Configures the path of the object storage configuration file.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration file.
//
// This field takes precedence over `objectStorageConfig`.
func (o ThanosRulerSpecPatchOutput) ObjectStorageConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.ObjectStorageConfigFile }).(pulumi.StringPtrOutput)
}

// When a ThanosRuler deployment is paused, no actions except for deletion
// will be performed on the underlying objects.
func (o ThanosRulerSpecPatchOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) PodMetadata() ThanosRulerSpecPodMetadataPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecPodMetadataPatch { return v.PodMetadata }).(ThanosRulerSpecPodMetadataPatchPtrOutput)
}

// Port name used for the pods and governing service.
// Defaults to `web`.
func (o ThanosRulerSpecPatchOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.PortName }).(pulumi.StringPtrOutput)
}

// Priority class assigned to the Pods
func (o ThanosRulerSpecPatchOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.PriorityClassName }).(pulumi.StringPtrOutput)
}

// PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing
// of adding namespace labels. Works only if enforcedNamespaceLabel set to true.
// Make sure both ruleNamespace and ruleName are set for each pair
// Deprecated: use excludedFromEnforcement instead.
func (o ThanosRulerSpecPatchOutput) PrometheusRulesExcludedFromEnforce() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch {
		return v.PrometheusRulesExcludedFromEnforce
	}).(ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput)
}

func (o ThanosRulerSpecPatchOutput) QueryConfig() ThanosRulerSpecQueryConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecQueryConfigPatch { return v.QueryConfig }).(ThanosRulerSpecQueryConfigPatchPtrOutput)
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// For Thanos >= v0.11.0, it is recommended to use `queryConfig` instead.
//
// `queryConfig` takes precedence over this field.
func (o ThanosRulerSpecPatchOutput) QueryEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []string { return v.QueryEndpoints }).(pulumi.StringArrayOutput)
}

// Number of thanos ruler instances to deploy.
func (o ThanosRulerSpecPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) Resources() ThanosRulerSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecResourcesPatch { return v.Resources }).(ThanosRulerSpecResourcesPatchPtrOutput)
}

// Time duration ThanosRuler shall retain data for. Default is '24h',
// and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
func (o ThanosRulerSpecPatchOutput) Retention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.Retention }).(pulumi.StringPtrOutput)
}

// The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.
func (o ThanosRulerSpecPatchOutput) RoutePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.RoutePrefix }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) RuleNamespaceSelector() ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecRuleNamespaceSelectorPatch {
		return v.RuleNamespaceSelector
	}).(ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) RuleSelector() ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecRuleSelectorPatch { return v.RuleSelector }).(ThanosRulerSpecRuleSelectorPatchPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) SecurityContext() ThanosRulerSpecSecurityContextPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecSecurityContextPatch { return v.SecurityContext }).(ThanosRulerSpecSecurityContextPatchPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run the
// Thanos Ruler Pods.
func (o ThanosRulerSpecPatchOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.ServiceAccountName }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchOutput) Storage() ThanosRulerSpecStoragePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecStoragePatch { return v.Storage }).(ThanosRulerSpecStoragePatchPtrOutput)
}

// If specified, the pod's tolerations.
func (o ThanosRulerSpecPatchOutput) Tolerations() ThanosRulerSpecTolerationsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecTolerationsPatch { return v.Tolerations }).(ThanosRulerSpecTolerationsPatchArrayOutput)
}

// If specified, the pod's topology spread constraints.
func (o ThanosRulerSpecPatchOutput) TopologySpreadConstraints() ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecTopologySpreadConstraintsPatch {
		return v.TopologySpreadConstraints
	}).(ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput)
}

func (o ThanosRulerSpecPatchOutput) TracingConfig() ThanosRulerSpecTracingConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecTracingConfigPatch { return v.TracingConfig }).(ThanosRulerSpecTracingConfigPatchPtrOutput)
}

// Configures the path of the tracing configuration file.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration file.
//
// This field takes precedence over `tracingConfig`.
func (o ThanosRulerSpecPatchOutput) TracingConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.TracingConfigFile }).(pulumi.StringPtrOutput)
}

// Version of Thanos to be deployed.
func (o ThanosRulerSpecPatchOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *string { return v.Version }).(pulumi.StringPtrOutput)
}

// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
// VolumeMounts specified will be appended to other VolumeMounts in the ruler container,
// that are generated as a result of StorageSpec objects.
func (o ThanosRulerSpecPatchOutput) VolumeMounts() ThanosRulerSpecVolumeMountsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecVolumeMountsPatch { return v.VolumeMounts }).(ThanosRulerSpecVolumeMountsPatchArrayOutput)
}

// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will
// be appended to other volumes that are generated as a result of StorageSpec objects.
func (o ThanosRulerSpecPatchOutput) Volumes() ThanosRulerSpecVolumesPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) []ThanosRulerSpecVolumesPatch { return v.Volumes }).(ThanosRulerSpecVolumesPatchArrayOutput)
}

func (o ThanosRulerSpecPatchOutput) Web() ThanosRulerSpecWebPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPatch) *ThanosRulerSpecWebPatch { return v.Web }).(ThanosRulerSpecWebPatchPtrOutput)
}

type ThanosRulerSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecPatchPtrOutput) ToThanosRulerSpecPatchPtrOutput() ThanosRulerSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecPatchPtrOutput) ToThanosRulerSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecPatchPtrOutput) Elem() ThanosRulerSpecPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) ThanosRulerSpecPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecPatch
		return ret
	}).(ThanosRulerSpecPatchOutput)
}

// AdditionalArgs allows setting additional arguments for the ThanosRuler container.
// It is intended for e.g. activating hidden flags which are not supported by
// the dedicated configuration options yet. The arguments are passed as-is to the
// ThanosRuler container which may cause issues if they are invalid or not supported
// by the given ThanosRuler version.
// In case of an argument conflict (e.g. an argument which is already set by the
// operator itself) or when providing an invalid argument the reconciliation will
// fail and an error will be logged.
func (o ThanosRulerSpecPatchPtrOutput) AdditionalArgs() ThanosRulerSpecAdditionalArgsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecAdditionalArgsPatch {
		if v == nil {
			return nil
		}
		return v.AdditionalArgs
	}).(ThanosRulerSpecAdditionalArgsPatchArrayOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) Affinity() ThanosRulerSpecAffinityPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecAffinityPatch {
		if v == nil {
			return nil
		}
		return v.Affinity
	}).(ThanosRulerSpecAffinityPatchPtrOutput)
}

// Configures the label names which should be dropped in Thanos Ruler
// alerts.
//
// The replica label `thanos_ruler_replica` will always be dropped from the alerts.
func (o ThanosRulerSpecPatchPtrOutput) AlertDropLabels() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AlertDropLabels
	}).(pulumi.StringArrayOutput)
}

// The external Query URL the Thanos Ruler will set in the 'Source' field
// of all alerts.
// Maps to the '--alert.query-url' CLI arg.
func (o ThanosRulerSpecPatchPtrOutput) AlertQueryUrl() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.AlertQueryUrl
	}).(pulumi.StringPtrOutput)
}

// Configures the path to the alert relabeling configuration file.
//
// Alert relabel configuration must have the form as specified in the
// official Prometheus documentation:
// https://prometheus.io/docs/prometheus/latest/configuration/configuration/#alert_relabel_configs
//
// The operator performs no validation of the configuration file.
//
// This field takes precedence over `alertRelabelConfig`.
func (o ThanosRulerSpecPatchPtrOutput) AlertRelabelConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.AlertRelabelConfigFile
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) AlertRelabelConfigs() ThanosRulerSpecAlertRelabelConfigsPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecAlertRelabelConfigsPatch {
		if v == nil {
			return nil
		}
		return v.AlertRelabelConfigs
	}).(ThanosRulerSpecAlertRelabelConfigsPatchPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) AlertmanagersConfig() ThanosRulerSpecAlertmanagersConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecAlertmanagersConfigPatch {
		if v == nil {
			return nil
		}
		return v.AlertmanagersConfig
	}).(ThanosRulerSpecAlertmanagersConfigPatchPtrOutput)
}

// Configures the list of Alertmanager endpoints to send alerts to.
//
// For Thanos >= v0.10.0, it is recommended to use `alertmanagersConfig` instead.
//
// `alertmanagersConfig` takes precedence over this field.
func (o ThanosRulerSpecPatchPtrOutput) AlertmanagersUrl() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AlertmanagersUrl
	}).(pulumi.StringArrayOutput)
}

// Containers allows injecting additional containers or modifying operator generated
// containers. This can be used to allow adding an authentication proxy to a ThanosRuler pod or
// to change the behavior of an operator generated container. Containers described here modify
// an operator generated container if they share the same name and modifications are done via a
// strategic merge patch. The current container names are: `thanos-ruler` and `config-reloader`.
// Overriding containers is entirely outside the scope of what the maintainers will support and by doing
// so, you accept that this behaviour may break at any time without notice.
func (o ThanosRulerSpecPatchPtrOutput) Containers() ThanosRulerSpecContainersPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecContainersPatch {
		if v == nil {
			return nil
		}
		return v.Containers
	}).(ThanosRulerSpecContainersPatchArrayOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) DnsConfig() ThanosRulerSpecDnsConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecDnsConfigPatch {
		if v == nil {
			return nil
		}
		return v.DnsConfig
	}).(ThanosRulerSpecDnsConfigPatchPtrOutput)
}

// Defines the DNS policy for the pods.
func (o ThanosRulerSpecPatchPtrOutput) DnsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.DnsPolicy
	}).(pulumi.StringPtrOutput)
}

// EnforcedNamespaceLabel enforces adding a namespace label of origin for each alert
// and metric that is user created. The label value will always be the namespace of the object that is
// being created.
func (o ThanosRulerSpecPatchPtrOutput) EnforcedNamespaceLabel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.EnforcedNamespaceLabel
	}).(pulumi.StringPtrOutput)
}

// Interval between consecutive evaluations.
func (o ThanosRulerSpecPatchPtrOutput) EvaluationInterval() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.EvaluationInterval
	}).(pulumi.StringPtrOutput)
}

// List of references to PrometheusRule objects
// to be excluded from enforcing a namespace label of origin.
// Applies only if enforcedNamespaceLabel set to true.
func (o ThanosRulerSpecPatchPtrOutput) ExcludedFromEnforcement() ThanosRulerSpecExcludedFromEnforcementPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecExcludedFromEnforcementPatch {
		if v == nil {
			return nil
		}
		return v.ExcludedFromEnforcement
	}).(ThanosRulerSpecExcludedFromEnforcementPatchArrayOutput)
}

// The external URL the Thanos Ruler instances will be available under. This is
// necessary to generate correct URLs. This is necessary if Thanos Ruler is not
// served from root of a DNS name.
func (o ThanosRulerSpecPatchPtrOutput) ExternalPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ExternalPrefix
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) GrpcServerTlsConfig() ThanosRulerSpecGrpcServerTlsConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecGrpcServerTlsConfigPatch {
		if v == nil {
			return nil
		}
		return v.GrpcServerTlsConfig
	}).(ThanosRulerSpecGrpcServerTlsConfigPatchPtrOutput)
}

// Pods' hostAliases configuration
func (o ThanosRulerSpecPatchPtrOutput) HostAliases() ThanosRulerSpecHostAliasesPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecHostAliasesPatch {
		if v == nil {
			return nil
		}
		return v.HostAliases
	}).(ThanosRulerSpecHostAliasesPatchArrayOutput)
}

// Thanos container image URL.
func (o ThanosRulerSpecPatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// Image pull policy for the 'thanos', 'init-config-reloader' and 'config-reloader' containers.
// See https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy for more details.
func (o ThanosRulerSpecPatchPtrOutput) ImagePullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ImagePullPolicy
	}).(pulumi.StringPtrOutput)
}

// An optional list of references to secrets in the same namespace
// to use for pulling thanos images from registries
// see http://kubernetes.io/docs/user-guide/images#specifying-imagepullsecrets-on-a-pod
func (o ThanosRulerSpecPatchPtrOutput) ImagePullSecrets() ThanosRulerSpecImagePullSecretsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecImagePullSecretsPatch {
		if v == nil {
			return nil
		}
		return v.ImagePullSecrets
	}).(ThanosRulerSpecImagePullSecretsPatchArrayOutput)
}

// InitContainers allows adding initContainers to the pod definition. Those can be used to e.g.
// fetch secrets for injection into the ThanosRuler configuration from external sources. Any
// errors during the execution of an initContainer will lead to a restart of the Pod.
// More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
// Using initContainers for any use case other then secret fetching is entirely outside the scope
// of what the maintainers will support and by doing so, you accept that this behaviour may break
// at any time without notice.
func (o ThanosRulerSpecPatchPtrOutput) InitContainers() ThanosRulerSpecInitContainersPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecInitContainersPatch {
		if v == nil {
			return nil
		}
		return v.InitContainers
	}).(ThanosRulerSpecInitContainersPatchArrayOutput)
}

// Configures the external label pairs of the ThanosRuler resource.
//
// A default replica label `thanos_ruler_replica` will be always added as a
// label with the value of the pod's name.
func (o ThanosRulerSpecPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// ListenLocal makes the Thanos ruler listen on loopback, so that it
// does not bind against the Pod IP.
func (o ThanosRulerSpecPatchPtrOutput) ListenLocal() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ListenLocal
	}).(pulumi.BoolPtrOutput)
}

// Log format for ThanosRuler to be configured with.
func (o ThanosRulerSpecPatchPtrOutput) LogFormat() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LogFormat
	}).(pulumi.StringPtrOutput)
}

// Log level for ThanosRuler to be configured with.
func (o ThanosRulerSpecPatchPtrOutput) LogLevel() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.LogLevel
	}).(pulumi.StringPtrOutput)
}

// Minimum number of seconds for which a newly created pod should be ready
// without any of its container crashing for it to be considered available.
// Defaults to 0 (pod will be considered available as soon as it is ready)
// This is an alpha field from kubernetes 1.22 until 1.24 which requires enabling the StatefulSetMinReadySeconds feature gate.
func (o ThanosRulerSpecPatchPtrOutput) MinReadySeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.MinReadySeconds
	}).(pulumi.IntPtrOutput)
}

// Define which Nodes the Pods are scheduled on.
func (o ThanosRulerSpecPatchPtrOutput) NodeSelector() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.NodeSelector
	}).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) ObjectStorageConfig() ThanosRulerSpecObjectStorageConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecObjectStorageConfigPatch {
		if v == nil {
			return nil
		}
		return v.ObjectStorageConfig
	}).(ThanosRulerSpecObjectStorageConfigPatchPtrOutput)
}

// Configures the path of the object storage configuration file.
//
// The configuration format is defined at https://thanos.io/tip/thanos/storage.md/#configuring-access-to-object-storage
//
// The operator performs no validation of the configuration file.
//
// This field takes precedence over `objectStorageConfig`.
func (o ThanosRulerSpecPatchPtrOutput) ObjectStorageConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ObjectStorageConfigFile
	}).(pulumi.StringPtrOutput)
}

// When a ThanosRuler deployment is paused, no actions except for deletion
// will be performed on the underlying objects.
func (o ThanosRulerSpecPatchPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) PodMetadata() ThanosRulerSpecPodMetadataPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecPodMetadataPatch {
		if v == nil {
			return nil
		}
		return v.PodMetadata
	}).(ThanosRulerSpecPodMetadataPatchPtrOutput)
}

// Port name used for the pods and governing service.
// Defaults to `web`.
func (o ThanosRulerSpecPatchPtrOutput) PortName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PortName
	}).(pulumi.StringPtrOutput)
}

// Priority class assigned to the Pods
func (o ThanosRulerSpecPatchPtrOutput) PriorityClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.PriorityClassName
	}).(pulumi.StringPtrOutput)
}

// PrometheusRulesExcludedFromEnforce - list of Prometheus rules to be excluded from enforcing
// of adding namespace labels. Works only if enforcedNamespaceLabel set to true.
// Make sure both ruleNamespace and ruleName are set for each pair
// Deprecated: use excludedFromEnforcement instead.
func (o ThanosRulerSpecPatchPtrOutput) PrometheusRulesExcludedFromEnforce() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch {
		if v == nil {
			return nil
		}
		return v.PrometheusRulesExcludedFromEnforce
	}).(ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) QueryConfig() ThanosRulerSpecQueryConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecQueryConfigPatch {
		if v == nil {
			return nil
		}
		return v.QueryConfig
	}).(ThanosRulerSpecQueryConfigPatchPtrOutput)
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// For Thanos >= v0.11.0, it is recommended to use `queryConfig` instead.
//
// `queryConfig` takes precedence over this field.
func (o ThanosRulerSpecPatchPtrOutput) QueryEndpoints() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.QueryEndpoints
	}).(pulumi.StringArrayOutput)
}

// Number of thanos ruler instances to deploy.
func (o ThanosRulerSpecPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) Resources() ThanosRulerSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ThanosRulerSpecResourcesPatchPtrOutput)
}

// Time duration ThanosRuler shall retain data for. Default is '24h',
// and must match the regular expression `[0-9]+(ms|s|m|h|d|w|y)` (milliseconds seconds minutes hours days weeks years).
func (o ThanosRulerSpecPatchPtrOutput) Retention() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Retention
	}).(pulumi.StringPtrOutput)
}

// The route prefix ThanosRuler registers HTTP handlers for. This allows thanos UI to be served on a sub-path.
func (o ThanosRulerSpecPatchPtrOutput) RoutePrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.RoutePrefix
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) RuleNamespaceSelector() ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecRuleNamespaceSelectorPatch {
		if v == nil {
			return nil
		}
		return v.RuleNamespaceSelector
	}).(ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) RuleSelector() ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecRuleSelectorPatch {
		if v == nil {
			return nil
		}
		return v.RuleSelector
	}).(ThanosRulerSpecRuleSelectorPatchPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) SecurityContext() ThanosRulerSpecSecurityContextPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecSecurityContextPatch {
		if v == nil {
			return nil
		}
		return v.SecurityContext
	}).(ThanosRulerSpecSecurityContextPatchPtrOutput)
}

// ServiceAccountName is the name of the ServiceAccount to use to run the
// Thanos Ruler Pods.
func (o ThanosRulerSpecPatchPtrOutput) ServiceAccountName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.ServiceAccountName
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) Storage() ThanosRulerSpecStoragePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecStoragePatch {
		if v == nil {
			return nil
		}
		return v.Storage
	}).(ThanosRulerSpecStoragePatchPtrOutput)
}

// If specified, the pod's tolerations.
func (o ThanosRulerSpecPatchPtrOutput) Tolerations() ThanosRulerSpecTolerationsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecTolerationsPatch {
		if v == nil {
			return nil
		}
		return v.Tolerations
	}).(ThanosRulerSpecTolerationsPatchArrayOutput)
}

// If specified, the pod's topology spread constraints.
func (o ThanosRulerSpecPatchPtrOutput) TopologySpreadConstraints() ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecTopologySpreadConstraintsPatch {
		if v == nil {
			return nil
		}
		return v.TopologySpreadConstraints
	}).(ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) TracingConfig() ThanosRulerSpecTracingConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecTracingConfigPatch {
		if v == nil {
			return nil
		}
		return v.TracingConfig
	}).(ThanosRulerSpecTracingConfigPatchPtrOutput)
}

// Configures the path of the tracing configuration file.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration file.
//
// This field takes precedence over `tracingConfig`.
func (o ThanosRulerSpecPatchPtrOutput) TracingConfigFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.TracingConfigFile
	}).(pulumi.StringPtrOutput)
}

// Version of Thanos to be deployed.
func (o ThanosRulerSpecPatchPtrOutput) Version() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.Version
	}).(pulumi.StringPtrOutput)
}

// VolumeMounts allows configuration of additional VolumeMounts on the output StatefulSet definition.
// VolumeMounts specified will be appended to other VolumeMounts in the ruler container,
// that are generated as a result of StorageSpec objects.
func (o ThanosRulerSpecPatchPtrOutput) VolumeMounts() ThanosRulerSpecVolumeMountsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecVolumeMountsPatch {
		if v == nil {
			return nil
		}
		return v.VolumeMounts
	}).(ThanosRulerSpecVolumeMountsPatchArrayOutput)
}

// Volumes allows configuration of additional volumes on the output StatefulSet definition. Volumes specified will
// be appended to other volumes that are generated as a result of StorageSpec objects.
func (o ThanosRulerSpecPatchPtrOutput) Volumes() ThanosRulerSpecVolumesPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) []ThanosRulerSpecVolumesPatch {
		if v == nil {
			return nil
		}
		return v.Volumes
	}).(ThanosRulerSpecVolumesPatchArrayOutput)
}

func (o ThanosRulerSpecPatchPtrOutput) Web() ThanosRulerSpecWebPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPatch) *ThanosRulerSpecWebPatch {
		if v == nil {
			return nil
		}
		return v.Web
	}).(ThanosRulerSpecWebPatchPtrOutput)
}

// PodMetadata configures labels and annotations which are propagated to the ThanosRuler pods.
//
// The following items are reserved and cannot be overridden:
// * "app.kubernetes.io/name" label, set to "thanos-ruler".
// * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
// * "app.kubernetes.io/instance" label, set to the name of the ThanosRuler instance.
// * "thanos-ruler" label, set to the name of the ThanosRuler instance.
// * "kubectl.kubernetes.io/default-container" annotation, set to "thanos-ruler".
type ThanosRulerSpecPodMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecPodMetadataInput is an input type that accepts ThanosRulerSpecPodMetadataArgs and ThanosRulerSpecPodMetadataOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPodMetadataInput` via:
//
//	ThanosRulerSpecPodMetadataArgs{...}
type ThanosRulerSpecPodMetadataInput interface {
	pulumi.Input

	ToThanosRulerSpecPodMetadataOutput() ThanosRulerSpecPodMetadataOutput
	ToThanosRulerSpecPodMetadataOutputWithContext(context.Context) ThanosRulerSpecPodMetadataOutput
}

// PodMetadata configures labels and annotations which are propagated to the ThanosRuler pods.
//
// The following items are reserved and cannot be overridden:
// * "app.kubernetes.io/name" label, set to "thanos-ruler".
// * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
// * "app.kubernetes.io/instance" label, set to the name of the ThanosRuler instance.
// * "thanos-ruler" label, set to the name of the ThanosRuler instance.
// * "kubectl.kubernetes.io/default-container" annotation, set to "thanos-ruler".
type ThanosRulerSpecPodMetadataArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecPodMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPodMetadata)(nil)).Elem()
}

func (i ThanosRulerSpecPodMetadataArgs) ToThanosRulerSpecPodMetadataOutput() ThanosRulerSpecPodMetadataOutput {
	return i.ToThanosRulerSpecPodMetadataOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPodMetadataArgs) ToThanosRulerSpecPodMetadataOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPodMetadataOutput)
}

func (i ThanosRulerSpecPodMetadataArgs) ToThanosRulerSpecPodMetadataPtrOutput() ThanosRulerSpecPodMetadataPtrOutput {
	return i.ToThanosRulerSpecPodMetadataPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPodMetadataArgs) ToThanosRulerSpecPodMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPodMetadataOutput).ToThanosRulerSpecPodMetadataPtrOutputWithContext(ctx)
}

// ThanosRulerSpecPodMetadataPtrInput is an input type that accepts ThanosRulerSpecPodMetadataArgs, ThanosRulerSpecPodMetadataPtr and ThanosRulerSpecPodMetadataPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPodMetadataPtrInput` via:
//
//	        ThanosRulerSpecPodMetadataArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecPodMetadataPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecPodMetadataPtrOutput() ThanosRulerSpecPodMetadataPtrOutput
	ToThanosRulerSpecPodMetadataPtrOutputWithContext(context.Context) ThanosRulerSpecPodMetadataPtrOutput
}

type thanosRulerSpecPodMetadataPtrType ThanosRulerSpecPodMetadataArgs

func ThanosRulerSpecPodMetadataPtr(v *ThanosRulerSpecPodMetadataArgs) ThanosRulerSpecPodMetadataPtrInput {
	return (*thanosRulerSpecPodMetadataPtrType)(v)
}

func (*thanosRulerSpecPodMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecPodMetadata)(nil)).Elem()
}

func (i *thanosRulerSpecPodMetadataPtrType) ToThanosRulerSpecPodMetadataPtrOutput() ThanosRulerSpecPodMetadataPtrOutput {
	return i.ToThanosRulerSpecPodMetadataPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecPodMetadataPtrType) ToThanosRulerSpecPodMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPodMetadataPtrOutput)
}

// PodMetadata configures labels and annotations which are propagated to the ThanosRuler pods.
//
// The following items are reserved and cannot be overridden:
// * "app.kubernetes.io/name" label, set to "thanos-ruler".
// * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
// * "app.kubernetes.io/instance" label, set to the name of the ThanosRuler instance.
// * "thanos-ruler" label, set to the name of the ThanosRuler instance.
// * "kubectl.kubernetes.io/default-container" annotation, set to "thanos-ruler".
type ThanosRulerSpecPodMetadataOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPodMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPodMetadata)(nil)).Elem()
}

func (o ThanosRulerSpecPodMetadataOutput) ToThanosRulerSpecPodMetadataOutput() ThanosRulerSpecPodMetadataOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataOutput) ToThanosRulerSpecPodMetadataOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataOutput) ToThanosRulerSpecPodMetadataPtrOutput() ThanosRulerSpecPodMetadataPtrOutput {
	return o.ToThanosRulerSpecPodMetadataPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecPodMetadataOutput) ToThanosRulerSpecPodMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecPodMetadata) *ThanosRulerSpecPodMetadata {
		return &v
	}).(ThanosRulerSpecPodMetadataPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecPodMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecPodMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecPodMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecPodMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecPodMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPodMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecPodMetadataPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPodMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecPodMetadata)(nil)).Elem()
}

func (o ThanosRulerSpecPodMetadataPtrOutput) ToThanosRulerSpecPodMetadataPtrOutput() ThanosRulerSpecPodMetadataPtrOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataPtrOutput) ToThanosRulerSpecPodMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPtrOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataPtrOutput) Elem() ThanosRulerSpecPodMetadataOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadata) ThanosRulerSpecPodMetadata {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecPodMetadata
		return ret
	}).(ThanosRulerSpecPodMetadataOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecPodMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecPodMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecPodMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// PodMetadata configures labels and annotations which are propagated to the ThanosRuler pods.
//
// The following items are reserved and cannot be overridden:
// * "app.kubernetes.io/name" label, set to "thanos-ruler".
// * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
// * "app.kubernetes.io/instance" label, set to the name of the ThanosRuler instance.
// * "thanos-ruler" label, set to the name of the ThanosRuler instance.
// * "kubectl.kubernetes.io/default-container" annotation, set to "thanos-ruler".
type ThanosRulerSpecPodMetadataPatch struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecPodMetadataPatchInput is an input type that accepts ThanosRulerSpecPodMetadataPatchArgs and ThanosRulerSpecPodMetadataPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPodMetadataPatchInput` via:
//
//	ThanosRulerSpecPodMetadataPatchArgs{...}
type ThanosRulerSpecPodMetadataPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecPodMetadataPatchOutput() ThanosRulerSpecPodMetadataPatchOutput
	ToThanosRulerSpecPodMetadataPatchOutputWithContext(context.Context) ThanosRulerSpecPodMetadataPatchOutput
}

// PodMetadata configures labels and annotations which are propagated to the ThanosRuler pods.
//
// The following items are reserved and cannot be overridden:
// * "app.kubernetes.io/name" label, set to "thanos-ruler".
// * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
// * "app.kubernetes.io/instance" label, set to the name of the ThanosRuler instance.
// * "thanos-ruler" label, set to the name of the ThanosRuler instance.
// * "kubectl.kubernetes.io/default-container" annotation, set to "thanos-ruler".
type ThanosRulerSpecPodMetadataPatchArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecPodMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPodMetadataPatch)(nil)).Elem()
}

func (i ThanosRulerSpecPodMetadataPatchArgs) ToThanosRulerSpecPodMetadataPatchOutput() ThanosRulerSpecPodMetadataPatchOutput {
	return i.ToThanosRulerSpecPodMetadataPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPodMetadataPatchArgs) ToThanosRulerSpecPodMetadataPatchOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPodMetadataPatchOutput)
}

func (i ThanosRulerSpecPodMetadataPatchArgs) ToThanosRulerSpecPodMetadataPatchPtrOutput() ThanosRulerSpecPodMetadataPatchPtrOutput {
	return i.ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPodMetadataPatchArgs) ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPodMetadataPatchOutput).ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecPodMetadataPatchPtrInput is an input type that accepts ThanosRulerSpecPodMetadataPatchArgs, ThanosRulerSpecPodMetadataPatchPtr and ThanosRulerSpecPodMetadataPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPodMetadataPatchPtrInput` via:
//
//	        ThanosRulerSpecPodMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecPodMetadataPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecPodMetadataPatchPtrOutput() ThanosRulerSpecPodMetadataPatchPtrOutput
	ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(context.Context) ThanosRulerSpecPodMetadataPatchPtrOutput
}

type thanosRulerSpecPodMetadataPatchPtrType ThanosRulerSpecPodMetadataPatchArgs

func ThanosRulerSpecPodMetadataPatchPtr(v *ThanosRulerSpecPodMetadataPatchArgs) ThanosRulerSpecPodMetadataPatchPtrInput {
	return (*thanosRulerSpecPodMetadataPatchPtrType)(v)
}

func (*thanosRulerSpecPodMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecPodMetadataPatch)(nil)).Elem()
}

func (i *thanosRulerSpecPodMetadataPatchPtrType) ToThanosRulerSpecPodMetadataPatchPtrOutput() ThanosRulerSpecPodMetadataPatchPtrOutput {
	return i.ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecPodMetadataPatchPtrType) ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPodMetadataPatchPtrOutput)
}

// PodMetadata configures labels and annotations which are propagated to the ThanosRuler pods.
//
// The following items are reserved and cannot be overridden:
// * "app.kubernetes.io/name" label, set to "thanos-ruler".
// * "app.kubernetes.io/managed-by" label, set to "prometheus-operator".
// * "app.kubernetes.io/instance" label, set to the name of the ThanosRuler instance.
// * "thanos-ruler" label, set to the name of the ThanosRuler instance.
// * "kubectl.kubernetes.io/default-container" annotation, set to "thanos-ruler".
type ThanosRulerSpecPodMetadataPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPodMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPodMetadataPatch)(nil)).Elem()
}

func (o ThanosRulerSpecPodMetadataPatchOutput) ToThanosRulerSpecPodMetadataPatchOutput() ThanosRulerSpecPodMetadataPatchOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataPatchOutput) ToThanosRulerSpecPodMetadataPatchOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPatchOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataPatchOutput) ToThanosRulerSpecPodMetadataPatchPtrOutput() ThanosRulerSpecPodMetadataPatchPtrOutput {
	return o.ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecPodMetadataPatchOutput) ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecPodMetadataPatch) *ThanosRulerSpecPodMetadataPatch {
		return &v
	}).(ThanosRulerSpecPodMetadataPatchPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecPodMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecPodMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecPodMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecPodMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecPodMetadataPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPodMetadataPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecPodMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPodMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecPodMetadataPatch)(nil)).Elem()
}

func (o ThanosRulerSpecPodMetadataPatchPtrOutput) ToThanosRulerSpecPodMetadataPatchPtrOutput() ThanosRulerSpecPodMetadataPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataPatchPtrOutput) ToThanosRulerSpecPodMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecPodMetadataPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecPodMetadataPatchPtrOutput) Elem() ThanosRulerSpecPodMetadataPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadataPatch) ThanosRulerSpecPodMetadataPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecPodMetadataPatch
		return ret
	}).(ThanosRulerSpecPodMetadataPatchOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecPodMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecPodMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecPodMetadataPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecPodMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// PrometheusRuleExcludeConfig enables users to configure excluded
// PrometheusRule names and their namespaces to be ignored while enforcing
// namespace label for alerts and metrics.
type ThanosRulerSpecPrometheusRulesExcludedFromEnforce struct {
	// Name of the excluded PrometheusRule object.
	RuleName *string `pulumi:"ruleName"`
	// Namespace of the excluded PrometheusRule object.
	RuleNamespace *string `pulumi:"ruleNamespace"`
}

// ThanosRulerSpecPrometheusRulesExcludedFromEnforceInput is an input type that accepts ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs and ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPrometheusRulesExcludedFromEnforceInput` via:
//
//	ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs{...}
type ThanosRulerSpecPrometheusRulesExcludedFromEnforceInput interface {
	pulumi.Input

	ToThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput
	ToThanosRulerSpecPrometheusRulesExcludedFromEnforceOutputWithContext(context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput
}

// PrometheusRuleExcludeConfig enables users to configure excluded
// PrometheusRule names and their namespaces to be ignored while enforcing
// namespace label for alerts and metrics.
type ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs struct {
	// Name of the excluded PrometheusRule object.
	RuleName pulumi.StringPtrInput `pulumi:"ruleName"`
	// Namespace of the excluded PrometheusRule object.
	RuleNamespace pulumi.StringPtrInput `pulumi:"ruleNamespace"`
}

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforce)(nil)).Elem()
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput {
	return i.ToThanosRulerSpecPrometheusRulesExcludedFromEnforceOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput)
}

// ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayInput is an input type that accepts ThanosRulerSpecPrometheusRulesExcludedFromEnforceArray and ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayInput` via:
//
//	ThanosRulerSpecPrometheusRulesExcludedFromEnforceArray{ ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs{...} }
type ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput
	ToThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutputWithContext(context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput
}

type ThanosRulerSpecPrometheusRulesExcludedFromEnforceArray []ThanosRulerSpecPrometheusRulesExcludedFromEnforceInput

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecPrometheusRulesExcludedFromEnforce)(nil)).Elem()
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforceArray) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput {
	return i.ToThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforceArray) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput)
}

// PrometheusRuleExcludeConfig enables users to configure excluded
// PrometheusRule names and their namespaces to be ignored while enforcing
// namespace label for alerts and metrics.
type ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforce)(nil)).Elem()
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput {
	return o
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput {
	return o
}

// Name of the excluded PrometheusRule object.
func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPrometheusRulesExcludedFromEnforce) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Namespace of the excluded PrometheusRule object.
func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput) RuleNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPrometheusRulesExcludedFromEnforce) *string { return v.RuleNamespace }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecPrometheusRulesExcludedFromEnforce)(nil)).Elem()
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput {
	return o
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput {
	return o
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecPrometheusRulesExcludedFromEnforce {
		return vs[0].([]ThanosRulerSpecPrometheusRulesExcludedFromEnforce)[vs[1].(int)]
	}).(ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput)
}

// PrometheusRuleExcludeConfig enables users to configure excluded
// PrometheusRule names and their namespaces to be ignored while enforcing
// namespace label for alerts and metrics.
type ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch struct {
	// Name of the excluded PrometheusRule object.
	RuleName *string `pulumi:"ruleName"`
	// Namespace of the excluded PrometheusRule object.
	RuleNamespace *string `pulumi:"ruleNamespace"`
}

// ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchInput is an input type that accepts ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs and ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchInput` via:
//
//	ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs{...}
type ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput
	ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutputWithContext(context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput
}

// PrometheusRuleExcludeConfig enables users to configure excluded
// PrometheusRule names and their namespaces to be ignored while enforcing
// namespace label for alerts and metrics.
type ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs struct {
	// Name of the excluded PrometheusRule object.
	RuleName pulumi.StringPtrInput `pulumi:"ruleName"`
	// Namespace of the excluded PrometheusRule object.
	RuleNamespace pulumi.StringPtrInput `pulumi:"ruleNamespace"`
}

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch)(nil)).Elem()
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput {
	return i.ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput)
}

// ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayInput is an input type that accepts ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArray and ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayInput` via:
//
//	ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArray{ ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs{...} }
type ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput
	ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutputWithContext(context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput
}

type ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArray []ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchInput

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch)(nil)).Elem()
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArray) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput {
	return i.ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArray) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput)
}

// PrometheusRuleExcludeConfig enables users to configure excluded
// PrometheusRule names and their namespaces to be ignored while enforcing
// namespace label for alerts and metrics.
type ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput {
	return o
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput {
	return o
}

// Name of the excluded PrometheusRule object.
func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput) RuleName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch) *string { return v.RuleName }).(pulumi.StringPtrOutput)
}

// Namespace of the excluded PrometheusRule object.
func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput) RuleNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch) *string { return v.RuleNamespace }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput() ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput {
	return o
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput) ToThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput {
	return o
}

func (o ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch {
		return vs[0].([]ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatch)[vs[1].(int)]
	}).(ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput)
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// The configuration format is defined at https://thanos.io/tip/components/rule.md/#query-api
//
// It requires Thanos >= v0.11.0.
//
// The operator performs no validation of the configuration.
//
// This field takes precedence over `queryEndpoints`.
type ThanosRulerSpecQueryConfig struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecQueryConfigInput is an input type that accepts ThanosRulerSpecQueryConfigArgs and ThanosRulerSpecQueryConfigOutput values.
// You can construct a concrete instance of `ThanosRulerSpecQueryConfigInput` via:
//
//	ThanosRulerSpecQueryConfigArgs{...}
type ThanosRulerSpecQueryConfigInput interface {
	pulumi.Input

	ToThanosRulerSpecQueryConfigOutput() ThanosRulerSpecQueryConfigOutput
	ToThanosRulerSpecQueryConfigOutputWithContext(context.Context) ThanosRulerSpecQueryConfigOutput
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// The configuration format is defined at https://thanos.io/tip/components/rule.md/#query-api
//
// It requires Thanos >= v0.11.0.
//
// The operator performs no validation of the configuration.
//
// This field takes precedence over `queryEndpoints`.
type ThanosRulerSpecQueryConfigArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecQueryConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecQueryConfig)(nil)).Elem()
}

func (i ThanosRulerSpecQueryConfigArgs) ToThanosRulerSpecQueryConfigOutput() ThanosRulerSpecQueryConfigOutput {
	return i.ToThanosRulerSpecQueryConfigOutputWithContext(context.Background())
}

func (i ThanosRulerSpecQueryConfigArgs) ToThanosRulerSpecQueryConfigOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecQueryConfigOutput)
}

func (i ThanosRulerSpecQueryConfigArgs) ToThanosRulerSpecQueryConfigPtrOutput() ThanosRulerSpecQueryConfigPtrOutput {
	return i.ToThanosRulerSpecQueryConfigPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecQueryConfigArgs) ToThanosRulerSpecQueryConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecQueryConfigOutput).ToThanosRulerSpecQueryConfigPtrOutputWithContext(ctx)
}

// ThanosRulerSpecQueryConfigPtrInput is an input type that accepts ThanosRulerSpecQueryConfigArgs, ThanosRulerSpecQueryConfigPtr and ThanosRulerSpecQueryConfigPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecQueryConfigPtrInput` via:
//
//	        ThanosRulerSpecQueryConfigArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecQueryConfigPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecQueryConfigPtrOutput() ThanosRulerSpecQueryConfigPtrOutput
	ToThanosRulerSpecQueryConfigPtrOutputWithContext(context.Context) ThanosRulerSpecQueryConfigPtrOutput
}

type thanosRulerSpecQueryConfigPtrType ThanosRulerSpecQueryConfigArgs

func ThanosRulerSpecQueryConfigPtr(v *ThanosRulerSpecQueryConfigArgs) ThanosRulerSpecQueryConfigPtrInput {
	return (*thanosRulerSpecQueryConfigPtrType)(v)
}

func (*thanosRulerSpecQueryConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecQueryConfig)(nil)).Elem()
}

func (i *thanosRulerSpecQueryConfigPtrType) ToThanosRulerSpecQueryConfigPtrOutput() ThanosRulerSpecQueryConfigPtrOutput {
	return i.ToThanosRulerSpecQueryConfigPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecQueryConfigPtrType) ToThanosRulerSpecQueryConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecQueryConfigPtrOutput)
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// The configuration format is defined at https://thanos.io/tip/components/rule.md/#query-api
//
// It requires Thanos >= v0.11.0.
//
// The operator performs no validation of the configuration.
//
// This field takes precedence over `queryEndpoints`.
type ThanosRulerSpecQueryConfigOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecQueryConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecQueryConfig)(nil)).Elem()
}

func (o ThanosRulerSpecQueryConfigOutput) ToThanosRulerSpecQueryConfigOutput() ThanosRulerSpecQueryConfigOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigOutput) ToThanosRulerSpecQueryConfigOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigOutput) ToThanosRulerSpecQueryConfigPtrOutput() ThanosRulerSpecQueryConfigPtrOutput {
	return o.ToThanosRulerSpecQueryConfigPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecQueryConfigOutput) ToThanosRulerSpecQueryConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecQueryConfig) *ThanosRulerSpecQueryConfig {
		return &v
	}).(ThanosRulerSpecQueryConfigPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecQueryConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecQueryConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecQueryConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecQueryConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecQueryConfigOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecQueryConfig) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecQueryConfigPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecQueryConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecQueryConfig)(nil)).Elem()
}

func (o ThanosRulerSpecQueryConfigPtrOutput) ToThanosRulerSpecQueryConfigPtrOutput() ThanosRulerSpecQueryConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigPtrOutput) ToThanosRulerSpecQueryConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigPtrOutput) Elem() ThanosRulerSpecQueryConfigOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfig) ThanosRulerSpecQueryConfig {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecQueryConfig
		return ret
	}).(ThanosRulerSpecQueryConfigOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecQueryConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecQueryConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecQueryConfigPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// The configuration format is defined at https://thanos.io/tip/components/rule.md/#query-api
//
// It requires Thanos >= v0.11.0.
//
// The operator performs no validation of the configuration.
//
// This field takes precedence over `queryEndpoints`.
type ThanosRulerSpecQueryConfigPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecQueryConfigPatchInput is an input type that accepts ThanosRulerSpecQueryConfigPatchArgs and ThanosRulerSpecQueryConfigPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecQueryConfigPatchInput` via:
//
//	ThanosRulerSpecQueryConfigPatchArgs{...}
type ThanosRulerSpecQueryConfigPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecQueryConfigPatchOutput() ThanosRulerSpecQueryConfigPatchOutput
	ToThanosRulerSpecQueryConfigPatchOutputWithContext(context.Context) ThanosRulerSpecQueryConfigPatchOutput
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// The configuration format is defined at https://thanos.io/tip/components/rule.md/#query-api
//
// It requires Thanos >= v0.11.0.
//
// The operator performs no validation of the configuration.
//
// This field takes precedence over `queryEndpoints`.
type ThanosRulerSpecQueryConfigPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecQueryConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecQueryConfigPatch)(nil)).Elem()
}

func (i ThanosRulerSpecQueryConfigPatchArgs) ToThanosRulerSpecQueryConfigPatchOutput() ThanosRulerSpecQueryConfigPatchOutput {
	return i.ToThanosRulerSpecQueryConfigPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecQueryConfigPatchArgs) ToThanosRulerSpecQueryConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecQueryConfigPatchOutput)
}

func (i ThanosRulerSpecQueryConfigPatchArgs) ToThanosRulerSpecQueryConfigPatchPtrOutput() ThanosRulerSpecQueryConfigPatchPtrOutput {
	return i.ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecQueryConfigPatchArgs) ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecQueryConfigPatchOutput).ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecQueryConfigPatchPtrInput is an input type that accepts ThanosRulerSpecQueryConfigPatchArgs, ThanosRulerSpecQueryConfigPatchPtr and ThanosRulerSpecQueryConfigPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecQueryConfigPatchPtrInput` via:
//
//	        ThanosRulerSpecQueryConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecQueryConfigPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecQueryConfigPatchPtrOutput() ThanosRulerSpecQueryConfigPatchPtrOutput
	ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(context.Context) ThanosRulerSpecQueryConfigPatchPtrOutput
}

type thanosRulerSpecQueryConfigPatchPtrType ThanosRulerSpecQueryConfigPatchArgs

func ThanosRulerSpecQueryConfigPatchPtr(v *ThanosRulerSpecQueryConfigPatchArgs) ThanosRulerSpecQueryConfigPatchPtrInput {
	return (*thanosRulerSpecQueryConfigPatchPtrType)(v)
}

func (*thanosRulerSpecQueryConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecQueryConfigPatch)(nil)).Elem()
}

func (i *thanosRulerSpecQueryConfigPatchPtrType) ToThanosRulerSpecQueryConfigPatchPtrOutput() ThanosRulerSpecQueryConfigPatchPtrOutput {
	return i.ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecQueryConfigPatchPtrType) ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecQueryConfigPatchPtrOutput)
}

// Configures the list of Thanos Query endpoints from which to query metrics.
//
// The configuration format is defined at https://thanos.io/tip/components/rule.md/#query-api
//
// It requires Thanos >= v0.11.0.
//
// The operator performs no validation of the configuration.
//
// This field takes precedence over `queryEndpoints`.
type ThanosRulerSpecQueryConfigPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecQueryConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecQueryConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecQueryConfigPatchOutput) ToThanosRulerSpecQueryConfigPatchOutput() ThanosRulerSpecQueryConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigPatchOutput) ToThanosRulerSpecQueryConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigPatchOutput) ToThanosRulerSpecQueryConfigPatchPtrOutput() ThanosRulerSpecQueryConfigPatchPtrOutput {
	return o.ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecQueryConfigPatchOutput) ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecQueryConfigPatch) *ThanosRulerSpecQueryConfigPatch {
		return &v
	}).(ThanosRulerSpecQueryConfigPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecQueryConfigPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecQueryConfigPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecQueryConfigPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecQueryConfigPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecQueryConfigPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecQueryConfigPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecQueryConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecQueryConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecQueryConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecQueryConfigPatchPtrOutput) ToThanosRulerSpecQueryConfigPatchPtrOutput() ThanosRulerSpecQueryConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigPatchPtrOutput) ToThanosRulerSpecQueryConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecQueryConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecQueryConfigPatchPtrOutput) Elem() ThanosRulerSpecQueryConfigPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfigPatch) ThanosRulerSpecQueryConfigPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecQueryConfigPatch
		return ret
	}).(ThanosRulerSpecQueryConfigPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecQueryConfigPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecQueryConfigPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecQueryConfigPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecQueryConfigPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Resources defines the resource requirements for single Pods.
// If not provided, no requests/limits will be set
type ThanosRulerSpecResources struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims []ThanosRulerSpecResourcesClaims `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecResourcesInput is an input type that accepts ThanosRulerSpecResourcesArgs and ThanosRulerSpecResourcesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesInput` via:
//
//	ThanosRulerSpecResourcesArgs{...}
type ThanosRulerSpecResourcesInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesOutput() ThanosRulerSpecResourcesOutput
	ToThanosRulerSpecResourcesOutputWithContext(context.Context) ThanosRulerSpecResourcesOutput
}

// Resources defines the resource requirements for single Pods.
// If not provided, no requests/limits will be set
type ThanosRulerSpecResourcesArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims ThanosRulerSpecResourcesClaimsArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResources)(nil)).Elem()
}

func (i ThanosRulerSpecResourcesArgs) ToThanosRulerSpecResourcesOutput() ThanosRulerSpecResourcesOutput {
	return i.ToThanosRulerSpecResourcesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesArgs) ToThanosRulerSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesOutput)
}

func (i ThanosRulerSpecResourcesArgs) ToThanosRulerSpecResourcesPtrOutput() ThanosRulerSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecResourcesPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesArgs) ToThanosRulerSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesOutput).ToThanosRulerSpecResourcesPtrOutputWithContext(ctx)
}

// ThanosRulerSpecResourcesPtrInput is an input type that accepts ThanosRulerSpecResourcesArgs, ThanosRulerSpecResourcesPtr and ThanosRulerSpecResourcesPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesPtrInput` via:
//
//	        ThanosRulerSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecResourcesPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesPtrOutput() ThanosRulerSpecResourcesPtrOutput
	ToThanosRulerSpecResourcesPtrOutputWithContext(context.Context) ThanosRulerSpecResourcesPtrOutput
}

type thanosRulerSpecResourcesPtrType ThanosRulerSpecResourcesArgs

func ThanosRulerSpecResourcesPtr(v *ThanosRulerSpecResourcesArgs) ThanosRulerSpecResourcesPtrInput {
	return (*thanosRulerSpecResourcesPtrType)(v)
}

func (*thanosRulerSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecResources)(nil)).Elem()
}

func (i *thanosRulerSpecResourcesPtrType) ToThanosRulerSpecResourcesPtrOutput() ThanosRulerSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecResourcesPtrType) ToThanosRulerSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesPtrOutput)
}

// Resources defines the resource requirements for single Pods.
// If not provided, no requests/limits will be set
type ThanosRulerSpecResourcesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesOutput) ToThanosRulerSpecResourcesOutput() ThanosRulerSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecResourcesOutput) ToThanosRulerSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecResourcesOutput) ToThanosRulerSpecResourcesPtrOutput() ThanosRulerSpecResourcesPtrOutput {
	return o.ToThanosRulerSpecResourcesPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecResourcesOutput) ToThanosRulerSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecResources) *ThanosRulerSpecResources {
		return &v
	}).(ThanosRulerSpecResourcesPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecResourcesOutput) Claims() ThanosRulerSpecResourcesClaimsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecResources) []ThanosRulerSpecResourcesClaims { return v.Claims }).(ThanosRulerSpecResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecResources) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type ThanosRulerSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesPtrOutput) ToThanosRulerSpecResourcesPtrOutput() ThanosRulerSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecResourcesPtrOutput) ToThanosRulerSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecResourcesPtrOutput) Elem() ThanosRulerSpecResourcesOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResources) ThanosRulerSpecResources {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecResources
		return ret
	}).(ThanosRulerSpecResourcesOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecResourcesPtrOutput) Claims() ThanosRulerSpecResourcesClaimsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResources) []ThanosRulerSpecResourcesClaims {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(ThanosRulerSpecResourcesClaimsArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecResourcesClaims struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name *string `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request *string `pulumi:"request"`
}

// ThanosRulerSpecResourcesClaimsInput is an input type that accepts ThanosRulerSpecResourcesClaimsArgs and ThanosRulerSpecResourcesClaimsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesClaimsInput` via:
//
//	ThanosRulerSpecResourcesClaimsArgs{...}
type ThanosRulerSpecResourcesClaimsInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesClaimsOutput() ThanosRulerSpecResourcesClaimsOutput
	ToThanosRulerSpecResourcesClaimsOutputWithContext(context.Context) ThanosRulerSpecResourcesClaimsOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecResourcesClaimsArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request pulumi.StringPtrInput `pulumi:"request"`
}

func (ThanosRulerSpecResourcesClaimsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResourcesClaims)(nil)).Elem()
}

func (i ThanosRulerSpecResourcesClaimsArgs) ToThanosRulerSpecResourcesClaimsOutput() ThanosRulerSpecResourcesClaimsOutput {
	return i.ToThanosRulerSpecResourcesClaimsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesClaimsArgs) ToThanosRulerSpecResourcesClaimsOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesClaimsOutput)
}

// ThanosRulerSpecResourcesClaimsArrayInput is an input type that accepts ThanosRulerSpecResourcesClaimsArray and ThanosRulerSpecResourcesClaimsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesClaimsArrayInput` via:
//
//	ThanosRulerSpecResourcesClaimsArray{ ThanosRulerSpecResourcesClaimsArgs{...} }
type ThanosRulerSpecResourcesClaimsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesClaimsArrayOutput() ThanosRulerSpecResourcesClaimsArrayOutput
	ToThanosRulerSpecResourcesClaimsArrayOutputWithContext(context.Context) ThanosRulerSpecResourcesClaimsArrayOutput
}

type ThanosRulerSpecResourcesClaimsArray []ThanosRulerSpecResourcesClaimsInput

func (ThanosRulerSpecResourcesClaimsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecResourcesClaims)(nil)).Elem()
}

func (i ThanosRulerSpecResourcesClaimsArray) ToThanosRulerSpecResourcesClaimsArrayOutput() ThanosRulerSpecResourcesClaimsArrayOutput {
	return i.ToThanosRulerSpecResourcesClaimsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesClaimsArray) ToThanosRulerSpecResourcesClaimsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesClaimsArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecResourcesClaimsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesClaimsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResourcesClaims)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesClaimsOutput) ToThanosRulerSpecResourcesClaimsOutput() ThanosRulerSpecResourcesClaimsOutput {
	return o
}

func (o ThanosRulerSpecResourcesClaimsOutput) ToThanosRulerSpecResourcesClaimsOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of
// the Pod where this field is used. It makes that resource available
// inside a container.
func (o ThanosRulerSpecResourcesClaimsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecResourcesClaims) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Request is the name chosen for a request in the referenced claim.
// If empty, everything from the claim is made available, otherwise
// only the result of this request.
func (o ThanosRulerSpecResourcesClaimsOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecResourcesClaims) *string { return v.Request }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecResourcesClaimsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesClaimsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecResourcesClaims)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesClaimsArrayOutput) ToThanosRulerSpecResourcesClaimsArrayOutput() ThanosRulerSpecResourcesClaimsArrayOutput {
	return o
}

func (o ThanosRulerSpecResourcesClaimsArrayOutput) ToThanosRulerSpecResourcesClaimsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsArrayOutput {
	return o
}

func (o ThanosRulerSpecResourcesClaimsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecResourcesClaimsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecResourcesClaims {
		return vs[0].([]ThanosRulerSpecResourcesClaims)[vs[1].(int)]
	}).(ThanosRulerSpecResourcesClaimsOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecResourcesClaimsPatch struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name *string `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request *string `pulumi:"request"`
}

// ThanosRulerSpecResourcesClaimsPatchInput is an input type that accepts ThanosRulerSpecResourcesClaimsPatchArgs and ThanosRulerSpecResourcesClaimsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesClaimsPatchInput` via:
//
//	ThanosRulerSpecResourcesClaimsPatchArgs{...}
type ThanosRulerSpecResourcesClaimsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesClaimsPatchOutput() ThanosRulerSpecResourcesClaimsPatchOutput
	ToThanosRulerSpecResourcesClaimsPatchOutputWithContext(context.Context) ThanosRulerSpecResourcesClaimsPatchOutput
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecResourcesClaimsPatchArgs struct {
	// Name must match the name of one entry in pod.spec.resourceClaims of
	// the Pod where this field is used. It makes that resource available
	// inside a container.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Request is the name chosen for a request in the referenced claim.
	// If empty, everything from the claim is made available, otherwise
	// only the result of this request.
	Request pulumi.StringPtrInput `pulumi:"request"`
}

func (ThanosRulerSpecResourcesClaimsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResourcesClaimsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecResourcesClaimsPatchArgs) ToThanosRulerSpecResourcesClaimsPatchOutput() ThanosRulerSpecResourcesClaimsPatchOutput {
	return i.ToThanosRulerSpecResourcesClaimsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesClaimsPatchArgs) ToThanosRulerSpecResourcesClaimsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesClaimsPatchOutput)
}

// ThanosRulerSpecResourcesClaimsPatchArrayInput is an input type that accepts ThanosRulerSpecResourcesClaimsPatchArray and ThanosRulerSpecResourcesClaimsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesClaimsPatchArrayInput` via:
//
//	ThanosRulerSpecResourcesClaimsPatchArray{ ThanosRulerSpecResourcesClaimsPatchArgs{...} }
type ThanosRulerSpecResourcesClaimsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesClaimsPatchArrayOutput() ThanosRulerSpecResourcesClaimsPatchArrayOutput
	ToThanosRulerSpecResourcesClaimsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecResourcesClaimsPatchArrayOutput
}

type ThanosRulerSpecResourcesClaimsPatchArray []ThanosRulerSpecResourcesClaimsPatchInput

func (ThanosRulerSpecResourcesClaimsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecResourcesClaimsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecResourcesClaimsPatchArray) ToThanosRulerSpecResourcesClaimsPatchArrayOutput() ThanosRulerSpecResourcesClaimsPatchArrayOutput {
	return i.ToThanosRulerSpecResourcesClaimsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesClaimsPatchArray) ToThanosRulerSpecResourcesClaimsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesClaimsPatchArrayOutput)
}

// ResourceClaim references one entry in PodSpec.ResourceClaims.
type ThanosRulerSpecResourcesClaimsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesClaimsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResourcesClaimsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesClaimsPatchOutput) ToThanosRulerSpecResourcesClaimsPatchOutput() ThanosRulerSpecResourcesClaimsPatchOutput {
	return o
}

func (o ThanosRulerSpecResourcesClaimsPatchOutput) ToThanosRulerSpecResourcesClaimsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsPatchOutput {
	return o
}

// Name must match the name of one entry in pod.spec.resourceClaims of
// the Pod where this field is used. It makes that resource available
// inside a container.
func (o ThanosRulerSpecResourcesClaimsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecResourcesClaimsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Request is the name chosen for a request in the referenced claim.
// If empty, everything from the claim is made available, otherwise
// only the result of this request.
func (o ThanosRulerSpecResourcesClaimsPatchOutput) Request() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecResourcesClaimsPatch) *string { return v.Request }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecResourcesClaimsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesClaimsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecResourcesClaimsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesClaimsPatchArrayOutput) ToThanosRulerSpecResourcesClaimsPatchArrayOutput() ThanosRulerSpecResourcesClaimsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecResourcesClaimsPatchArrayOutput) ToThanosRulerSpecResourcesClaimsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesClaimsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecResourcesClaimsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecResourcesClaimsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecResourcesClaimsPatch {
		return vs[0].([]ThanosRulerSpecResourcesClaimsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecResourcesClaimsPatchOutput)
}

// Resources defines the resource requirements for single Pods.
// If not provided, no requests/limits will be set
type ThanosRulerSpecResourcesPatch struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims []ThanosRulerSpecResourcesClaimsPatch `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecResourcesPatchInput is an input type that accepts ThanosRulerSpecResourcesPatchArgs and ThanosRulerSpecResourcesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesPatchInput` via:
//
//	ThanosRulerSpecResourcesPatchArgs{...}
type ThanosRulerSpecResourcesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesPatchOutput() ThanosRulerSpecResourcesPatchOutput
	ToThanosRulerSpecResourcesPatchOutputWithContext(context.Context) ThanosRulerSpecResourcesPatchOutput
}

// Resources defines the resource requirements for single Pods.
// If not provided, no requests/limits will be set
type ThanosRulerSpecResourcesPatchArgs struct {
	// Claims lists the names of resources, defined in spec.resourceClaims,
	// that are used by this container.
	//
	// This is an alpha field and requires enabling the
	// DynamicResourceAllocation feature gate.
	//
	// This field is immutable. It can only be set for containers.
	Claims ThanosRulerSpecResourcesClaimsPatchArrayInput `pulumi:"claims"`
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResourcesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecResourcesPatchArgs) ToThanosRulerSpecResourcesPatchOutput() ThanosRulerSpecResourcesPatchOutput {
	return i.ToThanosRulerSpecResourcesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesPatchArgs) ToThanosRulerSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesPatchOutput)
}

func (i ThanosRulerSpecResourcesPatchArgs) ToThanosRulerSpecResourcesPatchPtrOutput() ThanosRulerSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecResourcesPatchArgs) ToThanosRulerSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesPatchOutput).ToThanosRulerSpecResourcesPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecResourcesPatchPtrInput is an input type that accepts ThanosRulerSpecResourcesPatchArgs, ThanosRulerSpecResourcesPatchPtr and ThanosRulerSpecResourcesPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecResourcesPatchPtrInput` via:
//
//	        ThanosRulerSpecResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecResourcesPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecResourcesPatchPtrOutput() ThanosRulerSpecResourcesPatchPtrOutput
	ToThanosRulerSpecResourcesPatchPtrOutputWithContext(context.Context) ThanosRulerSpecResourcesPatchPtrOutput
}

type thanosRulerSpecResourcesPatchPtrType ThanosRulerSpecResourcesPatchArgs

func ThanosRulerSpecResourcesPatchPtr(v *ThanosRulerSpecResourcesPatchArgs) ThanosRulerSpecResourcesPatchPtrInput {
	return (*thanosRulerSpecResourcesPatchPtrType)(v)
}

func (*thanosRulerSpecResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecResourcesPatch)(nil)).Elem()
}

func (i *thanosRulerSpecResourcesPatchPtrType) ToThanosRulerSpecResourcesPatchPtrOutput() ThanosRulerSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecResourcesPatchPtrType) ToThanosRulerSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecResourcesPatchPtrOutput)
}

// Resources defines the resource requirements for single Pods.
// If not provided, no requests/limits will be set
type ThanosRulerSpecResourcesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesPatchOutput) ToThanosRulerSpecResourcesPatchOutput() ThanosRulerSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecResourcesPatchOutput) ToThanosRulerSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecResourcesPatchOutput) ToThanosRulerSpecResourcesPatchPtrOutput() ThanosRulerSpecResourcesPatchPtrOutput {
	return o.ToThanosRulerSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecResourcesPatchOutput) ToThanosRulerSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecResourcesPatch) *ThanosRulerSpecResourcesPatch {
		return &v
	}).(ThanosRulerSpecResourcesPatchPtrOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecResourcesPatchOutput) Claims() ThanosRulerSpecResourcesClaimsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecResourcesPatch) []ThanosRulerSpecResourcesClaimsPatch { return v.Claims }).(ThanosRulerSpecResourcesClaimsPatchArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecResourcesPatch) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecResourcesPatch) map[string]interface{} { return v.Requests }).(pulumi.MapOutput)
}

type ThanosRulerSpecResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecResourcesPatchPtrOutput) ToThanosRulerSpecResourcesPatchPtrOutput() ThanosRulerSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecResourcesPatchPtrOutput) ToThanosRulerSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecResourcesPatchPtrOutput) Elem() ThanosRulerSpecResourcesPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResourcesPatch) ThanosRulerSpecResourcesPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecResourcesPatch
		return ret
	}).(ThanosRulerSpecResourcesPatchOutput)
}

// Claims lists the names of resources, defined in spec.resourceClaims,
// that are used by this container.
//
// This is an alpha field and requires enabling the
// DynamicResourceAllocation feature gate.
//
// This field is immutable. It can only be set for containers.
func (o ThanosRulerSpecResourcesPatchPtrOutput) Claims() ThanosRulerSpecResourcesClaimsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResourcesPatch) []ThanosRulerSpecResourcesClaimsPatch {
		if v == nil {
			return nil
		}
		return v.Claims
	}).(ThanosRulerSpecResourcesClaimsPatchArrayOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// Namespaces to be selected for Rules discovery. If unspecified, only
// the same namespace as the ThanosRuler object is in is used.
type ThanosRulerSpecRuleNamespaceSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecRuleNamespaceSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecRuleNamespaceSelectorInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorArgs and ThanosRulerSpecRuleNamespaceSelectorOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorInput` via:
//
//	ThanosRulerSpecRuleNamespaceSelectorArgs{...}
type ThanosRulerSpecRuleNamespaceSelectorInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorOutput() ThanosRulerSpecRuleNamespaceSelectorOutput
	ToThanosRulerSpecRuleNamespaceSelectorOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorOutput
}

// Namespaces to be selected for Rules discovery. If unspecified, only
// the same namespace as the ThanosRuler object is in is used.
type ThanosRulerSpecRuleNamespaceSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecRuleNamespaceSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelector)(nil)).Elem()
}

func (i ThanosRulerSpecRuleNamespaceSelectorArgs) ToThanosRulerSpecRuleNamespaceSelectorOutput() ThanosRulerSpecRuleNamespaceSelectorOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorArgs) ToThanosRulerSpecRuleNamespaceSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorOutput)
}

func (i ThanosRulerSpecRuleNamespaceSelectorArgs) ToThanosRulerSpecRuleNamespaceSelectorPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorArgs) ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorOutput).ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(ctx)
}

// ThanosRulerSpecRuleNamespaceSelectorPtrInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorArgs, ThanosRulerSpecRuleNamespaceSelectorPtr and ThanosRulerSpecRuleNamespaceSelectorPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorPtrInput` via:
//
//	        ThanosRulerSpecRuleNamespaceSelectorArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecRuleNamespaceSelectorPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPtrOutput
	ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorPtrOutput
}

type thanosRulerSpecRuleNamespaceSelectorPtrType ThanosRulerSpecRuleNamespaceSelectorArgs

func ThanosRulerSpecRuleNamespaceSelectorPtr(v *ThanosRulerSpecRuleNamespaceSelectorArgs) ThanosRulerSpecRuleNamespaceSelectorPtrInput {
	return (*thanosRulerSpecRuleNamespaceSelectorPtrType)(v)
}

func (*thanosRulerSpecRuleNamespaceSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleNamespaceSelector)(nil)).Elem()
}

func (i *thanosRulerSpecRuleNamespaceSelectorPtrType) ToThanosRulerSpecRuleNamespaceSelectorPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecRuleNamespaceSelectorPtrType) ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorPtrOutput)
}

// Namespaces to be selected for Rules discovery. If unspecified, only
// the same namespace as the ThanosRuler object is in is used.
type ThanosRulerSpecRuleNamespaceSelectorOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelector)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorOutput) ToThanosRulerSpecRuleNamespaceSelectorOutput() ThanosRulerSpecRuleNamespaceSelectorOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorOutput) ToThanosRulerSpecRuleNamespaceSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorOutput) ToThanosRulerSpecRuleNamespaceSelectorPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return o.ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecRuleNamespaceSelectorOutput) ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecRuleNamespaceSelector) *ThanosRulerSpecRuleNamespaceSelector {
		return &v
	}).(ThanosRulerSpecRuleNamespaceSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorOutput) MatchExpressions() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelector) []ThanosRulerSpecRuleNamespaceSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecRuleNamespaceSelectorPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleNamespaceSelector)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorPtrOutput) ToThanosRulerSpecRuleNamespaceSelectorPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorPtrOutput) ToThanosRulerSpecRuleNamespaceSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorPtrOutput) Elem() ThanosRulerSpecRuleNamespaceSelectorOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleNamespaceSelector) ThanosRulerSpecRuleNamespaceSelector {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecRuleNamespaceSelector
		return ret
	}).(ThanosRulerSpecRuleNamespaceSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorPtrOutput) MatchExpressions() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleNamespaceSelector) []ThanosRulerSpecRuleNamespaceSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleNamespaceSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs and ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsInput` via:
//
//	ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs{...}
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput
	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput)
}

// ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArray and ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayInput` via:
//
//	ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArray{ ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs{...} }
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput
	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput
}

type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArray []ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsInput

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArray) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArray) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorMatchExpressions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleNamespaceSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecRuleNamespaceSelectorMatchExpressions {
		return vs[0].([]ThanosRulerSpecRuleNamespaceSelectorMatchExpressions)[vs[1].(int)]
	}).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs and ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchInput` via:
//
//	ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs{...}
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput
	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput)
}

// ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArray and ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayInput` via:
//
//	ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArray{ ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs{...} }
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput
	ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput
}

type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArray []ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchInput

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArray) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArray) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch {
		return vs[0].([]ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput)
}

// Namespaces to be selected for Rules discovery. If unspecified, only
// the same namespace as the ThanosRuler object is in is used.
type ThanosRulerSpecRuleNamespaceSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecRuleNamespaceSelectorPatchInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorPatchArgs and ThanosRulerSpecRuleNamespaceSelectorPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorPatchInput` via:
//
//	ThanosRulerSpecRuleNamespaceSelectorPatchArgs{...}
type ThanosRulerSpecRuleNamespaceSelectorPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorPatchOutput() ThanosRulerSpecRuleNamespaceSelectorPatchOutput
	ToThanosRulerSpecRuleNamespaceSelectorPatchOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchOutput
}

// Namespaces to be selected for Rules discovery. If unspecified, only
// the same namespace as the ThanosRuler object is in is used.
type ThanosRulerSpecRuleNamespaceSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecRuleNamespaceSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorPatch)(nil)).Elem()
}

func (i ThanosRulerSpecRuleNamespaceSelectorPatchArgs) ToThanosRulerSpecRuleNamespaceSelectorPatchOutput() ThanosRulerSpecRuleNamespaceSelectorPatchOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorPatchArgs) ToThanosRulerSpecRuleNamespaceSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorPatchOutput)
}

func (i ThanosRulerSpecRuleNamespaceSelectorPatchArgs) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleNamespaceSelectorPatchArgs) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorPatchOutput).ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecRuleNamespaceSelectorPatchPtrInput is an input type that accepts ThanosRulerSpecRuleNamespaceSelectorPatchArgs, ThanosRulerSpecRuleNamespaceSelectorPatchPtr and ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleNamespaceSelectorPatchPtrInput` via:
//
//	        ThanosRulerSpecRuleNamespaceSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecRuleNamespaceSelectorPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput
	ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput
}

type thanosRulerSpecRuleNamespaceSelectorPatchPtrType ThanosRulerSpecRuleNamespaceSelectorPatchArgs

func ThanosRulerSpecRuleNamespaceSelectorPatchPtr(v *ThanosRulerSpecRuleNamespaceSelectorPatchArgs) ThanosRulerSpecRuleNamespaceSelectorPatchPtrInput {
	return (*thanosRulerSpecRuleNamespaceSelectorPatchPtrType)(v)
}

func (*thanosRulerSpecRuleNamespaceSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleNamespaceSelectorPatch)(nil)).Elem()
}

func (i *thanosRulerSpecRuleNamespaceSelectorPatchPtrType) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecRuleNamespaceSelectorPatchPtrType) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput)
}

// Namespaces to be selected for Rules discovery. If unspecified, only
// the same namespace as the ThanosRuler object is in is used.
type ThanosRulerSpecRuleNamespaceSelectorPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorPatchOutput) ToThanosRulerSpecRuleNamespaceSelectorPatchOutput() ThanosRulerSpecRuleNamespaceSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorPatchOutput) ToThanosRulerSpecRuleNamespaceSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorPatchOutput) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return o.ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecRuleNamespaceSelectorPatchOutput) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecRuleNamespaceSelectorPatch) *ThanosRulerSpecRuleNamespaceSelectorPatch {
		return &v
	}).(ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorPatchOutput) MatchExpressions() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorPatch) []ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleNamespaceSelectorPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleNamespaceSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput() ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput) ToThanosRulerSpecRuleNamespaceSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput) Elem() ThanosRulerSpecRuleNamespaceSelectorPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleNamespaceSelectorPatch) ThanosRulerSpecRuleNamespaceSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecRuleNamespaceSelectorPatch
		return ret
	}).(ThanosRulerSpecRuleNamespaceSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput) MatchExpressions() ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleNamespaceSelectorPatch) []ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleNamespaceSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// PrometheusRule objects to be selected for rule evaluation. An empty
// label selector matches all objects. A null label selector matches no
// objects.
type ThanosRulerSpecRuleSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecRuleSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecRuleSelectorInput is an input type that accepts ThanosRulerSpecRuleSelectorArgs and ThanosRulerSpecRuleSelectorOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorInput` via:
//
//	ThanosRulerSpecRuleSelectorArgs{...}
type ThanosRulerSpecRuleSelectorInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorOutput() ThanosRulerSpecRuleSelectorOutput
	ToThanosRulerSpecRuleSelectorOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorOutput
}

// PrometheusRule objects to be selected for rule evaluation. An empty
// label selector matches all objects. A null label selector matches no
// objects.
type ThanosRulerSpecRuleSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecRuleSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecRuleSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelector)(nil)).Elem()
}

func (i ThanosRulerSpecRuleSelectorArgs) ToThanosRulerSpecRuleSelectorOutput() ThanosRulerSpecRuleSelectorOutput {
	return i.ToThanosRulerSpecRuleSelectorOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorArgs) ToThanosRulerSpecRuleSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorOutput)
}

func (i ThanosRulerSpecRuleSelectorArgs) ToThanosRulerSpecRuleSelectorPtrOutput() ThanosRulerSpecRuleSelectorPtrOutput {
	return i.ToThanosRulerSpecRuleSelectorPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorArgs) ToThanosRulerSpecRuleSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorOutput).ToThanosRulerSpecRuleSelectorPtrOutputWithContext(ctx)
}

// ThanosRulerSpecRuleSelectorPtrInput is an input type that accepts ThanosRulerSpecRuleSelectorArgs, ThanosRulerSpecRuleSelectorPtr and ThanosRulerSpecRuleSelectorPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorPtrInput` via:
//
//	        ThanosRulerSpecRuleSelectorArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecRuleSelectorPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorPtrOutput() ThanosRulerSpecRuleSelectorPtrOutput
	ToThanosRulerSpecRuleSelectorPtrOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorPtrOutput
}

type thanosRulerSpecRuleSelectorPtrType ThanosRulerSpecRuleSelectorArgs

func ThanosRulerSpecRuleSelectorPtr(v *ThanosRulerSpecRuleSelectorArgs) ThanosRulerSpecRuleSelectorPtrInput {
	return (*thanosRulerSpecRuleSelectorPtrType)(v)
}

func (*thanosRulerSpecRuleSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleSelector)(nil)).Elem()
}

func (i *thanosRulerSpecRuleSelectorPtrType) ToThanosRulerSpecRuleSelectorPtrOutput() ThanosRulerSpecRuleSelectorPtrOutput {
	return i.ToThanosRulerSpecRuleSelectorPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecRuleSelectorPtrType) ToThanosRulerSpecRuleSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorPtrOutput)
}

// PrometheusRule objects to be selected for rule evaluation. An empty
// label selector matches all objects. A null label selector matches no
// objects.
type ThanosRulerSpecRuleSelectorOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelector)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorOutput) ToThanosRulerSpecRuleSelectorOutput() ThanosRulerSpecRuleSelectorOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorOutput) ToThanosRulerSpecRuleSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorOutput) ToThanosRulerSpecRuleSelectorPtrOutput() ThanosRulerSpecRuleSelectorPtrOutput {
	return o.ToThanosRulerSpecRuleSelectorPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecRuleSelectorOutput) ToThanosRulerSpecRuleSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecRuleSelector) *ThanosRulerSpecRuleSelector {
		return &v
	}).(ThanosRulerSpecRuleSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorOutput) MatchExpressions() ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelector) []ThanosRulerSpecRuleSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecRuleSelectorPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleSelector)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorPtrOutput) ToThanosRulerSpecRuleSelectorPtrOutput() ThanosRulerSpecRuleSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorPtrOutput) ToThanosRulerSpecRuleSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorPtrOutput) Elem() ThanosRulerSpecRuleSelectorOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleSelector) ThanosRulerSpecRuleSelector {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecRuleSelector
		return ret
	}).(ThanosRulerSpecRuleSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorPtrOutput) MatchExpressions() ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleSelector) []ThanosRulerSpecRuleSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecRuleSelectorMatchExpressionsInput is an input type that accepts ThanosRulerSpecRuleSelectorMatchExpressionsArgs and ThanosRulerSpecRuleSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorMatchExpressionsInput` via:
//
//	ThanosRulerSpecRuleSelectorMatchExpressionsArgs{...}
type ThanosRulerSpecRuleSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorMatchExpressionsOutput() ThanosRulerSpecRuleSelectorMatchExpressionsOutput
	ToThanosRulerSpecRuleSelectorMatchExpressionsOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecRuleSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsArgs) ToThanosRulerSpecRuleSelectorMatchExpressionsOutput() ThanosRulerSpecRuleSelectorMatchExpressionsOutput {
	return i.ToThanosRulerSpecRuleSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsArgs) ToThanosRulerSpecRuleSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorMatchExpressionsOutput)
}

// ThanosRulerSpecRuleSelectorMatchExpressionsArrayInput is an input type that accepts ThanosRulerSpecRuleSelectorMatchExpressionsArray and ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorMatchExpressionsArrayInput` via:
//
//	ThanosRulerSpecRuleSelectorMatchExpressionsArray{ ThanosRulerSpecRuleSelectorMatchExpressionsArgs{...} }
type ThanosRulerSpecRuleSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput() ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput
	ToThanosRulerSpecRuleSelectorMatchExpressionsArrayOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput
}

type ThanosRulerSpecRuleSelectorMatchExpressionsArray []ThanosRulerSpecRuleSelectorMatchExpressionsInput

func (ThanosRulerSpecRuleSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsArray) ToThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput() ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput {
	return i.ToThanosRulerSpecRuleSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsArray) ToThanosRulerSpecRuleSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsOutput() ThanosRulerSpecRuleSelectorMatchExpressionsOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecRuleSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecRuleSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorMatchExpressions) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecRuleSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorMatchExpressions) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput() ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecRuleSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecRuleSelectorMatchExpressions {
		return vs[0].([]ThanosRulerSpecRuleSelectorMatchExpressions)[vs[1].(int)]
	}).(ThanosRulerSpecRuleSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecRuleSelectorMatchExpressionsPatchInput is an input type that accepts ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs and ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorMatchExpressionsPatchInput` via:
//
//	ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs{...}
type ThanosRulerSpecRuleSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput() ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput
	ToThanosRulerSpecRuleSelectorMatchExpressionsPatchOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput() ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput {
	return i.ToThanosRulerSpecRuleSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput)
}

// ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayInput is an input type that accepts ThanosRulerSpecRuleSelectorMatchExpressionsPatchArray and ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayInput` via:
//
//	ThanosRulerSpecRuleSelectorMatchExpressionsPatchArray{ ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs{...} }
type ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput
	ToThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput
}

type ThanosRulerSpecRuleSelectorMatchExpressionsPatchArray []ThanosRulerSpecRuleSelectorMatchExpressionsPatchInput

func (ThanosRulerSpecRuleSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsPatchArray) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput {
	return i.ToThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorMatchExpressionsPatchArray) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput() ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorMatchExpressionsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorMatchExpressionsPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorMatchExpressionsPatch) []string { return v.Values }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecRuleSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecRuleSelectorMatchExpressionsPatch {
		return vs[0].([]ThanosRulerSpecRuleSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput)
}

// PrometheusRule objects to be selected for rule evaluation. An empty
// label selector matches all objects. A null label selector matches no
// objects.
type ThanosRulerSpecRuleSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecRuleSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecRuleSelectorPatchInput is an input type that accepts ThanosRulerSpecRuleSelectorPatchArgs and ThanosRulerSpecRuleSelectorPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorPatchInput` via:
//
//	ThanosRulerSpecRuleSelectorPatchArgs{...}
type ThanosRulerSpecRuleSelectorPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorPatchOutput() ThanosRulerSpecRuleSelectorPatchOutput
	ToThanosRulerSpecRuleSelectorPatchOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorPatchOutput
}

// PrometheusRule objects to be selected for rule evaluation. An empty
// label selector matches all objects. A null label selector matches no
// objects.
type ThanosRulerSpecRuleSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecRuleSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelectorPatch)(nil)).Elem()
}

func (i ThanosRulerSpecRuleSelectorPatchArgs) ToThanosRulerSpecRuleSelectorPatchOutput() ThanosRulerSpecRuleSelectorPatchOutput {
	return i.ToThanosRulerSpecRuleSelectorPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorPatchArgs) ToThanosRulerSpecRuleSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorPatchOutput)
}

func (i ThanosRulerSpecRuleSelectorPatchArgs) ToThanosRulerSpecRuleSelectorPatchPtrOutput() ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecRuleSelectorPatchArgs) ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorPatchOutput).ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecRuleSelectorPatchPtrInput is an input type that accepts ThanosRulerSpecRuleSelectorPatchArgs, ThanosRulerSpecRuleSelectorPatchPtr and ThanosRulerSpecRuleSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecRuleSelectorPatchPtrInput` via:
//
//	        ThanosRulerSpecRuleSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecRuleSelectorPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecRuleSelectorPatchPtrOutput() ThanosRulerSpecRuleSelectorPatchPtrOutput
	ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(context.Context) ThanosRulerSpecRuleSelectorPatchPtrOutput
}

type thanosRulerSpecRuleSelectorPatchPtrType ThanosRulerSpecRuleSelectorPatchArgs

func ThanosRulerSpecRuleSelectorPatchPtr(v *ThanosRulerSpecRuleSelectorPatchArgs) ThanosRulerSpecRuleSelectorPatchPtrInput {
	return (*thanosRulerSpecRuleSelectorPatchPtrType)(v)
}

func (*thanosRulerSpecRuleSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleSelectorPatch)(nil)).Elem()
}

func (i *thanosRulerSpecRuleSelectorPatchPtrType) ToThanosRulerSpecRuleSelectorPatchPtrOutput() ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecRuleSelectorPatchPtrType) ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecRuleSelectorPatchPtrOutput)
}

// PrometheusRule objects to be selected for rule evaluation. An empty
// label selector matches all objects. A null label selector matches no
// objects.
type ThanosRulerSpecRuleSelectorPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecRuleSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorPatchOutput) ToThanosRulerSpecRuleSelectorPatchOutput() ThanosRulerSpecRuleSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorPatchOutput) ToThanosRulerSpecRuleSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorPatchOutput) ToThanosRulerSpecRuleSelectorPatchPtrOutput() ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return o.ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecRuleSelectorPatchOutput) ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecRuleSelectorPatch) *ThanosRulerSpecRuleSelectorPatch {
		return &v
	}).(ThanosRulerSpecRuleSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorPatchOutput) MatchExpressions() ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorPatch) []ThanosRulerSpecRuleSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecRuleSelectorPatch) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecRuleSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecRuleSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecRuleSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecRuleSelectorPatchPtrOutput) ToThanosRulerSpecRuleSelectorPatchPtrOutput() ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorPatchPtrOutput) ToThanosRulerSpecRuleSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecRuleSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecRuleSelectorPatchPtrOutput) Elem() ThanosRulerSpecRuleSelectorPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleSelectorPatch) ThanosRulerSpecRuleSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecRuleSelectorPatch
		return ret
	}).(ThanosRulerSpecRuleSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorPatchPtrOutput) MatchExpressions() ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleSelectorPatch) []ThanosRulerSpecRuleSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecRuleSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecRuleSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// SecurityContext holds pod-level security attributes and common container settings.
// This defaults to the default PodSecurityContext.
type ThanosRulerSpecSecurityContext struct {
	AppArmorProfile *ThanosRulerSpecSecurityContextAppArmorProfile `pulumi:"appArmorProfile"`
	// A special supplemental group that applies to all containers in a pod.
	// Some volume types allow the Kubelet to change the ownership of that volume
	// to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup
	// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
	// 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroup *int `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
	// before being exposed inside Pod. This field will only apply to
	// volume types which support fsGroup based ownership(and permissions).
	// It will have no effect on ephemeral volume types such as: secret, configmaps
	// and emptydir.
	// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy *string `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
	// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
	// Valid values are "MountOption" and "Recursive".
	//
	// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
	// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
	//
	// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
	// This requires all Pods that share the same volume to use the same SELinux label.
	// It is not possible to share the same volume among privileged and unprivileged Pods.
	// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
	// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
	// CSIDriver instance. Other volumes are always re-labelled recursively.
	// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
	//
	// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
	// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
	// and "Recursive" for all other volumes.
	//
	// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
	//
	// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
	// Note that this field cannot be set when spec.os.name is windows.
	SeLinuxChangePolicy *string                                       `pulumi:"seLinuxChangePolicy"`
	SeLinuxOptions      *ThanosRulerSpecSecurityContextSeLinuxOptions `pulumi:"seLinuxOptions"`
	SeccompProfile      *ThanosRulerSpecSecurityContextSeccompProfile `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in
	// addition to the container's primary GID and fsGroup (if specified).  If
	// the SupplementalGroupsPolicy feature is enabled, the
	// supplementalGroupsPolicy field determines whether these are in addition
	// to or instead of any group memberships defined in the container image.
	// If unspecified, no additional groups are added, though group memberships
	// defined in the container image may still be used, depending on the
	// supplementalGroupsPolicy field.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups []int `pulumi:"supplementalGroups"`
	// Defines how supplemental groups of the first container processes are calculated.
	// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
	// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
	// and the container runtime must implement support for this feature.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroupsPolicy *string `pulumi:"supplementalGroupsPolicy"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
	// sysctls (by the container runtime) might fail to launch.
	// Note that this field cannot be set when spec.os.name is windows.
	Sysctls        []ThanosRulerSpecSecurityContextSysctls       `pulumi:"sysctls"`
	WindowsOptions *ThanosRulerSpecSecurityContextWindowsOptions `pulumi:"windowsOptions"`
}

// ThanosRulerSpecSecurityContextInput is an input type that accepts ThanosRulerSpecSecurityContextArgs and ThanosRulerSpecSecurityContextOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextInput` via:
//
//	ThanosRulerSpecSecurityContextArgs{...}
type ThanosRulerSpecSecurityContextInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextOutput() ThanosRulerSpecSecurityContextOutput
	ToThanosRulerSpecSecurityContextOutputWithContext(context.Context) ThanosRulerSpecSecurityContextOutput
}

// SecurityContext holds pod-level security attributes and common container settings.
// This defaults to the default PodSecurityContext.
type ThanosRulerSpecSecurityContextArgs struct {
	AppArmorProfile ThanosRulerSpecSecurityContextAppArmorProfilePtrInput `pulumi:"appArmorProfile"`
	// A special supplemental group that applies to all containers in a pod.
	// Some volume types allow the Kubelet to change the ownership of that volume
	// to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup
	// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
	// 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroup pulumi.IntPtrInput `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
	// before being exposed inside Pod. This field will only apply to
	// volume types which support fsGroup based ownership(and permissions).
	// It will have no effect on ephemeral volume types such as: secret, configmaps
	// and emptydir.
	// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy pulumi.StringPtrInput `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
	// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
	// Valid values are "MountOption" and "Recursive".
	//
	// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
	// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
	//
	// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
	// This requires all Pods that share the same volume to use the same SELinux label.
	// It is not possible to share the same volume among privileged and unprivileged Pods.
	// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
	// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
	// CSIDriver instance. Other volumes are always re-labelled recursively.
	// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
	//
	// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
	// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
	// and "Recursive" for all other volumes.
	//
	// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
	//
	// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
	// Note that this field cannot be set when spec.os.name is windows.
	SeLinuxChangePolicy pulumi.StringPtrInput                                `pulumi:"seLinuxChangePolicy"`
	SeLinuxOptions      ThanosRulerSpecSecurityContextSeLinuxOptionsPtrInput `pulumi:"seLinuxOptions"`
	SeccompProfile      ThanosRulerSpecSecurityContextSeccompProfilePtrInput `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in
	// addition to the container's primary GID and fsGroup (if specified).  If
	// the SupplementalGroupsPolicy feature is enabled, the
	// supplementalGroupsPolicy field determines whether these are in addition
	// to or instead of any group memberships defined in the container image.
	// If unspecified, no additional groups are added, though group memberships
	// defined in the container image may still be used, depending on the
	// supplementalGroupsPolicy field.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups pulumi.IntArrayInput `pulumi:"supplementalGroups"`
	// Defines how supplemental groups of the first container processes are calculated.
	// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
	// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
	// and the container runtime must implement support for this feature.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroupsPolicy pulumi.StringPtrInput `pulumi:"supplementalGroupsPolicy"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
	// sysctls (by the container runtime) might fail to launch.
	// Note that this field cannot be set when spec.os.name is windows.
	Sysctls        ThanosRulerSpecSecurityContextSysctlsArrayInput      `pulumi:"sysctls"`
	WindowsOptions ThanosRulerSpecSecurityContextWindowsOptionsPtrInput `pulumi:"windowsOptions"`
}

func (ThanosRulerSpecSecurityContextArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContext)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextArgs) ToThanosRulerSpecSecurityContextOutput() ThanosRulerSpecSecurityContextOutput {
	return i.ToThanosRulerSpecSecurityContextOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextArgs) ToThanosRulerSpecSecurityContextOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextOutput)
}

func (i ThanosRulerSpecSecurityContextArgs) ToThanosRulerSpecSecurityContextPtrOutput() ThanosRulerSpecSecurityContextPtrOutput {
	return i.ToThanosRulerSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextArgs) ToThanosRulerSpecSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextOutput).ToThanosRulerSpecSecurityContextPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextPtrInput is an input type that accepts ThanosRulerSpecSecurityContextArgs, ThanosRulerSpecSecurityContextPtr and ThanosRulerSpecSecurityContextPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextPtrOutput() ThanosRulerSpecSecurityContextPtrOutput
	ToThanosRulerSpecSecurityContextPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextPtrOutput
}

type thanosRulerSpecSecurityContextPtrType ThanosRulerSpecSecurityContextArgs

func ThanosRulerSpecSecurityContextPtr(v *ThanosRulerSpecSecurityContextArgs) ThanosRulerSpecSecurityContextPtrInput {
	return (*thanosRulerSpecSecurityContextPtrType)(v)
}

func (*thanosRulerSpecSecurityContextPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContext)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextPtrType) ToThanosRulerSpecSecurityContextPtrOutput() ThanosRulerSpecSecurityContextPtrOutput {
	return i.ToThanosRulerSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextPtrType) ToThanosRulerSpecSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextPtrOutput)
}

// SecurityContext holds pod-level security attributes and common container settings.
// This defaults to the default PodSecurityContext.
type ThanosRulerSpecSecurityContextOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContext)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextOutput) ToThanosRulerSpecSecurityContextOutput() ThanosRulerSpecSecurityContextOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextOutput) ToThanosRulerSpecSecurityContextOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextOutput) ToThanosRulerSpecSecurityContextPtrOutput() ThanosRulerSpecSecurityContextPtrOutput {
	return o.ToThanosRulerSpecSecurityContextPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextOutput) ToThanosRulerSpecSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContext {
		return &v
	}).(ThanosRulerSpecSecurityContextPtrOutput)
}

func (o ThanosRulerSpecSecurityContextOutput) AppArmorProfile() ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextAppArmorProfile {
		return v.AppArmorProfile
	}).(ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput)
}

// A special supplemental group that applies to all containers in a pod.
// Some volume types allow the Kubelet to change the ownership of that volume
// to be owned by the pod:
//
// 1. The owning GID will be the FSGroup
// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
// 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *int { return v.FsGroup }).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
// before being exposed inside Pod. This field will only apply to
// volume types which support fsGroup based ownership(and permissions).
// It will have no effect on ephemeral volume types such as: secret, configmaps
// and emptydir.
// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *string { return v.FsGroupChangePolicy }).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
// Valid values are "MountOption" and "Recursive".
//
// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
//
// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
// This requires all Pods that share the same volume to use the same SELinux label.
// It is not possible to share the same volume among privileged and unprivileged Pods.
// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
// CSIDriver instance. Other volumes are always re-labelled recursively.
// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
//
// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
// and "Recursive" for all other volumes.
//
// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
//
// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) SeLinuxChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *string { return v.SeLinuxChangePolicy }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecSecurityContextOutput) SeLinuxOptions() ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextSeLinuxOptions {
		return v.SeLinuxOptions
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

func (o ThanosRulerSpecSecurityContextOutput) SeccompProfile() ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextSeccompProfile {
		return v.SeccompProfile
	}).(ThanosRulerSpecSecurityContextSeccompProfilePtrOutput)
}

// A list of groups applied to the first process run in each container, in
// addition to the container's primary GID and fsGroup (if specified).  If
// the SupplementalGroupsPolicy feature is enabled, the
// supplementalGroupsPolicy field determines whether these are in addition
// to or instead of any group memberships defined in the container image.
// If unspecified, no additional groups are added, though group memberships
// defined in the container image may still be used, depending on the
// supplementalGroupsPolicy field.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) []int { return v.SupplementalGroups }).(pulumi.IntArrayOutput)
}

// Defines how supplemental groups of the first container processes are calculated.
// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
// and the container runtime must implement support for this feature.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) SupplementalGroupsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *string { return v.SupplementalGroupsPolicy }).(pulumi.StringPtrOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
// sysctls (by the container runtime) might fail to launch.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextOutput) Sysctls() ThanosRulerSpecSecurityContextSysctlsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) []ThanosRulerSpecSecurityContextSysctls { return v.Sysctls }).(ThanosRulerSpecSecurityContextSysctlsArrayOutput)
}

func (o ThanosRulerSpecSecurityContextOutput) WindowsOptions() ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextWindowsOptions {
		return v.WindowsOptions
	}).(ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput)
}

type ThanosRulerSpecSecurityContextPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContext)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextPtrOutput) ToThanosRulerSpecSecurityContextPtrOutput() ThanosRulerSpecSecurityContextPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextPtrOutput) ToThanosRulerSpecSecurityContextPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextPtrOutput) Elem() ThanosRulerSpecSecurityContextOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) ThanosRulerSpecSecurityContext {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContext
		return ret
	}).(ThanosRulerSpecSecurityContextOutput)
}

func (o ThanosRulerSpecSecurityContextPtrOutput) AppArmorProfile() ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextAppArmorProfile {
		if v == nil {
			return nil
		}
		return v.AppArmorProfile
	}).(ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput)
}

// A special supplemental group that applies to all containers in a pod.
// Some volume types allow the Kubelet to change the ownership of that volume
// to be owned by the pod:
//
// 1. The owning GID will be the FSGroup
// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
// 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.FsGroup
	}).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
// before being exposed inside Pod. This field will only apply to
// volume types which support fsGroup based ownership(and permissions).
// It will have no effect on ephemeral volume types such as: secret, configmaps
// and emptydir.
// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.FsGroupChangePolicy
	}).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
// Valid values are "MountOption" and "Recursive".
//
// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
//
// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
// This requires all Pods that share the same volume to use the same SELinux label.
// It is not possible to share the same volume among privileged and unprivileged Pods.
// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
// CSIDriver instance. Other volumes are always re-labelled recursively.
// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
//
// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
// and "Recursive" for all other volumes.
//
// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
//
// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) SeLinuxChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.SeLinuxChangePolicy
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecSecurityContextPtrOutput) SeLinuxOptions() ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextSeLinuxOptions {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

func (o ThanosRulerSpecSecurityContextPtrOutput) SeccompProfile() ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextSeccompProfile {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(ThanosRulerSpecSecurityContextSeccompProfilePtrOutput)
}

// A list of groups applied to the first process run in each container, in
// addition to the container's primary GID and fsGroup (if specified).  If
// the SupplementalGroupsPolicy feature is enabled, the
// supplementalGroupsPolicy field determines whether these are in addition
// to or instead of any group memberships defined in the container image.
// If unspecified, no additional groups are added, though group memberships
// defined in the container image may still be used, depending on the
// supplementalGroupsPolicy field.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) []int {
		if v == nil {
			return nil
		}
		return v.SupplementalGroups
	}).(pulumi.IntArrayOutput)
}

// Defines how supplemental groups of the first container processes are calculated.
// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
// and the container runtime must implement support for this feature.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) SupplementalGroupsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *string {
		if v == nil {
			return nil
		}
		return v.SupplementalGroupsPolicy
	}).(pulumi.StringPtrOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
// sysctls (by the container runtime) might fail to launch.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPtrOutput) Sysctls() ThanosRulerSpecSecurityContextSysctlsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) []ThanosRulerSpecSecurityContextSysctls {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(ThanosRulerSpecSecurityContextSysctlsArrayOutput)
}

func (o ThanosRulerSpecSecurityContextPtrOutput) WindowsOptions() ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContext) *ThanosRulerSpecSecurityContextWindowsOptions {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput)
}

// appArmorProfile is the AppArmor options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextAppArmorProfile struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecSecurityContextAppArmorProfileInput is an input type that accepts ThanosRulerSpecSecurityContextAppArmorProfileArgs and ThanosRulerSpecSecurityContextAppArmorProfileOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextAppArmorProfileInput` via:
//
//	ThanosRulerSpecSecurityContextAppArmorProfileArgs{...}
type ThanosRulerSpecSecurityContextAppArmorProfileInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextAppArmorProfileOutput() ThanosRulerSpecSecurityContextAppArmorProfileOutput
	ToThanosRulerSpecSecurityContextAppArmorProfileOutputWithContext(context.Context) ThanosRulerSpecSecurityContextAppArmorProfileOutput
}

// appArmorProfile is the AppArmor options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextAppArmorProfileArgs struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecSecurityContextAppArmorProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfile)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextAppArmorProfileArgs) ToThanosRulerSpecSecurityContextAppArmorProfileOutput() ThanosRulerSpecSecurityContextAppArmorProfileOutput {
	return i.ToThanosRulerSpecSecurityContextAppArmorProfileOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextAppArmorProfileArgs) ToThanosRulerSpecSecurityContextAppArmorProfileOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextAppArmorProfileOutput)
}

func (i ThanosRulerSpecSecurityContextAppArmorProfileArgs) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return i.ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextAppArmorProfileArgs) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextAppArmorProfileOutput).ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextAppArmorProfilePtrInput is an input type that accepts ThanosRulerSpecSecurityContextAppArmorProfileArgs, ThanosRulerSpecSecurityContextAppArmorProfilePtr and ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextAppArmorProfilePtrInput` via:
//
//	        ThanosRulerSpecSecurityContextAppArmorProfileArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextAppArmorProfilePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput
	ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput
}

type thanosRulerSpecSecurityContextAppArmorProfilePtrType ThanosRulerSpecSecurityContextAppArmorProfileArgs

func ThanosRulerSpecSecurityContextAppArmorProfilePtr(v *ThanosRulerSpecSecurityContextAppArmorProfileArgs) ThanosRulerSpecSecurityContextAppArmorProfilePtrInput {
	return (*thanosRulerSpecSecurityContextAppArmorProfilePtrType)(v)
}

func (*thanosRulerSpecSecurityContextAppArmorProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextAppArmorProfile)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextAppArmorProfilePtrType) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return i.ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextAppArmorProfilePtrType) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput)
}

// appArmorProfile is the AppArmor options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextAppArmorProfileOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextAppArmorProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfile)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextAppArmorProfileOutput) ToThanosRulerSpecSecurityContextAppArmorProfileOutput() ThanosRulerSpecSecurityContextAppArmorProfileOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfileOutput) ToThanosRulerSpecSecurityContextAppArmorProfileOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfileOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfileOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return o.ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextAppArmorProfileOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextAppArmorProfile) *ThanosRulerSpecSecurityContextAppArmorProfile {
		return &v
	}).(ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecSecurityContextAppArmorProfileOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextAppArmorProfile) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecSecurityContextAppArmorProfileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextAppArmorProfile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextAppArmorProfile)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput) Elem() ThanosRulerSpecSecurityContextAppArmorProfileOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextAppArmorProfile) ThanosRulerSpecSecurityContextAppArmorProfile {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextAppArmorProfile
		return ret
	}).(ThanosRulerSpecSecurityContextAppArmorProfileOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextAppArmorProfile) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextAppArmorProfile) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// appArmorProfile is the AppArmor options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextAppArmorProfilePatch struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecSecurityContextAppArmorProfilePatchInput is an input type that accepts ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs and ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextAppArmorProfilePatchInput` via:
//
//	ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs{...}
type ThanosRulerSpecSecurityContextAppArmorProfilePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextAppArmorProfilePatchOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput
	ToThanosRulerSpecSecurityContextAppArmorProfilePatchOutputWithContext(context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput
}

// appArmorProfile is the AppArmor options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs struct {
	// localhostProfile indicates a profile loaded on the node that should be used.
	// The profile must be preconfigured on the node to work.
	// Must match the loaded name of the profile.
	// Must be set if and only if type is "Localhost".
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of AppArmor profile will be applied.
	// Valid options are:
	//   Localhost - a profile pre-loaded on the node.
	//   RuntimeDefault - the container runtime's default profile.
	//   Unconfined - no AppArmor enforcement.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecSecurityContextAppArmorProfilePatchOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput {
	return i.ToThanosRulerSpecSecurityContextAppArmorProfilePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecSecurityContextAppArmorProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput)
}

func (i ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput).ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrInput is an input type that accepts ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs, ThanosRulerSpecSecurityContextAppArmorProfilePatchPtr and ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput
	ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput
}

type thanosRulerSpecSecurityContextAppArmorProfilePatchPtrType ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs

func ThanosRulerSpecSecurityContextAppArmorProfilePatchPtr(v *ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs) ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrInput {
	return (*thanosRulerSpecSecurityContextAppArmorProfilePatchPtrType)(v)
}

func (*thanosRulerSpecSecurityContextAppArmorProfilePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextAppArmorProfilePatchPtrType) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextAppArmorProfilePatchPtrType) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput)
}

// appArmorProfile is the AppArmor options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePatchOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextAppArmorProfilePatch) *ThanosRulerSpecSecurityContextAppArmorProfilePatch {
		return &v
	}).(ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextAppArmorProfilePatch) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextAppArmorProfilePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextAppArmorProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput() ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput) ToThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput) Elem() ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextAppArmorProfilePatch) ThanosRulerSpecSecurityContextAppArmorProfilePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextAppArmorProfilePatch
		return ret
	}).(ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput)
}

// localhostProfile indicates a profile loaded on the node that should be used.
// The profile must be preconfigured on the node to work.
// Must match the loaded name of the profile.
// Must be set if and only if type is "Localhost".
func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextAppArmorProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of AppArmor profile will be applied.
// Valid options are:
//
//	Localhost - a profile pre-loaded on the node.
//	RuntimeDefault - the container runtime's default profile.
//	Unconfined - no AppArmor enforcement.
func (o ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextAppArmorProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// SecurityContext holds pod-level security attributes and common container settings.
// This defaults to the default PodSecurityContext.
type ThanosRulerSpecSecurityContextPatch struct {
	AppArmorProfile *ThanosRulerSpecSecurityContextAppArmorProfilePatch `pulumi:"appArmorProfile"`
	// A special supplemental group that applies to all containers in a pod.
	// Some volume types allow the Kubelet to change the ownership of that volume
	// to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup
	// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
	// 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroup *int `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
	// before being exposed inside Pod. This field will only apply to
	// volume types which support fsGroup based ownership(and permissions).
	// It will have no effect on ephemeral volume types such as: secret, configmaps
	// and emptydir.
	// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy *string `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup *int `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot *bool `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser *int `pulumi:"runAsUser"`
	// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
	// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
	// Valid values are "MountOption" and "Recursive".
	//
	// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
	// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
	//
	// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
	// This requires all Pods that share the same volume to use the same SELinux label.
	// It is not possible to share the same volume among privileged and unprivileged Pods.
	// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
	// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
	// CSIDriver instance. Other volumes are always re-labelled recursively.
	// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
	//
	// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
	// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
	// and "Recursive" for all other volumes.
	//
	// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
	//
	// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
	// Note that this field cannot be set when spec.os.name is windows.
	SeLinuxChangePolicy *string                                            `pulumi:"seLinuxChangePolicy"`
	SeLinuxOptions      *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch `pulumi:"seLinuxOptions"`
	SeccompProfile      *ThanosRulerSpecSecurityContextSeccompProfilePatch `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in
	// addition to the container's primary GID and fsGroup (if specified).  If
	// the SupplementalGroupsPolicy feature is enabled, the
	// supplementalGroupsPolicy field determines whether these are in addition
	// to or instead of any group memberships defined in the container image.
	// If unspecified, no additional groups are added, though group memberships
	// defined in the container image may still be used, depending on the
	// supplementalGroupsPolicy field.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups []int `pulumi:"supplementalGroups"`
	// Defines how supplemental groups of the first container processes are calculated.
	// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
	// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
	// and the container runtime must implement support for this feature.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroupsPolicy *string `pulumi:"supplementalGroupsPolicy"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
	// sysctls (by the container runtime) might fail to launch.
	// Note that this field cannot be set when spec.os.name is windows.
	Sysctls        []ThanosRulerSpecSecurityContextSysctlsPatch       `pulumi:"sysctls"`
	WindowsOptions *ThanosRulerSpecSecurityContextWindowsOptionsPatch `pulumi:"windowsOptions"`
}

// ThanosRulerSpecSecurityContextPatchInput is an input type that accepts ThanosRulerSpecSecurityContextPatchArgs and ThanosRulerSpecSecurityContextPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextPatchInput` via:
//
//	ThanosRulerSpecSecurityContextPatchArgs{...}
type ThanosRulerSpecSecurityContextPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextPatchOutput() ThanosRulerSpecSecurityContextPatchOutput
	ToThanosRulerSpecSecurityContextPatchOutputWithContext(context.Context) ThanosRulerSpecSecurityContextPatchOutput
}

// SecurityContext holds pod-level security attributes and common container settings.
// This defaults to the default PodSecurityContext.
type ThanosRulerSpecSecurityContextPatchArgs struct {
	AppArmorProfile ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrInput `pulumi:"appArmorProfile"`
	// A special supplemental group that applies to all containers in a pod.
	// Some volume types allow the Kubelet to change the ownership of that volume
	// to be owned by the pod:
	//
	// 1. The owning GID will be the FSGroup
	// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
	// 3. The permission bits are OR'd with rw-rw----
	//
	// If unset, the Kubelet will not modify the ownership and permissions of any volume.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroup pulumi.IntPtrInput `pulumi:"fsGroup"`
	// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
	// before being exposed inside Pod. This field will only apply to
	// volume types which support fsGroup based ownership(and permissions).
	// It will have no effect on ephemeral volume types such as: secret, configmaps
	// and emptydir.
	// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
	// Note that this field cannot be set when spec.os.name is windows.
	FsGroupChangePolicy pulumi.StringPtrInput `pulumi:"fsGroupChangePolicy"`
	// The GID to run the entrypoint of the container process.
	// Uses runtime default if unset.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsGroup pulumi.IntPtrInput `pulumi:"runAsGroup"`
	// Indicates that the container must run as a non-root user.
	// If true, the Kubelet will validate the image at runtime to ensure that it
	// does not run as UID 0 (root) and fail to start the container if it does.
	// If unset or false, no such validation will be performed.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsNonRoot pulumi.BoolPtrInput `pulumi:"runAsNonRoot"`
	// The UID to run the entrypoint of the container process.
	// Defaults to user specified in image metadata if unspecified.
	// May also be set in SecurityContext.  If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence
	// for that container.
	// Note that this field cannot be set when spec.os.name is windows.
	RunAsUser pulumi.IntPtrInput `pulumi:"runAsUser"`
	// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
	// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
	// Valid values are "MountOption" and "Recursive".
	//
	// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
	// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
	//
	// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
	// This requires all Pods that share the same volume to use the same SELinux label.
	// It is not possible to share the same volume among privileged and unprivileged Pods.
	// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
	// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
	// CSIDriver instance. Other volumes are always re-labelled recursively.
	// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
	//
	// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
	// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
	// and "Recursive" for all other volumes.
	//
	// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
	//
	// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
	// Note that this field cannot be set when spec.os.name is windows.
	SeLinuxChangePolicy pulumi.StringPtrInput                                     `pulumi:"seLinuxChangePolicy"`
	SeLinuxOptions      ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrInput `pulumi:"seLinuxOptions"`
	SeccompProfile      ThanosRulerSpecSecurityContextSeccompProfilePatchPtrInput `pulumi:"seccompProfile"`
	// A list of groups applied to the first process run in each container, in
	// addition to the container's primary GID and fsGroup (if specified).  If
	// the SupplementalGroupsPolicy feature is enabled, the
	// supplementalGroupsPolicy field determines whether these are in addition
	// to or instead of any group memberships defined in the container image.
	// If unspecified, no additional groups are added, though group memberships
	// defined in the container image may still be used, depending on the
	// supplementalGroupsPolicy field.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroups pulumi.IntArrayInput `pulumi:"supplementalGroups"`
	// Defines how supplemental groups of the first container processes are calculated.
	// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
	// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
	// and the container runtime must implement support for this feature.
	// Note that this field cannot be set when spec.os.name is windows.
	SupplementalGroupsPolicy pulumi.StringPtrInput `pulumi:"supplementalGroupsPolicy"`
	// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
	// sysctls (by the container runtime) might fail to launch.
	// Note that this field cannot be set when spec.os.name is windows.
	Sysctls        ThanosRulerSpecSecurityContextSysctlsPatchArrayInput      `pulumi:"sysctls"`
	WindowsOptions ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrInput `pulumi:"windowsOptions"`
}

func (ThanosRulerSpecSecurityContextPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextPatch)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextPatchArgs) ToThanosRulerSpecSecurityContextPatchOutput() ThanosRulerSpecSecurityContextPatchOutput {
	return i.ToThanosRulerSpecSecurityContextPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextPatchArgs) ToThanosRulerSpecSecurityContextPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextPatchOutput)
}

func (i ThanosRulerSpecSecurityContextPatchArgs) ToThanosRulerSpecSecurityContextPatchPtrOutput() ThanosRulerSpecSecurityContextPatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextPatchArgs) ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextPatchOutput).ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextPatchPtrInput is an input type that accepts ThanosRulerSpecSecurityContextPatchArgs, ThanosRulerSpecSecurityContextPatchPtr and ThanosRulerSpecSecurityContextPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextPatchPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextPatchPtrOutput() ThanosRulerSpecSecurityContextPatchPtrOutput
	ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextPatchPtrOutput
}

type thanosRulerSpecSecurityContextPatchPtrType ThanosRulerSpecSecurityContextPatchArgs

func ThanosRulerSpecSecurityContextPatchPtr(v *ThanosRulerSpecSecurityContextPatchArgs) ThanosRulerSpecSecurityContextPatchPtrInput {
	return (*thanosRulerSpecSecurityContextPatchPtrType)(v)
}

func (*thanosRulerSpecSecurityContextPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextPatch)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextPatchPtrType) ToThanosRulerSpecSecurityContextPatchPtrOutput() ThanosRulerSpecSecurityContextPatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextPatchPtrType) ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextPatchPtrOutput)
}

// SecurityContext holds pod-level security attributes and common container settings.
// This defaults to the default PodSecurityContext.
type ThanosRulerSpecSecurityContextPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextPatchOutput) ToThanosRulerSpecSecurityContextPatchOutput() ThanosRulerSpecSecurityContextPatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextPatchOutput) ToThanosRulerSpecSecurityContextPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextPatchOutput) ToThanosRulerSpecSecurityContextPatchPtrOutput() ThanosRulerSpecSecurityContextPatchPtrOutput {
	return o.ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextPatchOutput) ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextPatch {
		return &v
	}).(ThanosRulerSpecSecurityContextPatchPtrOutput)
}

func (o ThanosRulerSpecSecurityContextPatchOutput) AppArmorProfile() ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextAppArmorProfilePatch {
		return v.AppArmorProfile
	}).(ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput)
}

// A special supplemental group that applies to all containers in a pod.
// Some volume types allow the Kubelet to change the ownership of that volume
// to be owned by the pod:
//
// 1. The owning GID will be the FSGroup
// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
// 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *int { return v.FsGroup }).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
// before being exposed inside Pod. This field will only apply to
// volume types which support fsGroup based ownership(and permissions).
// It will have no effect on ephemeral volume types such as: secret, configmaps
// and emptydir.
// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *string { return v.FsGroupChangePolicy }).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *int { return v.RunAsGroup }).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextPatchOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *bool { return v.RunAsNonRoot }).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *int { return v.RunAsUser }).(pulumi.IntPtrOutput)
}

// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
// Valid values are "MountOption" and "Recursive".
//
// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
//
// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
// This requires all Pods that share the same volume to use the same SELinux label.
// It is not possible to share the same volume among privileged and unprivileged Pods.
// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
// CSIDriver instance. Other volumes are always re-labelled recursively.
// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
//
// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
// and "Recursive" for all other volumes.
//
// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
//
// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) SeLinuxChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *string { return v.SeLinuxChangePolicy }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecSecurityContextPatchOutput) SeLinuxOptions() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch {
		return v.SeLinuxOptions
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput)
}

func (o ThanosRulerSpecSecurityContextPatchOutput) SeccompProfile() ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextSeccompProfilePatch {
		return v.SeccompProfile
	}).(ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput)
}

// A list of groups applied to the first process run in each container, in
// addition to the container's primary GID and fsGroup (if specified).  If
// the SupplementalGroupsPolicy feature is enabled, the
// supplementalGroupsPolicy field determines whether these are in addition
// to or instead of any group memberships defined in the container image.
// If unspecified, no additional groups are added, though group memberships
// defined in the container image may still be used, depending on the
// supplementalGroupsPolicy field.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) []int { return v.SupplementalGroups }).(pulumi.IntArrayOutput)
}

// Defines how supplemental groups of the first container processes are calculated.
// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
// and the container runtime must implement support for this feature.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) SupplementalGroupsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *string { return v.SupplementalGroupsPolicy }).(pulumi.StringPtrOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
// sysctls (by the container runtime) might fail to launch.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchOutput) Sysctls() ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) []ThanosRulerSpecSecurityContextSysctlsPatch {
		return v.Sysctls
	}).(ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput)
}

func (o ThanosRulerSpecSecurityContextPatchOutput) WindowsOptions() ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextWindowsOptionsPatch {
		return v.WindowsOptions
	}).(ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput)
}

type ThanosRulerSpecSecurityContextPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextPatchPtrOutput) ToThanosRulerSpecSecurityContextPatchPtrOutput() ThanosRulerSpecSecurityContextPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextPatchPtrOutput) ToThanosRulerSpecSecurityContextPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextPatchPtrOutput) Elem() ThanosRulerSpecSecurityContextPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) ThanosRulerSpecSecurityContextPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextPatch
		return ret
	}).(ThanosRulerSpecSecurityContextPatchOutput)
}

func (o ThanosRulerSpecSecurityContextPatchPtrOutput) AppArmorProfile() ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextAppArmorProfilePatch {
		if v == nil {
			return nil
		}
		return v.AppArmorProfile
	}).(ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput)
}

// A special supplemental group that applies to all containers in a pod.
// Some volume types allow the Kubelet to change the ownership of that volume
// to be owned by the pod:
//
// 1. The owning GID will be the FSGroup
// 2. The setgid bit is set (new files created in the volume will be owned by FSGroup)
// 3. The permission bits are OR'd with rw-rw----
//
// If unset, the Kubelet will not modify the ownership and permissions of any volume.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) FsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.FsGroup
	}).(pulumi.IntPtrOutput)
}

// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume
// before being exposed inside Pod. This field will only apply to
// volume types which support fsGroup based ownership(and permissions).
// It will have no effect on ephemeral volume types such as: secret, configmaps
// and emptydir.
// Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) FsGroupChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsGroupChangePolicy
	}).(pulumi.StringPtrOutput)
}

// The GID to run the entrypoint of the container process.
// Uses runtime default if unset.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) RunAsGroup() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsGroup
	}).(pulumi.IntPtrOutput)
}

// Indicates that the container must run as a non-root user.
// If true, the Kubelet will validate the image at runtime to ensure that it
// does not run as UID 0 (root) and fail to start the container if it does.
// If unset or false, no such validation will be performed.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) RunAsNonRoot() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *bool {
		if v == nil {
			return nil
		}
		return v.RunAsNonRoot
	}).(pulumi.BoolPtrOutput)
}

// The UID to run the entrypoint of the container process.
// Defaults to user specified in image metadata if unspecified.
// May also be set in SecurityContext.  If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence
// for that container.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) RunAsUser() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *int {
		if v == nil {
			return nil
		}
		return v.RunAsUser
	}).(pulumi.IntPtrOutput)
}

// seLinuxChangePolicy defines how the container's SELinux label is applied to all volumes used by the Pod.
// It has no effect on nodes that do not support SELinux or to volumes does not support SELinux.
// Valid values are "MountOption" and "Recursive".
//
// "Recursive" means relabeling of all files on all Pod volumes by the container runtime.
// This may be slow for large volumes, but allows mixing privileged and unprivileged Pods sharing the same volume on the same node.
//
// "MountOption" mounts all eligible Pod volumes with `-o context` mount option.
// This requires all Pods that share the same volume to use the same SELinux label.
// It is not possible to share the same volume among privileged and unprivileged Pods.
// Eligible volumes are in-tree FibreChannel and iSCSI volumes, and all CSI volumes
// whose CSI driver announces SELinux support by setting spec.seLinuxMount: true in their
// CSIDriver instance. Other volumes are always re-labelled recursively.
// "MountOption" value is allowed only when SELinuxMount feature gate is enabled.
//
// If not specified and SELinuxMount feature gate is enabled, "MountOption" is used.
// If not specified and SELinuxMount feature gate is disabled, "MountOption" is used for ReadWriteOncePod volumes
// and "Recursive" for all other volumes.
//
// This field affects only Pods that have SELinux label set, either in PodSecurityContext or in SecurityContext of all containers.
//
// All Pods that use the same volume should use the same seLinuxChangePolicy, otherwise some pods can get stuck in ContainerCreating state.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) SeLinuxChangePolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *string {
		if v == nil {
			return nil
		}
		return v.SeLinuxChangePolicy
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecSecurityContextPatchPtrOutput) SeLinuxOptions() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch {
		if v == nil {
			return nil
		}
		return v.SeLinuxOptions
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput)
}

func (o ThanosRulerSpecSecurityContextPatchPtrOutput) SeccompProfile() ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextSeccompProfilePatch {
		if v == nil {
			return nil
		}
		return v.SeccompProfile
	}).(ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput)
}

// A list of groups applied to the first process run in each container, in
// addition to the container's primary GID and fsGroup (if specified).  If
// the SupplementalGroupsPolicy feature is enabled, the
// supplementalGroupsPolicy field determines whether these are in addition
// to or instead of any group memberships defined in the container image.
// If unspecified, no additional groups are added, though group memberships
// defined in the container image may still be used, depending on the
// supplementalGroupsPolicy field.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) SupplementalGroups() pulumi.IntArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) []int {
		if v == nil {
			return nil
		}
		return v.SupplementalGroups
	}).(pulumi.IntArrayOutput)
}

// Defines how supplemental groups of the first container processes are calculated.
// Valid values are "Merge" and "Strict". If not specified, "Merge" is used.
// (Alpha) Using the field requires the SupplementalGroupsPolicy feature gate to be enabled
// and the container runtime must implement support for this feature.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) SupplementalGroupsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *string {
		if v == nil {
			return nil
		}
		return v.SupplementalGroupsPolicy
	}).(pulumi.StringPtrOutput)
}

// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported
// sysctls (by the container runtime) might fail to launch.
// Note that this field cannot be set when spec.os.name is windows.
func (o ThanosRulerSpecSecurityContextPatchPtrOutput) Sysctls() ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) []ThanosRulerSpecSecurityContextSysctlsPatch {
		if v == nil {
			return nil
		}
		return v.Sysctls
	}).(ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput)
}

func (o ThanosRulerSpecSecurityContextPatchPtrOutput) WindowsOptions() ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextPatch) *ThanosRulerSpecSecurityContextWindowsOptionsPatch {
		if v == nil {
			return nil
		}
		return v.WindowsOptions
	}).(ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput)
}

// The SELinux context to be applied to all containers.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in SecurityContext.  If set in
// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
// takes precedence for that container.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeLinuxOptions struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// ThanosRulerSpecSecurityContextSeLinuxOptionsInput is an input type that accepts ThanosRulerSpecSecurityContextSeLinuxOptionsArgs and ThanosRulerSpecSecurityContextSeLinuxOptionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeLinuxOptionsInput` via:
//
//	ThanosRulerSpecSecurityContextSeLinuxOptionsArgs{...}
type ThanosRulerSpecSecurityContextSeLinuxOptionsInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeLinuxOptionsOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsOutput
	ToThanosRulerSpecSecurityContextSeLinuxOptionsOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsOutput
}

// The SELinux context to be applied to all containers.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in SecurityContext.  If set in
// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
// takes precedence for that container.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeLinuxOptionsArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecSecurityContextSeLinuxOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsOutput {
	return i.ToThanosRulerSpecSecurityContextSeLinuxOptionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeLinuxOptionsOutput)
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeLinuxOptionsOutput).ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextSeLinuxOptionsPtrInput is an input type that accepts ThanosRulerSpecSecurityContextSeLinuxOptionsArgs, ThanosRulerSpecSecurityContextSeLinuxOptionsPtr and ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeLinuxOptionsPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextSeLinuxOptionsArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextSeLinuxOptionsPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput
	ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput
}

type thanosRulerSpecSecurityContextSeLinuxOptionsPtrType ThanosRulerSpecSecurityContextSeLinuxOptionsArgs

func ThanosRulerSpecSecurityContextSeLinuxOptionsPtr(v *ThanosRulerSpecSecurityContextSeLinuxOptionsArgs) ThanosRulerSpecSecurityContextSeLinuxOptionsPtrInput {
	return (*thanosRulerSpecSecurityContextSeLinuxOptionsPtrType)(v)
}

func (*thanosRulerSpecSecurityContextSeLinuxOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextSeLinuxOptionsPtrType) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextSeLinuxOptionsPtrType) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// The SELinux context to be applied to all containers.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in SecurityContext.  If set in
// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
// takes precedence for that container.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeLinuxOptionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextSeLinuxOptions) *ThanosRulerSpecSecurityContextSeLinuxOptions {
		return &v
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptions) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptions) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptions) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeLinuxOptions)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) Elem() ThanosRulerSpecSecurityContextSeLinuxOptionsOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptions) ThanosRulerSpecSecurityContextSeLinuxOptions {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextSeLinuxOptions
		return ret
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptions) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The SELinux context to be applied to all containers.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in SecurityContext.  If set in
// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
// takes precedence for that container.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeLinuxOptionsPatch struct {
	// Level is SELinux level label that applies to the container.
	Level *string `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role *string `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type *string `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User *string `pulumi:"user"`
}

// ThanosRulerSpecSecurityContextSeLinuxOptionsPatchInput is an input type that accepts ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs and ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeLinuxOptionsPatchInput` via:
//
//	ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs{...}
type ThanosRulerSpecSecurityContextSeLinuxOptionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput
	ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput
}

// The SELinux context to be applied to all containers.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in SecurityContext.  If set in
// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
// takes precedence for that container.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs struct {
	// Level is SELinux level label that applies to the container.
	Level pulumi.StringPtrInput `pulumi:"level"`
	// Role is a SELinux role label that applies to the container.
	Role pulumi.StringPtrInput `pulumi:"role"`
	// Type is a SELinux type label that applies to the container.
	Type pulumi.StringPtrInput `pulumi:"type"`
	// User is a SELinux user label that applies to the container.
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput {
	return i.ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput)
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput).ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrInput is an input type that accepts ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs, ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtr and ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput
	ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput
}

type thanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrType ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs

func ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtr(v *ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrInput {
	return (*thanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrType)(v)
}

func (*thanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrType) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrType) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput)
}

// The SELinux context to be applied to all containers.
// If unspecified, the container runtime will allocate a random SELinux context for each
// container.  May also be set in SecurityContext.  If set in
// both SecurityContext and PodSecurityContext, the value specified in SecurityContext
// takes precedence for that container.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch {
		return &v
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string { return v.Level }).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string { return v.Role }).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeLinuxOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) ToThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) Elem() ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) ThanosRulerSpecSecurityContextSeLinuxOptionsPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextSeLinuxOptionsPatch
		return ret
	}).(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput)
}

// Level is SELinux level label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) Level() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Level
	}).(pulumi.StringPtrOutput)
}

// Role is a SELinux role label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Role
	}).(pulumi.StringPtrOutput)
}

// Type is a SELinux type label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// User is a SELinux user label that applies to the container.
func (o ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeLinuxOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// The seccomp options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeccompProfile struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecSecurityContextSeccompProfileInput is an input type that accepts ThanosRulerSpecSecurityContextSeccompProfileArgs and ThanosRulerSpecSecurityContextSeccompProfileOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeccompProfileInput` via:
//
//	ThanosRulerSpecSecurityContextSeccompProfileArgs{...}
type ThanosRulerSpecSecurityContextSeccompProfileInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeccompProfileOutput() ThanosRulerSpecSecurityContextSeccompProfileOutput
	ToThanosRulerSpecSecurityContextSeccompProfileOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeccompProfileOutput
}

// The seccomp options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeccompProfileArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecSecurityContextSeccompProfileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSeccompProfileArgs) ToThanosRulerSpecSecurityContextSeccompProfileOutput() ThanosRulerSpecSecurityContextSeccompProfileOutput {
	return i.ToThanosRulerSpecSecurityContextSeccompProfileOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeccompProfileArgs) ToThanosRulerSpecSecurityContextSeccompProfileOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeccompProfileOutput)
}

func (i ThanosRulerSpecSecurityContextSeccompProfileArgs) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeccompProfileArgs) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeccompProfileOutput).ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextSeccompProfilePtrInput is an input type that accepts ThanosRulerSpecSecurityContextSeccompProfileArgs, ThanosRulerSpecSecurityContextSeccompProfilePtr and ThanosRulerSpecSecurityContextSeccompProfilePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeccompProfilePtrInput` via:
//
//	        ThanosRulerSpecSecurityContextSeccompProfileArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextSeccompProfilePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePtrOutput
	ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeccompProfilePtrOutput
}

type thanosRulerSpecSecurityContextSeccompProfilePtrType ThanosRulerSpecSecurityContextSeccompProfileArgs

func ThanosRulerSpecSecurityContextSeccompProfilePtr(v *ThanosRulerSpecSecurityContextSeccompProfileArgs) ThanosRulerSpecSecurityContextSeccompProfilePtrInput {
	return (*thanosRulerSpecSecurityContextSeccompProfilePtrType)(v)
}

func (*thanosRulerSpecSecurityContextSeccompProfilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextSeccompProfilePtrType) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextSeccompProfilePtrType) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeccompProfilePtrOutput)
}

// The seccomp options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeccompProfileOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeccompProfileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeccompProfileOutput) ToThanosRulerSpecSecurityContextSeccompProfileOutput() ThanosRulerSpecSecurityContextSeccompProfileOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfileOutput) ToThanosRulerSpecSecurityContextSeccompProfileOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfileOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfileOutput) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return o.ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextSeccompProfileOutput) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextSeccompProfile) *ThanosRulerSpecSecurityContextSeccompProfile {
		return &v
	}).(ThanosRulerSpecSecurityContextSeccompProfilePtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecSecurityContextSeccompProfileOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeccompProfile) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecSecurityContextSeccompProfileOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeccompProfile) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextSeccompProfilePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeccompProfilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeccompProfile)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePtrOutput) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePtrOutput) ToThanosRulerSpecSecurityContextSeccompProfilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePtrOutput) Elem() ThanosRulerSpecSecurityContextSeccompProfileOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeccompProfile) ThanosRulerSpecSecurityContextSeccompProfile {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextSeccompProfile
		return ret
	}).(ThanosRulerSpecSecurityContextSeccompProfileOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecSecurityContextSeccompProfilePtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecSecurityContextSeccompProfilePtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeccompProfile) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// The seccomp options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeccompProfilePatch struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile *string `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecSecurityContextSeccompProfilePatchInput is an input type that accepts ThanosRulerSpecSecurityContextSeccompProfilePatchArgs and ThanosRulerSpecSecurityContextSeccompProfilePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeccompProfilePatchInput` via:
//
//	ThanosRulerSpecSecurityContextSeccompProfilePatchArgs{...}
type ThanosRulerSpecSecurityContextSeccompProfilePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeccompProfilePatchOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchOutput
	ToThanosRulerSpecSecurityContextSeccompProfilePatchOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchOutput
}

// The seccomp options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeccompProfilePatchArgs struct {
	// localhostProfile indicates a profile defined in a file on the node should be used.
	// The profile must be preconfigured on the node to work.
	// Must be a descending path, relative to the kubelet's configured seccomp profile location.
	// Must be set if type is "Localhost". Must NOT be set for any other type.
	LocalhostProfile pulumi.StringPtrInput `pulumi:"localhostProfile"`
	// type indicates which kind of seccomp profile will be applied.
	// Valid options are:
	//
	// Localhost - a profile defined in a file on the node should be used.
	// RuntimeDefault - the container runtime default profile should be used.
	// Unconfined - no profile should be applied.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecSecurityContextSeccompProfilePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecSecurityContextSeccompProfilePatchOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchOutput {
	return i.ToThanosRulerSpecSecurityContextSeccompProfilePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecSecurityContextSeccompProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeccompProfilePatchOutput)
}

func (i ThanosRulerSpecSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSeccompProfilePatchArgs) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeccompProfilePatchOutput).ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextSeccompProfilePatchPtrInput is an input type that accepts ThanosRulerSpecSecurityContextSeccompProfilePatchArgs, ThanosRulerSpecSecurityContextSeccompProfilePatchPtr and ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSeccompProfilePatchPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextSeccompProfilePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextSeccompProfilePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput
	ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput
}

type thanosRulerSpecSecurityContextSeccompProfilePatchPtrType ThanosRulerSpecSecurityContextSeccompProfilePatchArgs

func ThanosRulerSpecSecurityContextSeccompProfilePatchPtr(v *ThanosRulerSpecSecurityContextSeccompProfilePatchArgs) ThanosRulerSpecSecurityContextSeccompProfilePatchPtrInput {
	return (*thanosRulerSpecSecurityContextSeccompProfilePatchPtrType)(v)
}

func (*thanosRulerSpecSecurityContextSeccompProfilePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextSeccompProfilePatchPtrType) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextSeccompProfilePatchPtrType) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput)
}

// The seccomp options to use by the containers in this pod.
// Note that this field cannot be set when spec.os.name is windows.
type ThanosRulerSpecSecurityContextSeccompProfilePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeccompProfilePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecSecurityContextSeccompProfilePatchOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecSecurityContextSeccompProfilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return o.ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePatchOutput) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextSeccompProfilePatch) *ThanosRulerSpecSecurityContextSeccompProfilePatch {
		return &v
	}).(ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecSecurityContextSeccompProfilePatchOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeccompProfilePatch) *string { return v.LocalhostProfile }).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecSecurityContextSeccompProfilePatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSeccompProfilePatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextSeccompProfilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput() ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput) ToThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput) Elem() ThanosRulerSpecSecurityContextSeccompProfilePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeccompProfilePatch) ThanosRulerSpecSecurityContextSeccompProfilePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextSeccompProfilePatch
		return ret
	}).(ThanosRulerSpecSecurityContextSeccompProfilePatchOutput)
}

// localhostProfile indicates a profile defined in a file on the node should be used.
// The profile must be preconfigured on the node to work.
// Must be a descending path, relative to the kubelet's configured seccomp profile location.
// Must be set if type is "Localhost". Must NOT be set for any other type.
func (o ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput) LocalhostProfile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeccompProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.LocalhostProfile
	}).(pulumi.StringPtrOutput)
}

// type indicates which kind of seccomp profile will be applied.
// Valid options are:
//
// Localhost - a profile defined in a file on the node should be used.
// RuntimeDefault - the container runtime default profile should be used.
// Unconfined - no profile should be applied.
func (o ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextSeccompProfilePatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// Sysctl defines a kernel parameter to be set
type ThanosRulerSpecSecurityContextSysctls struct {
	// Name of a property to set
	Name *string `pulumi:"name"`
	// Value of a property to set
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecSecurityContextSysctlsInput is an input type that accepts ThanosRulerSpecSecurityContextSysctlsArgs and ThanosRulerSpecSecurityContextSysctlsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSysctlsInput` via:
//
//	ThanosRulerSpecSecurityContextSysctlsArgs{...}
type ThanosRulerSpecSecurityContextSysctlsInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSysctlsOutput() ThanosRulerSpecSecurityContextSysctlsOutput
	ToThanosRulerSpecSecurityContextSysctlsOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSysctlsOutput
}

// Sysctl defines a kernel parameter to be set
type ThanosRulerSpecSecurityContextSysctlsArgs struct {
	// Name of a property to set
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of a property to set
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecSecurityContextSysctlsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctls)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSysctlsArgs) ToThanosRulerSpecSecurityContextSysctlsOutput() ThanosRulerSpecSecurityContextSysctlsOutput {
	return i.ToThanosRulerSpecSecurityContextSysctlsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSysctlsArgs) ToThanosRulerSpecSecurityContextSysctlsOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSysctlsOutput)
}

// ThanosRulerSpecSecurityContextSysctlsArrayInput is an input type that accepts ThanosRulerSpecSecurityContextSysctlsArray and ThanosRulerSpecSecurityContextSysctlsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSysctlsArrayInput` via:
//
//	ThanosRulerSpecSecurityContextSysctlsArray{ ThanosRulerSpecSecurityContextSysctlsArgs{...} }
type ThanosRulerSpecSecurityContextSysctlsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSysctlsArrayOutput() ThanosRulerSpecSecurityContextSysctlsArrayOutput
	ToThanosRulerSpecSecurityContextSysctlsArrayOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSysctlsArrayOutput
}

type ThanosRulerSpecSecurityContextSysctlsArray []ThanosRulerSpecSecurityContextSysctlsInput

func (ThanosRulerSpecSecurityContextSysctlsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecSecurityContextSysctls)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSysctlsArray) ToThanosRulerSpecSecurityContextSysctlsArrayOutput() ThanosRulerSpecSecurityContextSysctlsArrayOutput {
	return i.ToThanosRulerSpecSecurityContextSysctlsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSysctlsArray) ToThanosRulerSpecSecurityContextSysctlsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSysctlsArrayOutput)
}

// Sysctl defines a kernel parameter to be set
type ThanosRulerSpecSecurityContextSysctlsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSysctlsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctls)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSysctlsOutput) ToThanosRulerSpecSecurityContextSysctlsOutput() ThanosRulerSpecSecurityContextSysctlsOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSysctlsOutput) ToThanosRulerSpecSecurityContextSysctlsOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsOutput {
	return o
}

// Name of a property to set
func (o ThanosRulerSpecSecurityContextSysctlsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSysctls) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of a property to set
func (o ThanosRulerSpecSecurityContextSysctlsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSysctls) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextSysctlsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSysctlsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecSecurityContextSysctls)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSysctlsArrayOutput) ToThanosRulerSpecSecurityContextSysctlsArrayOutput() ThanosRulerSpecSecurityContextSysctlsArrayOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSysctlsArrayOutput) ToThanosRulerSpecSecurityContextSysctlsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsArrayOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSysctlsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecSecurityContextSysctlsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecSecurityContextSysctls {
		return vs[0].([]ThanosRulerSpecSecurityContextSysctls)[vs[1].(int)]
	}).(ThanosRulerSpecSecurityContextSysctlsOutput)
}

// Sysctl defines a kernel parameter to be set
type ThanosRulerSpecSecurityContextSysctlsPatch struct {
	// Name of a property to set
	Name *string `pulumi:"name"`
	// Value of a property to set
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecSecurityContextSysctlsPatchInput is an input type that accepts ThanosRulerSpecSecurityContextSysctlsPatchArgs and ThanosRulerSpecSecurityContextSysctlsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSysctlsPatchInput` via:
//
//	ThanosRulerSpecSecurityContextSysctlsPatchArgs{...}
type ThanosRulerSpecSecurityContextSysctlsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSysctlsPatchOutput() ThanosRulerSpecSecurityContextSysctlsPatchOutput
	ToThanosRulerSpecSecurityContextSysctlsPatchOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSysctlsPatchOutput
}

// Sysctl defines a kernel parameter to be set
type ThanosRulerSpecSecurityContextSysctlsPatchArgs struct {
	// Name of a property to set
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Value of a property to set
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecSecurityContextSysctlsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctlsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSysctlsPatchArgs) ToThanosRulerSpecSecurityContextSysctlsPatchOutput() ThanosRulerSpecSecurityContextSysctlsPatchOutput {
	return i.ToThanosRulerSpecSecurityContextSysctlsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSysctlsPatchArgs) ToThanosRulerSpecSecurityContextSysctlsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSysctlsPatchOutput)
}

// ThanosRulerSpecSecurityContextSysctlsPatchArrayInput is an input type that accepts ThanosRulerSpecSecurityContextSysctlsPatchArray and ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextSysctlsPatchArrayInput` via:
//
//	ThanosRulerSpecSecurityContextSysctlsPatchArray{ ThanosRulerSpecSecurityContextSysctlsPatchArgs{...} }
type ThanosRulerSpecSecurityContextSysctlsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextSysctlsPatchArrayOutput() ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput
	ToThanosRulerSpecSecurityContextSysctlsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput
}

type ThanosRulerSpecSecurityContextSysctlsPatchArray []ThanosRulerSpecSecurityContextSysctlsPatchInput

func (ThanosRulerSpecSecurityContextSysctlsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecSecurityContextSysctlsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextSysctlsPatchArray) ToThanosRulerSpecSecurityContextSysctlsPatchArrayOutput() ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput {
	return i.ToThanosRulerSpecSecurityContextSysctlsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextSysctlsPatchArray) ToThanosRulerSpecSecurityContextSysctlsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput)
}

// Sysctl defines a kernel parameter to be set
type ThanosRulerSpecSecurityContextSysctlsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSysctlsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctlsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSysctlsPatchOutput) ToThanosRulerSpecSecurityContextSysctlsPatchOutput() ThanosRulerSpecSecurityContextSysctlsPatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSysctlsPatchOutput) ToThanosRulerSpecSecurityContextSysctlsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsPatchOutput {
	return o
}

// Name of a property to set
func (o ThanosRulerSpecSecurityContextSysctlsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSysctlsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Value of a property to set
func (o ThanosRulerSpecSecurityContextSysctlsPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextSysctlsPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecSecurityContextSysctlsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput) ToThanosRulerSpecSecurityContextSysctlsPatchArrayOutput() ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput) ToThanosRulerSpecSecurityContextSysctlsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecSecurityContextSysctlsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecSecurityContextSysctlsPatch {
		return vs[0].([]ThanosRulerSpecSecurityContextSysctlsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecSecurityContextSysctlsPatchOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options within a container's SecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecSecurityContextWindowsOptions struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// ThanosRulerSpecSecurityContextWindowsOptionsInput is an input type that accepts ThanosRulerSpecSecurityContextWindowsOptionsArgs and ThanosRulerSpecSecurityContextWindowsOptionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextWindowsOptionsInput` via:
//
//	ThanosRulerSpecSecurityContextWindowsOptionsArgs{...}
type ThanosRulerSpecSecurityContextWindowsOptionsInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextWindowsOptionsOutput() ThanosRulerSpecSecurityContextWindowsOptionsOutput
	ToThanosRulerSpecSecurityContextWindowsOptionsOutputWithContext(context.Context) ThanosRulerSpecSecurityContextWindowsOptionsOutput
}

// The Windows specific settings applied to all containers.
// If unspecified, the options within a container's SecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecSecurityContextWindowsOptionsArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (ThanosRulerSpecSecurityContextWindowsOptionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsArgs) ToThanosRulerSpecSecurityContextWindowsOptionsOutput() ThanosRulerSpecSecurityContextWindowsOptionsOutput {
	return i.ToThanosRulerSpecSecurityContextWindowsOptionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsArgs) ToThanosRulerSpecSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextWindowsOptionsOutput)
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsArgs) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return i.ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsArgs) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextWindowsOptionsOutput).ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextWindowsOptionsPtrInput is an input type that accepts ThanosRulerSpecSecurityContextWindowsOptionsArgs, ThanosRulerSpecSecurityContextWindowsOptionsPtr and ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextWindowsOptionsPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextWindowsOptionsArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextWindowsOptionsPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput
	ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput
}

type thanosRulerSpecSecurityContextWindowsOptionsPtrType ThanosRulerSpecSecurityContextWindowsOptionsArgs

func ThanosRulerSpecSecurityContextWindowsOptionsPtr(v *ThanosRulerSpecSecurityContextWindowsOptionsArgs) ThanosRulerSpecSecurityContextWindowsOptionsPtrInput {
	return (*thanosRulerSpecSecurityContextWindowsOptionsPtrType)(v)
}

func (*thanosRulerSpecSecurityContextWindowsOptionsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextWindowsOptionsPtrType) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return i.ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextWindowsOptionsPtrType) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options within a container's SecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecSecurityContextWindowsOptionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextWindowsOptionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) ToThanosRulerSpecSecurityContextWindowsOptionsOutput() ThanosRulerSpecSecurityContextWindowsOptionsOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) ToThanosRulerSpecSecurityContextWindowsOptionsOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextWindowsOptions) *ThanosRulerSpecSecurityContextWindowsOptions {
		return &v
	}).(ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptions) *string { return v.GmsaCredentialSpecName }).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptions) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextWindowsOptionsOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptions) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextWindowsOptions)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) Elem() ThanosRulerSpecSecurityContextWindowsOptionsOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptions) ThanosRulerSpecSecurityContextWindowsOptions {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextWindowsOptions
		return ret
	}).(ThanosRulerSpecSecurityContextWindowsOptionsOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptions) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptions) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options within a container's SecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecSecurityContextWindowsOptionsPatch struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec *string `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName *string `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess *bool `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName *string `pulumi:"runAsUserName"`
}

// ThanosRulerSpecSecurityContextWindowsOptionsPatchInput is an input type that accepts ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs and ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextWindowsOptionsPatchInput` via:
//
//	ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs{...}
type ThanosRulerSpecSecurityContextWindowsOptionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextWindowsOptionsPatchOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput
	ToThanosRulerSpecSecurityContextWindowsOptionsPatchOutputWithContext(context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput
}

// The Windows specific settings applied to all containers.
// If unspecified, the options within a container's SecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs struct {
	// GMSACredentialSpec is where the GMSA admission webhook
	// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
	// GMSA credential spec named by the GMSACredentialSpecName field.
	GmsaCredentialSpec pulumi.StringPtrInput `pulumi:"gmsaCredentialSpec"`
	// GMSACredentialSpecName is the name of the GMSA credential spec to use.
	GmsaCredentialSpecName pulumi.StringPtrInput `pulumi:"gmsaCredentialSpecName"`
	// HostProcess determines if a container should be run as a 'Host Process' container.
	// All of a Pod's containers must have the same effective HostProcess value
	// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
	// In addition, if HostProcess is true then HostNetwork must also be set to true.
	HostProcess pulumi.BoolPtrInput `pulumi:"hostProcess"`
	// The UserName in Windows to run the entrypoint of the container process.
	// Defaults to the user specified in image metadata if unspecified.
	// May also be set in PodSecurityContext. If set in both SecurityContext and
	// PodSecurityContext, the value specified in SecurityContext takes precedence.
	RunAsUserName pulumi.StringPtrInput `pulumi:"runAsUserName"`
}

func (ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecSecurityContextWindowsOptionsPatchOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput {
	return i.ToThanosRulerSpecSecurityContextWindowsOptionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecSecurityContextWindowsOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput)
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput).ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrInput is an input type that accepts ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs, ThanosRulerSpecSecurityContextWindowsOptionsPatchPtr and ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrInput` via:
//
//	        ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput
	ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput
}

type thanosRulerSpecSecurityContextWindowsOptionsPatchPtrType ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs

func ThanosRulerSpecSecurityContextWindowsOptionsPatchPtr(v *ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs) ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrInput {
	return (*thanosRulerSpecSecurityContextWindowsOptionsPatchPtrType)(v)
}

func (*thanosRulerSpecSecurityContextWindowsOptionsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (i *thanosRulerSpecSecurityContextWindowsOptionsPatchPtrType) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return i.ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecSecurityContextWindowsOptionsPatchPtrType) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput)
}

// The Windows specific settings applied to all containers.
// If unspecified, the options within a container's SecurityContext will be used.
// If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
// Note that this field cannot be set when spec.os.name is linux.
type ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPatchOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecSecurityContextWindowsOptionsPatch) *ThanosRulerSpecSecurityContextWindowsOptionsPatch {
		return &v
	}).(ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptionsPatch) *string { return v.GmsaCredentialSpec }).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptionsPatch) *string { return v.GmsaCredentialSpecName }).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptionsPatch) *bool { return v.HostProcess }).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecSecurityContextWindowsOptionsPatch) *string { return v.RunAsUserName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecSecurityContextWindowsOptionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput() ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) ToThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) Elem() ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptionsPatch) ThanosRulerSpecSecurityContextWindowsOptionsPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecSecurityContextWindowsOptionsPatch
		return ret
	}).(ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput)
}

// GMSACredentialSpec is where the GMSA admission webhook
// (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the
// GMSA credential spec named by the GMSACredentialSpecName field.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) GmsaCredentialSpec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpec
	}).(pulumi.StringPtrOutput)
}

// GMSACredentialSpecName is the name of the GMSA credential spec to use.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) GmsaCredentialSpecName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.GmsaCredentialSpecName
	}).(pulumi.StringPtrOutput)
}

// HostProcess determines if a container should be run as a 'Host Process' container.
// All of a Pod's containers must have the same effective HostProcess value
// (it is not allowed to have a mix of HostProcess containers and non-HostProcess containers).
// In addition, if HostProcess is true then HostNetwork must also be set to true.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) HostProcess() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptionsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.HostProcess
	}).(pulumi.BoolPtrOutput)
}

// The UserName in Windows to run the entrypoint of the container process.
// Defaults to the user specified in image metadata if unspecified.
// May also be set in PodSecurityContext. If set in both SecurityContext and
// PodSecurityContext, the value specified in SecurityContext takes precedence.
func (o ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput) RunAsUserName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecSecurityContextWindowsOptionsPatch) *string {
		if v == nil {
			return nil
		}
		return v.RunAsUserName
	}).(pulumi.StringPtrOutput)
}

// Storage spec to specify how storage shall be used.
type ThanosRulerSpecStorage struct {
	// Deprecated: subPath usage will be removed in a future release.
	DisableMountSubPath *bool                                      `pulumi:"disableMountSubPath"`
	EmptyDir            *ThanosRulerSpecStorageEmptyDir            `pulumi:"emptyDir"`
	Ephemeral           *ThanosRulerSpecStorageEphemeral           `pulumi:"ephemeral"`
	VolumeClaimTemplate *ThanosRulerSpecStorageVolumeClaimTemplate `pulumi:"volumeClaimTemplate"`
}

// ThanosRulerSpecStorageInput is an input type that accepts ThanosRulerSpecStorageArgs and ThanosRulerSpecStorageOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageInput` via:
//
//	ThanosRulerSpecStorageArgs{...}
type ThanosRulerSpecStorageInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageOutput() ThanosRulerSpecStorageOutput
	ToThanosRulerSpecStorageOutputWithContext(context.Context) ThanosRulerSpecStorageOutput
}

// Storage spec to specify how storage shall be used.
type ThanosRulerSpecStorageArgs struct {
	// Deprecated: subPath usage will be removed in a future release.
	DisableMountSubPath pulumi.BoolPtrInput                               `pulumi:"disableMountSubPath"`
	EmptyDir            ThanosRulerSpecStorageEmptyDirPtrInput            `pulumi:"emptyDir"`
	Ephemeral           ThanosRulerSpecStorageEphemeralPtrInput           `pulumi:"ephemeral"`
	VolumeClaimTemplate ThanosRulerSpecStorageVolumeClaimTemplatePtrInput `pulumi:"volumeClaimTemplate"`
}

func (ThanosRulerSpecStorageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorage)(nil)).Elem()
}

func (i ThanosRulerSpecStorageArgs) ToThanosRulerSpecStorageOutput() ThanosRulerSpecStorageOutput {
	return i.ToThanosRulerSpecStorageOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageArgs) ToThanosRulerSpecStorageOutputWithContext(ctx context.Context) ThanosRulerSpecStorageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageOutput)
}

func (i ThanosRulerSpecStorageArgs) ToThanosRulerSpecStoragePtrOutput() ThanosRulerSpecStoragePtrOutput {
	return i.ToThanosRulerSpecStoragePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageArgs) ToThanosRulerSpecStoragePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageOutput).ToThanosRulerSpecStoragePtrOutputWithContext(ctx)
}

// ThanosRulerSpecStoragePtrInput is an input type that accepts ThanosRulerSpecStorageArgs, ThanosRulerSpecStoragePtr and ThanosRulerSpecStoragePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStoragePtrInput` via:
//
//	        ThanosRulerSpecStorageArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStoragePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStoragePtrOutput() ThanosRulerSpecStoragePtrOutput
	ToThanosRulerSpecStoragePtrOutputWithContext(context.Context) ThanosRulerSpecStoragePtrOutput
}

type thanosRulerSpecStoragePtrType ThanosRulerSpecStorageArgs

func ThanosRulerSpecStoragePtr(v *ThanosRulerSpecStorageArgs) ThanosRulerSpecStoragePtrInput {
	return (*thanosRulerSpecStoragePtrType)(v)
}

func (*thanosRulerSpecStoragePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorage)(nil)).Elem()
}

func (i *thanosRulerSpecStoragePtrType) ToThanosRulerSpecStoragePtrOutput() ThanosRulerSpecStoragePtrOutput {
	return i.ToThanosRulerSpecStoragePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStoragePtrType) ToThanosRulerSpecStoragePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStoragePtrOutput)
}

// Storage spec to specify how storage shall be used.
type ThanosRulerSpecStorageOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorage)(nil)).Elem()
}

func (o ThanosRulerSpecStorageOutput) ToThanosRulerSpecStorageOutput() ThanosRulerSpecStorageOutput {
	return o
}

func (o ThanosRulerSpecStorageOutput) ToThanosRulerSpecStorageOutputWithContext(ctx context.Context) ThanosRulerSpecStorageOutput {
	return o
}

func (o ThanosRulerSpecStorageOutput) ToThanosRulerSpecStoragePtrOutput() ThanosRulerSpecStoragePtrOutput {
	return o.ToThanosRulerSpecStoragePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageOutput) ToThanosRulerSpecStoragePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorage) *ThanosRulerSpecStorage {
		return &v
	}).(ThanosRulerSpecStoragePtrOutput)
}

// Deprecated: subPath usage will be removed in a future release.
func (o ThanosRulerSpecStorageOutput) DisableMountSubPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorage) *bool { return v.DisableMountSubPath }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecStorageOutput) EmptyDir() ThanosRulerSpecStorageEmptyDirPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorage) *ThanosRulerSpecStorageEmptyDir { return v.EmptyDir }).(ThanosRulerSpecStorageEmptyDirPtrOutput)
}

func (o ThanosRulerSpecStorageOutput) Ephemeral() ThanosRulerSpecStorageEphemeralPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorage) *ThanosRulerSpecStorageEphemeral { return v.Ephemeral }).(ThanosRulerSpecStorageEphemeralPtrOutput)
}

func (o ThanosRulerSpecStorageOutput) VolumeClaimTemplate() ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorage) *ThanosRulerSpecStorageVolumeClaimTemplate {
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput)
}

type ThanosRulerSpecStoragePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStoragePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorage)(nil)).Elem()
}

func (o ThanosRulerSpecStoragePtrOutput) ToThanosRulerSpecStoragePtrOutput() ThanosRulerSpecStoragePtrOutput {
	return o
}

func (o ThanosRulerSpecStoragePtrOutput) ToThanosRulerSpecStoragePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePtrOutput {
	return o
}

func (o ThanosRulerSpecStoragePtrOutput) Elem() ThanosRulerSpecStorageOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorage) ThanosRulerSpecStorage {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorage
		return ret
	}).(ThanosRulerSpecStorageOutput)
}

// Deprecated: subPath usage will be removed in a future release.
func (o ThanosRulerSpecStoragePtrOutput) DisableMountSubPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorage) *bool {
		if v == nil {
			return nil
		}
		return v.DisableMountSubPath
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecStoragePtrOutput) EmptyDir() ThanosRulerSpecStorageEmptyDirPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorage) *ThanosRulerSpecStorageEmptyDir {
		if v == nil {
			return nil
		}
		return v.EmptyDir
	}).(ThanosRulerSpecStorageEmptyDirPtrOutput)
}

func (o ThanosRulerSpecStoragePtrOutput) Ephemeral() ThanosRulerSpecStorageEphemeralPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorage) *ThanosRulerSpecStorageEphemeral {
		if v == nil {
			return nil
		}
		return v.Ephemeral
	}).(ThanosRulerSpecStorageEphemeralPtrOutput)
}

func (o ThanosRulerSpecStoragePtrOutput) VolumeClaimTemplate() ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorage) *ThanosRulerSpecStorageVolumeClaimTemplate {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput)
}

// EmptyDirVolumeSource to be used by the StatefulSet.
// If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
// More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type ThanosRulerSpecStorageEmptyDir struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit interface{} `pulumi:"sizeLimit"`
}

// ThanosRulerSpecStorageEmptyDirInput is an input type that accepts ThanosRulerSpecStorageEmptyDirArgs and ThanosRulerSpecStorageEmptyDirOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEmptyDirInput` via:
//
//	ThanosRulerSpecStorageEmptyDirArgs{...}
type ThanosRulerSpecStorageEmptyDirInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEmptyDirOutput() ThanosRulerSpecStorageEmptyDirOutput
	ToThanosRulerSpecStorageEmptyDirOutputWithContext(context.Context) ThanosRulerSpecStorageEmptyDirOutput
}

// EmptyDirVolumeSource to be used by the StatefulSet.
// If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
// More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type ThanosRulerSpecStorageEmptyDirArgs struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit pulumi.Input `pulumi:"sizeLimit"`
}

func (ThanosRulerSpecStorageEmptyDirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEmptyDir)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEmptyDirArgs) ToThanosRulerSpecStorageEmptyDirOutput() ThanosRulerSpecStorageEmptyDirOutput {
	return i.ToThanosRulerSpecStorageEmptyDirOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEmptyDirArgs) ToThanosRulerSpecStorageEmptyDirOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEmptyDirOutput)
}

func (i ThanosRulerSpecStorageEmptyDirArgs) ToThanosRulerSpecStorageEmptyDirPtrOutput() ThanosRulerSpecStorageEmptyDirPtrOutput {
	return i.ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEmptyDirArgs) ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEmptyDirOutput).ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEmptyDirPtrInput is an input type that accepts ThanosRulerSpecStorageEmptyDirArgs, ThanosRulerSpecStorageEmptyDirPtr and ThanosRulerSpecStorageEmptyDirPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEmptyDirPtrInput` via:
//
//	        ThanosRulerSpecStorageEmptyDirArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEmptyDirPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEmptyDirPtrOutput() ThanosRulerSpecStorageEmptyDirPtrOutput
	ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEmptyDirPtrOutput
}

type thanosRulerSpecStorageEmptyDirPtrType ThanosRulerSpecStorageEmptyDirArgs

func ThanosRulerSpecStorageEmptyDirPtr(v *ThanosRulerSpecStorageEmptyDirArgs) ThanosRulerSpecStorageEmptyDirPtrInput {
	return (*thanosRulerSpecStorageEmptyDirPtrType)(v)
}

func (*thanosRulerSpecStorageEmptyDirPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEmptyDir)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEmptyDirPtrType) ToThanosRulerSpecStorageEmptyDirPtrOutput() ThanosRulerSpecStorageEmptyDirPtrOutput {
	return i.ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEmptyDirPtrType) ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEmptyDirPtrOutput)
}

// EmptyDirVolumeSource to be used by the StatefulSet.
// If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
// More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type ThanosRulerSpecStorageEmptyDirOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEmptyDirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEmptyDir)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEmptyDirOutput) ToThanosRulerSpecStorageEmptyDirOutput() ThanosRulerSpecStorageEmptyDirOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirOutput) ToThanosRulerSpecStorageEmptyDirOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirOutput) ToThanosRulerSpecStorageEmptyDirPtrOutput() ThanosRulerSpecStorageEmptyDirPtrOutput {
	return o.ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEmptyDirOutput) ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEmptyDir) *ThanosRulerSpecStorageEmptyDir {
		return &v
	}).(ThanosRulerSpecStorageEmptyDirPtrOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEmptyDir) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEmptyDir) interface{} { return v.SizeLimit }).(pulumi.AnyOutput)
}

type ThanosRulerSpecStorageEmptyDirPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEmptyDirPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEmptyDir)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEmptyDirPtrOutput) ToThanosRulerSpecStorageEmptyDirPtrOutput() ThanosRulerSpecStorageEmptyDirPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirPtrOutput) ToThanosRulerSpecStorageEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirPtrOutput) Elem() ThanosRulerSpecStorageEmptyDirOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEmptyDir) ThanosRulerSpecStorageEmptyDir {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEmptyDir
		return ret
	}).(ThanosRulerSpecStorageEmptyDirOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirPtrOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEmptyDir) interface{} {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.AnyOutput)
}

// EmptyDirVolumeSource to be used by the StatefulSet.
// If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
// More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type ThanosRulerSpecStorageEmptyDirPatch struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit interface{} `pulumi:"sizeLimit"`
}

// ThanosRulerSpecStorageEmptyDirPatchInput is an input type that accepts ThanosRulerSpecStorageEmptyDirPatchArgs and ThanosRulerSpecStorageEmptyDirPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEmptyDirPatchInput` via:
//
//	ThanosRulerSpecStorageEmptyDirPatchArgs{...}
type ThanosRulerSpecStorageEmptyDirPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEmptyDirPatchOutput() ThanosRulerSpecStorageEmptyDirPatchOutput
	ToThanosRulerSpecStorageEmptyDirPatchOutputWithContext(context.Context) ThanosRulerSpecStorageEmptyDirPatchOutput
}

// EmptyDirVolumeSource to be used by the StatefulSet.
// If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
// More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type ThanosRulerSpecStorageEmptyDirPatchArgs struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit pulumi.Input `pulumi:"sizeLimit"`
}

func (ThanosRulerSpecStorageEmptyDirPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEmptyDirPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEmptyDirPatchArgs) ToThanosRulerSpecStorageEmptyDirPatchOutput() ThanosRulerSpecStorageEmptyDirPatchOutput {
	return i.ToThanosRulerSpecStorageEmptyDirPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEmptyDirPatchArgs) ToThanosRulerSpecStorageEmptyDirPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEmptyDirPatchOutput)
}

func (i ThanosRulerSpecStorageEmptyDirPatchArgs) ToThanosRulerSpecStorageEmptyDirPatchPtrOutput() ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEmptyDirPatchArgs) ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEmptyDirPatchOutput).ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEmptyDirPatchPtrInput is an input type that accepts ThanosRulerSpecStorageEmptyDirPatchArgs, ThanosRulerSpecStorageEmptyDirPatchPtr and ThanosRulerSpecStorageEmptyDirPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEmptyDirPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEmptyDirPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEmptyDirPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEmptyDirPatchPtrOutput() ThanosRulerSpecStorageEmptyDirPatchPtrOutput
	ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEmptyDirPatchPtrOutput
}

type thanosRulerSpecStorageEmptyDirPatchPtrType ThanosRulerSpecStorageEmptyDirPatchArgs

func ThanosRulerSpecStorageEmptyDirPatchPtr(v *ThanosRulerSpecStorageEmptyDirPatchArgs) ThanosRulerSpecStorageEmptyDirPatchPtrInput {
	return (*thanosRulerSpecStorageEmptyDirPatchPtrType)(v)
}

func (*thanosRulerSpecStorageEmptyDirPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEmptyDirPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEmptyDirPatchPtrType) ToThanosRulerSpecStorageEmptyDirPatchPtrOutput() ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEmptyDirPatchPtrType) ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEmptyDirPatchPtrOutput)
}

// EmptyDirVolumeSource to be used by the StatefulSet.
// If specified, it takes precedence over `ephemeral` and `volumeClaimTemplate`.
// More info: https://kubernetes.io/docs/concepts/storage/volumes/#emptydir
type ThanosRulerSpecStorageEmptyDirPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEmptyDirPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEmptyDirPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEmptyDirPatchOutput) ToThanosRulerSpecStorageEmptyDirPatchOutput() ThanosRulerSpecStorageEmptyDirPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirPatchOutput) ToThanosRulerSpecStorageEmptyDirPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirPatchOutput) ToThanosRulerSpecStorageEmptyDirPatchPtrOutput() ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return o.ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEmptyDirPatchOutput) ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEmptyDirPatch) *ThanosRulerSpecStorageEmptyDirPatch {
		return &v
	}).(ThanosRulerSpecStorageEmptyDirPatchPtrOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirPatchOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEmptyDirPatch) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirPatchOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEmptyDirPatch) interface{} { return v.SizeLimit }).(pulumi.AnyOutput)
}

type ThanosRulerSpecStorageEmptyDirPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEmptyDirPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEmptyDirPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEmptyDirPatchPtrOutput) ToThanosRulerSpecStorageEmptyDirPatchPtrOutput() ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirPatchPtrOutput) ToThanosRulerSpecStorageEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEmptyDirPatchPtrOutput) Elem() ThanosRulerSpecStorageEmptyDirPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEmptyDirPatch) ThanosRulerSpecStorageEmptyDirPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEmptyDirPatch
		return ret
	}).(ThanosRulerSpecStorageEmptyDirPatchOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirPatchPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEmptyDirPatch) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecStorageEmptyDirPatchPtrOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEmptyDirPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.AnyOutput)
}

// EphemeralVolumeSource to be used by the StatefulSet.
// This is a beta field in k8s 1.21 and GA in 1.15.
// For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
// More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
type ThanosRulerSpecStorageEphemeral struct {
	VolumeClaimTemplate *ThanosRulerSpecStorageEphemeralVolumeClaimTemplate `pulumi:"volumeClaimTemplate"`
}

// ThanosRulerSpecStorageEphemeralInput is an input type that accepts ThanosRulerSpecStorageEphemeralArgs and ThanosRulerSpecStorageEphemeralOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralInput` via:
//
//	ThanosRulerSpecStorageEphemeralArgs{...}
type ThanosRulerSpecStorageEphemeralInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralOutput() ThanosRulerSpecStorageEphemeralOutput
	ToThanosRulerSpecStorageEphemeralOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralOutput
}

// EphemeralVolumeSource to be used by the StatefulSet.
// This is a beta field in k8s 1.21 and GA in 1.15.
// For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
// More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
type ThanosRulerSpecStorageEphemeralArgs struct {
	VolumeClaimTemplate ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrInput `pulumi:"volumeClaimTemplate"`
}

func (ThanosRulerSpecStorageEphemeralArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeral)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralArgs) ToThanosRulerSpecStorageEphemeralOutput() ThanosRulerSpecStorageEphemeralOutput {
	return i.ToThanosRulerSpecStorageEphemeralOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralArgs) ToThanosRulerSpecStorageEphemeralOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralOutput)
}

func (i ThanosRulerSpecStorageEphemeralArgs) ToThanosRulerSpecStorageEphemeralPtrOutput() ThanosRulerSpecStorageEphemeralPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralArgs) ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralOutput).ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralArgs, ThanosRulerSpecStorageEphemeralPtr and ThanosRulerSpecStorageEphemeralPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralPtrOutput() ThanosRulerSpecStorageEphemeralPtrOutput
	ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralPtrOutput
}

type thanosRulerSpecStorageEphemeralPtrType ThanosRulerSpecStorageEphemeralArgs

func ThanosRulerSpecStorageEphemeralPtr(v *ThanosRulerSpecStorageEphemeralArgs) ThanosRulerSpecStorageEphemeralPtrInput {
	return (*thanosRulerSpecStorageEphemeralPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeral)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralPtrType) ToThanosRulerSpecStorageEphemeralPtrOutput() ThanosRulerSpecStorageEphemeralPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralPtrType) ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralPtrOutput)
}

// EphemeralVolumeSource to be used by the StatefulSet.
// This is a beta field in k8s 1.21 and GA in 1.15.
// For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
// More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
type ThanosRulerSpecStorageEphemeralOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeral)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralOutput) ToThanosRulerSpecStorageEphemeralOutput() ThanosRulerSpecStorageEphemeralOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralOutput) ToThanosRulerSpecStorageEphemeralOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralOutput) ToThanosRulerSpecStorageEphemeralPtrOutput() ThanosRulerSpecStorageEphemeralPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralOutput) ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeral) *ThanosRulerSpecStorageEphemeral {
		return &v
	}).(ThanosRulerSpecStorageEphemeralPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralOutput) VolumeClaimTemplate() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeral) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplate {
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput)
}

type ThanosRulerSpecStorageEphemeralPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeral)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralPtrOutput) ToThanosRulerSpecStorageEphemeralPtrOutput() ThanosRulerSpecStorageEphemeralPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralPtrOutput) ToThanosRulerSpecStorageEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralPtrOutput) Elem() ThanosRulerSpecStorageEphemeralOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeral) ThanosRulerSpecStorageEphemeral {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeral
		return ret
	}).(ThanosRulerSpecStorageEphemeralOutput)
}

func (o ThanosRulerSpecStorageEphemeralPtrOutput) VolumeClaimTemplate() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeral) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplate {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput)
}

// EphemeralVolumeSource to be used by the StatefulSet.
// This is a beta field in k8s 1.21 and GA in 1.15.
// For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
// More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
type ThanosRulerSpecStorageEphemeralPatch struct {
	VolumeClaimTemplate *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch `pulumi:"volumeClaimTemplate"`
}

// ThanosRulerSpecStorageEphemeralPatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralPatchArgs and ThanosRulerSpecStorageEphemeralPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralPatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralPatchArgs{...}
type ThanosRulerSpecStorageEphemeralPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralPatchOutput() ThanosRulerSpecStorageEphemeralPatchOutput
	ToThanosRulerSpecStorageEphemeralPatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralPatchOutput
}

// EphemeralVolumeSource to be used by the StatefulSet.
// This is a beta field in k8s 1.21 and GA in 1.15.
// For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
// More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
type ThanosRulerSpecStorageEphemeralPatchArgs struct {
	VolumeClaimTemplate ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ThanosRulerSpecStorageEphemeralPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralPatchArgs) ToThanosRulerSpecStorageEphemeralPatchOutput() ThanosRulerSpecStorageEphemeralPatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralPatchArgs) ToThanosRulerSpecStorageEphemeralPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralPatchOutput)
}

func (i ThanosRulerSpecStorageEphemeralPatchArgs) ToThanosRulerSpecStorageEphemeralPatchPtrOutput() ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralPatchArgs) ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralPatchOutput).ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralPatchPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralPatchArgs, ThanosRulerSpecStorageEphemeralPatchPtr and ThanosRulerSpecStorageEphemeralPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralPatchPtrOutput() ThanosRulerSpecStorageEphemeralPatchPtrOutput
	ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralPatchPtrOutput
}

type thanosRulerSpecStorageEphemeralPatchPtrType ThanosRulerSpecStorageEphemeralPatchArgs

func ThanosRulerSpecStorageEphemeralPatchPtr(v *ThanosRulerSpecStorageEphemeralPatchArgs) ThanosRulerSpecStorageEphemeralPatchPtrInput {
	return (*thanosRulerSpecStorageEphemeralPatchPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralPatchPtrType) ToThanosRulerSpecStorageEphemeralPatchPtrOutput() ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralPatchPtrType) ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralPatchPtrOutput)
}

// EphemeralVolumeSource to be used by the StatefulSet.
// This is a beta field in k8s 1.21 and GA in 1.15.
// For lower versions, starting with k8s 1.19, it requires enabling the GenericEphemeralVolume feature gate.
// More info: https://kubernetes.io/docs/concepts/storage/ephemeral-volumes/#generic-ephemeral-volumes
type ThanosRulerSpecStorageEphemeralPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralPatchOutput) ToThanosRulerSpecStorageEphemeralPatchOutput() ThanosRulerSpecStorageEphemeralPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralPatchOutput) ToThanosRulerSpecStorageEphemeralPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralPatchOutput) ToThanosRulerSpecStorageEphemeralPatchPtrOutput() ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralPatchOutput) ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralPatch) *ThanosRulerSpecStorageEphemeralPatch {
		return &v
	}).(ThanosRulerSpecStorageEphemeralPatchPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralPatchOutput) VolumeClaimTemplate() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch {
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput)
}

type ThanosRulerSpecStorageEphemeralPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralPatchPtrOutput) ToThanosRulerSpecStorageEphemeralPatchPtrOutput() ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralPatchPtrOutput) ToThanosRulerSpecStorageEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralPatchPtrOutput) Elem() ThanosRulerSpecStorageEphemeralPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralPatch) ThanosRulerSpecStorageEphemeralPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralPatch
		return ret
	}).(ThanosRulerSpecStorageEphemeralPatchOutput)
}

func (o ThanosRulerSpecStorageEphemeralPatchPtrOutput) VolumeClaimTemplate() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplate struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata map[string]string                                       `pulumi:"metadata"`
	Spec     *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec `pulumi:"spec"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata pulumi.StringMapInput                                          `pulumi:"metadata"`
	Spec     ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrInput `pulumi:"spec"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplate) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplate {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplate) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput) Spec() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplate) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec {
		return v.Spec
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplate) ThanosRulerSpecStorageEphemeralVolumeClaimTemplate {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplate
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput) Spec() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplate) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata map[string]string                                            `pulumi:"metadata"`
	Spec     *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch `pulumi:"spec"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata pulumi.StringMapInput                                               `pulumi:"metadata"`
	Spec     ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrInput `pulumi:"spec"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput) Spec() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch {
		return v.Spec
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch) ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput) Spec() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                             `pulumi:"accessModes"`
	DataSource    *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource    `pulumi:"dataSource"`
	DataSourceRef *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef `pulumi:"dataSourceRef"`
	Resources     *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources     `pulumi:"resources"`
	Selector      *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                     `pulumi:"accessModes"`
	DataSource    ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrInput    `pulumi:"dataSource"`
	DataSourceRef ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	Resources     ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrInput     `pulumi:"resources"`
	Selector      ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) DataSource() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource {
		return v.DataSource
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) DataSourceRef() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef {
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) Resources() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources {
		return v.Resources
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) Selector() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector {
		return v.Selector
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string {
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) DataSource() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) DataSourceRef() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) Resources() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) Selector() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                                  `pulumi:"accessModes"`
	DataSource    *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch    `pulumi:"dataSource"`
	DataSourceRef *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch `pulumi:"dataSourceRef"`
	Resources     *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch     `pulumi:"resources"`
	Selector      *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                          `pulumi:"accessModes"`
	DataSource    ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput    `pulumi:"dataSource"`
	DataSourceRef ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput `pulumi:"dataSourceRef"`
	Resources     ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput     `pulumi:"resources"`
	Selector      ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) DataSource() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		return v.DataSource
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) DataSourceRef() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) Resources() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch {
		return v.Resources
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) Selector() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch {
		return v.Selector
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string {
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) DataSource() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) DataSourceRef() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) Resources() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) Selector() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput) MatchExpressions() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector) []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) MatchExpressions() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector) []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray{ ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...} }
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		return vs[0].([]ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray{ ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{...} }
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		return vs[0].([]ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchInput` via:
//
//	ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{...}
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput)
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput).ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput is an input type that accepts ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs, ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtr and ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput
	ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput
}

type thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs

func ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtr(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput {
	return (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType)(v)
}

func (*thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch) *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch {
		return &v
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) MatchExpressions() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch) []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) ToThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) Elem() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch) ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch
		return ret
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) MatchExpressions() ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch) []ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Storage spec to specify how storage shall be used.
type ThanosRulerSpecStoragePatch struct {
	// Deprecated: subPath usage will be removed in a future release.
	DisableMountSubPath *bool                                           `pulumi:"disableMountSubPath"`
	EmptyDir            *ThanosRulerSpecStorageEmptyDirPatch            `pulumi:"emptyDir"`
	Ephemeral           *ThanosRulerSpecStorageEphemeralPatch           `pulumi:"ephemeral"`
	VolumeClaimTemplate *ThanosRulerSpecStorageVolumeClaimTemplatePatch `pulumi:"volumeClaimTemplate"`
}

// ThanosRulerSpecStoragePatchInput is an input type that accepts ThanosRulerSpecStoragePatchArgs and ThanosRulerSpecStoragePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStoragePatchInput` via:
//
//	ThanosRulerSpecStoragePatchArgs{...}
type ThanosRulerSpecStoragePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStoragePatchOutput() ThanosRulerSpecStoragePatchOutput
	ToThanosRulerSpecStoragePatchOutputWithContext(context.Context) ThanosRulerSpecStoragePatchOutput
}

// Storage spec to specify how storage shall be used.
type ThanosRulerSpecStoragePatchArgs struct {
	// Deprecated: subPath usage will be removed in a future release.
	DisableMountSubPath pulumi.BoolPtrInput                                    `pulumi:"disableMountSubPath"`
	EmptyDir            ThanosRulerSpecStorageEmptyDirPatchPtrInput            `pulumi:"emptyDir"`
	Ephemeral           ThanosRulerSpecStorageEphemeralPatchPtrInput           `pulumi:"ephemeral"`
	VolumeClaimTemplate ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ThanosRulerSpecStoragePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStoragePatch)(nil)).Elem()
}

func (i ThanosRulerSpecStoragePatchArgs) ToThanosRulerSpecStoragePatchOutput() ThanosRulerSpecStoragePatchOutput {
	return i.ToThanosRulerSpecStoragePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStoragePatchArgs) ToThanosRulerSpecStoragePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStoragePatchOutput)
}

func (i ThanosRulerSpecStoragePatchArgs) ToThanosRulerSpecStoragePatchPtrOutput() ThanosRulerSpecStoragePatchPtrOutput {
	return i.ToThanosRulerSpecStoragePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStoragePatchArgs) ToThanosRulerSpecStoragePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStoragePatchOutput).ToThanosRulerSpecStoragePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStoragePatchPtrInput is an input type that accepts ThanosRulerSpecStoragePatchArgs, ThanosRulerSpecStoragePatchPtr and ThanosRulerSpecStoragePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStoragePatchPtrInput` via:
//
//	        ThanosRulerSpecStoragePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStoragePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStoragePatchPtrOutput() ThanosRulerSpecStoragePatchPtrOutput
	ToThanosRulerSpecStoragePatchPtrOutputWithContext(context.Context) ThanosRulerSpecStoragePatchPtrOutput
}

type thanosRulerSpecStoragePatchPtrType ThanosRulerSpecStoragePatchArgs

func ThanosRulerSpecStoragePatchPtr(v *ThanosRulerSpecStoragePatchArgs) ThanosRulerSpecStoragePatchPtrInput {
	return (*thanosRulerSpecStoragePatchPtrType)(v)
}

func (*thanosRulerSpecStoragePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStoragePatch)(nil)).Elem()
}

func (i *thanosRulerSpecStoragePatchPtrType) ToThanosRulerSpecStoragePatchPtrOutput() ThanosRulerSpecStoragePatchPtrOutput {
	return i.ToThanosRulerSpecStoragePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStoragePatchPtrType) ToThanosRulerSpecStoragePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStoragePatchPtrOutput)
}

// Storage spec to specify how storage shall be used.
type ThanosRulerSpecStoragePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStoragePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStoragePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStoragePatchOutput) ToThanosRulerSpecStoragePatchOutput() ThanosRulerSpecStoragePatchOutput {
	return o
}

func (o ThanosRulerSpecStoragePatchOutput) ToThanosRulerSpecStoragePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePatchOutput {
	return o
}

func (o ThanosRulerSpecStoragePatchOutput) ToThanosRulerSpecStoragePatchPtrOutput() ThanosRulerSpecStoragePatchPtrOutput {
	return o.ToThanosRulerSpecStoragePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStoragePatchOutput) ToThanosRulerSpecStoragePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStoragePatch) *ThanosRulerSpecStoragePatch {
		return &v
	}).(ThanosRulerSpecStoragePatchPtrOutput)
}

// Deprecated: subPath usage will be removed in a future release.
func (o ThanosRulerSpecStoragePatchOutput) DisableMountSubPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStoragePatch) *bool { return v.DisableMountSubPath }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecStoragePatchOutput) EmptyDir() ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStoragePatch) *ThanosRulerSpecStorageEmptyDirPatch { return v.EmptyDir }).(ThanosRulerSpecStorageEmptyDirPatchPtrOutput)
}

func (o ThanosRulerSpecStoragePatchOutput) Ephemeral() ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStoragePatch) *ThanosRulerSpecStorageEphemeralPatch { return v.Ephemeral }).(ThanosRulerSpecStorageEphemeralPatchPtrOutput)
}

func (o ThanosRulerSpecStoragePatchOutput) VolumeClaimTemplate() ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStoragePatch) *ThanosRulerSpecStorageVolumeClaimTemplatePatch {
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput)
}

type ThanosRulerSpecStoragePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStoragePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStoragePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStoragePatchPtrOutput) ToThanosRulerSpecStoragePatchPtrOutput() ThanosRulerSpecStoragePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStoragePatchPtrOutput) ToThanosRulerSpecStoragePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStoragePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStoragePatchPtrOutput) Elem() ThanosRulerSpecStoragePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStoragePatch) ThanosRulerSpecStoragePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStoragePatch
		return ret
	}).(ThanosRulerSpecStoragePatchOutput)
}

// Deprecated: subPath usage will be removed in a future release.
func (o ThanosRulerSpecStoragePatchPtrOutput) DisableMountSubPath() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStoragePatch) *bool {
		if v == nil {
			return nil
		}
		return v.DisableMountSubPath
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecStoragePatchPtrOutput) EmptyDir() ThanosRulerSpecStorageEmptyDirPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStoragePatch) *ThanosRulerSpecStorageEmptyDirPatch {
		if v == nil {
			return nil
		}
		return v.EmptyDir
	}).(ThanosRulerSpecStorageEmptyDirPatchPtrOutput)
}

func (o ThanosRulerSpecStoragePatchPtrOutput) Ephemeral() ThanosRulerSpecStorageEphemeralPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStoragePatch) *ThanosRulerSpecStorageEphemeralPatch {
		if v == nil {
			return nil
		}
		return v.Ephemeral
	}).(ThanosRulerSpecStorageEphemeralPatchPtrOutput)
}

func (o ThanosRulerSpecStoragePatchPtrOutput) VolumeClaimTemplate() ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStoragePatch) *ThanosRulerSpecStorageVolumeClaimTemplatePatch {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput)
}

// Defines the PVC spec to be used by the Prometheus StatefulSets.
// The easiest way to use a volume that cannot be automatically provisioned
// is to use a label selector alongside manually created PersistentVolumes.
type ThanosRulerSpecStorageVolumeClaimTemplate struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                                            `pulumi:"kind"`
	Metadata *ThanosRulerSpecStorageVolumeClaimTemplateMetadata `pulumi:"metadata"`
	Spec     *ThanosRulerSpecStorageVolumeClaimTemplateSpec     `pulumi:"spec"`
	Status   *ThanosRulerSpecStorageVolumeClaimTemplateStatus   `pulumi:"status"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateArgs and ThanosRulerSpecStorageVolumeClaimTemplateOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateOutput() ThanosRulerSpecStorageVolumeClaimTemplateOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateOutput
}

// Defines the PVC spec to be used by the Prometheus StatefulSets.
// The easiest way to use a volume that cannot be automatically provisioned
// is to use a label selector alongside manually created PersistentVolumes.
type ThanosRulerSpecStorageVolumeClaimTemplateArgs struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput                                     `pulumi:"kind"`
	Metadata ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrInput `pulumi:"metadata"`
	Spec     ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrInput     `pulumi:"spec"`
	Status   ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrInput   `pulumi:"status"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateArgs) ToThanosRulerSpecStorageVolumeClaimTemplateOutput() ThanosRulerSpecStorageVolumeClaimTemplateOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateArgs) ToThanosRulerSpecStorageVolumeClaimTemplateOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateArgs) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateArgs) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateOutput).ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplatePtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateArgs, ThanosRulerSpecStorageVolumeClaimTemplatePtr and ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplatePtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplatePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplatePtrType ThanosRulerSpecStorageVolumeClaimTemplateArgs

func ThanosRulerSpecStorageVolumeClaimTemplatePtr(v *ThanosRulerSpecStorageVolumeClaimTemplateArgs) ThanosRulerSpecStorageVolumeClaimTemplatePtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplatePtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplatePtrType) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplatePtrType) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput)
}

// Defines the PVC spec to be used by the Prometheus StatefulSets.
// The easiest way to use a volume that cannot be automatically provisioned
// is to use a label selector alongside manually created PersistentVolumes.
type ThanosRulerSpecStorageVolumeClaimTemplateOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) ToThanosRulerSpecStorageVolumeClaimTemplateOutput() ThanosRulerSpecStorageVolumeClaimTemplateOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) ToThanosRulerSpecStorageVolumeClaimTemplateOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplate) *ThanosRulerSpecStorageVolumeClaimTemplate {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object.
// Servers should convert recognized schemas to the latest internal value, and
// may reject unrecognized values.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplate) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents.
// Servers may infer this from the endpoint the client submits requests to.
// Cannot be updated.
// In CamelCase.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplate) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) Metadata() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplate) *ThanosRulerSpecStorageVolumeClaimTemplateMetadata {
		return v.Metadata
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) Spec() ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplate) *ThanosRulerSpecStorageVolumeClaimTemplateSpec {
		return v.Spec
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateOutput) Status() ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplate) *ThanosRulerSpecStorageVolumeClaimTemplateStatus {
		return v.Status
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplate)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplate) ThanosRulerSpecStorageVolumeClaimTemplate {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplate
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateOutput)
}

// APIVersion defines the versioned schema of this representation of an object.
// Servers should convert recognized schemas to the latest internal value, and
// may reject unrecognized values.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplate) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents.
// Servers may infer this from the endpoint the client submits requests to.
// Cannot be updated.
// In CamelCase.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplate) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) Metadata() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplate) *ThanosRulerSpecStorageVolumeClaimTemplateMetadata {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) Spec() ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplate) *ThanosRulerSpecStorageVolumeClaimTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput) Status() ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplate) *ThanosRulerSpecStorageVolumeClaimTemplateStatus {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
type ThanosRulerSpecStorageVolumeClaimTemplateMetadata struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateMetadataInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs and ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateMetadataInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput
}

// EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadata)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput).ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs, ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtr and ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateMetadataPtrType ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs

func ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateMetadataPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateMetadataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateMetadata)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateMetadataPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateMetadataPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput)
}

// EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadata)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateMetadata) *ThanosRulerSpecStorageVolumeClaimTemplateMetadata {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateMetadata) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateMetadata) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateMetadata) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateMetadata)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadata) ThanosRulerSpecStorageVolumeClaimTemplateMetadata {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateMetadata
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadata) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadata) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations map[string]string `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels map[string]string `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput
}

// EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs struct {
	// Annotations is an unstructured key value map stored with a resource that may be
	// set by external tools to store and retrieve arbitrary metadata. They are not
	// queryable and should be preserved when modifying objects.
	// More info: http://kubernetes.io/docs/user-guide/annotations
	Annotations pulumi.StringMapInput `pulumi:"annotations"`
	// Map of string keys and values that can be used to organize and categorize
	// (scope and select) objects. May match selectors of replication controllers
	// and services.
	// More info: http://kubernetes.io/docs/user-guide/labels
	Labels pulumi.StringMapInput `pulumi:"labels"`
	// Name must be unique within a namespace. Is required when creating resources, although
	// some resources may allow a client to request the generation of an appropriate name
	// automatically. Name is primarily intended for creation idempotence and configuration
	// definition.
	// Cannot be updated.
	// More info: http://kubernetes.io/docs/user-guide/identifiers#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput)
}

// EmbeddedMetadata contains metadata relevant to an EmbeddedResource.
type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) map[string]string { return v.Annotations }).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) map[string]string { return v.Labels }).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput)
}

// Annotations is an unstructured key value map stored with a resource that may be
// set by external tools to store and retrieve arbitrary metadata. They are not
// queryable and should be preserved when modifying objects.
// More info: http://kubernetes.io/docs/user-guide/annotations
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput) Annotations() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Annotations
	}).(pulumi.StringMapOutput)
}

// Map of string keys and values that can be used to organize and categorize
// (scope and select) objects. May match selectors of replication controllers
// and services.
// More info: http://kubernetes.io/docs/user-guide/labels
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput) Labels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Labels
	}).(pulumi.StringMapOutput)
}

// Name must be unique within a namespace. Is required when creating resources, although
// some resources may allow a client to request the generation of an appropriate name
// automatically. Name is primarily intended for creation idempotence and configuration
// definition.
// Cannot be updated.
// More info: http://kubernetes.io/docs/user-guide/identifiers#names
func (o ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Defines the PVC spec to be used by the Prometheus StatefulSets.
// The easiest way to use a volume that cannot be automatically provisioned
// is to use a label selector alongside manually created PersistentVolumes.
type ThanosRulerSpecStorageVolumeClaimTemplatePatch struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     *string                                                 `pulumi:"kind"`
	Metadata *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch `pulumi:"metadata"`
	Spec     *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch     `pulumi:"spec"`
	Status   *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch   `pulumi:"status"`
}

// ThanosRulerSpecStorageVolumeClaimTemplatePatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs and ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplatePatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplatePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplatePatchOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplatePatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput
}

// Defines the PVC spec to be used by the Prometheus StatefulSets.
// The easiest way to use a volume that cannot be automatically provisioned
// is to use a label selector alongside manually created PersistentVolumes.
type ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object.
	// Servers should convert recognized schemas to the latest internal value, and
	// may reject unrecognized values.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents.
	// Servers may infer this from the endpoint the client submits requests to.
	// Cannot be updated.
	// In CamelCase.
	// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind     pulumi.StringPtrInput                                          `pulumi:"kind"`
	Metadata ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrInput `pulumi:"metadata"`
	Spec     ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrInput     `pulumi:"spec"`
	Status   ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrInput   `pulumi:"status"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplatePatchOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplatePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs, ThanosRulerSpecStorageVolumeClaimTemplatePatchPtr and ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplatePatchPtrType ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplatePatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs) ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplatePatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplatePatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplatePatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput)
}

// Defines the PVC spec to be used by the Prometheus StatefulSets.
// The easiest way to use a volume that cannot be automatically provisioned
// is to use a label selector alongside manually created PersistentVolumes.
type ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePatchOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplatePatch) *ThanosRulerSpecStorageVolumeClaimTemplatePatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput)
}

// APIVersion defines the versioned schema of this representation of an object.
// Servers should convert recognized schemas to the latest internal value, and
// may reject unrecognized values.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplatePatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents.
// Servers may infer this from the endpoint the client submits requests to.
// Cannot be updated.
// In CamelCase.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplatePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) Metadata() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplatePatch) *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch {
		return v.Metadata
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) Spec() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplatePatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch {
		return v.Spec
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput) Status() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplatePatch) *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch {
		return v.Status
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplatePatch) ThanosRulerSpecStorageVolumeClaimTemplatePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplatePatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput)
}

// APIVersion defines the versioned schema of this representation of an object.
// Servers should convert recognized schemas to the latest internal value, and
// may reject unrecognized values.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplatePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents.
// Servers may infer this from the endpoint the client submits requests to.
// Cannot be updated.
// In CamelCase.
// More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplatePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) Metadata() ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplatePatch) *ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatch {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) Spec() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplatePatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput) Status() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplatePatch) *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch {
		if v == nil {
			return nil
		}
		return v.Status
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput)
}

// Defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecStorageVolumeClaimTemplateSpec struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                    `pulumi:"accessModes"`
	DataSource    *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource    `pulumi:"dataSource"`
	DataSourceRef *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef `pulumi:"dataSourceRef"`
	Resources     *ThanosRulerSpecStorageVolumeClaimTemplateSpecResources     `pulumi:"resources"`
	Selector      *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput
}

// Defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                            `pulumi:"accessModes"`
	DataSource    ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput    `pulumi:"dataSource"`
	DataSourceRef ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	Resources     ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput     `pulumi:"resources"`
	Selector      ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// Defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpec {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) DataSource() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource {
		return v.DataSource
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) DataSourceRef() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) Resources() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecResources {
		return v.Resources
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) Selector() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector {
		return v.Selector
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string { return v.VolumeAttributesClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) ThanosRulerSpecStorageVolumeClaimTemplateSpec {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpec
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) DataSource() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) DataSourceRef() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) Resources() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) Selector() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string { return v.Namespace }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// Defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                         `pulumi:"accessModes"`
	DataSource    *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch    `pulumi:"dataSource"`
	DataSourceRef *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch `pulumi:"dataSourceRef"`
	Resources     *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch     `pulumi:"resources"`
	Selector      *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput
}

// Defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                 `pulumi:"accessModes"`
	DataSource    ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrInput    `pulumi:"dataSource"`
	DataSourceRef ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrInput `pulumi:"dataSourceRef"`
	Resources     ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrInput     `pulumi:"resources"`
	Selector      ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput)
}

// Defines the desired characteristics of a volume requested by a pod author.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) DataSource() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch {
		return v.DataSource
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) DataSourceRef() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch {
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) Resources() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch {
		return v.Resources
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) Selector() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch {
		return v.Selector
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string { return v.VolumeAttributesClassName }).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) DataSource() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatch {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) DataSourceRef() ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) Resources() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) Selector() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecResources) *ThanosRulerSpecStorageVolumeClaimTemplateSpecResources {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} { return v.Limits }).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResources) ThanosRulerSpecStorageVolumeClaimTemplateSpecResources {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecResources
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch) ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector) *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput) MatchExpressions() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector) []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) MatchExpressions() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector) []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray{ ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...} }
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions {
		return vs[0].([]ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray{ ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{...} }
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		return vs[0].([]ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch) *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput) MatchExpressions() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch) []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch) ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput) MatchExpressions() ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch) []ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// Deprecated: this field is never set.
type ThanosRulerSpecStorageVolumeClaimTemplateStatus struct {
	// accessModes contains the actual access modes the volume backing the PVC has.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// allocatedResourceStatuses stores status of resource being resized for the given PVC.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// ClaimResourceStatus can be in any of following states:
	// 	- ControllerResizeInProgress:
	// 		State set when resize controller starts resizing the volume in control-plane.
	// 	- ControllerResizeFailed:
	// 		State set when resize has failed in resize controller with a terminal error.
	// 	- NodeResizePending:
	// 		State set when resize controller has finished resizing the volume but further resizing of
	// 		volume is needed on the node.
	// 	- NodeResizeInProgress:
	// 		State set when kubelet starts resizing the volume.
	// 	- NodeResizeFailed:
	// 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
	// 		NodeResizeFailed.
	// For example: if expanding a PVC for more capacity - this field can be one of the following states:
	// 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
	// When this field is not set, it means that no resize operation is in progress for the given PVC.
	//
	// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResourceStatuses map[string]string `pulumi:"allocatedResourceStatuses"`
	// allocatedResources tracks the resources allocated to a PVC including its capacity.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// Capacity reported here may be larger than the actual capacity when a volume expansion operation
	// is requested.
	// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
	// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
	// If a volume expansion capacity request is lowered, allocatedResources is only
	// lowered if there are no expansion operations in progress and if the actual volume capacity
	// is equal or lower than the requested capacity.
	//
	// A controller that receives PVC update with previously unknown resourceName
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources map[string]interface{} `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity map[string]interface{} `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
	// resized then the Condition will be set to 'Resizing'.
	Conditions []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions `pulumi:"conditions"`
	// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
	// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
	// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
	CurrentVolumeAttributesClassName *string                                                            `pulumi:"currentVolumeAttributesClassName"`
	ModifyVolumeStatus               *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus `pulumi:"modifyVolumeStatus"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `pulumi:"phase"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs and ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateStatusInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput
}

// Deprecated: this field is never set.
type ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs struct {
	// accessModes contains the actual access modes the volume backing the PVC has.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// allocatedResourceStatuses stores status of resource being resized for the given PVC.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// ClaimResourceStatus can be in any of following states:
	// 	- ControllerResizeInProgress:
	// 		State set when resize controller starts resizing the volume in control-plane.
	// 	- ControllerResizeFailed:
	// 		State set when resize has failed in resize controller with a terminal error.
	// 	- NodeResizePending:
	// 		State set when resize controller has finished resizing the volume but further resizing of
	// 		volume is needed on the node.
	// 	- NodeResizeInProgress:
	// 		State set when kubelet starts resizing the volume.
	// 	- NodeResizeFailed:
	// 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
	// 		NodeResizeFailed.
	// For example: if expanding a PVC for more capacity - this field can be one of the following states:
	// 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
	// When this field is not set, it means that no resize operation is in progress for the given PVC.
	//
	// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResourceStatuses pulumi.StringMapInput `pulumi:"allocatedResourceStatuses"`
	// allocatedResources tracks the resources allocated to a PVC including its capacity.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// Capacity reported here may be larger than the actual capacity when a volume expansion operation
	// is requested.
	// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
	// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
	// If a volume expansion capacity request is lowered, allocatedResources is only
	// lowered if there are no expansion operations in progress and if the actual volume capacity
	// is equal or lower than the requested capacity.
	//
	// A controller that receives PVC update with previously unknown resourceName
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources pulumi.MapInput `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity pulumi.MapInput `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
	// resized then the Condition will be set to 'Resizing'.
	Conditions ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput `pulumi:"conditions"`
	// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
	// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
	// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
	CurrentVolumeAttributesClassName pulumi.StringPtrInput                                                     `pulumi:"currentVolumeAttributesClassName"`
	ModifyVolumeStatus               ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrInput `pulumi:"modifyVolumeStatus"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput).ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs, ThanosRulerSpecStorageVolumeClaimTemplateStatusPtr and ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateStatusPtrType ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs

func ThanosRulerSpecStorageVolumeClaimTemplateStatusPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs) ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateStatusPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// Deprecated: this field is never set.
type ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateStatus) *ThanosRulerSpecStorageVolumeClaimTemplateStatus {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// allocatedResourceStatuses stores status of resource being resized for the given PVC.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// ClaimResourceStatus can be in any of following states:
//   - ControllerResizeInProgress:
//     State set when resize controller starts resizing the volume in control-plane.
//   - ControllerResizeFailed:
//     State set when resize has failed in resize controller with a terminal error.
//   - NodeResizePending:
//     State set when resize controller has finished resizing the volume but further resizing of
//     volume is needed on the node.
//   - NodeResizeInProgress:
//     State set when kubelet starts resizing the volume.
//   - NodeResizeFailed:
//     State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
//     NodeResizeFailed.
//
// For example: if expanding a PVC for more capacity - this field can be one of the following states:
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
//
// When this field is not set, it means that no resize operation is in progress for the given PVC.
//
// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) AllocatedResourceStatuses() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) map[string]string {
		return v.AllocatedResourceStatuses
	}).(pulumi.StringMapOutput)
}

// allocatedResources tracks the resources allocated to a PVC including its capacity.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// Capacity reported here may be larger than the actual capacity when a volume expansion operation
// is requested.
// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
// If a volume expansion capacity request is lowered, allocatedResources is only
// lowered if there are no expansion operations in progress and if the actual volume capacity
// is equal or lower than the requested capacity.
//
// A controller that receives PVC update with previously unknown resourceName
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) AllocatedResources() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) map[string]interface{} {
		return v.AllocatedResources
	}).(pulumi.MapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) Capacity() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) map[string]interface{} { return v.Capacity }).(pulumi.MapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
// resized then the Condition will be set to 'Resizing'.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) Conditions() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions {
		return v.Conditions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) CurrentVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) *string {
		return v.CurrentVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) ModifyVolumeStatus() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus {
		return v.ModifyVolumeStatus
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatus) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatus)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) ThanosRulerSpecStorageVolumeClaimTemplateStatus {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateStatus
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// allocatedResourceStatuses stores status of resource being resized for the given PVC.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// ClaimResourceStatus can be in any of following states:
//   - ControllerResizeInProgress:
//     State set when resize controller starts resizing the volume in control-plane.
//   - ControllerResizeFailed:
//     State set when resize has failed in resize controller with a terminal error.
//   - NodeResizePending:
//     State set when resize controller has finished resizing the volume but further resizing of
//     volume is needed on the node.
//   - NodeResizeInProgress:
//     State set when kubelet starts resizing the volume.
//   - NodeResizeFailed:
//     State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
//     NodeResizeFailed.
//
// For example: if expanding a PVC for more capacity - this field can be one of the following states:
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
//
// When this field is not set, it means that no resize operation is in progress for the given PVC.
//
// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) AllocatedResourceStatuses() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) map[string]string {
		if v == nil {
			return nil
		}
		return v.AllocatedResourceStatuses
	}).(pulumi.StringMapOutput)
}

// allocatedResources tracks the resources allocated to a PVC including its capacity.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// Capacity reported here may be larger than the actual capacity when a volume expansion operation
// is requested.
// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
// If a volume expansion capacity request is lowered, allocatedResources is only
// lowered if there are no expansion operations in progress and if the actual volume capacity
// is equal or lower than the requested capacity.
//
// A controller that receives PVC update with previously unknown resourceName
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) AllocatedResources() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AllocatedResources
	}).(pulumi.MapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) Capacity() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.MapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
// resized then the Condition will be set to 'Resizing'.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) Conditions() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) CurrentVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.CurrentVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) ModifyVolumeStatus() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus {
		if v == nil {
			return nil
		}
		return v.ModifyVolumeStatus
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatus) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// PersistentVolumeClaimCondition contains details about state of pvc
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason
	// for condition's last transition. If it reports "Resizing" that means the underlying
	// persistent volume is being resized.
	Reason *string `pulumi:"reason"`
	// Status is the status of the condition.
	// Can be True, False, Unknown.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
	Status *string `pulumi:"status"`
	// Type is the type of the condition.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs and ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput
}

// PersistentVolumeClaimCondition contains details about state of pvc
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason
	// for condition's last transition. If it reports "Resizing" that means the underlying
	// persistent volume is being resized.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status is the status of the condition.
	// Can be True, False, Unknown.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type is the type of the condition.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput)
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArray and ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArray{ ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs{...} }
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArray []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsInput

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArray) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArray) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput)
}

// PersistentVolumeClaimCondition contains details about state of pvc
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return o
}

// lastProbeTime is the time we probed the condition.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// lastTransitionTime is the time the condition transitioned from one status to another.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// message is the human-readable message indicating details about last transition.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// reason is a unique, this should be a short, machine understandable string that gives the reason
// for condition's last transition. If it reports "Resizing" that means the underlying
// persistent volume is being resized.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status is the status of the condition.
// Can be True, False, Unknown.
// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type is the type of the condition.
// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions {
		return vs[0].([]ThanosRulerSpecStorageVolumeClaimTemplateStatusConditions)[vs[1].(int)]
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput)
}

// PersistentVolumeClaimCondition contains details about state of pvc
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime *string `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message *string `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason
	// for condition's last transition. If it reports "Resizing" that means the underlying
	// persistent volume is being resized.
	Reason *string `pulumi:"reason"`
	// Status is the status of the condition.
	// Can be True, False, Unknown.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
	Status *string `pulumi:"status"`
	// Type is the type of the condition.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput
}

// PersistentVolumeClaimCondition contains details about state of pvc
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs struct {
	// lastProbeTime is the time we probed the condition.
	LastProbeTime pulumi.StringPtrInput `pulumi:"lastProbeTime"`
	// lastTransitionTime is the time the condition transitioned from one status to another.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// message is the human-readable message indicating details about last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// reason is a unique, this should be a short, machine understandable string that gives the reason
	// for condition's last transition. If it reports "Resizing" that means the underlying
	// persistent volume is being resized.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status is the status of the condition.
	// Can be True, False, Unknown.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type is the type of the condition.
	// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput)
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArray and ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArray{ ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs{...} }
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArray []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchInput

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArray) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArray) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput)
}

// PersistentVolumeClaimCondition contains details about state of pvc
type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput {
	return o
}

// lastProbeTime is the time we probed the condition.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) LastProbeTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch) *string { return v.LastProbeTime }).(pulumi.StringPtrOutput)
}

// lastTransitionTime is the time the condition transitioned from one status to another.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch) *string {
		return v.LastTransitionTime
	}).(pulumi.StringPtrOutput)
}

// message is the human-readable message indicating details about last transition.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// reason is a unique, this should be a short, machine understandable string that gives the reason
// for condition's last transition. If it reports "Resizing" that means the underlying
// persistent volume is being resized.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status is the status of the condition.
// Can be True, False, Unknown.
// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=state%20of%20pvc-,conditions.status,-(string)%2C%20required
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type is the type of the condition.
// More info: https://kubernetes.io/docs/reference/kubernetes-api/config-and-storage-resources/persistent-volume-claim-v1/#:~:text=set%20to%20%27ResizeStarted%27.-,PersistentVolumeClaimCondition,-contains%20details%20about
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch {
		return vs[0].([]ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput)
}

// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
// When this is unset, there is no ModifyVolume operation being attempted.
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus struct {
	// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
	//  - Pending
	//    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
	//    the specified VolumeAttributesClass not existing.
	//  - InProgress
	//    InProgress indicates that the volume is being modified.
	//  - Infeasible
	//      Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
	//       resolve the error, a valid VolumeAttributesClass needs to be specified.
	//    Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
	Status *string `pulumi:"status"`
	// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
	TargetVolumeAttributesClassName *string `pulumi:"targetVolumeAttributesClassName"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs and ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput
}

// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
// When this is unset, there is no ModifyVolume operation being attempted.
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs struct {
	// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
	//  - Pending
	//    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
	//    the specified VolumeAttributesClass not existing.
	//  - InProgress
	//    InProgress indicates that the volume is being modified.
	//  - Infeasible
	//      Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
	//       resolve the error, a valid VolumeAttributesClass needs to be specified.
	//    Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
	TargetVolumeAttributesClassName pulumi.StringPtrInput `pulumi:"targetVolumeAttributesClassName"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput).ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs, ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtr and ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrType ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs

func ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput)
}

// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
// When this is unset, there is no ModifyVolume operation being attempted.
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus) *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput)
}

// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
//   - Pending
//     Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
//     the specified VolumeAttributesClass not existing.
//   - InProgress
//     InProgress indicates that the volume is being modified.
//   - Infeasible
//     Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
//     resolve the error, a valid VolumeAttributesClass needs to be specified.
//     Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput) TargetVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus) *string {
		return v.TargetVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput)
}

// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
//   - Pending
//     Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
//     the specified VolumeAttributesClass not existing.
//   - InProgress
//     InProgress indicates that the volume is being modified.
//   - Infeasible
//     Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
//     resolve the error, a valid VolumeAttributesClass needs to be specified.
//     Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput) TargetVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatus) *string {
		if v == nil {
			return nil
		}
		return v.TargetVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
// When this is unset, there is no ModifyVolume operation being attempted.
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch struct {
	// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
	//  - Pending
	//    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
	//    the specified VolumeAttributesClass not existing.
	//  - InProgress
	//    InProgress indicates that the volume is being modified.
	//  - Infeasible
	//      Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
	//       resolve the error, a valid VolumeAttributesClass needs to be specified.
	//    Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
	Status *string `pulumi:"status"`
	// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
	TargetVolumeAttributesClassName *string `pulumi:"targetVolumeAttributesClassName"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput
}

// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
// When this is unset, there is no ModifyVolume operation being attempted.
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs struct {
	// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
	//  - Pending
	//    Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
	//    the specified VolumeAttributesClass not existing.
	//  - InProgress
	//    InProgress indicates that the volume is being modified.
	//  - Infeasible
	//      Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
	//       resolve the error, a valid VolumeAttributesClass needs to be specified.
	//    Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
	TargetVolumeAttributesClassName pulumi.StringPtrInput `pulumi:"targetVolumeAttributesClassName"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput)
}

// ModifyVolumeStatus represents the status object of ControllerModifyVolume operation.
// When this is unset, there is no ModifyVolume operation being attempted.
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch) *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput)
}

// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
//   - Pending
//     Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
//     the specified VolumeAttributesClass not existing.
//   - InProgress
//     InProgress indicates that the volume is being modified.
//   - Infeasible
//     Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
//     resolve the error, a valid VolumeAttributesClass needs to be specified.
//     Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch) *string {
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput) TargetVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch) *string {
		return v.TargetVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch) ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput)
}

// status is the status of the ControllerModifyVolume operation. It can be in any of following states:
//   - Pending
//     Pending indicates that the PersistentVolumeClaim cannot be modified due to unmet requirements, such as
//     the specified VolumeAttributesClass not existing.
//   - InProgress
//     InProgress indicates that the volume is being modified.
//   - Infeasible
//     Infeasible indicates that the request has been rejected as invalid by the CSI driver. To
//     resolve the error, a valid VolumeAttributesClass needs to be specified.
//     Note: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Status
	}).(pulumi.StringPtrOutput)
}

// targetVolumeAttributesClassName is the name of the VolumeAttributesClass the PVC currently being reconciled
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput) TargetVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.TargetVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// Deprecated: this field is never set.
type ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch struct {
	// accessModes contains the actual access modes the volume backing the PVC has.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes []string `pulumi:"accessModes"`
	// allocatedResourceStatuses stores status of resource being resized for the given PVC.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// ClaimResourceStatus can be in any of following states:
	// 	- ControllerResizeInProgress:
	// 		State set when resize controller starts resizing the volume in control-plane.
	// 	- ControllerResizeFailed:
	// 		State set when resize has failed in resize controller with a terminal error.
	// 	- NodeResizePending:
	// 		State set when resize controller has finished resizing the volume but further resizing of
	// 		volume is needed on the node.
	// 	- NodeResizeInProgress:
	// 		State set when kubelet starts resizing the volume.
	// 	- NodeResizeFailed:
	// 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
	// 		NodeResizeFailed.
	// For example: if expanding a PVC for more capacity - this field can be one of the following states:
	// 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
	// When this field is not set, it means that no resize operation is in progress for the given PVC.
	//
	// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResourceStatuses map[string]string `pulumi:"allocatedResourceStatuses"`
	// allocatedResources tracks the resources allocated to a PVC including its capacity.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// Capacity reported here may be larger than the actual capacity when a volume expansion operation
	// is requested.
	// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
	// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
	// If a volume expansion capacity request is lowered, allocatedResources is only
	// lowered if there are no expansion operations in progress and if the actual volume capacity
	// is equal or lower than the requested capacity.
	//
	// A controller that receives PVC update with previously unknown resourceName
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources map[string]interface{} `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity map[string]interface{} `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
	// resized then the Condition will be set to 'Resizing'.
	Conditions []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch `pulumi:"conditions"`
	// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
	// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
	// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
	CurrentVolumeAttributesClassName *string                                                                 `pulumi:"currentVolumeAttributesClassName"`
	ModifyVolumeStatus               *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch `pulumi:"modifyVolumeStatus"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase *string `pulumi:"phase"`
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs and ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchInput` via:
//
//	ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs{...}
type ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput
}

// Deprecated: this field is never set.
type ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs struct {
	// accessModes contains the actual access modes the volume backing the PVC has.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes pulumi.StringArrayInput `pulumi:"accessModes"`
	// allocatedResourceStatuses stores status of resource being resized for the given PVC.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// ClaimResourceStatus can be in any of following states:
	// 	- ControllerResizeInProgress:
	// 		State set when resize controller starts resizing the volume in control-plane.
	// 	- ControllerResizeFailed:
	// 		State set when resize has failed in resize controller with a terminal error.
	// 	- NodeResizePending:
	// 		State set when resize controller has finished resizing the volume but further resizing of
	// 		volume is needed on the node.
	// 	- NodeResizeInProgress:
	// 		State set when kubelet starts resizing the volume.
	// 	- NodeResizeFailed:
	// 		State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
	// 		NodeResizeFailed.
	// For example: if expanding a PVC for more capacity - this field can be one of the following states:
	// 	- pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
	//      - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
	// When this field is not set, it means that no resize operation is in progress for the given PVC.
	//
	// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResourceStatuses pulumi.StringMapInput `pulumi:"allocatedResourceStatuses"`
	// allocatedResources tracks the resources allocated to a PVC including its capacity.
	// Key names follow standard Kubernetes label syntax. Valid values are either:
	// 	* Un-prefixed keys:
	// 		- storage - the capacity of the volume.
	// 	* Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
	// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
	// reserved and hence may not be used.
	//
	// Capacity reported here may be larger than the actual capacity when a volume expansion operation
	// is requested.
	// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
	// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
	// If a volume expansion capacity request is lowered, allocatedResources is only
	// lowered if there are no expansion operations in progress and if the actual volume capacity
	// is equal or lower than the requested capacity.
	//
	// A controller that receives PVC update with previously unknown resourceName
	// should ignore the update for the purpose it was designed. For example - a controller that
	// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
	// resources associated with PVC.
	//
	// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
	AllocatedResources pulumi.MapInput `pulumi:"allocatedResources"`
	// capacity represents the actual resources of the underlying volume.
	Capacity pulumi.MapInput `pulumi:"capacity"`
	// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
	// resized then the Condition will be set to 'Resizing'.
	Conditions ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
	// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
	// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
	CurrentVolumeAttributesClassName pulumi.StringPtrInput                                                          `pulumi:"currentVolumeAttributesClassName"`
	ModifyVolumeStatus               ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrInput `pulumi:"modifyVolumeStatus"`
	// phase represents the current phase of PersistentVolumeClaim.
	Phase pulumi.StringPtrInput `pulumi:"phase"`
}

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch)(nil)).Elem()
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput)
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput).ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrInput is an input type that accepts ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs, ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtr and ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrInput` via:
//
//	        ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput
	ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput
}

type thanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrType ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs

func ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtr(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrInput {
	return (*thanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrType)(v)
}

func (*thanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch)(nil)).Elem()
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return i.ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrType) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput)
}

// Deprecated: this field is never set.
type ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return o.ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch {
		return &v
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

// allocatedResourceStatuses stores status of resource being resized for the given PVC.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// ClaimResourceStatus can be in any of following states:
//   - ControllerResizeInProgress:
//     State set when resize controller starts resizing the volume in control-plane.
//   - ControllerResizeFailed:
//     State set when resize has failed in resize controller with a terminal error.
//   - NodeResizePending:
//     State set when resize controller has finished resizing the volume but further resizing of
//     volume is needed on the node.
//   - NodeResizeInProgress:
//     State set when kubelet starts resizing the volume.
//   - NodeResizeFailed:
//     State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
//     NodeResizeFailed.
//
// For example: if expanding a PVC for more capacity - this field can be one of the following states:
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
//
// When this field is not set, it means that no resize operation is in progress for the given PVC.
//
// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) AllocatedResourceStatuses() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) map[string]string {
		return v.AllocatedResourceStatuses
	}).(pulumi.StringMapOutput)
}

// allocatedResources tracks the resources allocated to a PVC including its capacity.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// Capacity reported here may be larger than the actual capacity when a volume expansion operation
// is requested.
// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
// If a volume expansion capacity request is lowered, allocatedResources is only
// lowered if there are no expansion operations in progress and if the actual volume capacity
// is equal or lower than the requested capacity.
//
// A controller that receives PVC update with previously unknown resourceName
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) AllocatedResources() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) map[string]interface{} {
		return v.AllocatedResources
	}).(pulumi.MapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) Capacity() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) map[string]interface{} { return v.Capacity }).(pulumi.MapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
// resized then the Condition will be set to 'Resizing'.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) Conditions() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch {
		return v.Conditions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput)
}

// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) CurrentVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) *string {
		return v.CurrentVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) ModifyVolumeStatus() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch {
		return v.ModifyVolumeStatus
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) *string { return v.Phase }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch)(nil)).Elem()
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) ToThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) Elem() ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch
		return ret
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput)
}

// accessModes contains the actual access modes the volume backing the PVC has.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

// allocatedResourceStatuses stores status of resource being resized for the given PVC.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// ClaimResourceStatus can be in any of following states:
//   - ControllerResizeInProgress:
//     State set when resize controller starts resizing the volume in control-plane.
//   - ControllerResizeFailed:
//     State set when resize has failed in resize controller with a terminal error.
//   - NodeResizePending:
//     State set when resize controller has finished resizing the volume but further resizing of
//     volume is needed on the node.
//   - NodeResizeInProgress:
//     State set when kubelet starts resizing the volume.
//   - NodeResizeFailed:
//     State set when resizing has failed in kubelet with a terminal error. Transient errors don't set
//     NodeResizeFailed.
//
// For example: if expanding a PVC for more capacity - this field can be one of the following states:
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "ControllerResizeFailed"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizePending"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeInProgress"
//   - pvc.status.allocatedResourceStatus['storage'] = "NodeResizeFailed"
//
// When this field is not set, it means that no resize operation is in progress for the given PVC.
//
// A controller that receives PVC update with previously unknown resourceName or ClaimResourceStatus
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) AllocatedResourceStatuses() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.AllocatedResourceStatuses
	}).(pulumi.StringMapOutput)
}

// allocatedResources tracks the resources allocated to a PVC including its capacity.
// Key names follow standard Kubernetes label syntax. Valid values are either:
//   - Un-prefixed keys:
//   - storage - the capacity of the volume.
//   - Custom resources must use implementation-defined prefixed names such as "example.com/my-custom-resource"
//
// Apart from above values - keys that are unprefixed or have kubernetes.io prefix are considered
// reserved and hence may not be used.
//
// Capacity reported here may be larger than the actual capacity when a volume expansion operation
// is requested.
// For storage quota, the larger value from allocatedResources and PVC.spec.resources is used.
// If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation.
// If a volume expansion capacity request is lowered, allocatedResources is only
// lowered if there are no expansion operations in progress and if the actual volume capacity
// is equal or lower than the requested capacity.
//
// A controller that receives PVC update with previously unknown resourceName
// should ignore the update for the purpose it was designed. For example - a controller that
// only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid
// resources associated with PVC.
//
// This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) AllocatedResources() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.AllocatedResources
	}).(pulumi.MapOutput)
}

// capacity represents the actual resources of the underlying volume.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) Capacity() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Capacity
	}).(pulumi.MapOutput)
}

// conditions is the current Condition of persistent volume claim. If underlying persistent volume is being
// resized then the Condition will be set to 'Resizing'.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) Conditions() ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) []ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput)
}

// currentVolumeAttributesClassName is the current name of the VolumeAttributesClass the PVC is using.
// When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim
// This is a beta field and requires enabling VolumeAttributesClass feature (off by default).
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) CurrentVolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.CurrentVolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) ModifyVolumeStatus() ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) *ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatch {
		if v == nil {
			return nil
		}
		return v.ModifyVolumeStatus
	}).(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput)
}

// phase represents the current phase of PersistentVolumeClaim.
func (o ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput) Phase() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecStorageVolumeClaimTemplateStatusPatch) *string {
		if v == nil {
			return nil
		}
		return v.Phase
	}).(pulumi.StringPtrOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches
// the triple <key,value,effect> using the matching operator <operator>.
type ThanosRulerSpecTolerations struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects.
	// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys.
	// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value.
	// Valid operators are Exists and Equal. Defaults to Equal.
	// Exists is equivalent to wildcard for value, so that a pod can
	// tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be
	// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
	// it is not set, which means tolerate the taint forever (do not evict). Zero and
	// negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to.
	// If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecTolerationsInput is an input type that accepts ThanosRulerSpecTolerationsArgs and ThanosRulerSpecTolerationsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTolerationsInput` via:
//
//	ThanosRulerSpecTolerationsArgs{...}
type ThanosRulerSpecTolerationsInput interface {
	pulumi.Input

	ToThanosRulerSpecTolerationsOutput() ThanosRulerSpecTolerationsOutput
	ToThanosRulerSpecTolerationsOutputWithContext(context.Context) ThanosRulerSpecTolerationsOutput
}

// The pod this Toleration is attached to tolerates any taint that matches
// the triple <key,value,effect> using the matching operator <operator>.
type ThanosRulerSpecTolerationsArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects.
	// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys.
	// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value.
	// Valid operators are Exists and Equal. Defaults to Equal.
	// Exists is equivalent to wildcard for value, so that a pod can
	// tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be
	// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
	// it is not set, which means tolerate the taint forever (do not evict). Zero and
	// negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to.
	// If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecTolerationsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTolerations)(nil)).Elem()
}

func (i ThanosRulerSpecTolerationsArgs) ToThanosRulerSpecTolerationsOutput() ThanosRulerSpecTolerationsOutput {
	return i.ToThanosRulerSpecTolerationsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTolerationsArgs) ToThanosRulerSpecTolerationsOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTolerationsOutput)
}

// ThanosRulerSpecTolerationsArrayInput is an input type that accepts ThanosRulerSpecTolerationsArray and ThanosRulerSpecTolerationsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTolerationsArrayInput` via:
//
//	ThanosRulerSpecTolerationsArray{ ThanosRulerSpecTolerationsArgs{...} }
type ThanosRulerSpecTolerationsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecTolerationsArrayOutput() ThanosRulerSpecTolerationsArrayOutput
	ToThanosRulerSpecTolerationsArrayOutputWithContext(context.Context) ThanosRulerSpecTolerationsArrayOutput
}

type ThanosRulerSpecTolerationsArray []ThanosRulerSpecTolerationsInput

func (ThanosRulerSpecTolerationsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTolerations)(nil)).Elem()
}

func (i ThanosRulerSpecTolerationsArray) ToThanosRulerSpecTolerationsArrayOutput() ThanosRulerSpecTolerationsArrayOutput {
	return i.ToThanosRulerSpecTolerationsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTolerationsArray) ToThanosRulerSpecTolerationsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTolerationsArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches
// the triple <key,value,effect> using the matching operator <operator>.
type ThanosRulerSpecTolerationsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTolerationsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTolerations)(nil)).Elem()
}

func (o ThanosRulerSpecTolerationsOutput) ToThanosRulerSpecTolerationsOutput() ThanosRulerSpecTolerationsOutput {
	return o
}

func (o ThanosRulerSpecTolerationsOutput) ToThanosRulerSpecTolerationsOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects.
// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o ThanosRulerSpecTolerationsOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerations) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys.
// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o ThanosRulerSpecTolerationsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerations) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value.
// Valid operators are Exists and Equal. Defaults to Equal.
// Exists is equivalent to wildcard for value, so that a pod can
// tolerate all taints of a particular category.
func (o ThanosRulerSpecTolerationsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerations) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be
// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
// it is not set, which means tolerate the taint forever (do not evict). Zero and
// negative values will be treated as 0 (evict immediately) by the system.
func (o ThanosRulerSpecTolerationsOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerations) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to.
// If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o ThanosRulerSpecTolerationsOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerations) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecTolerationsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTolerationsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTolerations)(nil)).Elem()
}

func (o ThanosRulerSpecTolerationsArrayOutput) ToThanosRulerSpecTolerationsArrayOutput() ThanosRulerSpecTolerationsArrayOutput {
	return o
}

func (o ThanosRulerSpecTolerationsArrayOutput) ToThanosRulerSpecTolerationsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsArrayOutput {
	return o
}

func (o ThanosRulerSpecTolerationsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecTolerationsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecTolerations {
		return vs[0].([]ThanosRulerSpecTolerations)[vs[1].(int)]
	}).(ThanosRulerSpecTolerationsOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches
// the triple <key,value,effect> using the matching operator <operator>.
type ThanosRulerSpecTolerationsPatch struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects.
	// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect *string `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys.
	// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key *string `pulumi:"key"`
	// Operator represents a key's relationship to the value.
	// Valid operators are Exists and Equal. Defaults to Equal.
	// Exists is equivalent to wildcard for value, so that a pod can
	// tolerate all taints of a particular category.
	Operator *string `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be
	// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
	// it is not set, which means tolerate the taint forever (do not evict). Zero and
	// negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds *int `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to.
	// If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value *string `pulumi:"value"`
}

// ThanosRulerSpecTolerationsPatchInput is an input type that accepts ThanosRulerSpecTolerationsPatchArgs and ThanosRulerSpecTolerationsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTolerationsPatchInput` via:
//
//	ThanosRulerSpecTolerationsPatchArgs{...}
type ThanosRulerSpecTolerationsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecTolerationsPatchOutput() ThanosRulerSpecTolerationsPatchOutput
	ToThanosRulerSpecTolerationsPatchOutputWithContext(context.Context) ThanosRulerSpecTolerationsPatchOutput
}

// The pod this Toleration is attached to tolerates any taint that matches
// the triple <key,value,effect> using the matching operator <operator>.
type ThanosRulerSpecTolerationsPatchArgs struct {
	// Effect indicates the taint effect to match. Empty means match all taint effects.
	// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
	Effect pulumi.StringPtrInput `pulumi:"effect"`
	// Key is the taint key that the toleration applies to. Empty means match all taint keys.
	// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Operator represents a key's relationship to the value.
	// Valid operators are Exists and Equal. Defaults to Equal.
	// Exists is equivalent to wildcard for value, so that a pod can
	// tolerate all taints of a particular category.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// TolerationSeconds represents the period of time the toleration (which must be
	// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
	// it is not set, which means tolerate the taint forever (do not evict). Zero and
	// negative values will be treated as 0 (evict immediately) by the system.
	TolerationSeconds pulumi.IntPtrInput `pulumi:"tolerationSeconds"`
	// Value is the taint value the toleration matches to.
	// If the operator is Exists, the value should be empty, otherwise just a regular string.
	Value pulumi.StringPtrInput `pulumi:"value"`
}

func (ThanosRulerSpecTolerationsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTolerationsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTolerationsPatchArgs) ToThanosRulerSpecTolerationsPatchOutput() ThanosRulerSpecTolerationsPatchOutput {
	return i.ToThanosRulerSpecTolerationsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTolerationsPatchArgs) ToThanosRulerSpecTolerationsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTolerationsPatchOutput)
}

// ThanosRulerSpecTolerationsPatchArrayInput is an input type that accepts ThanosRulerSpecTolerationsPatchArray and ThanosRulerSpecTolerationsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTolerationsPatchArrayInput` via:
//
//	ThanosRulerSpecTolerationsPatchArray{ ThanosRulerSpecTolerationsPatchArgs{...} }
type ThanosRulerSpecTolerationsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecTolerationsPatchArrayOutput() ThanosRulerSpecTolerationsPatchArrayOutput
	ToThanosRulerSpecTolerationsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecTolerationsPatchArrayOutput
}

type ThanosRulerSpecTolerationsPatchArray []ThanosRulerSpecTolerationsPatchInput

func (ThanosRulerSpecTolerationsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTolerationsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTolerationsPatchArray) ToThanosRulerSpecTolerationsPatchArrayOutput() ThanosRulerSpecTolerationsPatchArrayOutput {
	return i.ToThanosRulerSpecTolerationsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTolerationsPatchArray) ToThanosRulerSpecTolerationsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTolerationsPatchArrayOutput)
}

// The pod this Toleration is attached to tolerates any taint that matches
// the triple <key,value,effect> using the matching operator <operator>.
type ThanosRulerSpecTolerationsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTolerationsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTolerationsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTolerationsPatchOutput) ToThanosRulerSpecTolerationsPatchOutput() ThanosRulerSpecTolerationsPatchOutput {
	return o
}

func (o ThanosRulerSpecTolerationsPatchOutput) ToThanosRulerSpecTolerationsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsPatchOutput {
	return o
}

// Effect indicates the taint effect to match. Empty means match all taint effects.
// When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
func (o ThanosRulerSpecTolerationsPatchOutput) Effect() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerationsPatch) *string { return v.Effect }).(pulumi.StringPtrOutput)
}

// Key is the taint key that the toleration applies to. Empty means match all taint keys.
// If the key is empty, operator must be Exists; this combination means to match all values and all keys.
func (o ThanosRulerSpecTolerationsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerationsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Operator represents a key's relationship to the value.
// Valid operators are Exists and Equal. Defaults to Equal.
// Exists is equivalent to wildcard for value, so that a pod can
// tolerate all taints of a particular category.
func (o ThanosRulerSpecTolerationsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerationsPatch) *string { return v.Operator }).(pulumi.StringPtrOutput)
}

// TolerationSeconds represents the period of time the toleration (which must be
// of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default,
// it is not set, which means tolerate the taint forever (do not evict). Zero and
// negative values will be treated as 0 (evict immediately) by the system.
func (o ThanosRulerSpecTolerationsPatchOutput) TolerationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerationsPatch) *int { return v.TolerationSeconds }).(pulumi.IntPtrOutput)
}

// Value is the taint value the toleration matches to.
// If the operator is Exists, the value should be empty, otherwise just a regular string.
func (o ThanosRulerSpecTolerationsPatchOutput) Value() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTolerationsPatch) *string { return v.Value }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecTolerationsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTolerationsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTolerationsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTolerationsPatchArrayOutput) ToThanosRulerSpecTolerationsPatchArrayOutput() ThanosRulerSpecTolerationsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecTolerationsPatchArrayOutput) ToThanosRulerSpecTolerationsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTolerationsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecTolerationsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecTolerationsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecTolerationsPatch {
		return vs[0].([]ThanosRulerSpecTolerationsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecTolerationsPatchOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type ThanosRulerSpecTopologySpreadConstraints struct {
	LabelSelector *ThanosRulerSpecTopologySpreadConstraintsLabelSelector `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which
	// spreading will be calculated. The keys are used to lookup values from the
	// incoming pod labels, those key-value labels are ANDed with labelSelector
	// to select the group of existing pods over which spreading will be calculated
	// for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
	// MatchLabelKeys cannot be set when LabelSelector isn't set.
	// Keys that don't exist in the incoming pod labels will
	// be ignored. A null or empty list means only match against labelSelector.
	//
	// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
	MatchLabelKeys []string `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed.
	// When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
	// between the number of matching pods in the target topology and the global minimum.
	// The global minimum is the minimum number of matching pods in an eligible domain
	// or zero if the number of eligible domains is less than MinDomains.
	// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	// labelSelector spread as 2/2/1:
	// In this case, the global minimum is 1.
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |   P   |
	// - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
	//   scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
	//   violate MaxSkew(1).
	// - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
	//   When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
	//   to topologies that satisfy it.
	//   It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew *int `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains.
	// When the number of eligible domains with matching topology keys is less than minDomains,
	// Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
	// And when the number of eligible domains with matching topology keys equals or greater than minDomains,
	// this value has no effect on scheduling.
	// As a result, when the number of eligible domains is less than minDomains,
	// scheduler won't schedule more than maxSkew Pods to those domains.
	// If value is nil, the constraint behaves as if MinDomains is equal to 1.
	// Valid values are integers greater than 0.
	// When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
	// labelSelector spread as 2/2/2:
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |  P P  |
	// The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
	// In this situation, new pod with the same labelSelector cannot be scheduled,
	// because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
	// it will violate MaxSkew.
	MinDomains *int `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
	// when calculating pod topology spread skew. Options are:
	// - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
	// - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating
	// pod topology spread skew. Options are:
	// - Honor: nodes without taints, along with tainted nodes for which the incoming pod
	//   has a toleration, are included.
	// - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key
	// and identical values are considered to be in the same topology.
	// We consider each <key, value> as a "bucket", and try to put balanced number
	// of pods into each bucket.
	// We define a domain as a particular instance of a topology.
	// Also, we define an eligible domain as a domain whose nodes meet the requirements of
	// nodeAffinityPolicy and nodeTaintsPolicy.
	// e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
	// And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
	// It's a required field.
	TopologyKey *string `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
	// the spread constraint.
	// - DoNotSchedule (default) tells the scheduler not to schedule it.
	// - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	//   A constraint is considered "Unsatisfiable" for an incoming pod
	//   if and only if every possible node assignment for that pod would violate
	//   "MaxSkew" on some topology.
	//   For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	//   labelSelector spread as 3/1/1:
	//   | zone1 | zone2 | zone3 |
	//   | P P P |   P   |   P   |
	//   If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
	//   to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
	//   MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
	//   won't make it *more* imbalanced.
	//   It's a required field.
	WhenUnsatisfiable *string `pulumi:"whenUnsatisfiable"`
}

// ThanosRulerSpecTopologySpreadConstraintsInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsArgs and ThanosRulerSpecTopologySpreadConstraintsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsArgs{...}
type ThanosRulerSpecTopologySpreadConstraintsInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsOutput() ThanosRulerSpecTopologySpreadConstraintsOutput
	ToThanosRulerSpecTopologySpreadConstraintsOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsOutput
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type ThanosRulerSpecTopologySpreadConstraintsArgs struct {
	LabelSelector ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrInput `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which
	// spreading will be calculated. The keys are used to lookup values from the
	// incoming pod labels, those key-value labels are ANDed with labelSelector
	// to select the group of existing pods over which spreading will be calculated
	// for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
	// MatchLabelKeys cannot be set when LabelSelector isn't set.
	// Keys that don't exist in the incoming pod labels will
	// be ignored. A null or empty list means only match against labelSelector.
	//
	// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
	MatchLabelKeys pulumi.StringArrayInput `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed.
	// When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
	// between the number of matching pods in the target topology and the global minimum.
	// The global minimum is the minimum number of matching pods in an eligible domain
	// or zero if the number of eligible domains is less than MinDomains.
	// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	// labelSelector spread as 2/2/1:
	// In this case, the global minimum is 1.
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |   P   |
	// - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
	//   scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
	//   violate MaxSkew(1).
	// - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
	//   When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
	//   to topologies that satisfy it.
	//   It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew pulumi.IntPtrInput `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains.
	// When the number of eligible domains with matching topology keys is less than minDomains,
	// Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
	// And when the number of eligible domains with matching topology keys equals or greater than minDomains,
	// this value has no effect on scheduling.
	// As a result, when the number of eligible domains is less than minDomains,
	// scheduler won't schedule more than maxSkew Pods to those domains.
	// If value is nil, the constraint behaves as if MinDomains is equal to 1.
	// Valid values are integers greater than 0.
	// When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
	// labelSelector spread as 2/2/2:
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |  P P  |
	// The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
	// In this situation, new pod with the same labelSelector cannot be scheduled,
	// because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
	// it will violate MaxSkew.
	MinDomains pulumi.IntPtrInput `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
	// when calculating pod topology spread skew. Options are:
	// - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
	// - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy pulumi.StringPtrInput `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating
	// pod topology spread skew. Options are:
	// - Honor: nodes without taints, along with tainted nodes for which the incoming pod
	//   has a toleration, are included.
	// - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy pulumi.StringPtrInput `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key
	// and identical values are considered to be in the same topology.
	// We consider each <key, value> as a "bucket", and try to put balanced number
	// of pods into each bucket.
	// We define a domain as a particular instance of a topology.
	// Also, we define an eligible domain as a domain whose nodes meet the requirements of
	// nodeAffinityPolicy and nodeTaintsPolicy.
	// e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
	// And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
	// It's a required field.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
	// the spread constraint.
	// - DoNotSchedule (default) tells the scheduler not to schedule it.
	// - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	//   A constraint is considered "Unsatisfiable" for an incoming pod
	//   if and only if every possible node assignment for that pod would violate
	//   "MaxSkew" on some topology.
	//   For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	//   labelSelector spread as 3/1/1:
	//   | zone1 | zone2 | zone3 |
	//   | P P P |   P   |   P   |
	//   If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
	//   to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
	//   MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
	//   won't make it *more* imbalanced.
	//   It's a required field.
	WhenUnsatisfiable pulumi.StringPtrInput `pulumi:"whenUnsatisfiable"`
}

func (ThanosRulerSpecTopologySpreadConstraintsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraints)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsArgs) ToThanosRulerSpecTopologySpreadConstraintsOutput() ThanosRulerSpecTopologySpreadConstraintsOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsArgs) ToThanosRulerSpecTopologySpreadConstraintsOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsOutput)
}

// ThanosRulerSpecTopologySpreadConstraintsArrayInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsArray and ThanosRulerSpecTopologySpreadConstraintsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsArrayInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsArray{ ThanosRulerSpecTopologySpreadConstraintsArgs{...} }
type ThanosRulerSpecTopologySpreadConstraintsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsArrayOutput() ThanosRulerSpecTopologySpreadConstraintsArrayOutput
	ToThanosRulerSpecTopologySpreadConstraintsArrayOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsArrayOutput
}

type ThanosRulerSpecTopologySpreadConstraintsArray []ThanosRulerSpecTopologySpreadConstraintsInput

func (ThanosRulerSpecTopologySpreadConstraintsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraints)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsArray) ToThanosRulerSpecTopologySpreadConstraintsArrayOutput() ThanosRulerSpecTopologySpreadConstraintsArrayOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsArray) ToThanosRulerSpecTopologySpreadConstraintsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsArrayOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type ThanosRulerSpecTopologySpreadConstraintsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraints)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsOutput) ToThanosRulerSpecTopologySpreadConstraintsOutput() ThanosRulerSpecTopologySpreadConstraintsOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsOutput) ToThanosRulerSpecTopologySpreadConstraintsOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsOutput) LabelSelector() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) *ThanosRulerSpecTopologySpreadConstraintsLabelSelector {
		return v.LabelSelector
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput)
}

// MatchLabelKeys is a set of pod label keys to select the pods over which
// spreading will be calculated. The keys are used to lookup values from the
// incoming pod labels, those key-value labels are ANDed with labelSelector
// to select the group of existing pods over which spreading will be calculated
// for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
// MatchLabelKeys cannot be set when LabelSelector isn't set.
// Keys that don't exist in the incoming pod labels will
// be ignored. A null or empty list means only match against labelSelector.
//
// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
func (o ThanosRulerSpecTopologySpreadConstraintsOutput) MatchLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) []string { return v.MatchLabelKeys }).(pulumi.StringArrayOutput)
}

// MaxSkew describes the degree to which pods may be unevenly distributed.
// When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
// between the number of matching pods in the target topology and the global minimum.
// The global minimum is the minimum number of matching pods in an eligible domain
// or zero if the number of eligible domains is less than MinDomains.
// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
// labelSelector spread as 2/2/1:
// In this case, the global minimum is 1.
// | zone1 | zone2 | zone3 |
// |  P P  |  P P  |   P   |
//   - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
//     scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
//     violate MaxSkew(1).
//   - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
//     When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
//     to topologies that satisfy it.
//     It's a required field. Default value is 1 and 0 is not allowed.
func (o ThanosRulerSpecTopologySpreadConstraintsOutput) MaxSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) *int { return v.MaxSkew }).(pulumi.IntPtrOutput)
}

// MinDomains indicates a minimum number of eligible domains.
// When the number of eligible domains with matching topology keys is less than minDomains,
// Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
// And when the number of eligible domains with matching topology keys equals or greater than minDomains,
// this value has no effect on scheduling.
// As a result, when the number of eligible domains is less than minDomains,
// scheduler won't schedule more than maxSkew Pods to those domains.
// If value is nil, the constraint behaves as if MinDomains is equal to 1.
// Valid values are integers greater than 0.
// When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
// labelSelector spread as 2/2/2:
// | zone1 | zone2 | zone3 |
// |  P P  |  P P  |  P P  |
// The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
// In this situation, new pod with the same labelSelector cannot be scheduled,
// because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
// it will violate MaxSkew.
func (o ThanosRulerSpecTopologySpreadConstraintsOutput) MinDomains() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) *int { return v.MinDomains }).(pulumi.IntPtrOutput)
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
// when calculating pod topology spread skew. Options are:
// - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
// - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
// If this value is nil, the behavior is equivalent to the Honor policy.
// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o ThanosRulerSpecTopologySpreadConstraintsOutput) NodeAffinityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) *string { return v.NodeAffinityPolicy }).(pulumi.StringPtrOutput)
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating
// pod topology spread skew. Options are:
//   - Honor: nodes without taints, along with tainted nodes for which the incoming pod
//     has a toleration, are included.
//   - Ignore: node taints are ignored. All nodes are included.
//
// If this value is nil, the behavior is equivalent to the Ignore policy.
// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o ThanosRulerSpecTopologySpreadConstraintsOutput) NodeTaintsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) *string { return v.NodeTaintsPolicy }).(pulumi.StringPtrOutput)
}

// TopologyKey is the key of node labels. Nodes that have a label with this key
// and identical values are considered to be in the same topology.
// We consider each <key, value> as a "bucket", and try to put balanced number
// of pods into each bucket.
// We define a domain as a particular instance of a topology.
// Also, we define an eligible domain as a domain whose nodes meet the requirements of
// nodeAffinityPolicy and nodeTaintsPolicy.
// e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
// And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
// It's a required field.
func (o ThanosRulerSpecTopologySpreadConstraintsOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) *string { return v.TopologyKey }).(pulumi.StringPtrOutput)
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
// the spread constraint.
//   - DoNotSchedule (default) tells the scheduler not to schedule it.
//   - ScheduleAnyway tells the scheduler to schedule the pod in any location,
//     but giving higher precedence to topologies that would help reduce the
//     skew.
//     A constraint is considered "Unsatisfiable" for an incoming pod
//     if and only if every possible node assignment for that pod would violate
//     "MaxSkew" on some topology.
//     For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
//     labelSelector spread as 3/1/1:
//     | zone1 | zone2 | zone3 |
//     | P P P |   P   |   P   |
//     If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
//     to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
//     MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
//     won't make it *more* imbalanced.
//     It's a required field.
func (o ThanosRulerSpecTopologySpreadConstraintsOutput) WhenUnsatisfiable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraints) *string { return v.WhenUnsatisfiable }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecTopologySpreadConstraintsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraints)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsArrayOutput() ThanosRulerSpecTopologySpreadConstraintsArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecTopologySpreadConstraintsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecTopologySpreadConstraints {
		return vs[0].([]ThanosRulerSpecTopologySpreadConstraints)[vs[1].(int)]
	}).(ThanosRulerSpecTopologySpreadConstraintsOutput)
}

// LabelSelector is used to find matching pods.
// Pods that match this label selector are counted to determine the number of pods
// in their corresponding topology domain.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs{...}
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput
}

// LabelSelector is used to find matching pods.
// Pods that match this label selector are counted to determine the number of pods
// in their corresponding topology domain.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput)
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput).ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx)
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs, ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtr and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrInput` via:
//
//	        ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput
}

type thanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrType ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs

func ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtr(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrInput {
	return (*thanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrType)(v)
}

func (*thanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (i *thanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrType) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrType) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput)
}

// LabelSelector is used to find matching pods.
// Pods that match this label selector are counted to determine the number of pods
// in their corresponding topology domain.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecTopologySpreadConstraintsLabelSelector) *ThanosRulerSpecTopologySpreadConstraintsLabelSelector {
		return &v
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput) MatchExpressions() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelector) []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelector) map[string]string { return v.MatchLabels }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTopologySpreadConstraintsLabelSelector)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput) Elem() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelector) ThanosRulerSpecTopologySpreadConstraintsLabelSelector {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecTopologySpreadConstraintsLabelSelector
		return ret
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput) MatchExpressions() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelector) []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs{...}
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput)
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArray and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArray{ ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs{...} }
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput
}

type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArray []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsInput

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArray) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArray) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions {
		return vs[0].([]ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs{...}
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput)
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray{ ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs{...} }
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput
}

type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
		return vs[0].([]ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput)
}

// LabelSelector is used to find matching pods.
// Pods that match this label selector are counted to determine the number of pods
// in their corresponding topology domain.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs{...}
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput
}

// LabelSelector is used to find matching pods.
// Pods that match this label selector are counted to determine the number of pods
// in their corresponding topology domain.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput)
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput).ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs, ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtr and ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrInput` via:
//
//	        ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput
	ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput
}

type thanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrType ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs

func ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtr(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrInput {
	return (*thanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrType)(v)
}

func (*thanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (i *thanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrType) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrType) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput)
}

// LabelSelector is used to find matching pods.
// Pods that match this label selector are counted to determine the number of pods
// in their corresponding topology domain.
type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o.ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch) *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch {
		return &v
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput) MatchExpressions() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch) []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput) ToThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput) Elem() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch) ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch
		return ret
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput) MatchExpressions() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch) []ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type ThanosRulerSpecTopologySpreadConstraintsPatch struct {
	LabelSelector *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which
	// spreading will be calculated. The keys are used to lookup values from the
	// incoming pod labels, those key-value labels are ANDed with labelSelector
	// to select the group of existing pods over which spreading will be calculated
	// for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
	// MatchLabelKeys cannot be set when LabelSelector isn't set.
	// Keys that don't exist in the incoming pod labels will
	// be ignored. A null or empty list means only match against labelSelector.
	//
	// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
	MatchLabelKeys []string `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed.
	// When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
	// between the number of matching pods in the target topology and the global minimum.
	// The global minimum is the minimum number of matching pods in an eligible domain
	// or zero if the number of eligible domains is less than MinDomains.
	// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	// labelSelector spread as 2/2/1:
	// In this case, the global minimum is 1.
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |   P   |
	// - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
	//   scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
	//   violate MaxSkew(1).
	// - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
	//   When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
	//   to topologies that satisfy it.
	//   It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew *int `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains.
	// When the number of eligible domains with matching topology keys is less than minDomains,
	// Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
	// And when the number of eligible domains with matching topology keys equals or greater than minDomains,
	// this value has no effect on scheduling.
	// As a result, when the number of eligible domains is less than minDomains,
	// scheduler won't schedule more than maxSkew Pods to those domains.
	// If value is nil, the constraint behaves as if MinDomains is equal to 1.
	// Valid values are integers greater than 0.
	// When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
	// labelSelector spread as 2/2/2:
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |  P P  |
	// The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
	// In this situation, new pod with the same labelSelector cannot be scheduled,
	// because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
	// it will violate MaxSkew.
	MinDomains *int `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
	// when calculating pod topology spread skew. Options are:
	// - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
	// - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy *string `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating
	// pod topology spread skew. Options are:
	// - Honor: nodes without taints, along with tainted nodes for which the incoming pod
	//   has a toleration, are included.
	// - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy *string `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key
	// and identical values are considered to be in the same topology.
	// We consider each <key, value> as a "bucket", and try to put balanced number
	// of pods into each bucket.
	// We define a domain as a particular instance of a topology.
	// Also, we define an eligible domain as a domain whose nodes meet the requirements of
	// nodeAffinityPolicy and nodeTaintsPolicy.
	// e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
	// And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
	// It's a required field.
	TopologyKey *string `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
	// the spread constraint.
	// - DoNotSchedule (default) tells the scheduler not to schedule it.
	// - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	//   A constraint is considered "Unsatisfiable" for an incoming pod
	//   if and only if every possible node assignment for that pod would violate
	//   "MaxSkew" on some topology.
	//   For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	//   labelSelector spread as 3/1/1:
	//   | zone1 | zone2 | zone3 |
	//   | P P P |   P   |   P   |
	//   If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
	//   to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
	//   MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
	//   won't make it *more* imbalanced.
	//   It's a required field.
	WhenUnsatisfiable *string `pulumi:"whenUnsatisfiable"`
}

// ThanosRulerSpecTopologySpreadConstraintsPatchInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsPatchArgs and ThanosRulerSpecTopologySpreadConstraintsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsPatchInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsPatchArgs{...}
type ThanosRulerSpecTopologySpreadConstraintsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsPatchOutput() ThanosRulerSpecTopologySpreadConstraintsPatchOutput
	ToThanosRulerSpecTopologySpreadConstraintsPatchOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsPatchOutput
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type ThanosRulerSpecTopologySpreadConstraintsPatchArgs struct {
	LabelSelector ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrInput `pulumi:"labelSelector"`
	// MatchLabelKeys is a set of pod label keys to select the pods over which
	// spreading will be calculated. The keys are used to lookup values from the
	// incoming pod labels, those key-value labels are ANDed with labelSelector
	// to select the group of existing pods over which spreading will be calculated
	// for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
	// MatchLabelKeys cannot be set when LabelSelector isn't set.
	// Keys that don't exist in the incoming pod labels will
	// be ignored. A null or empty list means only match against labelSelector.
	//
	// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
	MatchLabelKeys pulumi.StringArrayInput `pulumi:"matchLabelKeys"`
	// MaxSkew describes the degree to which pods may be unevenly distributed.
	// When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
	// between the number of matching pods in the target topology and the global minimum.
	// The global minimum is the minimum number of matching pods in an eligible domain
	// or zero if the number of eligible domains is less than MinDomains.
	// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	// labelSelector spread as 2/2/1:
	// In this case, the global minimum is 1.
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |   P   |
	// - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
	//   scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
	//   violate MaxSkew(1).
	// - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
	//   When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
	//   to topologies that satisfy it.
	//   It's a required field. Default value is 1 and 0 is not allowed.
	MaxSkew pulumi.IntPtrInput `pulumi:"maxSkew"`
	// MinDomains indicates a minimum number of eligible domains.
	// When the number of eligible domains with matching topology keys is less than minDomains,
	// Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
	// And when the number of eligible domains with matching topology keys equals or greater than minDomains,
	// this value has no effect on scheduling.
	// As a result, when the number of eligible domains is less than minDomains,
	// scheduler won't schedule more than maxSkew Pods to those domains.
	// If value is nil, the constraint behaves as if MinDomains is equal to 1.
	// Valid values are integers greater than 0.
	// When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
	//
	// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
	// labelSelector spread as 2/2/2:
	// | zone1 | zone2 | zone3 |
	// |  P P  |  P P  |  P P  |
	// The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
	// In this situation, new pod with the same labelSelector cannot be scheduled,
	// because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
	// it will violate MaxSkew.
	MinDomains pulumi.IntPtrInput `pulumi:"minDomains"`
	// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
	// when calculating pod topology spread skew. Options are:
	// - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
	// - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
	//
	// If this value is nil, the behavior is equivalent to the Honor policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeAffinityPolicy pulumi.StringPtrInput `pulumi:"nodeAffinityPolicy"`
	// NodeTaintsPolicy indicates how we will treat node taints when calculating
	// pod topology spread skew. Options are:
	// - Honor: nodes without taints, along with tainted nodes for which the incoming pod
	//   has a toleration, are included.
	// - Ignore: node taints are ignored. All nodes are included.
	//
	// If this value is nil, the behavior is equivalent to the Ignore policy.
	// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
	NodeTaintsPolicy pulumi.StringPtrInput `pulumi:"nodeTaintsPolicy"`
	// TopologyKey is the key of node labels. Nodes that have a label with this key
	// and identical values are considered to be in the same topology.
	// We consider each <key, value> as a "bucket", and try to put balanced number
	// of pods into each bucket.
	// We define a domain as a particular instance of a topology.
	// Also, we define an eligible domain as a domain whose nodes meet the requirements of
	// nodeAffinityPolicy and nodeTaintsPolicy.
	// e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
	// And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
	// It's a required field.
	TopologyKey pulumi.StringPtrInput `pulumi:"topologyKey"`
	// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
	// the spread constraint.
	// - DoNotSchedule (default) tells the scheduler not to schedule it.
	// - ScheduleAnyway tells the scheduler to schedule the pod in any location,
	//   but giving higher precedence to topologies that would help reduce the
	//   skew.
	//   A constraint is considered "Unsatisfiable" for an incoming pod
	//   if and only if every possible node assignment for that pod would violate
	//   "MaxSkew" on some topology.
	//   For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
	//   labelSelector spread as 3/1/1:
	//   | zone1 | zone2 | zone3 |
	//   | P P P |   P   |   P   |
	//   If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
	//   to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
	//   MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
	//   won't make it *more* imbalanced.
	//   It's a required field.
	WhenUnsatisfiable pulumi.StringPtrInput `pulumi:"whenUnsatisfiable"`
}

func (ThanosRulerSpecTopologySpreadConstraintsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsPatchOutput() ThanosRulerSpecTopologySpreadConstraintsPatchOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsPatchArgs) ToThanosRulerSpecTopologySpreadConstraintsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsPatchOutput)
}

// ThanosRulerSpecTopologySpreadConstraintsPatchArrayInput is an input type that accepts ThanosRulerSpecTopologySpreadConstraintsPatchArray and ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTopologySpreadConstraintsPatchArrayInput` via:
//
//	ThanosRulerSpecTopologySpreadConstraintsPatchArray{ ThanosRulerSpecTopologySpreadConstraintsPatchArgs{...} }
type ThanosRulerSpecTopologySpreadConstraintsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput() ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput
	ToThanosRulerSpecTopologySpreadConstraintsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput
}

type ThanosRulerSpecTopologySpreadConstraintsPatchArray []ThanosRulerSpecTopologySpreadConstraintsPatchInput

func (ThanosRulerSpecTopologySpreadConstraintsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTopologySpreadConstraintsPatchArray) ToThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput() ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput {
	return i.ToThanosRulerSpecTopologySpreadConstraintsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTopologySpreadConstraintsPatchArray) ToThanosRulerSpecTopologySpreadConstraintsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput)
}

// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
type ThanosRulerSpecTopologySpreadConstraintsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsPatchOutput() ThanosRulerSpecTopologySpreadConstraintsPatchOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) ToThanosRulerSpecTopologySpreadConstraintsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsPatchOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) LabelSelector() ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) *ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatch {
		return v.LabelSelector
	}).(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput)
}

// MatchLabelKeys is a set of pod label keys to select the pods over which
// spreading will be calculated. The keys are used to lookup values from the
// incoming pod labels, those key-value labels are ANDed with labelSelector
// to select the group of existing pods over which spreading will be calculated
// for the incoming pod. The same key is forbidden to exist in both MatchLabelKeys and LabelSelector.
// MatchLabelKeys cannot be set when LabelSelector isn't set.
// Keys that don't exist in the incoming pod labels will
// be ignored. A null or empty list means only match against labelSelector.
//
// This is a beta field and requires the MatchLabelKeysInPodTopologySpread feature gate to be enabled (enabled by default).
func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) MatchLabelKeys() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) []string { return v.MatchLabelKeys }).(pulumi.StringArrayOutput)
}

// MaxSkew describes the degree to which pods may be unevenly distributed.
// When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference
// between the number of matching pods in the target topology and the global minimum.
// The global minimum is the minimum number of matching pods in an eligible domain
// or zero if the number of eligible domains is less than MinDomains.
// For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
// labelSelector spread as 2/2/1:
// In this case, the global minimum is 1.
// | zone1 | zone2 | zone3 |
// |  P P  |  P P  |   P   |
//   - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 2/2/2;
//     scheduling it onto zone1(zone2) would make the ActualSkew(3-1) on zone1(zone2)
//     violate MaxSkew(1).
//   - if MaxSkew is 2, incoming pod can be scheduled onto any zone.
//     When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence
//     to topologies that satisfy it.
//     It's a required field. Default value is 1 and 0 is not allowed.
func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) MaxSkew() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) *int { return v.MaxSkew }).(pulumi.IntPtrOutput)
}

// MinDomains indicates a minimum number of eligible domains.
// When the number of eligible domains with matching topology keys is less than minDomains,
// Pod Topology Spread treats "global minimum" as 0, and then the calculation of Skew is performed.
// And when the number of eligible domains with matching topology keys equals or greater than minDomains,
// this value has no effect on scheduling.
// As a result, when the number of eligible domains is less than minDomains,
// scheduler won't schedule more than maxSkew Pods to those domains.
// If value is nil, the constraint behaves as if MinDomains is equal to 1.
// Valid values are integers greater than 0.
// When value is not nil, WhenUnsatisfiable must be DoNotSchedule.
//
// For example, in a 3-zone cluster, MaxSkew is set to 2, MinDomains is set to 5 and pods with the same
// labelSelector spread as 2/2/2:
// | zone1 | zone2 | zone3 |
// |  P P  |  P P  |  P P  |
// The number of domains is less than 5(MinDomains), so "global minimum" is treated as 0.
// In this situation, new pod with the same labelSelector cannot be scheduled,
// because computed skew will be 3(3 - 0) if new Pod is scheduled to any of the three zones,
// it will violate MaxSkew.
func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) MinDomains() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) *int { return v.MinDomains }).(pulumi.IntPtrOutput)
}

// NodeAffinityPolicy indicates how we will treat Pod's nodeAffinity/nodeSelector
// when calculating pod topology spread skew. Options are:
// - Honor: only nodes matching nodeAffinity/nodeSelector are included in the calculations.
// - Ignore: nodeAffinity/nodeSelector are ignored. All nodes are included in the calculations.
//
// If this value is nil, the behavior is equivalent to the Honor policy.
// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) NodeAffinityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) *string { return v.NodeAffinityPolicy }).(pulumi.StringPtrOutput)
}

// NodeTaintsPolicy indicates how we will treat node taints when calculating
// pod topology spread skew. Options are:
//   - Honor: nodes without taints, along with tainted nodes for which the incoming pod
//     has a toleration, are included.
//   - Ignore: node taints are ignored. All nodes are included.
//
// If this value is nil, the behavior is equivalent to the Ignore policy.
// This is a beta-level feature default enabled by the NodeInclusionPolicyInPodTopologySpread feature flag.
func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) NodeTaintsPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) *string { return v.NodeTaintsPolicy }).(pulumi.StringPtrOutput)
}

// TopologyKey is the key of node labels. Nodes that have a label with this key
// and identical values are considered to be in the same topology.
// We consider each <key, value> as a "bucket", and try to put balanced number
// of pods into each bucket.
// We define a domain as a particular instance of a topology.
// Also, we define an eligible domain as a domain whose nodes meet the requirements of
// nodeAffinityPolicy and nodeTaintsPolicy.
// e.g. If TopologyKey is "kubernetes.io/hostname", each Node is a domain of that topology.
// And, if TopologyKey is "topology.kubernetes.io/zone", each zone is a domain of that topology.
// It's a required field.
func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) TopologyKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) *string { return v.TopologyKey }).(pulumi.StringPtrOutput)
}

// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy
// the spread constraint.
//   - DoNotSchedule (default) tells the scheduler not to schedule it.
//   - ScheduleAnyway tells the scheduler to schedule the pod in any location,
//     but giving higher precedence to topologies that would help reduce the
//     skew.
//     A constraint is considered "Unsatisfiable" for an incoming pod
//     if and only if every possible node assignment for that pod would violate
//     "MaxSkew" on some topology.
//     For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same
//     labelSelector spread as 3/1/1:
//     | zone1 | zone2 | zone3 |
//     | P P P |   P   |   P   |
//     If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled
//     to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies
//     MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler
//     won't make it *more* imbalanced.
//     It's a required field.
func (o ThanosRulerSpecTopologySpreadConstraintsPatchOutput) WhenUnsatisfiable() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTopologySpreadConstraintsPatch) *string { return v.WhenUnsatisfiable }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecTopologySpreadConstraintsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput() ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput) ToThanosRulerSpecTopologySpreadConstraintsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecTopologySpreadConstraintsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecTopologySpreadConstraintsPatch {
		return vs[0].([]ThanosRulerSpecTopologySpreadConstraintsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecTopologySpreadConstraintsPatchOutput)
}

// Configures tracing.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration.
//
// `tracingConfigFile` takes precedence over this field.
type ThanosRulerSpecTracingConfig struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecTracingConfigInput is an input type that accepts ThanosRulerSpecTracingConfigArgs and ThanosRulerSpecTracingConfigOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTracingConfigInput` via:
//
//	ThanosRulerSpecTracingConfigArgs{...}
type ThanosRulerSpecTracingConfigInput interface {
	pulumi.Input

	ToThanosRulerSpecTracingConfigOutput() ThanosRulerSpecTracingConfigOutput
	ToThanosRulerSpecTracingConfigOutputWithContext(context.Context) ThanosRulerSpecTracingConfigOutput
}

// Configures tracing.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration.
//
// `tracingConfigFile` takes precedence over this field.
type ThanosRulerSpecTracingConfigArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecTracingConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTracingConfig)(nil)).Elem()
}

func (i ThanosRulerSpecTracingConfigArgs) ToThanosRulerSpecTracingConfigOutput() ThanosRulerSpecTracingConfigOutput {
	return i.ToThanosRulerSpecTracingConfigOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTracingConfigArgs) ToThanosRulerSpecTracingConfigOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTracingConfigOutput)
}

func (i ThanosRulerSpecTracingConfigArgs) ToThanosRulerSpecTracingConfigPtrOutput() ThanosRulerSpecTracingConfigPtrOutput {
	return i.ToThanosRulerSpecTracingConfigPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTracingConfigArgs) ToThanosRulerSpecTracingConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTracingConfigOutput).ToThanosRulerSpecTracingConfigPtrOutputWithContext(ctx)
}

// ThanosRulerSpecTracingConfigPtrInput is an input type that accepts ThanosRulerSpecTracingConfigArgs, ThanosRulerSpecTracingConfigPtr and ThanosRulerSpecTracingConfigPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTracingConfigPtrInput` via:
//
//	        ThanosRulerSpecTracingConfigArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecTracingConfigPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecTracingConfigPtrOutput() ThanosRulerSpecTracingConfigPtrOutput
	ToThanosRulerSpecTracingConfigPtrOutputWithContext(context.Context) ThanosRulerSpecTracingConfigPtrOutput
}

type thanosRulerSpecTracingConfigPtrType ThanosRulerSpecTracingConfigArgs

func ThanosRulerSpecTracingConfigPtr(v *ThanosRulerSpecTracingConfigArgs) ThanosRulerSpecTracingConfigPtrInput {
	return (*thanosRulerSpecTracingConfigPtrType)(v)
}

func (*thanosRulerSpecTracingConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTracingConfig)(nil)).Elem()
}

func (i *thanosRulerSpecTracingConfigPtrType) ToThanosRulerSpecTracingConfigPtrOutput() ThanosRulerSpecTracingConfigPtrOutput {
	return i.ToThanosRulerSpecTracingConfigPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecTracingConfigPtrType) ToThanosRulerSpecTracingConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTracingConfigPtrOutput)
}

// Configures tracing.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration.
//
// `tracingConfigFile` takes precedence over this field.
type ThanosRulerSpecTracingConfigOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTracingConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTracingConfig)(nil)).Elem()
}

func (o ThanosRulerSpecTracingConfigOutput) ToThanosRulerSpecTracingConfigOutput() ThanosRulerSpecTracingConfigOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigOutput) ToThanosRulerSpecTracingConfigOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigOutput) ToThanosRulerSpecTracingConfigPtrOutput() ThanosRulerSpecTracingConfigPtrOutput {
	return o.ToThanosRulerSpecTracingConfigPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecTracingConfigOutput) ToThanosRulerSpecTracingConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecTracingConfig) *ThanosRulerSpecTracingConfig {
		return &v
	}).(ThanosRulerSpecTracingConfigPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecTracingConfigOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTracingConfig) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecTracingConfigOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTracingConfig) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecTracingConfigOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTracingConfig) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecTracingConfigPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTracingConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTracingConfig)(nil)).Elem()
}

func (o ThanosRulerSpecTracingConfigPtrOutput) ToThanosRulerSpecTracingConfigPtrOutput() ThanosRulerSpecTracingConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigPtrOutput) ToThanosRulerSpecTracingConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigPtrOutput) Elem() ThanosRulerSpecTracingConfigOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfig) ThanosRulerSpecTracingConfig {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecTracingConfig
		return ret
	}).(ThanosRulerSpecTracingConfigOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecTracingConfigPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecTracingConfigPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfig) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecTracingConfigPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Configures tracing.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration.
//
// `tracingConfigFile` takes precedence over this field.
type ThanosRulerSpecTracingConfigPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecTracingConfigPatchInput is an input type that accepts ThanosRulerSpecTracingConfigPatchArgs and ThanosRulerSpecTracingConfigPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTracingConfigPatchInput` via:
//
//	ThanosRulerSpecTracingConfigPatchArgs{...}
type ThanosRulerSpecTracingConfigPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecTracingConfigPatchOutput() ThanosRulerSpecTracingConfigPatchOutput
	ToThanosRulerSpecTracingConfigPatchOutputWithContext(context.Context) ThanosRulerSpecTracingConfigPatchOutput
}

// Configures tracing.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration.
//
// `tracingConfigFile` takes precedence over this field.
type ThanosRulerSpecTracingConfigPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecTracingConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTracingConfigPatch)(nil)).Elem()
}

func (i ThanosRulerSpecTracingConfigPatchArgs) ToThanosRulerSpecTracingConfigPatchOutput() ThanosRulerSpecTracingConfigPatchOutput {
	return i.ToThanosRulerSpecTracingConfigPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTracingConfigPatchArgs) ToThanosRulerSpecTracingConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTracingConfigPatchOutput)
}

func (i ThanosRulerSpecTracingConfigPatchArgs) ToThanosRulerSpecTracingConfigPatchPtrOutput() ThanosRulerSpecTracingConfigPatchPtrOutput {
	return i.ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecTracingConfigPatchArgs) ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTracingConfigPatchOutput).ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecTracingConfigPatchPtrInput is an input type that accepts ThanosRulerSpecTracingConfigPatchArgs, ThanosRulerSpecTracingConfigPatchPtr and ThanosRulerSpecTracingConfigPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecTracingConfigPatchPtrInput` via:
//
//	        ThanosRulerSpecTracingConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecTracingConfigPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecTracingConfigPatchPtrOutput() ThanosRulerSpecTracingConfigPatchPtrOutput
	ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(context.Context) ThanosRulerSpecTracingConfigPatchPtrOutput
}

type thanosRulerSpecTracingConfigPatchPtrType ThanosRulerSpecTracingConfigPatchArgs

func ThanosRulerSpecTracingConfigPatchPtr(v *ThanosRulerSpecTracingConfigPatchArgs) ThanosRulerSpecTracingConfigPatchPtrInput {
	return (*thanosRulerSpecTracingConfigPatchPtrType)(v)
}

func (*thanosRulerSpecTracingConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTracingConfigPatch)(nil)).Elem()
}

func (i *thanosRulerSpecTracingConfigPatchPtrType) ToThanosRulerSpecTracingConfigPatchPtrOutput() ThanosRulerSpecTracingConfigPatchPtrOutput {
	return i.ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecTracingConfigPatchPtrType) ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecTracingConfigPatchPtrOutput)
}

// Configures tracing.
//
// The configuration format is defined at https://thanos.io/tip/thanos/tracing.md/#configuration
//
// This is an *experimental feature*, it may change in any upcoming release
// in a breaking way.
//
// The operator performs no validation of the configuration.
//
// `tracingConfigFile` takes precedence over this field.
type ThanosRulerSpecTracingConfigPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTracingConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecTracingConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTracingConfigPatchOutput) ToThanosRulerSpecTracingConfigPatchOutput() ThanosRulerSpecTracingConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigPatchOutput) ToThanosRulerSpecTracingConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigPatchOutput) ToThanosRulerSpecTracingConfigPatchPtrOutput() ThanosRulerSpecTracingConfigPatchPtrOutput {
	return o.ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecTracingConfigPatchOutput) ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecTracingConfigPatch) *ThanosRulerSpecTracingConfigPatch {
		return &v
	}).(ThanosRulerSpecTracingConfigPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecTracingConfigPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTracingConfigPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecTracingConfigPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTracingConfigPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecTracingConfigPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecTracingConfigPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecTracingConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecTracingConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecTracingConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecTracingConfigPatchPtrOutput) ToThanosRulerSpecTracingConfigPatchPtrOutput() ThanosRulerSpecTracingConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigPatchPtrOutput) ToThanosRulerSpecTracingConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecTracingConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecTracingConfigPatchPtrOutput) Elem() ThanosRulerSpecTracingConfigPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfigPatch) ThanosRulerSpecTracingConfigPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecTracingConfigPatch
		return ret
	}).(ThanosRulerSpecTracingConfigPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecTracingConfigPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecTracingConfigPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecTracingConfigPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecTracingConfigPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecVolumeMounts struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name *string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly *string `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// ThanosRulerSpecVolumeMountsInput is an input type that accepts ThanosRulerSpecVolumeMountsArgs and ThanosRulerSpecVolumeMountsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumeMountsInput` via:
//
//	ThanosRulerSpecVolumeMountsArgs{...}
type ThanosRulerSpecVolumeMountsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumeMountsOutput() ThanosRulerSpecVolumeMountsOutput
	ToThanosRulerSpecVolumeMountsOutputWithContext(context.Context) ThanosRulerSpecVolumeMountsOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecVolumeMountsArgs struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly pulumi.StringPtrInput `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ThanosRulerSpecVolumeMountsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumeMounts)(nil)).Elem()
}

func (i ThanosRulerSpecVolumeMountsArgs) ToThanosRulerSpecVolumeMountsOutput() ThanosRulerSpecVolumeMountsOutput {
	return i.ToThanosRulerSpecVolumeMountsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumeMountsArgs) ToThanosRulerSpecVolumeMountsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumeMountsOutput)
}

// ThanosRulerSpecVolumeMountsArrayInput is an input type that accepts ThanosRulerSpecVolumeMountsArray and ThanosRulerSpecVolumeMountsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumeMountsArrayInput` via:
//
//	ThanosRulerSpecVolumeMountsArray{ ThanosRulerSpecVolumeMountsArgs{...} }
type ThanosRulerSpecVolumeMountsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumeMountsArrayOutput() ThanosRulerSpecVolumeMountsArrayOutput
	ToThanosRulerSpecVolumeMountsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumeMountsArrayOutput
}

type ThanosRulerSpecVolumeMountsArray []ThanosRulerSpecVolumeMountsInput

func (ThanosRulerSpecVolumeMountsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumeMounts)(nil)).Elem()
}

func (i ThanosRulerSpecVolumeMountsArray) ToThanosRulerSpecVolumeMountsArrayOutput() ThanosRulerSpecVolumeMountsArrayOutput {
	return i.ToThanosRulerSpecVolumeMountsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumeMountsArray) ToThanosRulerSpecVolumeMountsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumeMountsArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecVolumeMountsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumeMountsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumeMounts)(nil)).Elem()
}

func (o ThanosRulerSpecVolumeMountsOutput) ToThanosRulerSpecVolumeMountsOutput() ThanosRulerSpecVolumeMountsOutput {
	return o
}

func (o ThanosRulerSpecVolumeMountsOutput) ToThanosRulerSpecVolumeMountsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must
// not contain ':'.
func (o ThanosRulerSpecVolumeMountsOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMounts) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// mountPropagation determines how mounts are propagated from the host
// to container and the other way around.
// When not set, MountPropagationNone is used.
// This field is beta in 1.10.
// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
// (which defaults to None).
func (o ThanosRulerSpecVolumeMountsOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMounts) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o ThanosRulerSpecVolumeMountsOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMounts) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified).
// Defaults to false.
func (o ThanosRulerSpecVolumeMountsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMounts) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// RecursiveReadOnly specifies whether read-only mounts should be handled
// recursively.
//
// If ReadOnly is false, this field has no meaning and must be unspecified.
//
// If ReadOnly is true, and this field is set to Disabled, the mount is not made
// recursively read-only.  If this field is set to IfPossible, the mount is made
// recursively read-only, if it is supported by the container runtime.  If this
// field is set to Enabled, the mount is made recursively read-only if it is
// supported by the container runtime, otherwise the pod will not be started and
// an error will be generated to indicate the reason.
//
// If this field is set to IfPossible or Enabled, MountPropagation must be set to
// None (or be unspecified, which defaults to None).
//
// If this field is not specified, it is treated as an equivalent of Disabled.
func (o ThanosRulerSpecVolumeMountsOutput) RecursiveReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMounts) *string { return v.RecursiveReadOnly }).(pulumi.StringPtrOutput)
}

// Path within the volume from which the container's volume should be mounted.
// Defaults to "" (volume's root).
func (o ThanosRulerSpecVolumeMountsOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMounts) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted.
// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
// Defaults to "" (volume's root).
// SubPathExpr and SubPath are mutually exclusive.
func (o ThanosRulerSpecVolumeMountsOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMounts) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumeMountsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumeMountsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumeMounts)(nil)).Elem()
}

func (o ThanosRulerSpecVolumeMountsArrayOutput) ToThanosRulerSpecVolumeMountsArrayOutput() ThanosRulerSpecVolumeMountsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumeMountsArrayOutput) ToThanosRulerSpecVolumeMountsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumeMountsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumeMountsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumeMounts {
		return vs[0].([]ThanosRulerSpecVolumeMounts)[vs[1].(int)]
	}).(ThanosRulerSpecVolumeMountsOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecVolumeMountsPatch struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath *string `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation *string `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name *string `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly *string `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath *string `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr *string `pulumi:"subPathExpr"`
}

// ThanosRulerSpecVolumeMountsPatchInput is an input type that accepts ThanosRulerSpecVolumeMountsPatchArgs and ThanosRulerSpecVolumeMountsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumeMountsPatchInput` via:
//
//	ThanosRulerSpecVolumeMountsPatchArgs{...}
type ThanosRulerSpecVolumeMountsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumeMountsPatchOutput() ThanosRulerSpecVolumeMountsPatchOutput
	ToThanosRulerSpecVolumeMountsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumeMountsPatchOutput
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecVolumeMountsPatchArgs struct {
	// Path within the container at which the volume should be mounted.  Must
	// not contain ':'.
	MountPath pulumi.StringPtrInput `pulumi:"mountPath"`
	// mountPropagation determines how mounts are propagated from the host
	// to container and the other way around.
	// When not set, MountPropagationNone is used.
	// This field is beta in 1.10.
	// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
	// (which defaults to None).
	MountPropagation pulumi.StringPtrInput `pulumi:"mountPropagation"`
	// This must match the Name of a Volume.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Mounted read-only if true, read-write otherwise (false or unspecified).
	// Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// RecursiveReadOnly specifies whether read-only mounts should be handled
	// recursively.
	//
	// If ReadOnly is false, this field has no meaning and must be unspecified.
	//
	// If ReadOnly is true, and this field is set to Disabled, the mount is not made
	// recursively read-only.  If this field is set to IfPossible, the mount is made
	// recursively read-only, if it is supported by the container runtime.  If this
	// field is set to Enabled, the mount is made recursively read-only if it is
	// supported by the container runtime, otherwise the pod will not be started and
	// an error will be generated to indicate the reason.
	//
	// If this field is set to IfPossible or Enabled, MountPropagation must be set to
	// None (or be unspecified, which defaults to None).
	//
	// If this field is not specified, it is treated as an equivalent of Disabled.
	RecursiveReadOnly pulumi.StringPtrInput `pulumi:"recursiveReadOnly"`
	// Path within the volume from which the container's volume should be mounted.
	// Defaults to "" (volume's root).
	SubPath pulumi.StringPtrInput `pulumi:"subPath"`
	// Expanded path within the volume from which the container's volume should be mounted.
	// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
	// Defaults to "" (volume's root).
	// SubPathExpr and SubPath are mutually exclusive.
	SubPathExpr pulumi.StringPtrInput `pulumi:"subPathExpr"`
}

func (ThanosRulerSpecVolumeMountsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumeMountsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumeMountsPatchArgs) ToThanosRulerSpecVolumeMountsPatchOutput() ThanosRulerSpecVolumeMountsPatchOutput {
	return i.ToThanosRulerSpecVolumeMountsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumeMountsPatchArgs) ToThanosRulerSpecVolumeMountsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumeMountsPatchOutput)
}

// ThanosRulerSpecVolumeMountsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumeMountsPatchArray and ThanosRulerSpecVolumeMountsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumeMountsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumeMountsPatchArray{ ThanosRulerSpecVolumeMountsPatchArgs{...} }
type ThanosRulerSpecVolumeMountsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumeMountsPatchArrayOutput() ThanosRulerSpecVolumeMountsPatchArrayOutput
	ToThanosRulerSpecVolumeMountsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumeMountsPatchArrayOutput
}

type ThanosRulerSpecVolumeMountsPatchArray []ThanosRulerSpecVolumeMountsPatchInput

func (ThanosRulerSpecVolumeMountsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumeMountsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumeMountsPatchArray) ToThanosRulerSpecVolumeMountsPatchArrayOutput() ThanosRulerSpecVolumeMountsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumeMountsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumeMountsPatchArray) ToThanosRulerSpecVolumeMountsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumeMountsPatchArrayOutput)
}

// VolumeMount describes a mounting of a Volume within a container.
type ThanosRulerSpecVolumeMountsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumeMountsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumeMountsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumeMountsPatchOutput) ToThanosRulerSpecVolumeMountsPatchOutput() ThanosRulerSpecVolumeMountsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumeMountsPatchOutput) ToThanosRulerSpecVolumeMountsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsPatchOutput {
	return o
}

// Path within the container at which the volume should be mounted.  Must
// not contain ':'.
func (o ThanosRulerSpecVolumeMountsPatchOutput) MountPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMountsPatch) *string { return v.MountPath }).(pulumi.StringPtrOutput)
}

// mountPropagation determines how mounts are propagated from the host
// to container and the other way around.
// When not set, MountPropagationNone is used.
// This field is beta in 1.10.
// When RecursiveReadOnly is set to IfPossible or to Enabled, MountPropagation must be None or unspecified
// (which defaults to None).
func (o ThanosRulerSpecVolumeMountsPatchOutput) MountPropagation() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMountsPatch) *string { return v.MountPropagation }).(pulumi.StringPtrOutput)
}

// This must match the Name of a Volume.
func (o ThanosRulerSpecVolumeMountsPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMountsPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Mounted read-only if true, read-write otherwise (false or unspecified).
// Defaults to false.
func (o ThanosRulerSpecVolumeMountsPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMountsPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// RecursiveReadOnly specifies whether read-only mounts should be handled
// recursively.
//
// If ReadOnly is false, this field has no meaning and must be unspecified.
//
// If ReadOnly is true, and this field is set to Disabled, the mount is not made
// recursively read-only.  If this field is set to IfPossible, the mount is made
// recursively read-only, if it is supported by the container runtime.  If this
// field is set to Enabled, the mount is made recursively read-only if it is
// supported by the container runtime, otherwise the pod will not be started and
// an error will be generated to indicate the reason.
//
// If this field is set to IfPossible or Enabled, MountPropagation must be set to
// None (or be unspecified, which defaults to None).
//
// If this field is not specified, it is treated as an equivalent of Disabled.
func (o ThanosRulerSpecVolumeMountsPatchOutput) RecursiveReadOnly() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMountsPatch) *string { return v.RecursiveReadOnly }).(pulumi.StringPtrOutput)
}

// Path within the volume from which the container's volume should be mounted.
// Defaults to "" (volume's root).
func (o ThanosRulerSpecVolumeMountsPatchOutput) SubPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMountsPatch) *string { return v.SubPath }).(pulumi.StringPtrOutput)
}

// Expanded path within the volume from which the container's volume should be mounted.
// Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment.
// Defaults to "" (volume's root).
// SubPathExpr and SubPath are mutually exclusive.
func (o ThanosRulerSpecVolumeMountsPatchOutput) SubPathExpr() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumeMountsPatch) *string { return v.SubPathExpr }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumeMountsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumeMountsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumeMountsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumeMountsPatchArrayOutput) ToThanosRulerSpecVolumeMountsPatchArrayOutput() ThanosRulerSpecVolumeMountsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumeMountsPatchArrayOutput) ToThanosRulerSpecVolumeMountsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumeMountsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumeMountsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumeMountsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumeMountsPatch {
		return vs[0].([]ThanosRulerSpecVolumeMountsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumeMountsPatchOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type ThanosRulerSpecVolumes struct {
	AwsElasticBlockStore *ThanosRulerSpecVolumesAwsElasticBlockStore `pulumi:"awsElasticBlockStore"`
	AzureDisk            *ThanosRulerSpecVolumesAzureDisk            `pulumi:"azureDisk"`
	AzureFile            *ThanosRulerSpecVolumesAzureFile            `pulumi:"azureFile"`
	Cephfs               *ThanosRulerSpecVolumesCephfs               `pulumi:"cephfs"`
	Cinder               *ThanosRulerSpecVolumesCinder               `pulumi:"cinder"`
	ConfigMap            *ThanosRulerSpecVolumesConfigMap            `pulumi:"configMap"`
	Csi                  *ThanosRulerSpecVolumesCsi                  `pulumi:"csi"`
	DownwardAPI          *ThanosRulerSpecVolumesDownwardAPI          `pulumi:"downwardAPI"`
	EmptyDir             *ThanosRulerSpecVolumesEmptyDir             `pulumi:"emptyDir"`
	Ephemeral            *ThanosRulerSpecVolumesEphemeral            `pulumi:"ephemeral"`
	Fc                   *ThanosRulerSpecVolumesFc                   `pulumi:"fc"`
	FlexVolume           *ThanosRulerSpecVolumesFlexVolume           `pulumi:"flexVolume"`
	Flocker              *ThanosRulerSpecVolumesFlocker              `pulumi:"flocker"`
	GcePersistentDisk    *ThanosRulerSpecVolumesGcePersistentDisk    `pulumi:"gcePersistentDisk"`
	GitRepo              *ThanosRulerSpecVolumesGitRepo              `pulumi:"gitRepo"`
	Glusterfs            *ThanosRulerSpecVolumesGlusterfs            `pulumi:"glusterfs"`
	HostPath             *ThanosRulerSpecVolumesHostPath             `pulumi:"hostPath"`
	Image                *ThanosRulerSpecVolumesImage                `pulumi:"image"`
	Iscsi                *ThanosRulerSpecVolumesIscsi                `pulumi:"iscsi"`
	// name of the volume.
	// Must be a DNS_LABEL and unique within the pod.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name                  *string                                      `pulumi:"name"`
	Nfs                   *ThanosRulerSpecVolumesNfs                   `pulumi:"nfs"`
	PersistentVolumeClaim *ThanosRulerSpecVolumesPersistentVolumeClaim `pulumi:"persistentVolumeClaim"`
	PhotonPersistentDisk  *ThanosRulerSpecVolumesPhotonPersistentDisk  `pulumi:"photonPersistentDisk"`
	PortworxVolume        *ThanosRulerSpecVolumesPortworxVolume        `pulumi:"portworxVolume"`
	Projected             *ThanosRulerSpecVolumesProjected             `pulumi:"projected"`
	Quobyte               *ThanosRulerSpecVolumesQuobyte               `pulumi:"quobyte"`
	Rbd                   *ThanosRulerSpecVolumesRbd                   `pulumi:"rbd"`
	ScaleIO               *ThanosRulerSpecVolumesScaleIO               `pulumi:"scaleIO"`
	Secret                *ThanosRulerSpecVolumesSecret                `pulumi:"secret"`
	Storageos             *ThanosRulerSpecVolumesStorageos             `pulumi:"storageos"`
	VsphereVolume         *ThanosRulerSpecVolumesVsphereVolume         `pulumi:"vsphereVolume"`
}

// ThanosRulerSpecVolumesInput is an input type that accepts ThanosRulerSpecVolumesArgs and ThanosRulerSpecVolumesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesInput` via:
//
//	ThanosRulerSpecVolumesArgs{...}
type ThanosRulerSpecVolumesInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesOutput() ThanosRulerSpecVolumesOutput
	ToThanosRulerSpecVolumesOutputWithContext(context.Context) ThanosRulerSpecVolumesOutput
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type ThanosRulerSpecVolumesArgs struct {
	AwsElasticBlockStore ThanosRulerSpecVolumesAwsElasticBlockStorePtrInput `pulumi:"awsElasticBlockStore"`
	AzureDisk            ThanosRulerSpecVolumesAzureDiskPtrInput            `pulumi:"azureDisk"`
	AzureFile            ThanosRulerSpecVolumesAzureFilePtrInput            `pulumi:"azureFile"`
	Cephfs               ThanosRulerSpecVolumesCephfsPtrInput               `pulumi:"cephfs"`
	Cinder               ThanosRulerSpecVolumesCinderPtrInput               `pulumi:"cinder"`
	ConfigMap            ThanosRulerSpecVolumesConfigMapPtrInput            `pulumi:"configMap"`
	Csi                  ThanosRulerSpecVolumesCsiPtrInput                  `pulumi:"csi"`
	DownwardAPI          ThanosRulerSpecVolumesDownwardAPIPtrInput          `pulumi:"downwardAPI"`
	EmptyDir             ThanosRulerSpecVolumesEmptyDirPtrInput             `pulumi:"emptyDir"`
	Ephemeral            ThanosRulerSpecVolumesEphemeralPtrInput            `pulumi:"ephemeral"`
	Fc                   ThanosRulerSpecVolumesFcPtrInput                   `pulumi:"fc"`
	FlexVolume           ThanosRulerSpecVolumesFlexVolumePtrInput           `pulumi:"flexVolume"`
	Flocker              ThanosRulerSpecVolumesFlockerPtrInput              `pulumi:"flocker"`
	GcePersistentDisk    ThanosRulerSpecVolumesGcePersistentDiskPtrInput    `pulumi:"gcePersistentDisk"`
	GitRepo              ThanosRulerSpecVolumesGitRepoPtrInput              `pulumi:"gitRepo"`
	Glusterfs            ThanosRulerSpecVolumesGlusterfsPtrInput            `pulumi:"glusterfs"`
	HostPath             ThanosRulerSpecVolumesHostPathPtrInput             `pulumi:"hostPath"`
	Image                ThanosRulerSpecVolumesImagePtrInput                `pulumi:"image"`
	Iscsi                ThanosRulerSpecVolumesIscsiPtrInput                `pulumi:"iscsi"`
	// name of the volume.
	// Must be a DNS_LABEL and unique within the pod.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name                  pulumi.StringPtrInput                               `pulumi:"name"`
	Nfs                   ThanosRulerSpecVolumesNfsPtrInput                   `pulumi:"nfs"`
	PersistentVolumeClaim ThanosRulerSpecVolumesPersistentVolumeClaimPtrInput `pulumi:"persistentVolumeClaim"`
	PhotonPersistentDisk  ThanosRulerSpecVolumesPhotonPersistentDiskPtrInput  `pulumi:"photonPersistentDisk"`
	PortworxVolume        ThanosRulerSpecVolumesPortworxVolumePtrInput        `pulumi:"portworxVolume"`
	Projected             ThanosRulerSpecVolumesProjectedPtrInput             `pulumi:"projected"`
	Quobyte               ThanosRulerSpecVolumesQuobytePtrInput               `pulumi:"quobyte"`
	Rbd                   ThanosRulerSpecVolumesRbdPtrInput                   `pulumi:"rbd"`
	ScaleIO               ThanosRulerSpecVolumesScaleIOPtrInput               `pulumi:"scaleIO"`
	Secret                ThanosRulerSpecVolumesSecretPtrInput                `pulumi:"secret"`
	Storageos             ThanosRulerSpecVolumesStorageosPtrInput             `pulumi:"storageos"`
	VsphereVolume         ThanosRulerSpecVolumesVsphereVolumePtrInput         `pulumi:"vsphereVolume"`
}

func (ThanosRulerSpecVolumesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumes)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesArgs) ToThanosRulerSpecVolumesOutput() ThanosRulerSpecVolumesOutput {
	return i.ToThanosRulerSpecVolumesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesArgs) ToThanosRulerSpecVolumesOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesOutput)
}

// ThanosRulerSpecVolumesArrayInput is an input type that accepts ThanosRulerSpecVolumesArray and ThanosRulerSpecVolumesArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesArrayInput` via:
//
//	ThanosRulerSpecVolumesArray{ ThanosRulerSpecVolumesArgs{...} }
type ThanosRulerSpecVolumesArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesArrayOutput() ThanosRulerSpecVolumesArrayOutput
	ToThanosRulerSpecVolumesArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesArrayOutput
}

type ThanosRulerSpecVolumesArray []ThanosRulerSpecVolumesInput

func (ThanosRulerSpecVolumesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumes)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesArray) ToThanosRulerSpecVolumesArrayOutput() ThanosRulerSpecVolumesArrayOutput {
	return i.ToThanosRulerSpecVolumesArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesArray) ToThanosRulerSpecVolumesArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesArrayOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type ThanosRulerSpecVolumesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumes)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesOutput) ToThanosRulerSpecVolumesOutput() ThanosRulerSpecVolumesOutput {
	return o
}

func (o ThanosRulerSpecVolumesOutput) ToThanosRulerSpecVolumesOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesOutput {
	return o
}

func (o ThanosRulerSpecVolumesOutput) AwsElasticBlockStore() ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesAwsElasticBlockStore {
		return v.AwsElasticBlockStore
	}).(ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) AzureDisk() ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesAzureDisk { return v.AzureDisk }).(ThanosRulerSpecVolumesAzureDiskPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) AzureFile() ThanosRulerSpecVolumesAzureFilePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesAzureFile { return v.AzureFile }).(ThanosRulerSpecVolumesAzureFilePtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Cephfs() ThanosRulerSpecVolumesCephfsPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesCephfs { return v.Cephfs }).(ThanosRulerSpecVolumesCephfsPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Cinder() ThanosRulerSpecVolumesCinderPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesCinder { return v.Cinder }).(ThanosRulerSpecVolumesCinderPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) ConfigMap() ThanosRulerSpecVolumesConfigMapPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesConfigMap { return v.ConfigMap }).(ThanosRulerSpecVolumesConfigMapPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Csi() ThanosRulerSpecVolumesCsiPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesCsi { return v.Csi }).(ThanosRulerSpecVolumesCsiPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) DownwardAPI() ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesDownwardAPI { return v.DownwardAPI }).(ThanosRulerSpecVolumesDownwardAPIPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) EmptyDir() ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesEmptyDir { return v.EmptyDir }).(ThanosRulerSpecVolumesEmptyDirPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Ephemeral() ThanosRulerSpecVolumesEphemeralPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesEphemeral { return v.Ephemeral }).(ThanosRulerSpecVolumesEphemeralPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Fc() ThanosRulerSpecVolumesFcPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesFc { return v.Fc }).(ThanosRulerSpecVolumesFcPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) FlexVolume() ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesFlexVolume { return v.FlexVolume }).(ThanosRulerSpecVolumesFlexVolumePtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Flocker() ThanosRulerSpecVolumesFlockerPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesFlocker { return v.Flocker }).(ThanosRulerSpecVolumesFlockerPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) GcePersistentDisk() ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesGcePersistentDisk { return v.GcePersistentDisk }).(ThanosRulerSpecVolumesGcePersistentDiskPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) GitRepo() ThanosRulerSpecVolumesGitRepoPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesGitRepo { return v.GitRepo }).(ThanosRulerSpecVolumesGitRepoPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Glusterfs() ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesGlusterfs { return v.Glusterfs }).(ThanosRulerSpecVolumesGlusterfsPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) HostPath() ThanosRulerSpecVolumesHostPathPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesHostPath { return v.HostPath }).(ThanosRulerSpecVolumesHostPathPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Image() ThanosRulerSpecVolumesImagePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesImage { return v.Image }).(ThanosRulerSpecVolumesImagePtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Iscsi() ThanosRulerSpecVolumesIscsiPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesIscsi { return v.Iscsi }).(ThanosRulerSpecVolumesIscsiPtrOutput)
}

// name of the volume.
// Must be a DNS_LABEL and unique within the pod.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Nfs() ThanosRulerSpecVolumesNfsPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesNfs { return v.Nfs }).(ThanosRulerSpecVolumesNfsPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) PersistentVolumeClaim() ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesPersistentVolumeClaim {
		return v.PersistentVolumeClaim
	}).(ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) PhotonPersistentDisk() ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesPhotonPersistentDisk {
		return v.PhotonPersistentDisk
	}).(ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) PortworxVolume() ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesPortworxVolume { return v.PortworxVolume }).(ThanosRulerSpecVolumesPortworxVolumePtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Projected() ThanosRulerSpecVolumesProjectedPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesProjected { return v.Projected }).(ThanosRulerSpecVolumesProjectedPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Quobyte() ThanosRulerSpecVolumesQuobytePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesQuobyte { return v.Quobyte }).(ThanosRulerSpecVolumesQuobytePtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Rbd() ThanosRulerSpecVolumesRbdPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesRbd { return v.Rbd }).(ThanosRulerSpecVolumesRbdPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) ScaleIO() ThanosRulerSpecVolumesScaleIOPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesScaleIO { return v.ScaleIO }).(ThanosRulerSpecVolumesScaleIOPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Secret() ThanosRulerSpecVolumesSecretPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesSecret { return v.Secret }).(ThanosRulerSpecVolumesSecretPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) Storageos() ThanosRulerSpecVolumesStorageosPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesStorageos { return v.Storageos }).(ThanosRulerSpecVolumesStorageosPtrOutput)
}

func (o ThanosRulerSpecVolumesOutput) VsphereVolume() ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumes) *ThanosRulerSpecVolumesVsphereVolume { return v.VsphereVolume }).(ThanosRulerSpecVolumesVsphereVolumePtrOutput)
}

type ThanosRulerSpecVolumesArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumes)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesArrayOutput) ToThanosRulerSpecVolumesArrayOutput() ThanosRulerSpecVolumesArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesArrayOutput) ToThanosRulerSpecVolumesArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumes {
		return vs[0].([]ThanosRulerSpecVolumes)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type ThanosRulerSpecVolumesAwsElasticBlockStore struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID *string `pulumi:"volumeID"`
}

// ThanosRulerSpecVolumesAwsElasticBlockStoreInput is an input type that accepts ThanosRulerSpecVolumesAwsElasticBlockStoreArgs and ThanosRulerSpecVolumesAwsElasticBlockStoreOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAwsElasticBlockStoreInput` via:
//
//	ThanosRulerSpecVolumesAwsElasticBlockStoreArgs{...}
type ThanosRulerSpecVolumesAwsElasticBlockStoreInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAwsElasticBlockStoreOutput() ThanosRulerSpecVolumesAwsElasticBlockStoreOutput
	ToThanosRulerSpecVolumesAwsElasticBlockStoreOutputWithContext(context.Context) ThanosRulerSpecVolumesAwsElasticBlockStoreOutput
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type ThanosRulerSpecVolumesAwsElasticBlockStoreArgs struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (ThanosRulerSpecVolumesAwsElasticBlockStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStoreArgs) ToThanosRulerSpecVolumesAwsElasticBlockStoreOutput() ThanosRulerSpecVolumesAwsElasticBlockStoreOutput {
	return i.ToThanosRulerSpecVolumesAwsElasticBlockStoreOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStoreArgs) ToThanosRulerSpecVolumesAwsElasticBlockStoreOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAwsElasticBlockStoreOutput)
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStoreArgs) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return i.ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStoreArgs) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAwsElasticBlockStoreOutput).ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesAwsElasticBlockStorePtrInput is an input type that accepts ThanosRulerSpecVolumesAwsElasticBlockStoreArgs, ThanosRulerSpecVolumesAwsElasticBlockStorePtr and ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAwsElasticBlockStorePtrInput` via:
//
//	        ThanosRulerSpecVolumesAwsElasticBlockStoreArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesAwsElasticBlockStorePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput
	ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput
}

type thanosRulerSpecVolumesAwsElasticBlockStorePtrType ThanosRulerSpecVolumesAwsElasticBlockStoreArgs

func ThanosRulerSpecVolumesAwsElasticBlockStorePtr(v *ThanosRulerSpecVolumesAwsElasticBlockStoreArgs) ThanosRulerSpecVolumesAwsElasticBlockStorePtrInput {
	return (*thanosRulerSpecVolumesAwsElasticBlockStorePtrType)(v)
}

func (*thanosRulerSpecVolumesAwsElasticBlockStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesAwsElasticBlockStorePtrType) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return i.ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesAwsElasticBlockStorePtrType) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type ThanosRulerSpecVolumesAwsElasticBlockStoreOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) ToThanosRulerSpecVolumesAwsElasticBlockStoreOutput() ThanosRulerSpecVolumesAwsElasticBlockStoreOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) ToThanosRulerSpecVolumesAwsElasticBlockStoreOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStoreOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o.ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesAwsElasticBlockStore) *ThanosRulerSpecVolumesAwsElasticBlockStore {
		return &v
	}).(ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStore) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStore) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStore) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStoreOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStore) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAwsElasticBlockStore)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) Elem() ThanosRulerSpecVolumesAwsElasticBlockStoreOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStore) ThanosRulerSpecVolumesAwsElasticBlockStore {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesAwsElasticBlockStore
		return ret
	}).(ThanosRulerSpecVolumesAwsElasticBlockStoreOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStore) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStore) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStore) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStore) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type ThanosRulerSpecVolumesAwsElasticBlockStorePatch struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition *int `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID *string `pulumi:"volumeID"`
}

// ThanosRulerSpecVolumesAwsElasticBlockStorePatchInput is an input type that accepts ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs and ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAwsElasticBlockStorePatchInput` via:
//
//	ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs{...}
type ThanosRulerSpecVolumesAwsElasticBlockStorePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput
	ToThanosRulerSpecVolumesAwsElasticBlockStorePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// readOnly value true will force the readOnly setting in VolumeMounts.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStorePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput {
	return i.ToThanosRulerSpecVolumesAwsElasticBlockStorePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput)
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput).ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs, ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtr and ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput
	ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput
}

type thanosRulerSpecVolumesAwsElasticBlockStorePatchPtrType ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs

func ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtr(v *ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs) ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrInput {
	return (*thanosRulerSpecVolumesAwsElasticBlockStorePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesAwsElasticBlockStorePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAwsElasticBlockStorePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesAwsElasticBlockStorePatchPtrType) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesAwsElasticBlockStorePatchPtrType) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput)
}

// awsElasticBlockStore represents an AWS Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: AWSElasticBlockStore is deprecated. All operations for the in-tree
// awsElasticBlockStore type are redirected to the ebs.csi.aws.com CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
type ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStorePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *ThanosRulerSpecVolumesAwsElasticBlockStorePatch {
		return &v
	}).(ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAwsElasticBlockStorePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput() ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) ToThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) Elem() ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStorePatch) ThanosRulerSpecVolumesAwsElasticBlockStorePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesAwsElasticBlockStorePatch
		return ret
	}).(ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// readOnly value true will force the readOnly setting in VolumeMounts.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID is unique ID of the persistent disk resource in AWS (Amazon EBS volume).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
func (o ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAwsElasticBlockStorePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
// are redirected to the disk.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureDisk struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName *string `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI *string `pulumi:"diskURI"`
	// fsType is Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesAzureDiskInput is an input type that accepts ThanosRulerSpecVolumesAzureDiskArgs and ThanosRulerSpecVolumesAzureDiskOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureDiskInput` via:
//
//	ThanosRulerSpecVolumesAzureDiskArgs{...}
type ThanosRulerSpecVolumesAzureDiskInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureDiskOutput() ThanosRulerSpecVolumesAzureDiskOutput
	ToThanosRulerSpecVolumesAzureDiskOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureDiskOutput
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
// are redirected to the disk.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureDiskArgs struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode pulumi.StringPtrInput `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI pulumi.StringPtrInput `pulumi:"diskURI"`
	// fsType is Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesAzureDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureDisk)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesAzureDiskArgs) ToThanosRulerSpecVolumesAzureDiskOutput() ThanosRulerSpecVolumesAzureDiskOutput {
	return i.ToThanosRulerSpecVolumesAzureDiskOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureDiskArgs) ToThanosRulerSpecVolumesAzureDiskOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureDiskOutput)
}

func (i ThanosRulerSpecVolumesAzureDiskArgs) ToThanosRulerSpecVolumesAzureDiskPtrOutput() ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return i.ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureDiskArgs) ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureDiskOutput).ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesAzureDiskPtrInput is an input type that accepts ThanosRulerSpecVolumesAzureDiskArgs, ThanosRulerSpecVolumesAzureDiskPtr and ThanosRulerSpecVolumesAzureDiskPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureDiskPtrInput` via:
//
//	        ThanosRulerSpecVolumesAzureDiskArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesAzureDiskPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureDiskPtrOutput() ThanosRulerSpecVolumesAzureDiskPtrOutput
	ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureDiskPtrOutput
}

type thanosRulerSpecVolumesAzureDiskPtrType ThanosRulerSpecVolumesAzureDiskArgs

func ThanosRulerSpecVolumesAzureDiskPtr(v *ThanosRulerSpecVolumesAzureDiskArgs) ThanosRulerSpecVolumesAzureDiskPtrInput {
	return (*thanosRulerSpecVolumesAzureDiskPtrType)(v)
}

func (*thanosRulerSpecVolumesAzureDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureDisk)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesAzureDiskPtrType) ToThanosRulerSpecVolumesAzureDiskPtrOutput() ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return i.ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesAzureDiskPtrType) ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureDiskPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
// are redirected to the disk.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureDiskOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureDisk)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureDiskOutput) ToThanosRulerSpecVolumesAzureDiskOutput() ThanosRulerSpecVolumesAzureDiskOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskOutput) ToThanosRulerSpecVolumesAzureDiskOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskOutput) ToThanosRulerSpecVolumesAzureDiskPtrOutput() ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return o.ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesAzureDiskOutput) ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesAzureDisk) *ThanosRulerSpecVolumesAzureDisk {
		return &v
	}).(ThanosRulerSpecVolumesAzureDiskPtrOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o ThanosRulerSpecVolumesAzureDiskOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDisk) *string { return v.CachingMode }).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDisk) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDisk) *string { return v.DiskURI }).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesAzureDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o ThanosRulerSpecVolumesAzureDiskOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDisk) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureDiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDisk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesAzureDiskPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureDisk)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) ToThanosRulerSpecVolumesAzureDiskPtrOutput() ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) ToThanosRulerSpecVolumesAzureDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) Elem() ThanosRulerSpecVolumesAzureDiskOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDisk) ThanosRulerSpecVolumesAzureDisk {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesAzureDisk
		return ret
	}).(ThanosRulerSpecVolumesAzureDiskOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.CachingMode
	}).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskName
	}).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.DiskURI
	}).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDisk) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureDiskPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDisk) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
// are redirected to the disk.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureDiskPatch struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode *string `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName *string `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI *string `pulumi:"diskURI"`
	// fsType is Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind *string `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesAzureDiskPatchInput is an input type that accepts ThanosRulerSpecVolumesAzureDiskPatchArgs and ThanosRulerSpecVolumesAzureDiskPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureDiskPatchInput` via:
//
//	ThanosRulerSpecVolumesAzureDiskPatchArgs{...}
type ThanosRulerSpecVolumesAzureDiskPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureDiskPatchOutput() ThanosRulerSpecVolumesAzureDiskPatchOutput
	ToThanosRulerSpecVolumesAzureDiskPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureDiskPatchOutput
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
// are redirected to the disk.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureDiskPatchArgs struct {
	// cachingMode is the Host Caching mode: None, Read Only, Read Write.
	CachingMode pulumi.StringPtrInput `pulumi:"cachingMode"`
	// diskName is the Name of the data disk in the blob storage
	DiskName pulumi.StringPtrInput `pulumi:"diskName"`
	// diskURI is the URI of data disk in the blob storage
	DiskURI pulumi.StringPtrInput `pulumi:"diskURI"`
	// fsType is Filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesAzureDiskPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureDiskPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesAzureDiskPatchArgs) ToThanosRulerSpecVolumesAzureDiskPatchOutput() ThanosRulerSpecVolumesAzureDiskPatchOutput {
	return i.ToThanosRulerSpecVolumesAzureDiskPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureDiskPatchArgs) ToThanosRulerSpecVolumesAzureDiskPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureDiskPatchOutput)
}

func (i ThanosRulerSpecVolumesAzureDiskPatchArgs) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutput() ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureDiskPatchArgs) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureDiskPatchOutput).ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesAzureDiskPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesAzureDiskPatchArgs, ThanosRulerSpecVolumesAzureDiskPatchPtr and ThanosRulerSpecVolumesAzureDiskPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureDiskPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesAzureDiskPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesAzureDiskPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureDiskPatchPtrOutput() ThanosRulerSpecVolumesAzureDiskPatchPtrOutput
	ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureDiskPatchPtrOutput
}

type thanosRulerSpecVolumesAzureDiskPatchPtrType ThanosRulerSpecVolumesAzureDiskPatchArgs

func ThanosRulerSpecVolumesAzureDiskPatchPtr(v *ThanosRulerSpecVolumesAzureDiskPatchArgs) ThanosRulerSpecVolumesAzureDiskPatchPtrInput {
	return (*thanosRulerSpecVolumesAzureDiskPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesAzureDiskPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureDiskPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesAzureDiskPatchPtrType) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutput() ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesAzureDiskPatchPtrType) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureDiskPatchPtrOutput)
}

// azureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
// Deprecated: AzureDisk is deprecated. All operations for the in-tree azureDisk type
// are redirected to the disk.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureDiskPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureDiskPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureDiskPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) ToThanosRulerSpecVolumesAzureDiskPatchOutput() ThanosRulerSpecVolumesAzureDiskPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) ToThanosRulerSpecVolumesAzureDiskPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutput() ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesAzureDiskPatch) *ThanosRulerSpecVolumesAzureDiskPatch {
		return &v
	}).(ThanosRulerSpecVolumesAzureDiskPatchPtrOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDiskPatch) *string { return v.CachingMode }).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDiskPatch) *string { return v.DiskName }).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDiskPatch) *string { return v.DiskURI }).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDiskPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDiskPatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureDiskPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureDiskPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesAzureDiskPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureDiskPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutput() ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) ToThanosRulerSpecVolumesAzureDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) Elem() ThanosRulerSpecVolumesAzureDiskPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDiskPatch) ThanosRulerSpecVolumesAzureDiskPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesAzureDiskPatch
		return ret
	}).(ThanosRulerSpecVolumesAzureDiskPatchOutput)
}

// cachingMode is the Host Caching mode: None, Read Only, Read Write.
func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) CachingMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.CachingMode
	}).(pulumi.StringPtrOutput)
}

// diskName is the Name of the data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) DiskName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.DiskName
	}).(pulumi.StringPtrOutput)
}

// diskURI is the URI of data disk in the blob storage
func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) DiskURI() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.DiskURI
	}).(pulumi.StringPtrOutput)
}

// fsType is Filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// kind expected values are Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureDiskPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureDiskPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
// are redirected to the file.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureFile struct {
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName *string `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName *string `pulumi:"shareName"`
}

// ThanosRulerSpecVolumesAzureFileInput is an input type that accepts ThanosRulerSpecVolumesAzureFileArgs and ThanosRulerSpecVolumesAzureFileOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureFileInput` via:
//
//	ThanosRulerSpecVolumesAzureFileArgs{...}
type ThanosRulerSpecVolumesAzureFileInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureFileOutput() ThanosRulerSpecVolumesAzureFileOutput
	ToThanosRulerSpecVolumesAzureFileOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureFileOutput
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
// are redirected to the file.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureFileArgs struct {
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
}

func (ThanosRulerSpecVolumesAzureFileArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureFile)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesAzureFileArgs) ToThanosRulerSpecVolumesAzureFileOutput() ThanosRulerSpecVolumesAzureFileOutput {
	return i.ToThanosRulerSpecVolumesAzureFileOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureFileArgs) ToThanosRulerSpecVolumesAzureFileOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFileOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureFileOutput)
}

func (i ThanosRulerSpecVolumesAzureFileArgs) ToThanosRulerSpecVolumesAzureFilePtrOutput() ThanosRulerSpecVolumesAzureFilePtrOutput {
	return i.ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureFileArgs) ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureFileOutput).ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesAzureFilePtrInput is an input type that accepts ThanosRulerSpecVolumesAzureFileArgs, ThanosRulerSpecVolumesAzureFilePtr and ThanosRulerSpecVolumesAzureFilePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureFilePtrInput` via:
//
//	        ThanosRulerSpecVolumesAzureFileArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesAzureFilePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureFilePtrOutput() ThanosRulerSpecVolumesAzureFilePtrOutput
	ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureFilePtrOutput
}

type thanosRulerSpecVolumesAzureFilePtrType ThanosRulerSpecVolumesAzureFileArgs

func ThanosRulerSpecVolumesAzureFilePtr(v *ThanosRulerSpecVolumesAzureFileArgs) ThanosRulerSpecVolumesAzureFilePtrInput {
	return (*thanosRulerSpecVolumesAzureFilePtrType)(v)
}

func (*thanosRulerSpecVolumesAzureFilePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureFile)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesAzureFilePtrType) ToThanosRulerSpecVolumesAzureFilePtrOutput() ThanosRulerSpecVolumesAzureFilePtrOutput {
	return i.ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesAzureFilePtrType) ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureFilePtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
// are redirected to the file.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureFileOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureFileOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureFile)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureFileOutput) ToThanosRulerSpecVolumesAzureFileOutput() ThanosRulerSpecVolumesAzureFileOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFileOutput) ToThanosRulerSpecVolumesAzureFileOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFileOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFileOutput) ToThanosRulerSpecVolumesAzureFilePtrOutput() ThanosRulerSpecVolumesAzureFilePtrOutput {
	return o.ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesAzureFileOutput) ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesAzureFile) *ThanosRulerSpecVolumesAzureFile {
		return &v
	}).(ThanosRulerSpecVolumesAzureFilePtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureFileOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureFile) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o ThanosRulerSpecVolumesAzureFileOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureFile) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o ThanosRulerSpecVolumesAzureFileOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureFile) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesAzureFilePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureFilePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureFile)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureFilePtrOutput) ToThanosRulerSpecVolumesAzureFilePtrOutput() ThanosRulerSpecVolumesAzureFilePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFilePtrOutput) ToThanosRulerSpecVolumesAzureFilePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFilePtrOutput) Elem() ThanosRulerSpecVolumesAzureFileOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFile) ThanosRulerSpecVolumesAzureFile {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesAzureFile
		return ret
	}).(ThanosRulerSpecVolumesAzureFileOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureFilePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFile) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o ThanosRulerSpecVolumesAzureFilePtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFile) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o ThanosRulerSpecVolumesAzureFilePtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFile) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
// are redirected to the file.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureFilePatch struct {
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName *string `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName *string `pulumi:"shareName"`
}

// ThanosRulerSpecVolumesAzureFilePatchInput is an input type that accepts ThanosRulerSpecVolumesAzureFilePatchArgs and ThanosRulerSpecVolumesAzureFilePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureFilePatchInput` via:
//
//	ThanosRulerSpecVolumesAzureFilePatchArgs{...}
type ThanosRulerSpecVolumesAzureFilePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureFilePatchOutput() ThanosRulerSpecVolumesAzureFilePatchOutput
	ToThanosRulerSpecVolumesAzureFilePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureFilePatchOutput
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
// are redirected to the file.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureFilePatchArgs struct {
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretName is the  name of secret that contains Azure Storage Account Name and Key
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
	// shareName is the azure share Name
	ShareName pulumi.StringPtrInput `pulumi:"shareName"`
}

func (ThanosRulerSpecVolumesAzureFilePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureFilePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesAzureFilePatchArgs) ToThanosRulerSpecVolumesAzureFilePatchOutput() ThanosRulerSpecVolumesAzureFilePatchOutput {
	return i.ToThanosRulerSpecVolumesAzureFilePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureFilePatchArgs) ToThanosRulerSpecVolumesAzureFilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureFilePatchOutput)
}

func (i ThanosRulerSpecVolumesAzureFilePatchArgs) ToThanosRulerSpecVolumesAzureFilePatchPtrOutput() ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesAzureFilePatchArgs) ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureFilePatchOutput).ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesAzureFilePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesAzureFilePatchArgs, ThanosRulerSpecVolumesAzureFilePatchPtr and ThanosRulerSpecVolumesAzureFilePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesAzureFilePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesAzureFilePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesAzureFilePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesAzureFilePatchPtrOutput() ThanosRulerSpecVolumesAzureFilePatchPtrOutput
	ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesAzureFilePatchPtrOutput
}

type thanosRulerSpecVolumesAzureFilePatchPtrType ThanosRulerSpecVolumesAzureFilePatchArgs

func ThanosRulerSpecVolumesAzureFilePatchPtr(v *ThanosRulerSpecVolumesAzureFilePatchArgs) ThanosRulerSpecVolumesAzureFilePatchPtrInput {
	return (*thanosRulerSpecVolumesAzureFilePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesAzureFilePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureFilePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesAzureFilePatchPtrType) ToThanosRulerSpecVolumesAzureFilePatchPtrOutput() ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesAzureFilePatchPtrType) ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesAzureFilePatchPtrOutput)
}

// azureFile represents an Azure File Service mount on the host and bind mount to the pod.
// Deprecated: AzureFile is deprecated. All operations for the in-tree azureFile type
// are redirected to the file.csi.azure.com CSI driver.
type ThanosRulerSpecVolumesAzureFilePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureFilePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesAzureFilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureFilePatchOutput) ToThanosRulerSpecVolumesAzureFilePatchOutput() ThanosRulerSpecVolumesAzureFilePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFilePatchOutput) ToThanosRulerSpecVolumesAzureFilePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFilePatchOutput) ToThanosRulerSpecVolumesAzureFilePatchPtrOutput() ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesAzureFilePatchOutput) ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesAzureFilePatch) *ThanosRulerSpecVolumesAzureFilePatch {
		return &v
	}).(ThanosRulerSpecVolumesAzureFilePatchPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureFilePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureFilePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o ThanosRulerSpecVolumesAzureFilePatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureFilePatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o ThanosRulerSpecVolumesAzureFilePatchOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesAzureFilePatch) *string { return v.ShareName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesAzureFilePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesAzureFilePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesAzureFilePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesAzureFilePatchPtrOutput) ToThanosRulerSpecVolumesAzureFilePatchPtrOutput() ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFilePatchPtrOutput) ToThanosRulerSpecVolumesAzureFilePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesAzureFilePatchPtrOutput) Elem() ThanosRulerSpecVolumesAzureFilePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFilePatch) ThanosRulerSpecVolumesAzureFilePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesAzureFilePatch
		return ret
	}).(ThanosRulerSpecVolumesAzureFilePatchOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesAzureFilePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFilePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretName is the  name of secret that contains Azure Storage Account Name and Key
func (o ThanosRulerSpecVolumesAzureFilePatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFilePatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// shareName is the azure share Name
func (o ThanosRulerSpecVolumesAzureFilePatchPtrOutput) ShareName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesAzureFilePatch) *string {
		if v == nil {
			return nil
		}
		return v.ShareName
	}).(pulumi.StringPtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
type ThanosRulerSpecVolumesCephfs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string                                `pulumi:"secretFile"`
	SecretRef  *ThanosRulerSpecVolumesCephfsSecretRef `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// ThanosRulerSpecVolumesCephfsInput is an input type that accepts ThanosRulerSpecVolumesCephfsArgs and ThanosRulerSpecVolumesCephfsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsInput` via:
//
//	ThanosRulerSpecVolumesCephfsArgs{...}
type ThanosRulerSpecVolumesCephfsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsOutput() ThanosRulerSpecVolumesCephfsOutput
	ToThanosRulerSpecVolumesCephfsOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsOutput
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
type ThanosRulerSpecVolumesCephfsArgs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput                         `pulumi:"secretFile"`
	SecretRef  ThanosRulerSpecVolumesCephfsSecretRefPtrInput `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecVolumesCephfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfs)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCephfsArgs) ToThanosRulerSpecVolumesCephfsOutput() ThanosRulerSpecVolumesCephfsOutput {
	return i.ToThanosRulerSpecVolumesCephfsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsArgs) ToThanosRulerSpecVolumesCephfsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsOutput)
}

func (i ThanosRulerSpecVolumesCephfsArgs) ToThanosRulerSpecVolumesCephfsPtrOutput() ThanosRulerSpecVolumesCephfsPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsArgs) ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsOutput).ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCephfsPtrInput is an input type that accepts ThanosRulerSpecVolumesCephfsArgs, ThanosRulerSpecVolumesCephfsPtr and ThanosRulerSpecVolumesCephfsPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsPtrInput` via:
//
//	        ThanosRulerSpecVolumesCephfsArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCephfsPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsPtrOutput() ThanosRulerSpecVolumesCephfsPtrOutput
	ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsPtrOutput
}

type thanosRulerSpecVolumesCephfsPtrType ThanosRulerSpecVolumesCephfsArgs

func ThanosRulerSpecVolumesCephfsPtr(v *ThanosRulerSpecVolumesCephfsArgs) ThanosRulerSpecVolumesCephfsPtrInput {
	return (*thanosRulerSpecVolumesCephfsPtrType)(v)
}

func (*thanosRulerSpecVolumesCephfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfs)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCephfsPtrType) ToThanosRulerSpecVolumesCephfsPtrOutput() ThanosRulerSpecVolumesCephfsPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCephfsPtrType) ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsPtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
type ThanosRulerSpecVolumesCephfsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfs)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsOutput) ToThanosRulerSpecVolumesCephfsOutput() ThanosRulerSpecVolumesCephfsOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsOutput) ToThanosRulerSpecVolumesCephfsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsOutput) ToThanosRulerSpecVolumesCephfsPtrOutput() ThanosRulerSpecVolumesCephfsPtrOutput {
	return o.ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCephfsOutput) ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCephfs) *ThanosRulerSpecVolumesCephfs {
		return &v
	}).(ThanosRulerSpecVolumesCephfsPtrOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfs) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o ThanosRulerSpecVolumesCephfsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfs) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfs) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCephfsOutput) SecretRef() ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfs) *ThanosRulerSpecVolumesCephfsSecretRef { return v.SecretRef }).(ThanosRulerSpecVolumesCephfsSecretRefPtrOutput)
}

// user is optional: User is the rados user name, default is admin
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfs) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCephfsPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfs)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsPtrOutput) ToThanosRulerSpecVolumesCephfsPtrOutput() ThanosRulerSpecVolumesCephfsPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsPtrOutput) ToThanosRulerSpecVolumesCephfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsPtrOutput) Elem() ThanosRulerSpecVolumesCephfsOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfs) ThanosRulerSpecVolumesCephfs {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCephfs
		return ret
	}).(ThanosRulerSpecVolumesCephfsOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfs) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o ThanosRulerSpecVolumesCephfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfs) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfs) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCephfsPtrOutput) SecretRef() ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfs) *ThanosRulerSpecVolumesCephfsSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesCephfsSecretRefPtrOutput)
}

// user is optional: User is the rados user name, default is admin
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfs) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
type ThanosRulerSpecVolumesCephfsPatch struct {
	// monitors is Required: Monitors is a collection of Ceph monitors
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path *string `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly *bool `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile *string                                     `pulumi:"secretFile"`
	SecretRef  *ThanosRulerSpecVolumesCephfsSecretRefPatch `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// ThanosRulerSpecVolumesCephfsPatchInput is an input type that accepts ThanosRulerSpecVolumesCephfsPatchArgs and ThanosRulerSpecVolumesCephfsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsPatchInput` via:
//
//	ThanosRulerSpecVolumesCephfsPatchArgs{...}
type ThanosRulerSpecVolumesCephfsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsPatchOutput() ThanosRulerSpecVolumesCephfsPatchOutput
	ToThanosRulerSpecVolumesCephfsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsPatchOutput
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
type ThanosRulerSpecVolumesCephfsPatchArgs struct {
	// monitors is Required: Monitors is a collection of Ceph monitors
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	SecretFile pulumi.StringPtrInput                              `pulumi:"secretFile"`
	SecretRef  ThanosRulerSpecVolumesCephfsSecretRefPatchPtrInput `pulumi:"secretRef"`
	// user is optional: User is the rados user name, default is admin
	// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecVolumesCephfsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCephfsPatchArgs) ToThanosRulerSpecVolumesCephfsPatchOutput() ThanosRulerSpecVolumesCephfsPatchOutput {
	return i.ToThanosRulerSpecVolumesCephfsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsPatchArgs) ToThanosRulerSpecVolumesCephfsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsPatchOutput)
}

func (i ThanosRulerSpecVolumesCephfsPatchArgs) ToThanosRulerSpecVolumesCephfsPatchPtrOutput() ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsPatchArgs) ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsPatchOutput).ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCephfsPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesCephfsPatchArgs, ThanosRulerSpecVolumesCephfsPatchPtr and ThanosRulerSpecVolumesCephfsPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesCephfsPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCephfsPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsPatchPtrOutput() ThanosRulerSpecVolumesCephfsPatchPtrOutput
	ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsPatchPtrOutput
}

type thanosRulerSpecVolumesCephfsPatchPtrType ThanosRulerSpecVolumesCephfsPatchArgs

func ThanosRulerSpecVolumesCephfsPatchPtr(v *ThanosRulerSpecVolumesCephfsPatchArgs) ThanosRulerSpecVolumesCephfsPatchPtrInput {
	return (*thanosRulerSpecVolumesCephfsPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesCephfsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfsPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCephfsPatchPtrType) ToThanosRulerSpecVolumesCephfsPatchPtrOutput() ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCephfsPatchPtrType) ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsPatchPtrOutput)
}

// cephFS represents a Ceph FS mount on the host that shares a pod's lifetime.
// Deprecated: CephFS is deprecated and the in-tree cephfs type is no longer supported.
type ThanosRulerSpecVolumesCephfsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsPatchOutput) ToThanosRulerSpecVolumesCephfsPatchOutput() ThanosRulerSpecVolumesCephfsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsPatchOutput) ToThanosRulerSpecVolumesCephfsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsPatchOutput) ToThanosRulerSpecVolumesCephfsPatchPtrOutput() ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCephfsPatchOutput) ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCephfsPatch) *ThanosRulerSpecVolumesCephfsPatch {
		return &v
	}).(ThanosRulerSpecVolumesCephfsPatchPtrOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsPatch) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o ThanosRulerSpecVolumesCephfsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsPatch) *string { return v.SecretFile }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCephfsPatchOutput) SecretRef() ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsPatch) *ThanosRulerSpecVolumesCephfsSecretRefPatch {
		return v.SecretRef
	}).(ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput)
}

// user is optional: User is the rados user name, default is admin
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsPatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCephfsPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) ToThanosRulerSpecVolumesCephfsPatchPtrOutput() ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) ToThanosRulerSpecVolumesCephfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) Elem() ThanosRulerSpecVolumesCephfsPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsPatch) ThanosRulerSpecVolumesCephfsPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCephfsPatch
		return ret
	}).(ThanosRulerSpecVolumesCephfsPatchOutput)
}

// monitors is Required: Monitors is a collection of Ceph monitors
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsPatch) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// path is Optional: Used as the mounted root, rather than the full Ceph tree, default is /
func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// secretFile is Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) SecretFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsPatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretFile
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) SecretRef() ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsPatch) *ThanosRulerSpecVolumesCephfsSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput)
}

// user is optional: User is the rados user name, default is admin
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesCephfsPatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsPatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type ThanosRulerSpecVolumesCephfsSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesCephfsSecretRefInput is an input type that accepts ThanosRulerSpecVolumesCephfsSecretRefArgs and ThanosRulerSpecVolumesCephfsSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsSecretRefInput` via:
//
//	ThanosRulerSpecVolumesCephfsSecretRefArgs{...}
type ThanosRulerSpecVolumesCephfsSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsSecretRefOutput() ThanosRulerSpecVolumesCephfsSecretRefOutput
	ToThanosRulerSpecVolumesCephfsSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsSecretRefOutput
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type ThanosRulerSpecVolumesCephfsSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesCephfsSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCephfsSecretRefArgs) ToThanosRulerSpecVolumesCephfsSecretRefOutput() ThanosRulerSpecVolumesCephfsSecretRefOutput {
	return i.ToThanosRulerSpecVolumesCephfsSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsSecretRefArgs) ToThanosRulerSpecVolumesCephfsSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsSecretRefOutput)
}

func (i ThanosRulerSpecVolumesCephfsSecretRefArgs) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsSecretRefArgs) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsSecretRefOutput).ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCephfsSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesCephfsSecretRefArgs, ThanosRulerSpecVolumesCephfsSecretRefPtr and ThanosRulerSpecVolumesCephfsSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesCephfsSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCephfsSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsSecretRefPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPtrOutput
	ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsSecretRefPtrOutput
}

type thanosRulerSpecVolumesCephfsSecretRefPtrType ThanosRulerSpecVolumesCephfsSecretRefArgs

func ThanosRulerSpecVolumesCephfsSecretRefPtr(v *ThanosRulerSpecVolumesCephfsSecretRefArgs) ThanosRulerSpecVolumesCephfsSecretRefPtrInput {
	return (*thanosRulerSpecVolumesCephfsSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesCephfsSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCephfsSecretRefPtrType) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCephfsSecretRefPtrType) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsSecretRefPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type ThanosRulerSpecVolumesCephfsSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsSecretRefOutput) ToThanosRulerSpecVolumesCephfsSecretRefOutput() ThanosRulerSpecVolumesCephfsSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefOutput) ToThanosRulerSpecVolumesCephfsSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefOutput) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCephfsSecretRefOutput) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCephfsSecretRef) *ThanosRulerSpecVolumesCephfsSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesCephfsSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCephfsSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCephfsSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfsSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPtrOutput) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPtrOutput) ToThanosRulerSpecVolumesCephfsSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesCephfsSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsSecretRef) ThanosRulerSpecVolumesCephfsSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCephfsSecretRef
		return ret
	}).(ThanosRulerSpecVolumesCephfsSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCephfsSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type ThanosRulerSpecVolumesCephfsSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesCephfsSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesCephfsSecretRefPatchArgs and ThanosRulerSpecVolumesCephfsSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesCephfsSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesCephfsSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsSecretRefPatchOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchOutput
	ToThanosRulerSpecVolumesCephfsSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchOutput
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type ThanosRulerSpecVolumesCephfsSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesCephfsSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCephfsSecretRefPatchArgs) ToThanosRulerSpecVolumesCephfsSecretRefPatchOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesCephfsSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsSecretRefPatchArgs) ToThanosRulerSpecVolumesCephfsSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesCephfsSecretRefPatchArgs) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCephfsSecretRefPatchArgs) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsSecretRefPatchOutput).ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCephfsSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesCephfsSecretRefPatchArgs, ThanosRulerSpecVolumesCephfsSecretRefPatchPtr and ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCephfsSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesCephfsSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCephfsSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesCephfsSecretRefPatchPtrType ThanosRulerSpecVolumesCephfsSecretRefPatchArgs

func ThanosRulerSpecVolumesCephfsSecretRefPatchPtr(v *ThanosRulerSpecVolumesCephfsSecretRefPatchArgs) ThanosRulerSpecVolumesCephfsSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesCephfsSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesCephfsSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfsSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCephfsSecretRefPatchPtrType) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCephfsSecretRefPatchPtrType) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput)
}

// secretRef is Optional: SecretRef is reference to the authentication secret for User, default is empty.
// More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
type ThanosRulerSpecVolumesCephfsSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPatchOutput) ToThanosRulerSpecVolumesCephfsSecretRefPatchOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPatchOutput) ToThanosRulerSpecVolumesCephfsSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPatchOutput) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPatchOutput) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCephfsSecretRefPatch) *ThanosRulerSpecVolumesCephfsSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCephfsSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCephfsSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCephfsSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesCephfsSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsSecretRefPatch) ThanosRulerSpecVolumesCephfsSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCephfsSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesCephfsSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCephfsSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine.
// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
// are redirected to the cinder.csi.openstack.org CSI driver.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type ThanosRulerSpecVolumesCinder struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly  *bool                                  `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesCinderSecretRef `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID *string `pulumi:"volumeID"`
}

// ThanosRulerSpecVolumesCinderInput is an input type that accepts ThanosRulerSpecVolumesCinderArgs and ThanosRulerSpecVolumesCinderOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderInput` via:
//
//	ThanosRulerSpecVolumesCinderArgs{...}
type ThanosRulerSpecVolumesCinderInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderOutput() ThanosRulerSpecVolumesCinderOutput
	ToThanosRulerSpecVolumesCinderOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderOutput
}

// cinder represents a cinder volume attached and mounted on kubelets host machine.
// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
// are redirected to the cinder.csi.openstack.org CSI driver.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type ThanosRulerSpecVolumesCinderArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly  pulumi.BoolPtrInput                           `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesCinderSecretRefPtrInput `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (ThanosRulerSpecVolumesCinderArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinder)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCinderArgs) ToThanosRulerSpecVolumesCinderOutput() ThanosRulerSpecVolumesCinderOutput {
	return i.ToThanosRulerSpecVolumesCinderOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderArgs) ToThanosRulerSpecVolumesCinderOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderOutput)
}

func (i ThanosRulerSpecVolumesCinderArgs) ToThanosRulerSpecVolumesCinderPtrOutput() ThanosRulerSpecVolumesCinderPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderArgs) ToThanosRulerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderOutput).ToThanosRulerSpecVolumesCinderPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCinderPtrInput is an input type that accepts ThanosRulerSpecVolumesCinderArgs, ThanosRulerSpecVolumesCinderPtr and ThanosRulerSpecVolumesCinderPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderPtrInput` via:
//
//	        ThanosRulerSpecVolumesCinderArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCinderPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderPtrOutput() ThanosRulerSpecVolumesCinderPtrOutput
	ToThanosRulerSpecVolumesCinderPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderPtrOutput
}

type thanosRulerSpecVolumesCinderPtrType ThanosRulerSpecVolumesCinderArgs

func ThanosRulerSpecVolumesCinderPtr(v *ThanosRulerSpecVolumesCinderArgs) ThanosRulerSpecVolumesCinderPtrInput {
	return (*thanosRulerSpecVolumesCinderPtrType)(v)
}

func (*thanosRulerSpecVolumesCinderPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinder)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCinderPtrType) ToThanosRulerSpecVolumesCinderPtrOutput() ThanosRulerSpecVolumesCinderPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCinderPtrType) ToThanosRulerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine.
// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
// are redirected to the cinder.csi.openstack.org CSI driver.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type ThanosRulerSpecVolumesCinderOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinder)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderOutput) ToThanosRulerSpecVolumesCinderOutput() ThanosRulerSpecVolumesCinderOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderOutput) ToThanosRulerSpecVolumesCinderOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderOutput) ToThanosRulerSpecVolumesCinderPtrOutput() ThanosRulerSpecVolumesCinderPtrOutput {
	return o.ToThanosRulerSpecVolumesCinderPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCinderOutput) ToThanosRulerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCinder) *ThanosRulerSpecVolumesCinder {
		return &v
	}).(ThanosRulerSpecVolumesCinderPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinder) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinder) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesCinderOutput) SecretRef() ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinder) *ThanosRulerSpecVolumesCinderSecretRef { return v.SecretRef }).(ThanosRulerSpecVolumesCinderSecretRefPtrOutput)
}

// volumeID used to identify the volume in cinder.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinder) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCinderPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinder)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderPtrOutput) ToThanosRulerSpecVolumesCinderPtrOutput() ThanosRulerSpecVolumesCinderPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderPtrOutput) ToThanosRulerSpecVolumesCinderPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderPtrOutput) Elem() ThanosRulerSpecVolumesCinderOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinder) ThanosRulerSpecVolumesCinder {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCinder
		return ret
	}).(ThanosRulerSpecVolumesCinderOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinder) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinder) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesCinderPtrOutput) SecretRef() ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinder) *ThanosRulerSpecVolumesCinderSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesCinderSecretRefPtrOutput)
}

// volumeID used to identify the volume in cinder.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinder) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine.
// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
// are redirected to the cinder.csi.openstack.org CSI driver.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type ThanosRulerSpecVolumesCinderPatch struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly  *bool                                       `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesCinderSecretRefPatch `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID *string `pulumi:"volumeID"`
}

// ThanosRulerSpecVolumesCinderPatchInput is an input type that accepts ThanosRulerSpecVolumesCinderPatchArgs and ThanosRulerSpecVolumesCinderPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderPatchInput` via:
//
//	ThanosRulerSpecVolumesCinderPatchArgs{...}
type ThanosRulerSpecVolumesCinderPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderPatchOutput() ThanosRulerSpecVolumesCinderPatchOutput
	ToThanosRulerSpecVolumesCinderPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderPatchOutput
}

// cinder represents a cinder volume attached and mounted on kubelets host machine.
// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
// are redirected to the cinder.csi.openstack.org CSI driver.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type ThanosRulerSpecVolumesCinderPatchArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	ReadOnly  pulumi.BoolPtrInput                                `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesCinderSecretRefPatchPtrInput `pulumi:"secretRef"`
	// volumeID used to identify the volume in cinder.
	// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (ThanosRulerSpecVolumesCinderPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinderPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCinderPatchArgs) ToThanosRulerSpecVolumesCinderPatchOutput() ThanosRulerSpecVolumesCinderPatchOutput {
	return i.ToThanosRulerSpecVolumesCinderPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderPatchArgs) ToThanosRulerSpecVolumesCinderPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderPatchOutput)
}

func (i ThanosRulerSpecVolumesCinderPatchArgs) ToThanosRulerSpecVolumesCinderPatchPtrOutput() ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderPatchArgs) ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderPatchOutput).ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCinderPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesCinderPatchArgs, ThanosRulerSpecVolumesCinderPatchPtr and ThanosRulerSpecVolumesCinderPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesCinderPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCinderPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderPatchPtrOutput() ThanosRulerSpecVolumesCinderPatchPtrOutput
	ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderPatchPtrOutput
}

type thanosRulerSpecVolumesCinderPatchPtrType ThanosRulerSpecVolumesCinderPatchArgs

func ThanosRulerSpecVolumesCinderPatchPtr(v *ThanosRulerSpecVolumesCinderPatchArgs) ThanosRulerSpecVolumesCinderPatchPtrInput {
	return (*thanosRulerSpecVolumesCinderPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesCinderPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinderPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCinderPatchPtrType) ToThanosRulerSpecVolumesCinderPatchPtrOutput() ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCinderPatchPtrType) ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderPatchPtrOutput)
}

// cinder represents a cinder volume attached and mounted on kubelets host machine.
// Deprecated: Cinder is deprecated. All operations for the in-tree cinder type
// are redirected to the cinder.csi.openstack.org CSI driver.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
type ThanosRulerSpecVolumesCinderPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinderPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderPatchOutput) ToThanosRulerSpecVolumesCinderPatchOutput() ThanosRulerSpecVolumesCinderPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderPatchOutput) ToThanosRulerSpecVolumesCinderPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderPatchOutput) ToThanosRulerSpecVolumesCinderPatchPtrOutput() ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCinderPatchOutput) ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCinderPatch) *ThanosRulerSpecVolumesCinderPatch {
		return &v
	}).(ThanosRulerSpecVolumesCinderPatchPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinderPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinderPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesCinderPatchOutput) SecretRef() ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinderPatch) *ThanosRulerSpecVolumesCinderSecretRefPatch {
		return v.SecretRef
	}).(ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput)
}

// volumeID used to identify the volume in cinder.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPatchOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinderPatch) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCinderPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinderPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderPatchPtrOutput) ToThanosRulerSpecVolumesCinderPatchPtrOutput() ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderPatchPtrOutput) ToThanosRulerSpecVolumesCinderPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderPatchPtrOutput) Elem() ThanosRulerSpecVolumesCinderPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderPatch) ThanosRulerSpecVolumesCinderPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCinderPatch
		return ret
	}).(ThanosRulerSpecVolumesCinderPatchOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesCinderPatchPtrOutput) SecretRef() ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderPatch) *ThanosRulerSpecVolumesCinderSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput)
}

// volumeID used to identify the volume in cinder.
// More info: https://examples.k8s.io/mysql-cinder-pd/README.md
func (o ThanosRulerSpecVolumesCinderPatchPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect
// to OpenStack.
type ThanosRulerSpecVolumesCinderSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesCinderSecretRefInput is an input type that accepts ThanosRulerSpecVolumesCinderSecretRefArgs and ThanosRulerSpecVolumesCinderSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderSecretRefInput` via:
//
//	ThanosRulerSpecVolumesCinderSecretRefArgs{...}
type ThanosRulerSpecVolumesCinderSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderSecretRefOutput() ThanosRulerSpecVolumesCinderSecretRefOutput
	ToThanosRulerSpecVolumesCinderSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderSecretRefOutput
}

// secretRef is optional: points to a secret object containing parameters used to connect
// to OpenStack.
type ThanosRulerSpecVolumesCinderSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesCinderSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCinderSecretRefArgs) ToThanosRulerSpecVolumesCinderSecretRefOutput() ThanosRulerSpecVolumesCinderSecretRefOutput {
	return i.ToThanosRulerSpecVolumesCinderSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderSecretRefArgs) ToThanosRulerSpecVolumesCinderSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderSecretRefOutput)
}

func (i ThanosRulerSpecVolumesCinderSecretRefArgs) ToThanosRulerSpecVolumesCinderSecretRefPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderSecretRefArgs) ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderSecretRefOutput).ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCinderSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesCinderSecretRefArgs, ThanosRulerSpecVolumesCinderSecretRefPtr and ThanosRulerSpecVolumesCinderSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesCinderSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCinderSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderSecretRefPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPtrOutput
	ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderSecretRefPtrOutput
}

type thanosRulerSpecVolumesCinderSecretRefPtrType ThanosRulerSpecVolumesCinderSecretRefArgs

func ThanosRulerSpecVolumesCinderSecretRefPtr(v *ThanosRulerSpecVolumesCinderSecretRefArgs) ThanosRulerSpecVolumesCinderSecretRefPtrInput {
	return (*thanosRulerSpecVolumesCinderSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesCinderSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCinderSecretRefPtrType) ToThanosRulerSpecVolumesCinderSecretRefPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCinderSecretRefPtrType) ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderSecretRefPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect
// to OpenStack.
type ThanosRulerSpecVolumesCinderSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderSecretRefOutput) ToThanosRulerSpecVolumesCinderSecretRefOutput() ThanosRulerSpecVolumesCinderSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefOutput) ToThanosRulerSpecVolumesCinderSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefOutput) ToThanosRulerSpecVolumesCinderSecretRefPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCinderSecretRefOutput) ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCinderSecretRef) *ThanosRulerSpecVolumesCinderSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesCinderSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCinderSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinderSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCinderSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinderSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderSecretRefPtrOutput) ToThanosRulerSpecVolumesCinderSecretRefPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefPtrOutput) ToThanosRulerSpecVolumesCinderSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesCinderSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderSecretRef) ThanosRulerSpecVolumesCinderSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCinderSecretRef
		return ret
	}).(ThanosRulerSpecVolumesCinderSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCinderSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect
// to OpenStack.
type ThanosRulerSpecVolumesCinderSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesCinderSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesCinderSecretRefPatchArgs and ThanosRulerSpecVolumesCinderSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesCinderSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesCinderSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderSecretRefPatchOutput() ThanosRulerSpecVolumesCinderSecretRefPatchOutput
	ToThanosRulerSpecVolumesCinderSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchOutput
}

// secretRef is optional: points to a secret object containing parameters used to connect
// to OpenStack.
type ThanosRulerSpecVolumesCinderSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesCinderSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCinderSecretRefPatchArgs) ToThanosRulerSpecVolumesCinderSecretRefPatchOutput() ThanosRulerSpecVolumesCinderSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesCinderSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderSecretRefPatchArgs) ToThanosRulerSpecVolumesCinderSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesCinderSecretRefPatchArgs) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCinderSecretRefPatchArgs) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderSecretRefPatchOutput).ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCinderSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesCinderSecretRefPatchArgs, ThanosRulerSpecVolumesCinderSecretRefPatchPtr and ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCinderSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesCinderSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCinderSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesCinderSecretRefPatchPtrType ThanosRulerSpecVolumesCinderSecretRefPatchArgs

func ThanosRulerSpecVolumesCinderSecretRefPatchPtr(v *ThanosRulerSpecVolumesCinderSecretRefPatchArgs) ThanosRulerSpecVolumesCinderSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesCinderSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesCinderSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinderSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCinderSecretRefPatchPtrType) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCinderSecretRefPatchPtrType) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput)
}

// secretRef is optional: points to a secret object containing parameters used to connect
// to OpenStack.
type ThanosRulerSpecVolumesCinderSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderSecretRefPatchOutput) ToThanosRulerSpecVolumesCinderSecretRefPatchOutput() ThanosRulerSpecVolumesCinderSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefPatchOutput) ToThanosRulerSpecVolumesCinderSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefPatchOutput) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCinderSecretRefPatchOutput) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCinderSecretRefPatch) *ThanosRulerSpecVolumesCinderSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCinderSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCinderSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCinderSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesCinderSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesCinderSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderSecretRefPatch) ThanosRulerSpecVolumesCinderSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCinderSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesCinderSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCinderSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// configMap represents a configMap that should populate this volume
type ThanosRulerSpecVolumesConfigMap struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesConfigMapItems `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecVolumesConfigMapInput is an input type that accepts ThanosRulerSpecVolumesConfigMap and ThanosRulerSpecVolumesConfigMapOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapInput` via:
//
//	ThanosRulerSpecVolumesConfigMap{ "key": ThanosRulerSpecVolumesConfigArgs{...} }
type ThanosRulerSpecVolumesConfigMapInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapOutput() ThanosRulerSpecVolumesConfigMapOutput
	ToThanosRulerSpecVolumesConfigMapOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapOutput
}

// configMap represents a configMap that should populate this volume
type ThanosRulerSpecVolumesConfigMapArgs struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecVolumesConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMap)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesConfigMapArgs) ToThanosRulerSpecVolumesConfigMapOutput() ThanosRulerSpecVolumesConfigMapOutput {
	return i.ToThanosRulerSpecVolumesConfigMapOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapArgs) ToThanosRulerSpecVolumesConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapOutput)
}

func (i ThanosRulerSpecVolumesConfigMapArgs) ToThanosRulerSpecVolumesConfigMapPtrOutput() ThanosRulerSpecVolumesConfigMapPtrOutput {
	return i.ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapArgs) ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapOutput).ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesConfigMapPtrInput is an input type that accepts ThanosRulerSpecVolumesConfigMapArgs, ThanosRulerSpecVolumesConfigMapPtr and ThanosRulerSpecVolumesConfigMapPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapPtrInput` via:
//
//	        ThanosRulerSpecVolumesConfigMapArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesConfigMapPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapPtrOutput() ThanosRulerSpecVolumesConfigMapPtrOutput
	ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapPtrOutput
}

type thanosRulerSpecVolumesConfigMapPtrType ThanosRulerSpecVolumesConfigMapArgs

func ThanosRulerSpecVolumesConfigMapPtr(v *ThanosRulerSpecVolumesConfigMapArgs) ThanosRulerSpecVolumesConfigMapPtrInput {
	return (*thanosRulerSpecVolumesConfigMapPtrType)(v)
}

func (*thanosRulerSpecVolumesConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesConfigMap)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesConfigMapPtrType) ToThanosRulerSpecVolumesConfigMapPtrOutput() ThanosRulerSpecVolumesConfigMapPtrOutput {
	return i.ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesConfigMapPtrType) ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapPtrOutput)
}

// configMap represents a configMap that should populate this volume
type ThanosRulerSpecVolumesConfigMapOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapOutput) ToThanosRulerSpecVolumesConfigMapOutput() ThanosRulerSpecVolumesConfigMapOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapOutput) ToThanosRulerSpecVolumesConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapOutput) ToThanosRulerSpecVolumesConfigMapPtrOutput() ThanosRulerSpecVolumesConfigMapPtrOutput {
	return o.ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesConfigMapOutput) ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesConfigMap) *ThanosRulerSpecVolumesConfigMap {
		return &v
	}).(ThanosRulerSpecVolumesConfigMapPtrOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesConfigMapOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMap) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesConfigMapOutput) Items() ThanosRulerSpecVolumesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMap) []ThanosRulerSpecVolumesConfigMapItems { return v.Items }).(ThanosRulerSpecVolumesConfigMapItemsArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesConfigMapPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapPtrOutput) ToThanosRulerSpecVolumesConfigMapPtrOutput() ThanosRulerSpecVolumesConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapPtrOutput) ToThanosRulerSpecVolumesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapPtrOutput) Elem() ThanosRulerSpecVolumesConfigMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMap) ThanosRulerSpecVolumesConfigMap {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesConfigMap
		return ret
	}).(ThanosRulerSpecVolumesConfigMapOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesConfigMapPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMap) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesConfigMapPtrOutput) Items() ThanosRulerSpecVolumesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMap) []ThanosRulerSpecVolumesConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesConfigMapItemsArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesConfigMapItems struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesConfigMapItemsInput is an input type that accepts ThanosRulerSpecVolumesConfigMapItemsArgs and ThanosRulerSpecVolumesConfigMapItemsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapItemsInput` via:
//
//	ThanosRulerSpecVolumesConfigMapItemsArgs{...}
type ThanosRulerSpecVolumesConfigMapItemsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapItemsOutput() ThanosRulerSpecVolumesConfigMapItemsOutput
	ToThanosRulerSpecVolumesConfigMapItemsOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesConfigMapItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesConfigMapItemsArgs) ToThanosRulerSpecVolumesConfigMapItemsOutput() ThanosRulerSpecVolumesConfigMapItemsOutput {
	return i.ToThanosRulerSpecVolumesConfigMapItemsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapItemsArgs) ToThanosRulerSpecVolumesConfigMapItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapItemsOutput)
}

// ThanosRulerSpecVolumesConfigMapItemsArrayInput is an input type that accepts ThanosRulerSpecVolumesConfigMapItemsArray and ThanosRulerSpecVolumesConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapItemsArrayInput` via:
//
//	ThanosRulerSpecVolumesConfigMapItemsArray{ ThanosRulerSpecVolumesConfigMapItemsArgs{...} }
type ThanosRulerSpecVolumesConfigMapItemsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapItemsArrayOutput() ThanosRulerSpecVolumesConfigMapItemsArrayOutput
	ToThanosRulerSpecVolumesConfigMapItemsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapItemsArrayOutput
}

type ThanosRulerSpecVolumesConfigMapItemsArray []ThanosRulerSpecVolumesConfigMapItemsInput

func (ThanosRulerSpecVolumesConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesConfigMapItemsArray) ToThanosRulerSpecVolumesConfigMapItemsArrayOutput() ThanosRulerSpecVolumesConfigMapItemsArrayOutput {
	return i.ToThanosRulerSpecVolumesConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapItemsArray) ToThanosRulerSpecVolumesConfigMapItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesConfigMapItemsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapItemsOutput) ToThanosRulerSpecVolumesConfigMapItemsOutput() ThanosRulerSpecVolumesConfigMapItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapItemsOutput) ToThanosRulerSpecVolumesConfigMapItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesConfigMapItemsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapItems) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesConfigMapItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesConfigMapItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapItemsArrayOutput) ToThanosRulerSpecVolumesConfigMapItemsArrayOutput() ThanosRulerSpecVolumesConfigMapItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapItemsArrayOutput) ToThanosRulerSpecVolumesConfigMapItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapItemsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesConfigMapItems {
		return vs[0].([]ThanosRulerSpecVolumesConfigMapItems)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesConfigMapItemsOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesConfigMapItemsPatch struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesConfigMapItemsPatchInput is an input type that accepts ThanosRulerSpecVolumesConfigMapItemsPatchArgs and ThanosRulerSpecVolumesConfigMapItemsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapItemsPatchInput` via:
//
//	ThanosRulerSpecVolumesConfigMapItemsPatchArgs{...}
type ThanosRulerSpecVolumesConfigMapItemsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapItemsPatchOutput() ThanosRulerSpecVolumesConfigMapItemsPatchOutput
	ToThanosRulerSpecVolumesConfigMapItemsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapItemsPatchOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesConfigMapItemsPatchArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesConfigMapItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesConfigMapItemsPatchArgs) ToThanosRulerSpecVolumesConfigMapItemsPatchOutput() ThanosRulerSpecVolumesConfigMapItemsPatchOutput {
	return i.ToThanosRulerSpecVolumesConfigMapItemsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapItemsPatchArgs) ToThanosRulerSpecVolumesConfigMapItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapItemsPatchOutput)
}

// ThanosRulerSpecVolumesConfigMapItemsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesConfigMapItemsPatchArray and ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapItemsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesConfigMapItemsPatchArray{ ThanosRulerSpecVolumesConfigMapItemsPatchArgs{...} }
type ThanosRulerSpecVolumesConfigMapItemsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput() ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput
	ToThanosRulerSpecVolumesConfigMapItemsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput
}

type ThanosRulerSpecVolumesConfigMapItemsPatchArray []ThanosRulerSpecVolumesConfigMapItemsPatchInput

func (ThanosRulerSpecVolumesConfigMapItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesConfigMapItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesConfigMapItemsPatchArray) ToThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput() ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesConfigMapItemsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapItemsPatchArray) ToThanosRulerSpecVolumesConfigMapItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesConfigMapItemsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapItemsPatchOutput) ToThanosRulerSpecVolumesConfigMapItemsPatchOutput() ThanosRulerSpecVolumesConfigMapItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapItemsPatchOutput) ToThanosRulerSpecVolumesConfigMapItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsPatchOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesConfigMapItemsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapItemsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesConfigMapItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesConfigMapItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesConfigMapItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput) ToThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput() ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput) ToThanosRulerSpecVolumesConfigMapItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesConfigMapItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesConfigMapItemsPatch {
		return vs[0].([]ThanosRulerSpecVolumesConfigMapItemsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesConfigMapItemsPatchOutput)
}

// configMap represents a configMap that should populate this volume
type ThanosRulerSpecVolumesConfigMapPatch struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesConfigMapItemsPatch `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecVolumesConfigMapPatchInput is an input type that accepts ThanosRulerSpecVolumesConfigMapPatchArgs and ThanosRulerSpecVolumesConfigMapPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapPatchInput` via:
//
//	ThanosRulerSpecVolumesConfigMapPatchArgs{...}
type ThanosRulerSpecVolumesConfigMapPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapPatchOutput() ThanosRulerSpecVolumesConfigMapPatchOutput
	ToThanosRulerSpecVolumesConfigMapPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapPatchOutput
}

// configMap represents a configMap that should populate this volume
type ThanosRulerSpecVolumesConfigMapPatchArgs struct {
	// defaultMode is optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesConfigMapItemsPatchArrayInput `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecVolumesConfigMapPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesConfigMapPatchArgs) ToThanosRulerSpecVolumesConfigMapPatchOutput() ThanosRulerSpecVolumesConfigMapPatchOutput {
	return i.ToThanosRulerSpecVolumesConfigMapPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapPatchArgs) ToThanosRulerSpecVolumesConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapPatchOutput)
}

func (i ThanosRulerSpecVolumesConfigMapPatchArgs) ToThanosRulerSpecVolumesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesConfigMapPatchArgs) ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapPatchOutput).ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesConfigMapPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesConfigMapPatchArgs, ThanosRulerSpecVolumesConfigMapPatchPtr and ThanosRulerSpecVolumesConfigMapPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesConfigMapPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesConfigMapPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesConfigMapPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesConfigMapPatchPtrOutput
	ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesConfigMapPatchPtrOutput
}

type thanosRulerSpecVolumesConfigMapPatchPtrType ThanosRulerSpecVolumesConfigMapPatchArgs

func ThanosRulerSpecVolumesConfigMapPatchPtr(v *ThanosRulerSpecVolumesConfigMapPatchArgs) ThanosRulerSpecVolumesConfigMapPatchPtrInput {
	return (*thanosRulerSpecVolumesConfigMapPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesConfigMapPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesConfigMapPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesConfigMapPatchPtrType) ToThanosRulerSpecVolumesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesConfigMapPatchPtrType) ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesConfigMapPatchPtrOutput)
}

// configMap represents a configMap that should populate this volume
type ThanosRulerSpecVolumesConfigMapPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapPatchOutput) ToThanosRulerSpecVolumesConfigMapPatchOutput() ThanosRulerSpecVolumesConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapPatchOutput) ToThanosRulerSpecVolumesConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapPatchOutput) ToThanosRulerSpecVolumesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesConfigMapPatchOutput) ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesConfigMapPatch) *ThanosRulerSpecVolumesConfigMapPatch {
		return &v
	}).(ThanosRulerSpecVolumesConfigMapPatchPtrOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesConfigMapPatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapPatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesConfigMapPatchOutput) Items() ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapPatch) []ThanosRulerSpecVolumesConfigMapItemsPatch {
		return v.Items
	}).(ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesConfigMapPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesConfigMapPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesConfigMapPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesConfigMapPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesConfigMapPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesConfigMapPatchPtrOutput) ToThanosRulerSpecVolumesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapPatchPtrOutput) ToThanosRulerSpecVolumesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesConfigMapPatchPtrOutput) Elem() ThanosRulerSpecVolumesConfigMapPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMapPatch) ThanosRulerSpecVolumesConfigMapPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesConfigMapPatch
		return ret
	}).(ThanosRulerSpecVolumesConfigMapPatchOutput)
}

// defaultMode is optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesConfigMapPatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMapPatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesConfigMapPatchPtrOutput) Items() ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMapPatch) []ThanosRulerSpecVolumesConfigMapItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesConfigMapPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesConfigMapPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesConfigMapPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
type ThanosRulerSpecVolumesCsi struct {
	// driver is the name of the CSI driver that handles this volume.
	// Consult with your admin for the correct name as registered in the cluster.
	Driver *string `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs".
	// If not provided, the empty value is passed to the associated CSI driver
	// which will determine the default filesystem to apply.
	FsType               *string                                        `pulumi:"fsType"`
	NodePublishSecretRef *ThanosRulerSpecVolumesCsiNodePublishSecretRef `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume.
	// Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI
	// driver. Consult your driver's documentation for supported values.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
}

// ThanosRulerSpecVolumesCsiInput is an input type that accepts ThanosRulerSpecVolumesCsiArgs and ThanosRulerSpecVolumesCsiOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiInput` via:
//
//	ThanosRulerSpecVolumesCsiArgs{...}
type ThanosRulerSpecVolumesCsiInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiOutput() ThanosRulerSpecVolumesCsiOutput
	ToThanosRulerSpecVolumesCsiOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiOutput
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
type ThanosRulerSpecVolumesCsiArgs struct {
	// driver is the name of the CSI driver that handles this volume.
	// Consult with your admin for the correct name as registered in the cluster.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs".
	// If not provided, the empty value is passed to the associated CSI driver
	// which will determine the default filesystem to apply.
	FsType               pulumi.StringPtrInput                                 `pulumi:"fsType"`
	NodePublishSecretRef ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrInput `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume.
	// Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI
	// driver. Consult your driver's documentation for supported values.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
}

func (ThanosRulerSpecVolumesCsiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsi)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCsiArgs) ToThanosRulerSpecVolumesCsiOutput() ThanosRulerSpecVolumesCsiOutput {
	return i.ToThanosRulerSpecVolumesCsiOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiArgs) ToThanosRulerSpecVolumesCsiOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiOutput)
}

func (i ThanosRulerSpecVolumesCsiArgs) ToThanosRulerSpecVolumesCsiPtrOutput() ThanosRulerSpecVolumesCsiPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiArgs) ToThanosRulerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiOutput).ToThanosRulerSpecVolumesCsiPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCsiPtrInput is an input type that accepts ThanosRulerSpecVolumesCsiArgs, ThanosRulerSpecVolumesCsiPtr and ThanosRulerSpecVolumesCsiPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiPtrInput` via:
//
//	        ThanosRulerSpecVolumesCsiArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCsiPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiPtrOutput() ThanosRulerSpecVolumesCsiPtrOutput
	ToThanosRulerSpecVolumesCsiPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiPtrOutput
}

type thanosRulerSpecVolumesCsiPtrType ThanosRulerSpecVolumesCsiArgs

func ThanosRulerSpecVolumesCsiPtr(v *ThanosRulerSpecVolumesCsiArgs) ThanosRulerSpecVolumesCsiPtrInput {
	return (*thanosRulerSpecVolumesCsiPtrType)(v)
}

func (*thanosRulerSpecVolumesCsiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsi)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCsiPtrType) ToThanosRulerSpecVolumesCsiPtrOutput() ThanosRulerSpecVolumesCsiPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCsiPtrType) ToThanosRulerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiPtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
type ThanosRulerSpecVolumesCsiOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsi)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiOutput) ToThanosRulerSpecVolumesCsiOutput() ThanosRulerSpecVolumesCsiOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiOutput) ToThanosRulerSpecVolumesCsiOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiOutput) ToThanosRulerSpecVolumesCsiPtrOutput() ThanosRulerSpecVolumesCsiPtrOutput {
	return o.ToThanosRulerSpecVolumesCsiPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCsiOutput) ToThanosRulerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCsi) *ThanosRulerSpecVolumesCsi {
		return &v
	}).(ThanosRulerSpecVolumesCsiPtrOutput)
}

// driver is the name of the CSI driver that handles this volume.
// Consult with your admin for the correct name as registered in the cluster.
func (o ThanosRulerSpecVolumesCsiOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsi) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs".
// If not provided, the empty value is passed to the associated CSI driver
// which will determine the default filesystem to apply.
func (o ThanosRulerSpecVolumesCsiOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsi) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCsiOutput) NodePublishSecretRef() ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsi) *ThanosRulerSpecVolumesCsiNodePublishSecretRef {
		return v.NodePublishSecretRef
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// readOnly specifies a read-only configuration for the volume.
// Defaults to false (read/write).
func (o ThanosRulerSpecVolumesCsiOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsi) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI
// driver. Consult your driver's documentation for supported values.
func (o ThanosRulerSpecVolumesCsiOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsi) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecVolumesCsiPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsi)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiPtrOutput) ToThanosRulerSpecVolumesCsiPtrOutput() ThanosRulerSpecVolumesCsiPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiPtrOutput) ToThanosRulerSpecVolumesCsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiPtrOutput) Elem() ThanosRulerSpecVolumesCsiOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsi) ThanosRulerSpecVolumesCsi {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCsi
		return ret
	}).(ThanosRulerSpecVolumesCsiOutput)
}

// driver is the name of the CSI driver that handles this volume.
// Consult with your admin for the correct name as registered in the cluster.
func (o ThanosRulerSpecVolumesCsiPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsi) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs".
// If not provided, the empty value is passed to the associated CSI driver
// which will determine the default filesystem to apply.
func (o ThanosRulerSpecVolumesCsiPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsi) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCsiPtrOutput) NodePublishSecretRef() ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsi) *ThanosRulerSpecVolumesCsiNodePublishSecretRef {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// readOnly specifies a read-only configuration for the volume.
// Defaults to false (read/write).
func (o ThanosRulerSpecVolumesCsiPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsi) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI
// driver. Consult your driver's documentation for supported values.
func (o ThanosRulerSpecVolumesCsiPtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsi) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// nodePublishSecretRef is a reference to the secret object containing
// sensitive information to pass to the CSI driver to complete the CSI
// NodePublishVolume and NodeUnpublishVolume calls.
// This field is optional, and  may be empty if no secret is required. If the
// secret object contains more than one secret, all secret references are passed.
type ThanosRulerSpecVolumesCsiNodePublishSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesCsiNodePublishSecretRefInput is an input type that accepts ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs and ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiNodePublishSecretRefInput` via:
//
//	ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs{...}
type ThanosRulerSpecVolumesCsiNodePublishSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiNodePublishSecretRefOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput
	ToThanosRulerSpecVolumesCsiNodePublishSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput
}

// nodePublishSecretRef is a reference to the secret object containing
// sensitive information to pass to the CSI driver to complete the CSI
// NodePublishVolume and NodeUnpublishVolume calls.
// This field is optional, and  may be empty if no secret is required. If the
// secret object contains more than one secret, all secret references are passed.
type ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput {
	return i.ToThanosRulerSpecVolumesCsiNodePublishSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput)
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput).ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs, ThanosRulerSpecVolumesCsiNodePublishSecretRefPtr and ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput
	ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput
}

type thanosRulerSpecVolumesCsiNodePublishSecretRefPtrType ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs

func ThanosRulerSpecVolumesCsiNodePublishSecretRefPtr(v *ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs) ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrInput {
	return (*thanosRulerSpecVolumesCsiNodePublishSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesCsiNodePublishSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCsiNodePublishSecretRefPtrType) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCsiNodePublishSecretRefPtrType) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing
// sensitive information to pass to the CSI driver to complete the CSI
// NodePublishVolume and NodeUnpublishVolume calls.
// This field is optional, and  may be empty if no secret is required. If the
// secret object contains more than one secret, all secret references are passed.
type ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCsiNodePublishSecretRef) *ThanosRulerSpecVolumesCsiNodePublishSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsiNodePublishSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsiNodePublishSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiNodePublishSecretRef) ThanosRulerSpecVolumesCsiNodePublishSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCsiNodePublishSecretRef
		return ret
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiNodePublishSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing
// sensitive information to pass to the CSI driver to complete the CSI
// NodePublishVolume and NodeUnpublishVolume calls.
// This field is optional, and  may be empty if no secret is required. If the
// secret object contains more than one secret, all secret references are passed.
type ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs and ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput
	ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput
}

// nodePublishSecretRef is a reference to the secret object containing
// sensitive information to pass to the CSI driver to complete the CSI
// NodePublishVolume and NodeUnpublishVolume calls.
// This field is optional, and  may be empty if no secret is required. If the
// secret object contains more than one secret, all secret references are passed.
type ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput).ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs, ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtr and ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrType ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs

func ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtr(v *ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrType) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrType) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput)
}

// nodePublishSecretRef is a reference to the secret object containing
// sensitive information to pass to the CSI driver to complete the CSI
// NodePublishVolume and NodeUnpublishVolume calls.
// This field is optional, and  may be empty if no secret is required. If the
// secret object contains more than one secret, all secret references are passed.
type ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch) *ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch) ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
type ThanosRulerSpecVolumesCsiPatch struct {
	// driver is the name of the CSI driver that handles this volume.
	// Consult with your admin for the correct name as registered in the cluster.
	Driver *string `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs".
	// If not provided, the empty value is passed to the associated CSI driver
	// which will determine the default filesystem to apply.
	FsType               *string                                             `pulumi:"fsType"`
	NodePublishSecretRef *ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume.
	// Defaults to false (read/write).
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI
	// driver. Consult your driver's documentation for supported values.
	VolumeAttributes map[string]string `pulumi:"volumeAttributes"`
}

// ThanosRulerSpecVolumesCsiPatchInput is an input type that accepts ThanosRulerSpecVolumesCsiPatchArgs and ThanosRulerSpecVolumesCsiPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiPatchInput` via:
//
//	ThanosRulerSpecVolumesCsiPatchArgs{...}
type ThanosRulerSpecVolumesCsiPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiPatchOutput() ThanosRulerSpecVolumesCsiPatchOutput
	ToThanosRulerSpecVolumesCsiPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiPatchOutput
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
type ThanosRulerSpecVolumesCsiPatchArgs struct {
	// driver is the name of the CSI driver that handles this volume.
	// Consult with your admin for the correct name as registered in the cluster.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType to mount. Ex. "ext4", "xfs", "ntfs".
	// If not provided, the empty value is passed to the associated CSI driver
	// which will determine the default filesystem to apply.
	FsType               pulumi.StringPtrInput                                      `pulumi:"fsType"`
	NodePublishSecretRef ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrInput `pulumi:"nodePublishSecretRef"`
	// readOnly specifies a read-only configuration for the volume.
	// Defaults to false (read/write).
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeAttributes stores driver-specific properties that are passed to the CSI
	// driver. Consult your driver's documentation for supported values.
	VolumeAttributes pulumi.StringMapInput `pulumi:"volumeAttributes"`
}

func (ThanosRulerSpecVolumesCsiPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsiPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesCsiPatchArgs) ToThanosRulerSpecVolumesCsiPatchOutput() ThanosRulerSpecVolumesCsiPatchOutput {
	return i.ToThanosRulerSpecVolumesCsiPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiPatchArgs) ToThanosRulerSpecVolumesCsiPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiPatchOutput)
}

func (i ThanosRulerSpecVolumesCsiPatchArgs) ToThanosRulerSpecVolumesCsiPatchPtrOutput() ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesCsiPatchArgs) ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiPatchOutput).ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesCsiPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesCsiPatchArgs, ThanosRulerSpecVolumesCsiPatchPtr and ThanosRulerSpecVolumesCsiPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesCsiPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesCsiPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesCsiPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesCsiPatchPtrOutput() ThanosRulerSpecVolumesCsiPatchPtrOutput
	ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesCsiPatchPtrOutput
}

type thanosRulerSpecVolumesCsiPatchPtrType ThanosRulerSpecVolumesCsiPatchArgs

func ThanosRulerSpecVolumesCsiPatchPtr(v *ThanosRulerSpecVolumesCsiPatchArgs) ThanosRulerSpecVolumesCsiPatchPtrInput {
	return (*thanosRulerSpecVolumesCsiPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesCsiPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsiPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesCsiPatchPtrType) ToThanosRulerSpecVolumesCsiPatchPtrOutput() ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesCsiPatchPtrType) ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesCsiPatchPtrOutput)
}

// csi (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers.
type ThanosRulerSpecVolumesCsiPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesCsiPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiPatchOutput) ToThanosRulerSpecVolumesCsiPatchOutput() ThanosRulerSpecVolumesCsiPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiPatchOutput) ToThanosRulerSpecVolumesCsiPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiPatchOutput) ToThanosRulerSpecVolumesCsiPatchPtrOutput() ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesCsiPatchOutput) ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesCsiPatch) *ThanosRulerSpecVolumesCsiPatch {
		return &v
	}).(ThanosRulerSpecVolumesCsiPatchPtrOutput)
}

// driver is the name of the CSI driver that handles this volume.
// Consult with your admin for the correct name as registered in the cluster.
func (o ThanosRulerSpecVolumesCsiPatchOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsiPatch) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs".
// If not provided, the empty value is passed to the associated CSI driver
// which will determine the default filesystem to apply.
func (o ThanosRulerSpecVolumesCsiPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsiPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCsiPatchOutput) NodePublishSecretRef() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsiPatch) *ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch {
		return v.NodePublishSecretRef
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput)
}

// readOnly specifies a read-only configuration for the volume.
// Defaults to false (read/write).
func (o ThanosRulerSpecVolumesCsiPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsiPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI
// driver. Consult your driver's documentation for supported values.
func (o ThanosRulerSpecVolumesCsiPatchOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesCsiPatch) map[string]string { return v.VolumeAttributes }).(pulumi.StringMapOutput)
}

type ThanosRulerSpecVolumesCsiPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesCsiPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesCsiPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) ToThanosRulerSpecVolumesCsiPatchPtrOutput() ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) ToThanosRulerSpecVolumesCsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) Elem() ThanosRulerSpecVolumesCsiPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiPatch) ThanosRulerSpecVolumesCsiPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesCsiPatch
		return ret
	}).(ThanosRulerSpecVolumesCsiPatchOutput)
}

// driver is the name of the CSI driver that handles this volume.
// Consult with your admin for the correct name as registered in the cluster.
func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiPatch) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType to mount. Ex. "ext4", "xfs", "ntfs".
// If not provided, the empty value is passed to the associated CSI driver
// which will determine the default filesystem to apply.
func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) NodePublishSecretRef() ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiPatch) *ThanosRulerSpecVolumesCsiNodePublishSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.NodePublishSecretRef
	}).(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput)
}

// readOnly specifies a read-only configuration for the volume.
// Defaults to false (read/write).
func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeAttributes stores driver-specific properties that are passed to the CSI
// driver. Consult your driver's documentation for supported values.
func (o ThanosRulerSpecVolumesCsiPatchPtrOutput) VolumeAttributes() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesCsiPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributes
	}).(pulumi.StringMapOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
type ThanosRulerSpecVolumesDownwardAPI struct {
	// Optional: mode bits to use on created files by default. Must be a
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items []ThanosRulerSpecVolumesDownwardAPIItems `pulumi:"items"`
}

// ThanosRulerSpecVolumesDownwardAPIInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIArgs and ThanosRulerSpecVolumesDownwardAPIOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIArgs{...}
type ThanosRulerSpecVolumesDownwardAPIInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIOutput() ThanosRulerSpecVolumesDownwardAPIOutput
	ToThanosRulerSpecVolumesDownwardAPIOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIOutput
}

// downwardAPI represents downward API about the pod that should populate this volume
type ThanosRulerSpecVolumesDownwardAPIArgs struct {
	// Optional: mode bits to use on created files by default. Must be a
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items ThanosRulerSpecVolumesDownwardAPIItemsArrayInput `pulumi:"items"`
}

func (ThanosRulerSpecVolumesDownwardAPIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIArgs) ToThanosRulerSpecVolumesDownwardAPIOutput() ThanosRulerSpecVolumesDownwardAPIOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIArgs) ToThanosRulerSpecVolumesDownwardAPIOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIOutput)
}

func (i ThanosRulerSpecVolumesDownwardAPIArgs) ToThanosRulerSpecVolumesDownwardAPIPtrOutput() ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIArgs) ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIOutput).ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesDownwardAPIPtrInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIArgs, ThanosRulerSpecVolumesDownwardAPIPtr and ThanosRulerSpecVolumesDownwardAPIPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIPtrInput` via:
//
//	        ThanosRulerSpecVolumesDownwardAPIArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesDownwardAPIPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIPtrOutput() ThanosRulerSpecVolumesDownwardAPIPtrOutput
	ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIPtrOutput
}

type thanosRulerSpecVolumesDownwardAPIPtrType ThanosRulerSpecVolumesDownwardAPIArgs

func ThanosRulerSpecVolumesDownwardAPIPtr(v *ThanosRulerSpecVolumesDownwardAPIArgs) ThanosRulerSpecVolumesDownwardAPIPtrInput {
	return (*thanosRulerSpecVolumesDownwardAPIPtrType)(v)
}

func (*thanosRulerSpecVolumesDownwardAPIPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesDownwardAPIPtrType) ToThanosRulerSpecVolumesDownwardAPIPtrOutput() ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesDownwardAPIPtrType) ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIPtrOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
type ThanosRulerSpecVolumesDownwardAPIOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIOutput) ToThanosRulerSpecVolumesDownwardAPIOutput() ThanosRulerSpecVolumesDownwardAPIOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIOutput) ToThanosRulerSpecVolumesDownwardAPIOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIOutput) ToThanosRulerSpecVolumesDownwardAPIPtrOutput() ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return o.ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesDownwardAPIOutput) ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesDownwardAPI) *ThanosRulerSpecVolumesDownwardAPI {
		return &v
	}).(ThanosRulerSpecVolumesDownwardAPIPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a
// Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesDownwardAPIOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPI) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o ThanosRulerSpecVolumesDownwardAPIOutput) Items() ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPI) []ThanosRulerSpecVolumesDownwardAPIItems { return v.Items }).(ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput)
}

type ThanosRulerSpecVolumesDownwardAPIPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPI)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIPtrOutput) ToThanosRulerSpecVolumesDownwardAPIPtrOutput() ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIPtrOutput) ToThanosRulerSpecVolumesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIPtrOutput) Elem() ThanosRulerSpecVolumesDownwardAPIOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPI) ThanosRulerSpecVolumesDownwardAPI {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesDownwardAPI
		return ret
	}).(ThanosRulerSpecVolumesDownwardAPIOutput)
}

// Optional: mode bits to use on created files by default. Must be a
// Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesDownwardAPIPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPI) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o ThanosRulerSpecVolumesDownwardAPIPtrOutput) Items() ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPI) []ThanosRulerSpecVolumesDownwardAPIItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesDownwardAPIItems struct {
	FieldRef *ThanosRulerSpecVolumesDownwardAPIItemsFieldRef `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             *string                                                 `pulumi:"path"`
	ResourceFieldRef *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef `pulumi:"resourceFieldRef"`
}

// ThanosRulerSpecVolumesDownwardAPIItemsInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsArgs and ThanosRulerSpecVolumesDownwardAPIItemsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsArgs{...}
type ThanosRulerSpecVolumesDownwardAPIItemsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsOutput() ThanosRulerSpecVolumesDownwardAPIItemsOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesDownwardAPIItemsArgs struct {
	FieldRef ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             pulumi.StringPtrInput                                          `pulumi:"path"`
	ResourceFieldRef ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
}

func (ThanosRulerSpecVolumesDownwardAPIItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsArgs) ToThanosRulerSpecVolumesDownwardAPIItemsOutput() ThanosRulerSpecVolumesDownwardAPIItemsOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsArgs) ToThanosRulerSpecVolumesDownwardAPIItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsOutput)
}

// ThanosRulerSpecVolumesDownwardAPIItemsArrayInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsArray and ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsArrayInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsArray{ ThanosRulerSpecVolumesDownwardAPIItemsArgs{...} }
type ThanosRulerSpecVolumesDownwardAPIItemsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsArrayOutput() ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput
}

type ThanosRulerSpecVolumesDownwardAPIItemsArray []ThanosRulerSpecVolumesDownwardAPIItemsInput

func (ThanosRulerSpecVolumesDownwardAPIItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsArray) ToThanosRulerSpecVolumesDownwardAPIItemsArrayOutput() ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsArray) ToThanosRulerSpecVolumesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesDownwardAPIItemsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsOutput) ToThanosRulerSpecVolumesDownwardAPIItemsOutput() ThanosRulerSpecVolumesDownwardAPIItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsOutput) ToThanosRulerSpecVolumesDownwardAPIItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsOutput) FieldRef() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItems) *ThanosRulerSpecVolumesDownwardAPIItemsFieldRef {
		return v.FieldRef
	}).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value
// between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesDownwardAPIItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o ThanosRulerSpecVolumesDownwardAPIItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsOutput) ResourceFieldRef() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItems) *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef {
		return v.ResourceFieldRef
	}).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput)
}

type ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesDownwardAPIItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput) ToThanosRulerSpecVolumesDownwardAPIItemsArrayOutput() ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput) ToThanosRulerSpecVolumesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesDownwardAPIItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesDownwardAPIItems {
		return vs[0].([]ThanosRulerSpecVolumesDownwardAPIItems)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesDownwardAPIItemsOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath *string `pulumi:"fieldPath"`
}

// ThanosRulerSpecVolumesDownwardAPIItemsFieldRefInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs and ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsFieldRefInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs{...}
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput)
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput).ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs, ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtr and ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput
}

type thanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrType ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs

func ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtr(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrInput {
	return (*thanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrType)(v)
}

func (*thanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesDownwardAPIItemsFieldRef) *ThanosRulerSpecVolumesDownwardAPIItemsFieldRef {
		return &v
	}).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsFieldRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) Elem() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRef) ThanosRulerSpecVolumesDownwardAPIItemsFieldRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesDownwardAPIItemsFieldRef
		return ret
	}).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath *string `pulumi:"fieldPath"`
}

// ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs and ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs{...}
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput)
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput).ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs, ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtr and ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput
}

type thanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrType ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs

func ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtr(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrInput {
	return (*thanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch) *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch) ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch
		return ret
	}).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesDownwardAPIItemsPatch struct {
	FieldRef *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             *string                                                      `pulumi:"path"`
	ResourceFieldRef *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch `pulumi:"resourceFieldRef"`
}

// ThanosRulerSpecVolumesDownwardAPIItemsPatchInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs and ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsPatchInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs{...}
type ThanosRulerSpecVolumesDownwardAPIItemsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs struct {
	FieldRef ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             pulumi.StringPtrInput                                               `pulumi:"path"`
	ResourceFieldRef ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrInput `pulumi:"resourceFieldRef"`
}

func (ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput)
}

// ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsPatchArray and ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsPatchArray{ ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs{...} }
type ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput() ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput
}

type ThanosRulerSpecVolumesDownwardAPIItemsPatchArray []ThanosRulerSpecVolumesDownwardAPIItemsPatchInput

func (ThanosRulerSpecVolumesDownwardAPIItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesDownwardAPIItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsPatchArray) ToThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput() ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsPatchArray) ToThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput) FieldRef() ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsPatch) *ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatch {
		return v.FieldRef
	}).(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value
// between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput) ResourceFieldRef() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsPatch) *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
		return v.ResourceFieldRef
	}).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

type ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesDownwardAPIItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput) ToThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput() ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput) ToThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesDownwardAPIItemsPatch {
		return vs[0].([]ThanosRulerSpecVolumesDownwardAPIItemsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource *string `pulumi:"resource"`
}

// ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs and ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs{...}
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput)
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput).ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs, ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtr and ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput
}

type thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs

func ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtr(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput {
	return (*thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType)(v)
}

func (*thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef {
		return &v
	}).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) interface{} { return v.Divisor }).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) Elem() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef
		return ret
	}).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource *string `pulumi:"resource"`
}

// ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs and ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs{...}
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput)
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput).ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs, ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtr and ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput
	ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput
}

type thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrType ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs

func ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtr(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrInput {
	return (*thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrType) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) *string { return v.ContainerName }).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) interface{} { return v.Divisor }).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) *string { return v.Resource }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch
		return ret
	}).(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
type ThanosRulerSpecVolumesDownwardAPIPatch struct {
	// Optional: mode bits to use on created files by default. Must be a
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items []ThanosRulerSpecVolumesDownwardAPIItemsPatch `pulumi:"items"`
}

// ThanosRulerSpecVolumesDownwardAPIPatchInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIPatchArgs and ThanosRulerSpecVolumesDownwardAPIPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIPatchInput` via:
//
//	ThanosRulerSpecVolumesDownwardAPIPatchArgs{...}
type ThanosRulerSpecVolumesDownwardAPIPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIPatchOutput() ThanosRulerSpecVolumesDownwardAPIPatchOutput
	ToThanosRulerSpecVolumesDownwardAPIPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIPatchOutput
}

// downwardAPI represents downward API about the pod that should populate this volume
type ThanosRulerSpecVolumesDownwardAPIPatchArgs struct {
	// Optional: mode bits to use on created files by default. Must be a
	// Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// Items is a list of downward API volume file
	Items ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayInput `pulumi:"items"`
}

func (ThanosRulerSpecVolumesDownwardAPIPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesDownwardAPIPatchOutput() ThanosRulerSpecVolumesDownwardAPIPatchOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesDownwardAPIPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIPatchOutput)
}

func (i ThanosRulerSpecVolumesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIPatchOutput).ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesDownwardAPIPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesDownwardAPIPatchArgs, ThanosRulerSpecVolumesDownwardAPIPatchPtr and ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesDownwardAPIPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesDownwardAPIPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesDownwardAPIPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput
	ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput
}

type thanosRulerSpecVolumesDownwardAPIPatchPtrType ThanosRulerSpecVolumesDownwardAPIPatchArgs

func ThanosRulerSpecVolumesDownwardAPIPatchPtr(v *ThanosRulerSpecVolumesDownwardAPIPatchArgs) ThanosRulerSpecVolumesDownwardAPIPatchPtrInput {
	return (*thanosRulerSpecVolumesDownwardAPIPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesDownwardAPIPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesDownwardAPIPatchPtrType) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesDownwardAPIPatchPtrType) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput)
}

// downwardAPI represents downward API about the pod that should populate this volume
type ThanosRulerSpecVolumesDownwardAPIPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesDownwardAPIPatchOutput() ThanosRulerSpecVolumesDownwardAPIPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesDownwardAPIPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesDownwardAPIPatch) *ThanosRulerSpecVolumesDownwardAPIPatch {
		return &v
	}).(ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput)
}

// Optional: mode bits to use on created files by default. Must be a
// Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesDownwardAPIPatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIPatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o ThanosRulerSpecVolumesDownwardAPIPatchOutput) Items() ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesDownwardAPIPatch) []ThanosRulerSpecVolumesDownwardAPIItemsPatch {
		return v.Items
	}).(ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput)
}

type ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesDownwardAPIPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput) ToThanosRulerSpecVolumesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput) Elem() ThanosRulerSpecVolumesDownwardAPIPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIPatch) ThanosRulerSpecVolumesDownwardAPIPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesDownwardAPIPatch
		return ret
	}).(ThanosRulerSpecVolumesDownwardAPIPatchOutput)
}

// Optional: mode bits to use on created files by default. Must be a
// Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIPatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// Items is a list of downward API volume file
func (o ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput) Items() ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesDownwardAPIPatch) []ThanosRulerSpecVolumesDownwardAPIItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type ThanosRulerSpecVolumesEmptyDir struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit interface{} `pulumi:"sizeLimit"`
}

// ThanosRulerSpecVolumesEmptyDirInput is an input type that accepts ThanosRulerSpecVolumesEmptyDirArgs and ThanosRulerSpecVolumesEmptyDirOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEmptyDirInput` via:
//
//	ThanosRulerSpecVolumesEmptyDirArgs{...}
type ThanosRulerSpecVolumesEmptyDirInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEmptyDirOutput() ThanosRulerSpecVolumesEmptyDirOutput
	ToThanosRulerSpecVolumesEmptyDirOutputWithContext(context.Context) ThanosRulerSpecVolumesEmptyDirOutput
}

// emptyDir represents a temporary directory that shares a pod's lifetime.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type ThanosRulerSpecVolumesEmptyDirArgs struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit pulumi.Input `pulumi:"sizeLimit"`
}

func (ThanosRulerSpecVolumesEmptyDirArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDir)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEmptyDirArgs) ToThanosRulerSpecVolumesEmptyDirOutput() ThanosRulerSpecVolumesEmptyDirOutput {
	return i.ToThanosRulerSpecVolumesEmptyDirOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEmptyDirArgs) ToThanosRulerSpecVolumesEmptyDirOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEmptyDirOutput)
}

func (i ThanosRulerSpecVolumesEmptyDirArgs) ToThanosRulerSpecVolumesEmptyDirPtrOutput() ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return i.ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEmptyDirArgs) ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEmptyDirOutput).ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEmptyDirPtrInput is an input type that accepts ThanosRulerSpecVolumesEmptyDirArgs, ThanosRulerSpecVolumesEmptyDirPtr and ThanosRulerSpecVolumesEmptyDirPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEmptyDirPtrInput` via:
//
//	        ThanosRulerSpecVolumesEmptyDirArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEmptyDirPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEmptyDirPtrOutput() ThanosRulerSpecVolumesEmptyDirPtrOutput
	ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEmptyDirPtrOutput
}

type thanosRulerSpecVolumesEmptyDirPtrType ThanosRulerSpecVolumesEmptyDirArgs

func ThanosRulerSpecVolumesEmptyDirPtr(v *ThanosRulerSpecVolumesEmptyDirArgs) ThanosRulerSpecVolumesEmptyDirPtrInput {
	return (*thanosRulerSpecVolumesEmptyDirPtrType)(v)
}

func (*thanosRulerSpecVolumesEmptyDirPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEmptyDir)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEmptyDirPtrType) ToThanosRulerSpecVolumesEmptyDirPtrOutput() ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return i.ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEmptyDirPtrType) ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEmptyDirPtrOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type ThanosRulerSpecVolumesEmptyDirOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEmptyDirOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDir)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEmptyDirOutput) ToThanosRulerSpecVolumesEmptyDirOutput() ThanosRulerSpecVolumesEmptyDirOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirOutput) ToThanosRulerSpecVolumesEmptyDirOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirOutput) ToThanosRulerSpecVolumesEmptyDirPtrOutput() ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return o.ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEmptyDirOutput) ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEmptyDir) *ThanosRulerSpecVolumesEmptyDir {
		return &v
	}).(ThanosRulerSpecVolumesEmptyDirPtrOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEmptyDir) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEmptyDir) interface{} { return v.SizeLimit }).(pulumi.AnyOutput)
}

type ThanosRulerSpecVolumesEmptyDirPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEmptyDirPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEmptyDir)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEmptyDirPtrOutput) ToThanosRulerSpecVolumesEmptyDirPtrOutput() ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirPtrOutput) ToThanosRulerSpecVolumesEmptyDirPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirPtrOutput) Elem() ThanosRulerSpecVolumesEmptyDirOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEmptyDir) ThanosRulerSpecVolumesEmptyDir {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEmptyDir
		return ret
	}).(ThanosRulerSpecVolumesEmptyDirOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEmptyDir) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirPtrOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEmptyDir) interface{} {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.AnyOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type ThanosRulerSpecVolumesEmptyDirPatch struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium *string `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit interface{} `pulumi:"sizeLimit"`
}

// ThanosRulerSpecVolumesEmptyDirPatchInput is an input type that accepts ThanosRulerSpecVolumesEmptyDirPatchArgs and ThanosRulerSpecVolumesEmptyDirPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEmptyDirPatchInput` via:
//
//	ThanosRulerSpecVolumesEmptyDirPatchArgs{...}
type ThanosRulerSpecVolumesEmptyDirPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEmptyDirPatchOutput() ThanosRulerSpecVolumesEmptyDirPatchOutput
	ToThanosRulerSpecVolumesEmptyDirPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEmptyDirPatchOutput
}

// emptyDir represents a temporary directory that shares a pod's lifetime.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type ThanosRulerSpecVolumesEmptyDirPatchArgs struct {
	// medium represents what type of storage medium should back this directory.
	// The default is "" which means to use the node's default medium.
	// Must be an empty string (default) or Memory.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	Medium pulumi.StringPtrInput `pulumi:"medium"`
	// sizeLimit is the total amount of local storage required for this EmptyDir volume.
	// The size limit is also applicable for memory medium.
	// The maximum usage on memory medium EmptyDir would be the minimum value between
	// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
	// The default is nil which means that the limit is undefined.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
	SizeLimit pulumi.Input `pulumi:"sizeLimit"`
}

func (ThanosRulerSpecVolumesEmptyDirPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDirPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEmptyDirPatchArgs) ToThanosRulerSpecVolumesEmptyDirPatchOutput() ThanosRulerSpecVolumesEmptyDirPatchOutput {
	return i.ToThanosRulerSpecVolumesEmptyDirPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEmptyDirPatchArgs) ToThanosRulerSpecVolumesEmptyDirPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEmptyDirPatchOutput)
}

func (i ThanosRulerSpecVolumesEmptyDirPatchArgs) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutput() ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEmptyDirPatchArgs) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEmptyDirPatchOutput).ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEmptyDirPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEmptyDirPatchArgs, ThanosRulerSpecVolumesEmptyDirPatchPtr and ThanosRulerSpecVolumesEmptyDirPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEmptyDirPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEmptyDirPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEmptyDirPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEmptyDirPatchPtrOutput() ThanosRulerSpecVolumesEmptyDirPatchPtrOutput
	ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEmptyDirPatchPtrOutput
}

type thanosRulerSpecVolumesEmptyDirPatchPtrType ThanosRulerSpecVolumesEmptyDirPatchArgs

func ThanosRulerSpecVolumesEmptyDirPatchPtr(v *ThanosRulerSpecVolumesEmptyDirPatchArgs) ThanosRulerSpecVolumesEmptyDirPatchPtrInput {
	return (*thanosRulerSpecVolumesEmptyDirPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEmptyDirPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEmptyDirPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEmptyDirPatchPtrType) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutput() ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEmptyDirPatchPtrType) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEmptyDirPatchPtrOutput)
}

// emptyDir represents a temporary directory that shares a pod's lifetime.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
type ThanosRulerSpecVolumesEmptyDirPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEmptyDirPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDirPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEmptyDirPatchOutput) ToThanosRulerSpecVolumesEmptyDirPatchOutput() ThanosRulerSpecVolumesEmptyDirPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirPatchOutput) ToThanosRulerSpecVolumesEmptyDirPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirPatchOutput) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutput() ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEmptyDirPatchOutput) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEmptyDirPatch) *ThanosRulerSpecVolumesEmptyDirPatch {
		return &v
	}).(ThanosRulerSpecVolumesEmptyDirPatchPtrOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirPatchOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEmptyDirPatch) *string { return v.Medium }).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirPatchOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEmptyDirPatch) interface{} { return v.SizeLimit }).(pulumi.AnyOutput)
}

type ThanosRulerSpecVolumesEmptyDirPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEmptyDirPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEmptyDirPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEmptyDirPatchPtrOutput) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutput() ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirPatchPtrOutput) ToThanosRulerSpecVolumesEmptyDirPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEmptyDirPatchPtrOutput) Elem() ThanosRulerSpecVolumesEmptyDirPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEmptyDirPatch) ThanosRulerSpecVolumesEmptyDirPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEmptyDirPatch
		return ret
	}).(ThanosRulerSpecVolumesEmptyDirPatchOutput)
}

// medium represents what type of storage medium should back this directory.
// The default is "" which means to use the node's default medium.
// Must be an empty string (default) or Memory.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirPatchPtrOutput) Medium() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEmptyDirPatch) *string {
		if v == nil {
			return nil
		}
		return v.Medium
	}).(pulumi.StringPtrOutput)
}

// sizeLimit is the total amount of local storage required for this EmptyDir volume.
// The size limit is also applicable for memory medium.
// The maximum usage on memory medium EmptyDir would be the minimum value between
// the SizeLimit specified here and the sum of memory limits of all containers in a pod.
// The default is nil which means that the limit is undefined.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
func (o ThanosRulerSpecVolumesEmptyDirPatchPtrOutput) SizeLimit() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEmptyDirPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.SizeLimit
	}).(pulumi.AnyOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver.
// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
// and deleted when the pod is removed.
//
// Use this if:
// a) the volume is only needed while the pod runs,
// b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and
// d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific
// APIs for volumes that persist for longer than the lifecycle
// of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
// be used that way - see the documentation of the driver for
// more information.
//
// A pod can use both types of ephemeral volumes and
// persistent volumes at the same time.
type ThanosRulerSpecVolumesEphemeral struct {
	VolumeClaimTemplate *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate `pulumi:"volumeClaimTemplate"`
}

// ThanosRulerSpecVolumesEphemeralInput is an input type that accepts ThanosRulerSpecVolumesEphemeralArgs and ThanosRulerSpecVolumesEphemeralOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralInput` via:
//
//	ThanosRulerSpecVolumesEphemeralArgs{...}
type ThanosRulerSpecVolumesEphemeralInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralOutput() ThanosRulerSpecVolumesEphemeralOutput
	ToThanosRulerSpecVolumesEphemeralOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralOutput
}

// ephemeral represents a volume that is handled by a cluster storage driver.
// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
// and deleted when the pod is removed.
//
// Use this if:
// a) the volume is only needed while the pod runs,
// b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and
// d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific
// APIs for volumes that persist for longer than the lifecycle
// of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
// be used that way - see the documentation of the driver for
// more information.
//
// A pod can use both types of ephemeral volumes and
// persistent volumes at the same time.
type ThanosRulerSpecVolumesEphemeralArgs struct {
	VolumeClaimTemplate ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrInput `pulumi:"volumeClaimTemplate"`
}

func (ThanosRulerSpecVolumesEphemeralArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeral)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralArgs) ToThanosRulerSpecVolumesEphemeralOutput() ThanosRulerSpecVolumesEphemeralOutput {
	return i.ToThanosRulerSpecVolumesEphemeralOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralArgs) ToThanosRulerSpecVolumesEphemeralOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralOutput)
}

func (i ThanosRulerSpecVolumesEphemeralArgs) ToThanosRulerSpecVolumesEphemeralPtrOutput() ThanosRulerSpecVolumesEphemeralPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralArgs) ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralOutput).ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralArgs, ThanosRulerSpecVolumesEphemeralPtr and ThanosRulerSpecVolumesEphemeralPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralPtrOutput() ThanosRulerSpecVolumesEphemeralPtrOutput
	ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralPtrOutput
}

type thanosRulerSpecVolumesEphemeralPtrType ThanosRulerSpecVolumesEphemeralArgs

func ThanosRulerSpecVolumesEphemeralPtr(v *ThanosRulerSpecVolumesEphemeralArgs) ThanosRulerSpecVolumesEphemeralPtrInput {
	return (*thanosRulerSpecVolumesEphemeralPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeral)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralPtrType) ToThanosRulerSpecVolumesEphemeralPtrOutput() ThanosRulerSpecVolumesEphemeralPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralPtrType) ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralPtrOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver.
// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
// and deleted when the pod is removed.
//
// Use this if:
// a) the volume is only needed while the pod runs,
// b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and
// d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific
// APIs for volumes that persist for longer than the lifecycle
// of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
// be used that way - see the documentation of the driver for
// more information.
//
// A pod can use both types of ephemeral volumes and
// persistent volumes at the same time.
type ThanosRulerSpecVolumesEphemeralOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeral)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralOutput) ToThanosRulerSpecVolumesEphemeralOutput() ThanosRulerSpecVolumesEphemeralOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralOutput) ToThanosRulerSpecVolumesEphemeralOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralOutput) ToThanosRulerSpecVolumesEphemeralPtrOutput() ThanosRulerSpecVolumesEphemeralPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralOutput) ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeral) *ThanosRulerSpecVolumesEphemeral {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralOutput) VolumeClaimTemplate() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeral) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate {
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput)
}

type ThanosRulerSpecVolumesEphemeralPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeral)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralPtrOutput) ToThanosRulerSpecVolumesEphemeralPtrOutput() ThanosRulerSpecVolumesEphemeralPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralPtrOutput) ToThanosRulerSpecVolumesEphemeralPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeral) ThanosRulerSpecVolumesEphemeral {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeral
		return ret
	}).(ThanosRulerSpecVolumesEphemeralOutput)
}

func (o ThanosRulerSpecVolumesEphemeralPtrOutput) VolumeClaimTemplate() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeral) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver.
// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
// and deleted when the pod is removed.
//
// Use this if:
// a) the volume is only needed while the pod runs,
// b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and
// d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific
// APIs for volumes that persist for longer than the lifecycle
// of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
// be used that way - see the documentation of the driver for
// more information.
//
// A pod can use both types of ephemeral volumes and
// persistent volumes at the same time.
type ThanosRulerSpecVolumesEphemeralPatch struct {
	VolumeClaimTemplate *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch `pulumi:"volumeClaimTemplate"`
}

// ThanosRulerSpecVolumesEphemeralPatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralPatchArgs and ThanosRulerSpecVolumesEphemeralPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralPatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralPatchArgs{...}
type ThanosRulerSpecVolumesEphemeralPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralPatchOutput() ThanosRulerSpecVolumesEphemeralPatchOutput
	ToThanosRulerSpecVolumesEphemeralPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralPatchOutput
}

// ephemeral represents a volume that is handled by a cluster storage driver.
// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
// and deleted when the pod is removed.
//
// Use this if:
// a) the volume is only needed while the pod runs,
// b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and
// d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific
// APIs for volumes that persist for longer than the lifecycle
// of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
// be used that way - see the documentation of the driver for
// more information.
//
// A pod can use both types of ephemeral volumes and
// persistent volumes at the same time.
type ThanosRulerSpecVolumesEphemeralPatchArgs struct {
	VolumeClaimTemplate ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrInput `pulumi:"volumeClaimTemplate"`
}

func (ThanosRulerSpecVolumesEphemeralPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralPatchArgs) ToThanosRulerSpecVolumesEphemeralPatchOutput() ThanosRulerSpecVolumesEphemeralPatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralPatchArgs) ToThanosRulerSpecVolumesEphemeralPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralPatchOutput)
}

func (i ThanosRulerSpecVolumesEphemeralPatchArgs) ToThanosRulerSpecVolumesEphemeralPatchPtrOutput() ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralPatchArgs) ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralPatchOutput).ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralPatchArgs, ThanosRulerSpecVolumesEphemeralPatchPtr and ThanosRulerSpecVolumesEphemeralPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralPatchPtrOutput() ThanosRulerSpecVolumesEphemeralPatchPtrOutput
	ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralPatchPtrOutput
}

type thanosRulerSpecVolumesEphemeralPatchPtrType ThanosRulerSpecVolumesEphemeralPatchArgs

func ThanosRulerSpecVolumesEphemeralPatchPtr(v *ThanosRulerSpecVolumesEphemeralPatchArgs) ThanosRulerSpecVolumesEphemeralPatchPtrInput {
	return (*thanosRulerSpecVolumesEphemeralPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralPatchPtrType) ToThanosRulerSpecVolumesEphemeralPatchPtrOutput() ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralPatchPtrType) ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralPatchPtrOutput)
}

// ephemeral represents a volume that is handled by a cluster storage driver.
// The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts,
// and deleted when the pod is removed.
//
// Use this if:
// a) the volume is only needed while the pod runs,
// b) features of normal volumes like restoring from snapshot or capacity
//
//	tracking are needed,
//
// c) the storage driver is specified through a storage class, and
// d) the storage driver supports dynamic volume provisioning through
//
//	a PersistentVolumeClaim (see EphemeralVolumeSource for more
//	information on the connection between this volume type
//	and PersistentVolumeClaim).
//
// Use PersistentVolumeClaim or one of the vendor-specific
// APIs for volumes that persist for longer than the lifecycle
// of an individual pod.
//
// Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to
// be used that way - see the documentation of the driver for
// more information.
//
// A pod can use both types of ephemeral volumes and
// persistent volumes at the same time.
type ThanosRulerSpecVolumesEphemeralPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralPatchOutput) ToThanosRulerSpecVolumesEphemeralPatchOutput() ThanosRulerSpecVolumesEphemeralPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralPatchOutput) ToThanosRulerSpecVolumesEphemeralPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralPatchOutput) ToThanosRulerSpecVolumesEphemeralPatchPtrOutput() ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralPatchOutput) ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralPatch) *ThanosRulerSpecVolumesEphemeralPatch {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralPatchOutput) VolumeClaimTemplate() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch {
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralPatchPtrOutput() ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralPatchPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralPatch) ThanosRulerSpecVolumesEphemeralPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralPatch
		return ret
	}).(ThanosRulerSpecVolumesEphemeralPatchOutput)
}

func (o ThanosRulerSpecVolumesEphemeralPatchPtrOutput) VolumeClaimTemplate() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch {
		if v == nil {
			return nil
		}
		return v.VolumeClaimTemplate
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata map[string]string                                       `pulumi:"metadata"`
	Spec     *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec `pulumi:"spec"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata pulumi.StringMapInput                                          `pulumi:"metadata"`
	Spec     ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrInput `pulumi:"spec"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput) Spec() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec {
		return v.Spec
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput) Spec() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplate) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata map[string]string                                            `pulumi:"metadata"`
	Spec     *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch `pulumi:"spec"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs struct {
	// May contain labels and annotations that will be copied into the PVC
	// when creating it. No other fields are allowed and will be rejected during
	// validation.
	Metadata pulumi.StringMapInput                                               `pulumi:"metadata"`
	Spec     ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrInput `pulumi:"spec"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput)
}

// Will be used to create a stand-alone PVC to provision the volume.
// The pod in which this EphemeralVolumeSource is embedded will be the
// owner of the PVC, i.e. the PVC will be deleted together with the
// pod.  The name of the PVC will be `<pod name>-<volume name>` where
// `<volume name>` is the name from the `PodSpec.Volumes` array
// entry. Pod validation will reject the pod if the concatenated name
// is not valid for a PVC (for example, too long).
//
// An existing PVC with that name that is not owned by the pod
// will *not* be used for the pod to avoid using an unrelated
// volume by mistake. Starting the pod is then blocked until
// the unrelated PVC is removed. If such a pre-created PVC is
// meant to be used by the pod, the PVC has to updated with an
// owner reference to the pod once the pod exists. Normally
// this should not be necessary, but it may be useful when
// manually reconstructing a broken cluster.
//
// This field is read-only and no changes will be made by Kubernetes
// to the PVC after it has been created.
//
// Required, must not be nil.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch) map[string]string { return v.Metadata }).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput) Spec() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
		return v.Spec
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput)
}

// May contain labels and annotations that will be copied into the PVC
// when creating it. No other fields are allowed and will be rejected during
// validation.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput) Metadata() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Metadata
	}).(pulumi.StringMapOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput) Spec() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
		if v == nil {
			return nil
		}
		return v.Spec
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                             `pulumi:"accessModes"`
	DataSource    *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource    `pulumi:"dataSource"`
	DataSourceRef *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef `pulumi:"dataSourceRef"`
	Resources     *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources     `pulumi:"resources"`
	Selector      *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                     `pulumi:"accessModes"`
	DataSource    ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrInput    `pulumi:"dataSource"`
	DataSourceRef ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput `pulumi:"dataSourceRef"`
	Resources     ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrInput     `pulumi:"resources"`
	Selector      ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) DataSource() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
		return v.DataSource
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) DataSourceRef() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
		return v.DataSourceRef
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) Resources() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
		return v.Resources
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) Selector() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
		return v.Selector
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string {
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) DataSource() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) DataSourceRef() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) Resources() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) Selector() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpec) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSource) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

// dataSource field can be used to specify either:
//   - An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
//   - An existing PVC (PersistentVolumeClaim)
//     If the provisioner or an external controller can support the specified data source,
//     it will create a new volume based on the contents of the specified data source.
//     When the AnyVolumeDataSource feature gate is enabled, dataSource contents will be copied to dataSourceRef,
//     and dataSourceRef contents will be copied to dataSource when dataSourceRef.namespace is not specified.
//     If the namespace is specified, then dataSourceRef will not be copied to dataSource.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string { return v.ApiGroup }).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string { return v.Kind }).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRef) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup *string `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind *string `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name *string `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace *string `pulumi:"namespace"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs struct {
	// APIGroup is the group for the resource being referenced.
	// If APIGroup is not specified, the specified Kind must be in the core API group.
	// For any other third-party types, APIGroup is required.
	ApiGroup pulumi.StringPtrInput `pulumi:"apiGroup"`
	// Kind is the type of resource being referenced
	Kind pulumi.StringPtrInput `pulumi:"kind"`
	// Name is the name of resource being referenced
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Namespace is the namespace of resource being referenced
	// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
	// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
	Namespace pulumi.StringPtrInput `pulumi:"namespace"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

// dataSourceRef specifies the object from which to populate the volume with data, if a non-empty
// volume is desired. This may be any object from a non-empty API group (non
// core object) or a PersistentVolumeClaim object.
// When this field is specified, volume binding will only succeed if the type of
// the specified object matches some installed volume populator or dynamic
// provisioner.
// This field will replace the functionality of the dataSource field and as such
// if both fields are non-empty, they must have the same value. For backwards
// compatibility, when namespace isn't specified in dataSourceRef,
// both fields (dataSource and dataSourceRef) will be set to the same
// value automatically if one of them is empty and the other is non-empty.
// When namespace is specified in dataSourceRef,
// dataSource isn't set to the same value and must be empty.
// There are three important differences between dataSource and dataSourceRef:
//   - While dataSource only allows two specific types of objects, dataSourceRef
//     allows any non-core object, as well as PersistentVolumeClaim objects.
//   - While dataSource ignores disallowed values (dropping them), dataSourceRef
//     preserves all values, and generates an error if a disallowed value is
//     specified.
//   - While dataSource only allows local objects, dataSourceRef allows objects
//     in any namespaces.
//     (Beta) Using this field requires the AnyVolumeDataSource feature gate to be enabled.
//     (Alpha) Using the namespace field of dataSourceRef requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput)
}

// APIGroup is the group for the resource being referenced.
// If APIGroup is not specified, the specified Kind must be in the core API group.
// For any other third-party types, APIGroup is required.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) ApiGroup() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiGroup
	}).(pulumi.StringPtrOutput)
}

// Kind is the type of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Kind
	}).(pulumi.StringPtrOutput)
}

// Name is the name of resource being referenced
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Namespace is the namespace of resource being referenced
// Note that when a namespace is specified, a gateway.networking.k8s.io/ReferenceGrant object is required in the referent namespace to allow that namespace's owner to accept the reference. See the ReferenceGrant documentation for details.
// (Alpha) This field requires the CrossNamespaceVolumeDataSource feature gate to be enabled.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Namespace
	}).(pulumi.StringPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   []string                                                                  `pulumi:"accessModes"`
	DataSource    *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch    `pulumi:"dataSource"`
	DataSourceRef *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch `pulumi:"dataSourceRef"`
	Resources     *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch     `pulumi:"resources"`
	Selector      *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName *string `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName *string `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode *string `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs struct {
	// accessModes contains the desired access modes the volume should have.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
	AccessModes   pulumi.StringArrayInput                                                          `pulumi:"accessModes"`
	DataSource    ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput    `pulumi:"dataSource"`
	DataSourceRef ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput `pulumi:"dataSourceRef"`
	Resources     ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput     `pulumi:"resources"`
	Selector      ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput      `pulumi:"selector"`
	// storageClassName is the name of the StorageClass required by the claim.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
	StorageClassName pulumi.StringPtrInput `pulumi:"storageClassName"`
	// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
	// If specified, the CSI driver will create or update the volume with the attributes defined
	// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
	// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
	// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
	// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
	// will be set by the persistentvolume controller if it exists.
	// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
	// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
	// exists.
	// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
	// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
	VolumeAttributesClassName pulumi.StringPtrInput `pulumi:"volumeAttributesClassName"`
	// volumeMode defines what type of volume is required by the claim.
	// Value of Filesystem is implied when not included in claim spec.
	VolumeMode pulumi.StringPtrInput `pulumi:"volumeMode"`
	// volumeName is the binding reference to the PersistentVolume backing this claim.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

// The specification for the PersistentVolumeClaim. The entire content is
// copied unchanged into the PVC that gets created from this
// template. The same fields as in a PersistentVolumeClaim
// are also valid here.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) []string { return v.AccessModes }).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) DataSource() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		return v.DataSource
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) DataSourceRef() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		return v.DataSourceRef
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) Resources() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
		return v.Resources
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) Selector() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
		return v.Selector
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string { return v.StorageClassName }).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string {
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string { return v.VolumeMode }).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput)
}

// accessModes contains the desired access modes the volume should have.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) AccessModes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) []string {
		if v == nil {
			return nil
		}
		return v.AccessModes
	}).(pulumi.StringArrayOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) DataSource() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatch {
		if v == nil {
			return nil
		}
		return v.DataSource
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) DataSourceRef() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatch {
		if v == nil {
			return nil
		}
		return v.DataSourceRef
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) Resources() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
		if v == nil {
			return nil
		}
		return v.Resources
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) Selector() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
		if v == nil {
			return nil
		}
		return v.Selector
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// storageClassName is the name of the StorageClass required by the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) StorageClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageClassName
	}).(pulumi.StringPtrOutput)
}

// volumeAttributesClassName may be used to set the VolumeAttributesClass used by this claim.
// If specified, the CSI driver will create or update the volume with the attributes defined
// in the corresponding VolumeAttributesClass. This has a different purpose than storageClassName,
// it can be changed after the claim is created. An empty string value means that no VolumeAttributesClass
// will be applied to the claim but it's not allowed to reset this field to empty string once it is set.
// If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass
// will be set by the persistentvolume controller if it exists.
// If the resource referred to by volumeAttributesClass does not exist, this PersistentVolumeClaim will be
// set to a Pending state, as reflected by the modifyVolumeStatus field, until such as a resource
// exists.
// More info: https://kubernetes.io/docs/concepts/storage/volume-attributes-classes/
// (Beta) Using this field requires the VolumeAttributesClass feature gate to be enabled (off by default).
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) VolumeAttributesClassName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeAttributesClassName
	}).(pulumi.StringPtrOutput)
}

// volumeMode defines what type of volume is required by the claim.
// Value of Filesystem is implied when not included in claim spec.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) VolumeMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeMode
	}).(pulumi.StringPtrOutput)
}

// volumeName is the binding reference to the PersistentVolume backing this claim.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResources) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits map[string]interface{} `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests map[string]interface{} `pulumi:"requests"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs struct {
	// Limits describes the maximum amount of compute resources allowed.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Limits pulumi.MapInput `pulumi:"limits"`
	// Requests describes the minimum amount of compute resources required.
	// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
	// otherwise to an implementation-defined value. Requests cannot exceed Limits.
	// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
	Requests pulumi.MapInput `pulumi:"requests"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

// resources represents the minimum resources the volume should have.
// If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements
// that are lower than previous value but must still be higher than capacity recorded in the
// status field of the claim.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		return v.Requests
	}).(pulumi.MapOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput)
}

// Limits describes the maximum amount of compute resources allowed.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) Limits() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Limits
	}).(pulumi.MapOutput)
}

// Requests describes the minimum amount of compute resources required.
// If Requests is omitted for a container, it defaults to Limits if that is explicitly specified,
// otherwise to an implementation-defined value. Requests cannot exceed Limits.
// More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput) Requests() pulumi.MapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatch) map[string]interface{} {
		if v == nil {
			return nil
		}
		return v.Requests
	}).(pulumi.MapOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput) MatchExpressions() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector) []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) MatchExpressions() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector) []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray{ ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{...} }
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions {
		return vs[0].([]ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressions)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray{ ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{...} }
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		return vs[0].([]ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchInput` via:
//
//	ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{...}
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput)
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput).ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs, ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtr and ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput
	ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput
}

type thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs

func ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtr(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput {
	return (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrType) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// selector is a label query over volumes to consider for binding.
type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch) *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
		return &v
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) MatchExpressions() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch) []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) ToThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) Elem() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch) ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch
		return ret
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) MatchExpressions() ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch) []ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type ThanosRulerSpecVolumesFc struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun *int `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs []string `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids)
	// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []string `pulumi:"wwids"`
}

// ThanosRulerSpecVolumesFcInput is an input type that accepts ThanosRulerSpecVolumesFcArgs and ThanosRulerSpecVolumesFcOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFcInput` via:
//
//	ThanosRulerSpecVolumesFcArgs{...}
type ThanosRulerSpecVolumesFcInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFcOutput() ThanosRulerSpecVolumesFcOutput
	ToThanosRulerSpecVolumesFcOutputWithContext(context.Context) ThanosRulerSpecVolumesFcOutput
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type ThanosRulerSpecVolumesFcArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs pulumi.StringArrayInput `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids)
	// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids pulumi.StringArrayInput `pulumi:"wwids"`
}

func (ThanosRulerSpecVolumesFcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFc)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFcArgs) ToThanosRulerSpecVolumesFcOutput() ThanosRulerSpecVolumesFcOutput {
	return i.ToThanosRulerSpecVolumesFcOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFcArgs) ToThanosRulerSpecVolumesFcOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFcOutput)
}

func (i ThanosRulerSpecVolumesFcArgs) ToThanosRulerSpecVolumesFcPtrOutput() ThanosRulerSpecVolumesFcPtrOutput {
	return i.ToThanosRulerSpecVolumesFcPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFcArgs) ToThanosRulerSpecVolumesFcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFcOutput).ToThanosRulerSpecVolumesFcPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFcPtrInput is an input type that accepts ThanosRulerSpecVolumesFcArgs, ThanosRulerSpecVolumesFcPtr and ThanosRulerSpecVolumesFcPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFcPtrInput` via:
//
//	        ThanosRulerSpecVolumesFcArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFcPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFcPtrOutput() ThanosRulerSpecVolumesFcPtrOutput
	ToThanosRulerSpecVolumesFcPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFcPtrOutput
}

type thanosRulerSpecVolumesFcPtrType ThanosRulerSpecVolumesFcArgs

func ThanosRulerSpecVolumesFcPtr(v *ThanosRulerSpecVolumesFcArgs) ThanosRulerSpecVolumesFcPtrInput {
	return (*thanosRulerSpecVolumesFcPtrType)(v)
}

func (*thanosRulerSpecVolumesFcPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFc)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFcPtrType) ToThanosRulerSpecVolumesFcPtrOutput() ThanosRulerSpecVolumesFcPtrOutput {
	return i.ToThanosRulerSpecVolumesFcPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFcPtrType) ToThanosRulerSpecVolumesFcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFcPtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type ThanosRulerSpecVolumesFcOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFc)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFcOutput) ToThanosRulerSpecVolumesFcOutput() ThanosRulerSpecVolumesFcOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcOutput) ToThanosRulerSpecVolumesFcOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcOutput) ToThanosRulerSpecVolumesFcPtrOutput() ThanosRulerSpecVolumesFcPtrOutput {
	return o.ToThanosRulerSpecVolumesFcPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFcOutput) ToThanosRulerSpecVolumesFcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFc) *ThanosRulerSpecVolumesFc {
		return &v
	}).(ThanosRulerSpecVolumesFcPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesFcOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFc) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o ThanosRulerSpecVolumesFcOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFc) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFcOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFc) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o ThanosRulerSpecVolumesFcOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFc) []string { return v.TargetWWNs }).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids)
// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o ThanosRulerSpecVolumesFcOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFc) []string { return v.Wwids }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecVolumesFcPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFcPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFc)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFcPtrOutput) ToThanosRulerSpecVolumesFcPtrOutput() ThanosRulerSpecVolumesFcPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcPtrOutput) ToThanosRulerSpecVolumesFcPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcPtrOutput) Elem() ThanosRulerSpecVolumesFcOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFc) ThanosRulerSpecVolumesFc {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFc
		return ret
	}).(ThanosRulerSpecVolumesFcOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesFcPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFc) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o ThanosRulerSpecVolumesFcPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFc) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFcPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFc) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o ThanosRulerSpecVolumesFcPtrOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFc) []string {
		if v == nil {
			return nil
		}
		return v.TargetWWNs
	}).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids)
// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o ThanosRulerSpecVolumesFcPtrOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFc) []string {
		if v == nil {
			return nil
		}
		return v.Wwids
	}).(pulumi.StringArrayOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type ThanosRulerSpecVolumesFcPatch struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun *int `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs []string `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids)
	// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids []string `pulumi:"wwids"`
}

// ThanosRulerSpecVolumesFcPatchInput is an input type that accepts ThanosRulerSpecVolumesFcPatchArgs and ThanosRulerSpecVolumesFcPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFcPatchInput` via:
//
//	ThanosRulerSpecVolumesFcPatchArgs{...}
type ThanosRulerSpecVolumesFcPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFcPatchOutput() ThanosRulerSpecVolumesFcPatchOutput
	ToThanosRulerSpecVolumesFcPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesFcPatchOutput
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type ThanosRulerSpecVolumesFcPatchArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// lun is Optional: FC target lun number
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// targetWWNs is Optional: FC target worldwide names (WWNs)
	TargetWWNs pulumi.StringArrayInput `pulumi:"targetWWNs"`
	// wwids Optional: FC volume world wide identifiers (wwids)
	// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
	Wwids pulumi.StringArrayInput `pulumi:"wwids"`
}

func (ThanosRulerSpecVolumesFcPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFcPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFcPatchArgs) ToThanosRulerSpecVolumesFcPatchOutput() ThanosRulerSpecVolumesFcPatchOutput {
	return i.ToThanosRulerSpecVolumesFcPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFcPatchArgs) ToThanosRulerSpecVolumesFcPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFcPatchOutput)
}

func (i ThanosRulerSpecVolumesFcPatchArgs) ToThanosRulerSpecVolumesFcPatchPtrOutput() ThanosRulerSpecVolumesFcPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFcPatchArgs) ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFcPatchOutput).ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFcPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesFcPatchArgs, ThanosRulerSpecVolumesFcPatchPtr and ThanosRulerSpecVolumesFcPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFcPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesFcPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFcPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFcPatchPtrOutput() ThanosRulerSpecVolumesFcPatchPtrOutput
	ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFcPatchPtrOutput
}

type thanosRulerSpecVolumesFcPatchPtrType ThanosRulerSpecVolumesFcPatchArgs

func ThanosRulerSpecVolumesFcPatchPtr(v *ThanosRulerSpecVolumesFcPatchArgs) ThanosRulerSpecVolumesFcPatchPtrInput {
	return (*thanosRulerSpecVolumesFcPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesFcPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFcPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFcPatchPtrType) ToThanosRulerSpecVolumesFcPatchPtrOutput() ThanosRulerSpecVolumesFcPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFcPatchPtrType) ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFcPatchPtrOutput)
}

// fc represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
type ThanosRulerSpecVolumesFcPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFcPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFcPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFcPatchOutput) ToThanosRulerSpecVolumesFcPatchOutput() ThanosRulerSpecVolumesFcPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcPatchOutput) ToThanosRulerSpecVolumesFcPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcPatchOutput) ToThanosRulerSpecVolumesFcPatchPtrOutput() ThanosRulerSpecVolumesFcPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFcPatchOutput) ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFcPatch) *ThanosRulerSpecVolumesFcPatch {
		return &v
	}).(ThanosRulerSpecVolumesFcPatchPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesFcPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFcPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o ThanosRulerSpecVolumesFcPatchOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFcPatch) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFcPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFcPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o ThanosRulerSpecVolumesFcPatchOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFcPatch) []string { return v.TargetWWNs }).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids)
// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o ThanosRulerSpecVolumesFcPatchOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFcPatch) []string { return v.Wwids }).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecVolumesFcPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFcPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFcPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFcPatchPtrOutput) ToThanosRulerSpecVolumesFcPatchPtrOutput() ThanosRulerSpecVolumesFcPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcPatchPtrOutput) ToThanosRulerSpecVolumesFcPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFcPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFcPatchPtrOutput) Elem() ThanosRulerSpecVolumesFcPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFcPatch) ThanosRulerSpecVolumesFcPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFcPatch
		return ret
	}).(ThanosRulerSpecVolumesFcPatchOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesFcPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFcPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// lun is Optional: FC target lun number
func (o ThanosRulerSpecVolumesFcPatchPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFcPatch) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// readOnly is Optional: Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFcPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFcPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// targetWWNs is Optional: FC target worldwide names (WWNs)
func (o ThanosRulerSpecVolumesFcPatchPtrOutput) TargetWWNs() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFcPatch) []string {
		if v == nil {
			return nil
		}
		return v.TargetWWNs
	}).(pulumi.StringArrayOutput)
}

// wwids Optional: FC volume world wide identifiers (wwids)
// Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
func (o ThanosRulerSpecVolumesFcPatchPtrOutput) Wwids() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFcPatch) []string {
		if v == nil {
			return nil
		}
		return v.Wwids
	}).(pulumi.StringArrayOutput)
}

// flexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin.
// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
type ThanosRulerSpecVolumesFlexVolume struct {
	// driver is the name of the driver to use for this volume.
	Driver *string `pulumi:"driver"`
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options map[string]string `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  *bool                                      `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesFlexVolumeSecretRef `pulumi:"secretRef"`
}

// ThanosRulerSpecVolumesFlexVolumeInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumeArgs and ThanosRulerSpecVolumesFlexVolumeOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumeInput` via:
//
//	ThanosRulerSpecVolumesFlexVolumeArgs{...}
type ThanosRulerSpecVolumesFlexVolumeInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumeOutput() ThanosRulerSpecVolumesFlexVolumeOutput
	ToThanosRulerSpecVolumesFlexVolumeOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumeOutput
}

// flexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin.
// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
type ThanosRulerSpecVolumesFlexVolumeArgs struct {
	// driver is the name of the driver to use for this volume.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  pulumi.BoolPtrInput                               `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesFlexVolumeSecretRefPtrInput `pulumi:"secretRef"`
}

func (ThanosRulerSpecVolumesFlexVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolume)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFlexVolumeArgs) ToThanosRulerSpecVolumesFlexVolumeOutput() ThanosRulerSpecVolumesFlexVolumeOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumeOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumeArgs) ToThanosRulerSpecVolumesFlexVolumeOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeOutput)
}

func (i ThanosRulerSpecVolumesFlexVolumeArgs) ToThanosRulerSpecVolumesFlexVolumePtrOutput() ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumeArgs) ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeOutput).ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFlexVolumePtrInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumeArgs, ThanosRulerSpecVolumesFlexVolumePtr and ThanosRulerSpecVolumesFlexVolumePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumePtrInput` via:
//
//	        ThanosRulerSpecVolumesFlexVolumeArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFlexVolumePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumePtrOutput() ThanosRulerSpecVolumesFlexVolumePtrOutput
	ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumePtrOutput
}

type thanosRulerSpecVolumesFlexVolumePtrType ThanosRulerSpecVolumesFlexVolumeArgs

func ThanosRulerSpecVolumesFlexVolumePtr(v *ThanosRulerSpecVolumesFlexVolumeArgs) ThanosRulerSpecVolumesFlexVolumePtrInput {
	return (*thanosRulerSpecVolumesFlexVolumePtrType)(v)
}

func (*thanosRulerSpecVolumesFlexVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolume)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFlexVolumePtrType) ToThanosRulerSpecVolumesFlexVolumePtrOutput() ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFlexVolumePtrType) ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumePtrOutput)
}

// flexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin.
// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
type ThanosRulerSpecVolumesFlexVolumeOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolume)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumeOutput) ToThanosRulerSpecVolumesFlexVolumeOutput() ThanosRulerSpecVolumesFlexVolumeOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeOutput) ToThanosRulerSpecVolumesFlexVolumeOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeOutput) ToThanosRulerSpecVolumesFlexVolumePtrOutput() ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return o.ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFlexVolumeOutput) ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFlexVolume) *ThanosRulerSpecVolumesFlexVolume {
		return &v
	}).(ThanosRulerSpecVolumesFlexVolumePtrOutput)
}

// driver is the name of the driver to use for this volume.
func (o ThanosRulerSpecVolumesFlexVolumeOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolume) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o ThanosRulerSpecVolumesFlexVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o ThanosRulerSpecVolumesFlexVolumeOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolume) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFlexVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesFlexVolumeOutput) SecretRef() ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolume) *ThanosRulerSpecVolumesFlexVolumeSecretRef {
		return v.SecretRef
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

type ThanosRulerSpecVolumesFlexVolumePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolume)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) ToThanosRulerSpecVolumesFlexVolumePtrOutput() ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) ToThanosRulerSpecVolumesFlexVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) Elem() ThanosRulerSpecVolumesFlexVolumeOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolume) ThanosRulerSpecVolumesFlexVolume {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFlexVolume
		return ret
	}).(ThanosRulerSpecVolumesFlexVolumeOutput)
}

// driver is the name of the driver to use for this volume.
func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolume) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolume) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesFlexVolumePtrOutput) SecretRef() ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolume) *ThanosRulerSpecVolumesFlexVolumeSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

// flexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin.
// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
type ThanosRulerSpecVolumesFlexVolumePatch struct {
	// driver is the name of the driver to use for this volume.
	Driver *string `pulumi:"driver"`
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType *string `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options map[string]string `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  *bool                                           `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesFlexVolumeSecretRefPatch `pulumi:"secretRef"`
}

// ThanosRulerSpecVolumesFlexVolumePatchInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumePatchArgs and ThanosRulerSpecVolumesFlexVolumePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumePatchInput` via:
//
//	ThanosRulerSpecVolumesFlexVolumePatchArgs{...}
type ThanosRulerSpecVolumesFlexVolumePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumePatchOutput() ThanosRulerSpecVolumesFlexVolumePatchOutput
	ToThanosRulerSpecVolumesFlexVolumePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumePatchOutput
}

// flexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin.
// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
type ThanosRulerSpecVolumesFlexVolumePatchArgs struct {
	// driver is the name of the driver to use for this volume.
	Driver pulumi.StringPtrInput `pulumi:"driver"`
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// options is Optional: this field holds extra command options if any.
	Options pulumi.StringMapInput `pulumi:"options"`
	// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  pulumi.BoolPtrInput                                    `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrInput `pulumi:"secretRef"`
}

func (ThanosRulerSpecVolumesFlexVolumePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFlexVolumePatchArgs) ToThanosRulerSpecVolumesFlexVolumePatchOutput() ThanosRulerSpecVolumesFlexVolumePatchOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumePatchArgs) ToThanosRulerSpecVolumesFlexVolumePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumePatchOutput)
}

func (i ThanosRulerSpecVolumesFlexVolumePatchArgs) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutput() ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumePatchArgs) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumePatchOutput).ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFlexVolumePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumePatchArgs, ThanosRulerSpecVolumesFlexVolumePatchPtr and ThanosRulerSpecVolumesFlexVolumePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesFlexVolumePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFlexVolumePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumePatchPtrOutput() ThanosRulerSpecVolumesFlexVolumePatchPtrOutput
	ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumePatchPtrOutput
}

type thanosRulerSpecVolumesFlexVolumePatchPtrType ThanosRulerSpecVolumesFlexVolumePatchArgs

func ThanosRulerSpecVolumesFlexVolumePatchPtr(v *ThanosRulerSpecVolumesFlexVolumePatchArgs) ThanosRulerSpecVolumesFlexVolumePatchPtrInput {
	return (*thanosRulerSpecVolumesFlexVolumePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesFlexVolumePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolumePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFlexVolumePatchPtrType) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutput() ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFlexVolumePatchPtrType) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumePatchPtrOutput)
}

// flexVolume represents a generic volume resource that is
// provisioned/attached using an exec based plugin.
// Deprecated: FlexVolume is deprecated. Consider using a CSIDriver instead.
type ThanosRulerSpecVolumesFlexVolumePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) ToThanosRulerSpecVolumesFlexVolumePatchOutput() ThanosRulerSpecVolumesFlexVolumePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) ToThanosRulerSpecVolumesFlexVolumePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutput() ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFlexVolumePatch) *ThanosRulerSpecVolumesFlexVolumePatch {
		return &v
	}).(ThanosRulerSpecVolumesFlexVolumePatchPtrOutput)
}

// driver is the name of the driver to use for this volume.
func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolumePatch) *string { return v.Driver }).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolumePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolumePatch) map[string]string { return v.Options }).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolumePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesFlexVolumePatchOutput) SecretRef() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolumePatch) *ThanosRulerSpecVolumesFlexVolumeSecretRefPatch {
		return v.SecretRef
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput)
}

type ThanosRulerSpecVolumesFlexVolumePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolumePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutput() ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) ToThanosRulerSpecVolumesFlexVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) Elem() ThanosRulerSpecVolumesFlexVolumePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumePatch) ThanosRulerSpecVolumesFlexVolumePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFlexVolumePatch
		return ret
	}).(ThanosRulerSpecVolumesFlexVolumePatchOutput)
}

// driver is the name of the driver to use for this volume.
func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) Driver() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.Driver
	}).(pulumi.StringPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// options is Optional: this field holds extra command options if any.
func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) Options() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumePatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.Options
	}).(pulumi.StringMapOutput)
}

// readOnly is Optional: defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesFlexVolumePatchPtrOutput) SecretRef() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumePatch) *ThanosRulerSpecVolumesFlexVolumeSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing
// sensitive information to pass to the plugin scripts. This may be
// empty if no secret object is specified. If the secret object
// contains more than one secret, all secrets are passed to the plugin
// scripts.
type ThanosRulerSpecVolumesFlexVolumeSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesFlexVolumeSecretRefInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumeSecretRefArgs and ThanosRulerSpecVolumesFlexVolumeSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumeSecretRefInput` via:
//
//	ThanosRulerSpecVolumesFlexVolumeSecretRefArgs{...}
type ThanosRulerSpecVolumesFlexVolumeSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumeSecretRefOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefOutput
	ToThanosRulerSpecVolumesFlexVolumeSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefOutput
}

// secretRef is Optional: secretRef is reference to the secret object containing
// sensitive information to pass to the plugin scripts. This may be
// empty if no secret object is specified. If the secret object
// contains more than one secret, all secrets are passed to the plugin
// scripts.
type ThanosRulerSpecVolumesFlexVolumeSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesFlexVolumeSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumeSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeSecretRefOutput)
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeSecretRefOutput).ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFlexVolumeSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumeSecretRefArgs, ThanosRulerSpecVolumesFlexVolumeSecretRefPtr and ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumeSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesFlexVolumeSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFlexVolumeSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput
	ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput
}

type thanosRulerSpecVolumesFlexVolumeSecretRefPtrType ThanosRulerSpecVolumesFlexVolumeSecretRefArgs

func ThanosRulerSpecVolumesFlexVolumeSecretRefPtr(v *ThanosRulerSpecVolumesFlexVolumeSecretRefArgs) ThanosRulerSpecVolumesFlexVolumeSecretRefPtrInput {
	return (*thanosRulerSpecVolumesFlexVolumeSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesFlexVolumeSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFlexVolumeSecretRefPtrType) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFlexVolumeSecretRefPtrType) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing
// sensitive information to pass to the plugin scripts. This may be
// empty if no secret object is specified. If the secret object
// contains more than one secret, all secrets are passed to the plugin
// scripts.
type ThanosRulerSpecVolumesFlexVolumeSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumeSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFlexVolumeSecretRef) *ThanosRulerSpecVolumesFlexVolumeSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesFlexVolumeSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolumeSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolumeSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesFlexVolumeSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumeSecretRef) ThanosRulerSpecVolumesFlexVolumeSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFlexVolumeSecretRef
		return ret
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumeSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing
// sensitive information to pass to the plugin scripts. This may be
// empty if no secret object is specified. If the secret object
// contains more than one secret, all secrets are passed to the plugin
// scripts.
type ThanosRulerSpecVolumesFlexVolumeSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesFlexVolumeSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs and ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumeSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesFlexVolumeSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput
	ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput
}

// secretRef is Optional: secretRef is reference to the secret object containing
// sensitive information to pass to the plugin scripts. This may be
// empty if no secret object is specified. If the secret object
// contains more than one secret, all secrets are passed to the plugin
// scripts.
type ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput).ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs, ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtr and ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrType ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs

func ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtr(v *ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolumeSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrType) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrType) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput)
}

// secretRef is Optional: secretRef is reference to the secret object containing
// sensitive information to pass to the plugin scripts. This may be
// empty if no secret object is specified. If the secret object
// contains more than one secret, all secrets are passed to the plugin
// scripts.
type ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFlexVolumeSecretRefPatch) *ThanosRulerSpecVolumesFlexVolumeSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlexVolumeSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlexVolumeSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumeSecretRefPatch) ThanosRulerSpecVolumesFlexVolumeSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFlexVolumeSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlexVolumeSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
type ThanosRulerSpecVolumesFlocker struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
	// should be considered as deprecated
	DatasetName *string `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `pulumi:"datasetUUID"`
}

// ThanosRulerSpecVolumesFlockerInput is an input type that accepts ThanosRulerSpecVolumesFlockerArgs and ThanosRulerSpecVolumesFlockerOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlockerInput` via:
//
//	ThanosRulerSpecVolumesFlockerArgs{...}
type ThanosRulerSpecVolumesFlockerInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlockerOutput() ThanosRulerSpecVolumesFlockerOutput
	ToThanosRulerSpecVolumesFlockerOutputWithContext(context.Context) ThanosRulerSpecVolumesFlockerOutput
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
type ThanosRulerSpecVolumesFlockerArgs struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
	// should be considered as deprecated
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID pulumi.StringPtrInput `pulumi:"datasetUUID"`
}

func (ThanosRulerSpecVolumesFlockerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlocker)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFlockerArgs) ToThanosRulerSpecVolumesFlockerOutput() ThanosRulerSpecVolumesFlockerOutput {
	return i.ToThanosRulerSpecVolumesFlockerOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlockerArgs) ToThanosRulerSpecVolumesFlockerOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlockerOutput)
}

func (i ThanosRulerSpecVolumesFlockerArgs) ToThanosRulerSpecVolumesFlockerPtrOutput() ThanosRulerSpecVolumesFlockerPtrOutput {
	return i.ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlockerArgs) ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlockerOutput).ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFlockerPtrInput is an input type that accepts ThanosRulerSpecVolumesFlockerArgs, ThanosRulerSpecVolumesFlockerPtr and ThanosRulerSpecVolumesFlockerPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlockerPtrInput` via:
//
//	        ThanosRulerSpecVolumesFlockerArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFlockerPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlockerPtrOutput() ThanosRulerSpecVolumesFlockerPtrOutput
	ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFlockerPtrOutput
}

type thanosRulerSpecVolumesFlockerPtrType ThanosRulerSpecVolumesFlockerArgs

func ThanosRulerSpecVolumesFlockerPtr(v *ThanosRulerSpecVolumesFlockerArgs) ThanosRulerSpecVolumesFlockerPtrInput {
	return (*thanosRulerSpecVolumesFlockerPtrType)(v)
}

func (*thanosRulerSpecVolumesFlockerPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlocker)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFlockerPtrType) ToThanosRulerSpecVolumesFlockerPtrOutput() ThanosRulerSpecVolumesFlockerPtrOutput {
	return i.ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFlockerPtrType) ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlockerPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
type ThanosRulerSpecVolumesFlockerOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlockerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlocker)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlockerOutput) ToThanosRulerSpecVolumesFlockerOutput() ThanosRulerSpecVolumesFlockerOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerOutput) ToThanosRulerSpecVolumesFlockerOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerOutput) ToThanosRulerSpecVolumesFlockerPtrOutput() ThanosRulerSpecVolumesFlockerPtrOutput {
	return o.ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFlockerOutput) ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFlocker) *ThanosRulerSpecVolumesFlocker {
		return &v
	}).(ThanosRulerSpecVolumesFlockerPtrOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
// should be considered as deprecated
func (o ThanosRulerSpecVolumesFlockerOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlocker) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o ThanosRulerSpecVolumesFlockerOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlocker) *string { return v.DatasetUUID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesFlockerPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlockerPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlocker)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlockerPtrOutput) ToThanosRulerSpecVolumesFlockerPtrOutput() ThanosRulerSpecVolumesFlockerPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerPtrOutput) ToThanosRulerSpecVolumesFlockerPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerPtrOutput) Elem() ThanosRulerSpecVolumesFlockerOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlocker) ThanosRulerSpecVolumesFlocker {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFlocker
		return ret
	}).(ThanosRulerSpecVolumesFlockerOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
// should be considered as deprecated
func (o ThanosRulerSpecVolumesFlockerPtrOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlocker) *string {
		if v == nil {
			return nil
		}
		return v.DatasetName
	}).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o ThanosRulerSpecVolumesFlockerPtrOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlocker) *string {
		if v == nil {
			return nil
		}
		return v.DatasetUUID
	}).(pulumi.StringPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
type ThanosRulerSpecVolumesFlockerPatch struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
	// should be considered as deprecated
	DatasetName *string `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID *string `pulumi:"datasetUUID"`
}

// ThanosRulerSpecVolumesFlockerPatchInput is an input type that accepts ThanosRulerSpecVolumesFlockerPatchArgs and ThanosRulerSpecVolumesFlockerPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlockerPatchInput` via:
//
//	ThanosRulerSpecVolumesFlockerPatchArgs{...}
type ThanosRulerSpecVolumesFlockerPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlockerPatchOutput() ThanosRulerSpecVolumesFlockerPatchOutput
	ToThanosRulerSpecVolumesFlockerPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesFlockerPatchOutput
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
type ThanosRulerSpecVolumesFlockerPatchArgs struct {
	// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
	// should be considered as deprecated
	DatasetName pulumi.StringPtrInput `pulumi:"datasetName"`
	// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
	DatasetUUID pulumi.StringPtrInput `pulumi:"datasetUUID"`
}

func (ThanosRulerSpecVolumesFlockerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlockerPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesFlockerPatchArgs) ToThanosRulerSpecVolumesFlockerPatchOutput() ThanosRulerSpecVolumesFlockerPatchOutput {
	return i.ToThanosRulerSpecVolumesFlockerPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlockerPatchArgs) ToThanosRulerSpecVolumesFlockerPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlockerPatchOutput)
}

func (i ThanosRulerSpecVolumesFlockerPatchArgs) ToThanosRulerSpecVolumesFlockerPatchPtrOutput() ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesFlockerPatchArgs) ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlockerPatchOutput).ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesFlockerPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesFlockerPatchArgs, ThanosRulerSpecVolumesFlockerPatchPtr and ThanosRulerSpecVolumesFlockerPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesFlockerPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesFlockerPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesFlockerPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesFlockerPatchPtrOutput() ThanosRulerSpecVolumesFlockerPatchPtrOutput
	ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesFlockerPatchPtrOutput
}

type thanosRulerSpecVolumesFlockerPatchPtrType ThanosRulerSpecVolumesFlockerPatchArgs

func ThanosRulerSpecVolumesFlockerPatchPtr(v *ThanosRulerSpecVolumesFlockerPatchArgs) ThanosRulerSpecVolumesFlockerPatchPtrInput {
	return (*thanosRulerSpecVolumesFlockerPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesFlockerPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlockerPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesFlockerPatchPtrType) ToThanosRulerSpecVolumesFlockerPatchPtrOutput() ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesFlockerPatchPtrType) ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesFlockerPatchPtrOutput)
}

// flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running.
// Deprecated: Flocker is deprecated and the in-tree flocker type is no longer supported.
type ThanosRulerSpecVolumesFlockerPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlockerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesFlockerPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlockerPatchOutput) ToThanosRulerSpecVolumesFlockerPatchOutput() ThanosRulerSpecVolumesFlockerPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerPatchOutput) ToThanosRulerSpecVolumesFlockerPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerPatchOutput) ToThanosRulerSpecVolumesFlockerPatchPtrOutput() ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesFlockerPatchOutput) ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesFlockerPatch) *ThanosRulerSpecVolumesFlockerPatch {
		return &v
	}).(ThanosRulerSpecVolumesFlockerPatchPtrOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
// should be considered as deprecated
func (o ThanosRulerSpecVolumesFlockerPatchOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlockerPatch) *string { return v.DatasetName }).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o ThanosRulerSpecVolumesFlockerPatchOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesFlockerPatch) *string { return v.DatasetUUID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesFlockerPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesFlockerPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesFlockerPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesFlockerPatchPtrOutput) ToThanosRulerSpecVolumesFlockerPatchPtrOutput() ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerPatchPtrOutput) ToThanosRulerSpecVolumesFlockerPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesFlockerPatchPtrOutput) Elem() ThanosRulerSpecVolumesFlockerPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlockerPatch) ThanosRulerSpecVolumesFlockerPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesFlockerPatch
		return ret
	}).(ThanosRulerSpecVolumesFlockerPatchOutput)
}

// datasetName is Name of the dataset stored as metadata -> name on the dataset for Flocker
// should be considered as deprecated
func (o ThanosRulerSpecVolumesFlockerPatchPtrOutput) DatasetName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlockerPatch) *string {
		if v == nil {
			return nil
		}
		return v.DatasetName
	}).(pulumi.StringPtrOutput)
}

// datasetUUID is the UUID of the dataset. This is unique identifier of a Flocker dataset
func (o ThanosRulerSpecVolumesFlockerPatchPtrOutput) DatasetUUID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesFlockerPatch) *string {
		if v == nil {
			return nil
		}
		return v.DatasetUUID
	}).(pulumi.StringPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type ThanosRulerSpecVolumesGcePersistentDisk struct {
	// fsType is filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName *string `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesGcePersistentDiskInput is an input type that accepts ThanosRulerSpecVolumesGcePersistentDiskArgs and ThanosRulerSpecVolumesGcePersistentDiskOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGcePersistentDiskInput` via:
//
//	ThanosRulerSpecVolumesGcePersistentDiskArgs{...}
type ThanosRulerSpecVolumesGcePersistentDiskInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGcePersistentDiskOutput() ThanosRulerSpecVolumesGcePersistentDiskOutput
	ToThanosRulerSpecVolumesGcePersistentDiskOutputWithContext(context.Context) ThanosRulerSpecVolumesGcePersistentDiskOutput
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type ThanosRulerSpecVolumesGcePersistentDiskArgs struct {
	// fsType is filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName pulumi.StringPtrInput `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesGcePersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesGcePersistentDiskArgs) ToThanosRulerSpecVolumesGcePersistentDiskOutput() ThanosRulerSpecVolumesGcePersistentDiskOutput {
	return i.ToThanosRulerSpecVolumesGcePersistentDiskOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGcePersistentDiskArgs) ToThanosRulerSpecVolumesGcePersistentDiskOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGcePersistentDiskOutput)
}

func (i ThanosRulerSpecVolumesGcePersistentDiskArgs) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return i.ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGcePersistentDiskArgs) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGcePersistentDiskOutput).ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesGcePersistentDiskPtrInput is an input type that accepts ThanosRulerSpecVolumesGcePersistentDiskArgs, ThanosRulerSpecVolumesGcePersistentDiskPtr and ThanosRulerSpecVolumesGcePersistentDiskPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGcePersistentDiskPtrInput` via:
//
//	        ThanosRulerSpecVolumesGcePersistentDiskArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesGcePersistentDiskPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGcePersistentDiskPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPtrOutput
	ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesGcePersistentDiskPtrOutput
}

type thanosRulerSpecVolumesGcePersistentDiskPtrType ThanosRulerSpecVolumesGcePersistentDiskArgs

func ThanosRulerSpecVolumesGcePersistentDiskPtr(v *ThanosRulerSpecVolumesGcePersistentDiskArgs) ThanosRulerSpecVolumesGcePersistentDiskPtrInput {
	return (*thanosRulerSpecVolumesGcePersistentDiskPtrType)(v)
}

func (*thanosRulerSpecVolumesGcePersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesGcePersistentDiskPtrType) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return i.ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesGcePersistentDiskPtrType) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGcePersistentDiskPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type ThanosRulerSpecVolumesGcePersistentDiskOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGcePersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) ToThanosRulerSpecVolumesGcePersistentDiskOutput() ThanosRulerSpecVolumesGcePersistentDiskOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) ToThanosRulerSpecVolumesGcePersistentDiskOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return o.ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesGcePersistentDisk) *ThanosRulerSpecVolumesGcePersistentDisk {
		return &v
	}).(ThanosRulerSpecVolumesGcePersistentDiskPtrOutput)
}

// fsType is filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDisk) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDisk) *string { return v.PdName }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDisk) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesGcePersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGcePersistentDisk)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) ToThanosRulerSpecVolumesGcePersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) Elem() ThanosRulerSpecVolumesGcePersistentDiskOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDisk) ThanosRulerSpecVolumesGcePersistentDisk {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesGcePersistentDisk
		return ret
	}).(ThanosRulerSpecVolumesGcePersistentDiskOutput)
}

// fsType is filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDisk) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.PdName
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDisk) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type ThanosRulerSpecVolumesGcePersistentDiskPatch struct {
	// fsType is filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType *string `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition *int `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName *string `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesGcePersistentDiskPatchInput is an input type that accepts ThanosRulerSpecVolumesGcePersistentDiskPatchArgs and ThanosRulerSpecVolumesGcePersistentDiskPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGcePersistentDiskPatchInput` via:
//
//	ThanosRulerSpecVolumesGcePersistentDiskPatchArgs{...}
type ThanosRulerSpecVolumesGcePersistentDiskPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGcePersistentDiskPatchOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchOutput
	ToThanosRulerSpecVolumesGcePersistentDiskPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchOutput
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type ThanosRulerSpecVolumesGcePersistentDiskPatchArgs struct {
	// fsType is filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// partition is the partition in the volume that you want to mount.
	// If omitted, the default is to mount by volume name.
	// Examples: For volume /dev/sda1, you specify the partition as "1".
	// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	Partition pulumi.IntPtrInput `pulumi:"partition"`
	// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	PdName pulumi.StringPtrInput `pulumi:"pdName"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesGcePersistentDiskPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDiskPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesGcePersistentDiskPatchArgs) ToThanosRulerSpecVolumesGcePersistentDiskPatchOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchOutput {
	return i.ToThanosRulerSpecVolumesGcePersistentDiskPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGcePersistentDiskPatchArgs) ToThanosRulerSpecVolumesGcePersistentDiskPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGcePersistentDiskPatchOutput)
}

func (i ThanosRulerSpecVolumesGcePersistentDiskPatchArgs) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGcePersistentDiskPatchArgs) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGcePersistentDiskPatchOutput).ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesGcePersistentDiskPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesGcePersistentDiskPatchArgs, ThanosRulerSpecVolumesGcePersistentDiskPatchPtr and ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGcePersistentDiskPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesGcePersistentDiskPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesGcePersistentDiskPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput
	ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput
}

type thanosRulerSpecVolumesGcePersistentDiskPatchPtrType ThanosRulerSpecVolumesGcePersistentDiskPatchArgs

func ThanosRulerSpecVolumesGcePersistentDiskPatchPtr(v *ThanosRulerSpecVolumesGcePersistentDiskPatchArgs) ThanosRulerSpecVolumesGcePersistentDiskPatchPtrInput {
	return (*thanosRulerSpecVolumesGcePersistentDiskPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesGcePersistentDiskPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGcePersistentDiskPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesGcePersistentDiskPatchPtrType) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesGcePersistentDiskPatchPtrType) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput)
}

// gcePersistentDisk represents a GCE Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// Deprecated: GCEPersistentDisk is deprecated. All operations for the in-tree
// gcePersistentDisk type are redirected to the pd.csi.storage.gke.io CSI driver.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
type ThanosRulerSpecVolumesGcePersistentDiskPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDiskPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) ToThanosRulerSpecVolumesGcePersistentDiskPatchOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) ToThanosRulerSpecVolumesGcePersistentDiskPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesGcePersistentDiskPatch) *ThanosRulerSpecVolumesGcePersistentDiskPatch {
		return &v
	}).(ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput)
}

// fsType is filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDiskPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDiskPatch) *int { return v.Partition }).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDiskPatch) *string { return v.PdName }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGcePersistentDiskPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGcePersistentDiskPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) ToThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) Elem() ThanosRulerSpecVolumesGcePersistentDiskPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDiskPatch) ThanosRulerSpecVolumesGcePersistentDiskPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesGcePersistentDiskPatch
		return ret
	}).(ThanosRulerSpecVolumesGcePersistentDiskPatchOutput)
}

// fsType is filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// partition is the partition in the volume that you want to mount.
// If omitted, the default is to mount by volume name.
// Examples: For volume /dev/sda1, you specify the partition as "1".
// Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) Partition() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDiskPatch) *int {
		if v == nil {
			return nil
		}
		return v.Partition
	}).(pulumi.IntPtrOutput)
}

// pdName is unique name of the PD resource in GCE. Used to identify the disk in GCE.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) PdName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.PdName
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
func (o ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGcePersistentDiskPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// gitRepo represents a git repository at a particular revision.
// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
// into the Pod's container.
type ThanosRulerSpecVolumesGitRepo struct {
	// directory is the target directory name.
	// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
	// git repository.  Otherwise, if specified, the volume will contain the git repository in
	// the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// repository is the URL
	Repository *string `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// ThanosRulerSpecVolumesGitRepoInput is an input type that accepts ThanosRulerSpecVolumesGitRepoArgs and ThanosRulerSpecVolumesGitRepoOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGitRepoInput` via:
//
//	ThanosRulerSpecVolumesGitRepoArgs{...}
type ThanosRulerSpecVolumesGitRepoInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGitRepoOutput() ThanosRulerSpecVolumesGitRepoOutput
	ToThanosRulerSpecVolumesGitRepoOutputWithContext(context.Context) ThanosRulerSpecVolumesGitRepoOutput
}

// gitRepo represents a git repository at a particular revision.
// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
// into the Pod's container.
type ThanosRulerSpecVolumesGitRepoArgs struct {
	// directory is the target directory name.
	// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
	// git repository.  Otherwise, if specified, the volume will contain the git repository in
	// the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// repository is the URL
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (ThanosRulerSpecVolumesGitRepoArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGitRepo)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesGitRepoArgs) ToThanosRulerSpecVolumesGitRepoOutput() ThanosRulerSpecVolumesGitRepoOutput {
	return i.ToThanosRulerSpecVolumesGitRepoOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGitRepoArgs) ToThanosRulerSpecVolumesGitRepoOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGitRepoOutput)
}

func (i ThanosRulerSpecVolumesGitRepoArgs) ToThanosRulerSpecVolumesGitRepoPtrOutput() ThanosRulerSpecVolumesGitRepoPtrOutput {
	return i.ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGitRepoArgs) ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGitRepoOutput).ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesGitRepoPtrInput is an input type that accepts ThanosRulerSpecVolumesGitRepoArgs, ThanosRulerSpecVolumesGitRepoPtr and ThanosRulerSpecVolumesGitRepoPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGitRepoPtrInput` via:
//
//	        ThanosRulerSpecVolumesGitRepoArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesGitRepoPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGitRepoPtrOutput() ThanosRulerSpecVolumesGitRepoPtrOutput
	ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesGitRepoPtrOutput
}

type thanosRulerSpecVolumesGitRepoPtrType ThanosRulerSpecVolumesGitRepoArgs

func ThanosRulerSpecVolumesGitRepoPtr(v *ThanosRulerSpecVolumesGitRepoArgs) ThanosRulerSpecVolumesGitRepoPtrInput {
	return (*thanosRulerSpecVolumesGitRepoPtrType)(v)
}

func (*thanosRulerSpecVolumesGitRepoPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGitRepo)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesGitRepoPtrType) ToThanosRulerSpecVolumesGitRepoPtrOutput() ThanosRulerSpecVolumesGitRepoPtrOutput {
	return i.ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesGitRepoPtrType) ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGitRepoPtrOutput)
}

// gitRepo represents a git repository at a particular revision.
// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
// into the Pod's container.
type ThanosRulerSpecVolumesGitRepoOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGitRepoOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGitRepo)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGitRepoOutput) ToThanosRulerSpecVolumesGitRepoOutput() ThanosRulerSpecVolumesGitRepoOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoOutput) ToThanosRulerSpecVolumesGitRepoOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoOutput) ToThanosRulerSpecVolumesGitRepoPtrOutput() ThanosRulerSpecVolumesGitRepoPtrOutput {
	return o.ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesGitRepoOutput) ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesGitRepo) *ThanosRulerSpecVolumesGitRepo {
		return &v
	}).(ThanosRulerSpecVolumesGitRepoPtrOutput)
}

// directory is the target directory name.
// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
// git repository.  Otherwise, if specified, the volume will contain the git repository in
// the subdirectory with the given name.
func (o ThanosRulerSpecVolumesGitRepoOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGitRepo) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o ThanosRulerSpecVolumesGitRepoOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGitRepo) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o ThanosRulerSpecVolumesGitRepoOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGitRepo) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesGitRepoPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGitRepoPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGitRepo)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGitRepoPtrOutput) ToThanosRulerSpecVolumesGitRepoPtrOutput() ThanosRulerSpecVolumesGitRepoPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoPtrOutput) ToThanosRulerSpecVolumesGitRepoPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoPtrOutput) Elem() ThanosRulerSpecVolumesGitRepoOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepo) ThanosRulerSpecVolumesGitRepo {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesGitRepo
		return ret
	}).(ThanosRulerSpecVolumesGitRepoOutput)
}

// directory is the target directory name.
// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
// git repository.  Otherwise, if specified, the volume will contain the git repository in
// the subdirectory with the given name.
func (o ThanosRulerSpecVolumesGitRepoPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepo) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o ThanosRulerSpecVolumesGitRepoPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepo) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o ThanosRulerSpecVolumesGitRepoPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepo) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// gitRepo represents a git repository at a particular revision.
// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
// into the Pod's container.
type ThanosRulerSpecVolumesGitRepoPatch struct {
	// directory is the target directory name.
	// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
	// git repository.  Otherwise, if specified, the volume will contain the git repository in
	// the subdirectory with the given name.
	Directory *string `pulumi:"directory"`
	// repository is the URL
	Repository *string `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision *string `pulumi:"revision"`
}

// ThanosRulerSpecVolumesGitRepoPatchInput is an input type that accepts ThanosRulerSpecVolumesGitRepoPatchArgs and ThanosRulerSpecVolumesGitRepoPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGitRepoPatchInput` via:
//
//	ThanosRulerSpecVolumesGitRepoPatchArgs{...}
type ThanosRulerSpecVolumesGitRepoPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGitRepoPatchOutput() ThanosRulerSpecVolumesGitRepoPatchOutput
	ToThanosRulerSpecVolumesGitRepoPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesGitRepoPatchOutput
}

// gitRepo represents a git repository at a particular revision.
// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
// into the Pod's container.
type ThanosRulerSpecVolumesGitRepoPatchArgs struct {
	// directory is the target directory name.
	// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
	// git repository.  Otherwise, if specified, the volume will contain the git repository in
	// the subdirectory with the given name.
	Directory pulumi.StringPtrInput `pulumi:"directory"`
	// repository is the URL
	Repository pulumi.StringPtrInput `pulumi:"repository"`
	// revision is the commit hash for the specified revision.
	Revision pulumi.StringPtrInput `pulumi:"revision"`
}

func (ThanosRulerSpecVolumesGitRepoPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGitRepoPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesGitRepoPatchArgs) ToThanosRulerSpecVolumesGitRepoPatchOutput() ThanosRulerSpecVolumesGitRepoPatchOutput {
	return i.ToThanosRulerSpecVolumesGitRepoPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGitRepoPatchArgs) ToThanosRulerSpecVolumesGitRepoPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGitRepoPatchOutput)
}

func (i ThanosRulerSpecVolumesGitRepoPatchArgs) ToThanosRulerSpecVolumesGitRepoPatchPtrOutput() ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGitRepoPatchArgs) ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGitRepoPatchOutput).ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesGitRepoPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesGitRepoPatchArgs, ThanosRulerSpecVolumesGitRepoPatchPtr and ThanosRulerSpecVolumesGitRepoPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGitRepoPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesGitRepoPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesGitRepoPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGitRepoPatchPtrOutput() ThanosRulerSpecVolumesGitRepoPatchPtrOutput
	ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesGitRepoPatchPtrOutput
}

type thanosRulerSpecVolumesGitRepoPatchPtrType ThanosRulerSpecVolumesGitRepoPatchArgs

func ThanosRulerSpecVolumesGitRepoPatchPtr(v *ThanosRulerSpecVolumesGitRepoPatchArgs) ThanosRulerSpecVolumesGitRepoPatchPtrInput {
	return (*thanosRulerSpecVolumesGitRepoPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesGitRepoPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGitRepoPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesGitRepoPatchPtrType) ToThanosRulerSpecVolumesGitRepoPatchPtrOutput() ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesGitRepoPatchPtrType) ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGitRepoPatchPtrOutput)
}

// gitRepo represents a git repository at a particular revision.
// Deprecated: GitRepo is deprecated. To provision a container with a git repo, mount an
// EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir
// into the Pod's container.
type ThanosRulerSpecVolumesGitRepoPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGitRepoPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGitRepoPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGitRepoPatchOutput) ToThanosRulerSpecVolumesGitRepoPatchOutput() ThanosRulerSpecVolumesGitRepoPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoPatchOutput) ToThanosRulerSpecVolumesGitRepoPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoPatchOutput) ToThanosRulerSpecVolumesGitRepoPatchPtrOutput() ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesGitRepoPatchOutput) ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesGitRepoPatch) *ThanosRulerSpecVolumesGitRepoPatch {
		return &v
	}).(ThanosRulerSpecVolumesGitRepoPatchPtrOutput)
}

// directory is the target directory name.
// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
// git repository.  Otherwise, if specified, the volume will contain the git repository in
// the subdirectory with the given name.
func (o ThanosRulerSpecVolumesGitRepoPatchOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGitRepoPatch) *string { return v.Directory }).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o ThanosRulerSpecVolumesGitRepoPatchOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGitRepoPatch) *string { return v.Repository }).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o ThanosRulerSpecVolumesGitRepoPatchOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGitRepoPatch) *string { return v.Revision }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesGitRepoPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGitRepoPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGitRepoPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGitRepoPatchPtrOutput) ToThanosRulerSpecVolumesGitRepoPatchPtrOutput() ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoPatchPtrOutput) ToThanosRulerSpecVolumesGitRepoPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGitRepoPatchPtrOutput) Elem() ThanosRulerSpecVolumesGitRepoPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepoPatch) ThanosRulerSpecVolumesGitRepoPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesGitRepoPatch
		return ret
	}).(ThanosRulerSpecVolumesGitRepoPatchOutput)
}

// directory is the target directory name.
// Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the
// git repository.  Otherwise, if specified, the volume will contain the git repository in
// the subdirectory with the given name.
func (o ThanosRulerSpecVolumesGitRepoPatchPtrOutput) Directory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepoPatch) *string {
		if v == nil {
			return nil
		}
		return v.Directory
	}).(pulumi.StringPtrOutput)
}

// repository is the URL
func (o ThanosRulerSpecVolumesGitRepoPatchPtrOutput) Repository() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepoPatch) *string {
		if v == nil {
			return nil
		}
		return v.Repository
	}).(pulumi.StringPtrOutput)
}

// revision is the commit hash for the specified revision.
func (o ThanosRulerSpecVolumesGitRepoPatchPtrOutput) Revision() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGitRepoPatch) *string {
		if v == nil {
			return nil
		}
		return v.Revision
	}).(pulumi.StringPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md
type ThanosRulerSpecVolumesGlusterfs struct {
	// endpoints is the endpoint name that details Glusterfs topology.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints *string `pulumi:"endpoints"`
	// path is the Glusterfs volume path.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path *string `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesGlusterfsInput is an input type that accepts ThanosRulerSpecVolumesGlusterfsArgs and ThanosRulerSpecVolumesGlusterfsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGlusterfsInput` via:
//
//	ThanosRulerSpecVolumesGlusterfsArgs{...}
type ThanosRulerSpecVolumesGlusterfsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGlusterfsOutput() ThanosRulerSpecVolumesGlusterfsOutput
	ToThanosRulerSpecVolumesGlusterfsOutputWithContext(context.Context) ThanosRulerSpecVolumesGlusterfsOutput
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md
type ThanosRulerSpecVolumesGlusterfsArgs struct {
	// endpoints is the endpoint name that details Glusterfs topology.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringPtrInput `pulumi:"endpoints"`
	// path is the Glusterfs volume path.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesGlusterfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfs)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesGlusterfsArgs) ToThanosRulerSpecVolumesGlusterfsOutput() ThanosRulerSpecVolumesGlusterfsOutput {
	return i.ToThanosRulerSpecVolumesGlusterfsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGlusterfsArgs) ToThanosRulerSpecVolumesGlusterfsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGlusterfsOutput)
}

func (i ThanosRulerSpecVolumesGlusterfsArgs) ToThanosRulerSpecVolumesGlusterfsPtrOutput() ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return i.ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGlusterfsArgs) ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGlusterfsOutput).ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesGlusterfsPtrInput is an input type that accepts ThanosRulerSpecVolumesGlusterfsArgs, ThanosRulerSpecVolumesGlusterfsPtr and ThanosRulerSpecVolumesGlusterfsPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGlusterfsPtrInput` via:
//
//	        ThanosRulerSpecVolumesGlusterfsArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesGlusterfsPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGlusterfsPtrOutput() ThanosRulerSpecVolumesGlusterfsPtrOutput
	ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesGlusterfsPtrOutput
}

type thanosRulerSpecVolumesGlusterfsPtrType ThanosRulerSpecVolumesGlusterfsArgs

func ThanosRulerSpecVolumesGlusterfsPtr(v *ThanosRulerSpecVolumesGlusterfsArgs) ThanosRulerSpecVolumesGlusterfsPtrInput {
	return (*thanosRulerSpecVolumesGlusterfsPtrType)(v)
}

func (*thanosRulerSpecVolumesGlusterfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGlusterfs)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesGlusterfsPtrType) ToThanosRulerSpecVolumesGlusterfsPtrOutput() ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return i.ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesGlusterfsPtrType) ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGlusterfsPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md
type ThanosRulerSpecVolumesGlusterfsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGlusterfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfs)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGlusterfsOutput) ToThanosRulerSpecVolumesGlusterfsOutput() ThanosRulerSpecVolumesGlusterfsOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsOutput) ToThanosRulerSpecVolumesGlusterfsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsOutput) ToThanosRulerSpecVolumesGlusterfsPtrOutput() ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return o.ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesGlusterfsOutput) ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesGlusterfs) *ThanosRulerSpecVolumesGlusterfs {
		return &v
	}).(ThanosRulerSpecVolumesGlusterfsPtrOutput)
}

// endpoints is the endpoint name that details Glusterfs topology.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGlusterfs) *string { return v.Endpoints }).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGlusterfs) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGlusterfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesGlusterfsPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGlusterfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGlusterfs)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGlusterfsPtrOutput) ToThanosRulerSpecVolumesGlusterfsPtrOutput() ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsPtrOutput) ToThanosRulerSpecVolumesGlusterfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsPtrOutput) Elem() ThanosRulerSpecVolumesGlusterfsOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfs) ThanosRulerSpecVolumesGlusterfs {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesGlusterfs
		return ret
	}).(ThanosRulerSpecVolumesGlusterfsOutput)
}

// endpoints is the endpoint name that details Glusterfs topology.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfs) *string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfs) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md
type ThanosRulerSpecVolumesGlusterfsPatch struct {
	// endpoints is the endpoint name that details Glusterfs topology.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints *string `pulumi:"endpoints"`
	// path is the Glusterfs volume path.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path *string `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesGlusterfsPatchInput is an input type that accepts ThanosRulerSpecVolumesGlusterfsPatchArgs and ThanosRulerSpecVolumesGlusterfsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGlusterfsPatchInput` via:
//
//	ThanosRulerSpecVolumesGlusterfsPatchArgs{...}
type ThanosRulerSpecVolumesGlusterfsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGlusterfsPatchOutput() ThanosRulerSpecVolumesGlusterfsPatchOutput
	ToThanosRulerSpecVolumesGlusterfsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesGlusterfsPatchOutput
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md
type ThanosRulerSpecVolumesGlusterfsPatchArgs struct {
	// endpoints is the endpoint name that details Glusterfs topology.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Endpoints pulumi.StringPtrInput `pulumi:"endpoints"`
	// path is the Glusterfs volume path.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesGlusterfsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesGlusterfsPatchArgs) ToThanosRulerSpecVolumesGlusterfsPatchOutput() ThanosRulerSpecVolumesGlusterfsPatchOutput {
	return i.ToThanosRulerSpecVolumesGlusterfsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGlusterfsPatchArgs) ToThanosRulerSpecVolumesGlusterfsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGlusterfsPatchOutput)
}

func (i ThanosRulerSpecVolumesGlusterfsPatchArgs) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutput() ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesGlusterfsPatchArgs) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGlusterfsPatchOutput).ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesGlusterfsPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesGlusterfsPatchArgs, ThanosRulerSpecVolumesGlusterfsPatchPtr and ThanosRulerSpecVolumesGlusterfsPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesGlusterfsPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesGlusterfsPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesGlusterfsPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesGlusterfsPatchPtrOutput() ThanosRulerSpecVolumesGlusterfsPatchPtrOutput
	ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesGlusterfsPatchPtrOutput
}

type thanosRulerSpecVolumesGlusterfsPatchPtrType ThanosRulerSpecVolumesGlusterfsPatchArgs

func ThanosRulerSpecVolumesGlusterfsPatchPtr(v *ThanosRulerSpecVolumesGlusterfsPatchArgs) ThanosRulerSpecVolumesGlusterfsPatchPtrInput {
	return (*thanosRulerSpecVolumesGlusterfsPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesGlusterfsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGlusterfsPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesGlusterfsPatchPtrType) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutput() ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesGlusterfsPatchPtrType) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesGlusterfsPatchPtrOutput)
}

// glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime.
// Deprecated: Glusterfs is deprecated and the in-tree glusterfs type is no longer supported.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md
type ThanosRulerSpecVolumesGlusterfsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGlusterfsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGlusterfsPatchOutput) ToThanosRulerSpecVolumesGlusterfsPatchOutput() ThanosRulerSpecVolumesGlusterfsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsPatchOutput) ToThanosRulerSpecVolumesGlusterfsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsPatchOutput) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutput() ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesGlusterfsPatchOutput) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesGlusterfsPatch) *ThanosRulerSpecVolumesGlusterfsPatch {
		return &v
	}).(ThanosRulerSpecVolumesGlusterfsPatchPtrOutput)
}

// endpoints is the endpoint name that details Glusterfs topology.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPatchOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGlusterfsPatch) *string { return v.Endpoints }).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGlusterfsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesGlusterfsPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesGlusterfsPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesGlusterfsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesGlusterfsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesGlusterfsPatchPtrOutput) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutput() ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsPatchPtrOutput) ToThanosRulerSpecVolumesGlusterfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesGlusterfsPatchPtrOutput) Elem() ThanosRulerSpecVolumesGlusterfsPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfsPatch) ThanosRulerSpecVolumesGlusterfsPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesGlusterfsPatch
		return ret
	}).(ThanosRulerSpecVolumesGlusterfsPatchOutput)
}

// endpoints is the endpoint name that details Glusterfs topology.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPatchPtrOutput) Endpoints() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Endpoints
	}).(pulumi.StringPtrOutput)
}

// path is the Glusterfs volume path.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Glusterfs volume to be mounted with read-only permissions.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
func (o ThanosRulerSpecVolumesGlusterfsPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesGlusterfsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host
// machine that is directly exposed to the container. This is generally
// used for system agents or other privileged things that are allowed
// to see the host machine. Most containers will NOT need this.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
type ThanosRulerSpecVolumesHostPath struct {
	// path of the directory on the host.
	// If the path is a symlink, it will follow the link to the real path.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path *string `pulumi:"path"`
	// type for HostPath Volume
	// Defaults to ""
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecVolumesHostPathInput is an input type that accepts ThanosRulerSpecVolumesHostPathArgs and ThanosRulerSpecVolumesHostPathOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesHostPathInput` via:
//
//	ThanosRulerSpecVolumesHostPathArgs{...}
type ThanosRulerSpecVolumesHostPathInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesHostPathOutput() ThanosRulerSpecVolumesHostPathOutput
	ToThanosRulerSpecVolumesHostPathOutputWithContext(context.Context) ThanosRulerSpecVolumesHostPathOutput
}

// hostPath represents a pre-existing file or directory on the host
// machine that is directly exposed to the container. This is generally
// used for system agents or other privileged things that are allowed
// to see the host machine. Most containers will NOT need this.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
type ThanosRulerSpecVolumesHostPathArgs struct {
	// path of the directory on the host.
	// If the path is a symlink, it will follow the link to the real path.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path pulumi.StringPtrInput `pulumi:"path"`
	// type for HostPath Volume
	// Defaults to ""
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecVolumesHostPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesHostPath)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesHostPathArgs) ToThanosRulerSpecVolumesHostPathOutput() ThanosRulerSpecVolumesHostPathOutput {
	return i.ToThanosRulerSpecVolumesHostPathOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesHostPathArgs) ToThanosRulerSpecVolumesHostPathOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesHostPathOutput)
}

func (i ThanosRulerSpecVolumesHostPathArgs) ToThanosRulerSpecVolumesHostPathPtrOutput() ThanosRulerSpecVolumesHostPathPtrOutput {
	return i.ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesHostPathArgs) ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesHostPathOutput).ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesHostPathPtrInput is an input type that accepts ThanosRulerSpecVolumesHostPathArgs, ThanosRulerSpecVolumesHostPathPtr and ThanosRulerSpecVolumesHostPathPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesHostPathPtrInput` via:
//
//	        ThanosRulerSpecVolumesHostPathArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesHostPathPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesHostPathPtrOutput() ThanosRulerSpecVolumesHostPathPtrOutput
	ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesHostPathPtrOutput
}

type thanosRulerSpecVolumesHostPathPtrType ThanosRulerSpecVolumesHostPathArgs

func ThanosRulerSpecVolumesHostPathPtr(v *ThanosRulerSpecVolumesHostPathArgs) ThanosRulerSpecVolumesHostPathPtrInput {
	return (*thanosRulerSpecVolumesHostPathPtrType)(v)
}

func (*thanosRulerSpecVolumesHostPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesHostPath)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesHostPathPtrType) ToThanosRulerSpecVolumesHostPathPtrOutput() ThanosRulerSpecVolumesHostPathPtrOutput {
	return i.ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesHostPathPtrType) ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesHostPathPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host
// machine that is directly exposed to the container. This is generally
// used for system agents or other privileged things that are allowed
// to see the host machine. Most containers will NOT need this.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
type ThanosRulerSpecVolumesHostPathOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesHostPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesHostPath)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesHostPathOutput) ToThanosRulerSpecVolumesHostPathOutput() ThanosRulerSpecVolumesHostPathOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathOutput) ToThanosRulerSpecVolumesHostPathOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathOutput) ToThanosRulerSpecVolumesHostPathPtrOutput() ThanosRulerSpecVolumesHostPathPtrOutput {
	return o.ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesHostPathOutput) ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesHostPath) *ThanosRulerSpecVolumesHostPath {
		return &v
	}).(ThanosRulerSpecVolumesHostPathPtrOutput)
}

// path of the directory on the host.
// If the path is a symlink, it will follow the link to the real path.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesHostPath) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// type for HostPath Volume
// Defaults to ""
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesHostPath) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesHostPathPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesHostPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesHostPath)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesHostPathPtrOutput) ToThanosRulerSpecVolumesHostPathPtrOutput() ThanosRulerSpecVolumesHostPathPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathPtrOutput) ToThanosRulerSpecVolumesHostPathPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathPtrOutput) Elem() ThanosRulerSpecVolumesHostPathOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesHostPath) ThanosRulerSpecVolumesHostPath {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesHostPath
		return ret
	}).(ThanosRulerSpecVolumesHostPathOutput)
}

// path of the directory on the host.
// If the path is a symlink, it will follow the link to the real path.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesHostPath) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// type for HostPath Volume
// Defaults to ""
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesHostPath) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host
// machine that is directly exposed to the container. This is generally
// used for system agents or other privileged things that are allowed
// to see the host machine. Most containers will NOT need this.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
type ThanosRulerSpecVolumesHostPathPatch struct {
	// path of the directory on the host.
	// If the path is a symlink, it will follow the link to the real path.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path *string `pulumi:"path"`
	// type for HostPath Volume
	// Defaults to ""
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type *string `pulumi:"type"`
}

// ThanosRulerSpecVolumesHostPathPatchInput is an input type that accepts ThanosRulerSpecVolumesHostPathPatchArgs and ThanosRulerSpecVolumesHostPathPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesHostPathPatchInput` via:
//
//	ThanosRulerSpecVolumesHostPathPatchArgs{...}
type ThanosRulerSpecVolumesHostPathPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesHostPathPatchOutput() ThanosRulerSpecVolumesHostPathPatchOutput
	ToThanosRulerSpecVolumesHostPathPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesHostPathPatchOutput
}

// hostPath represents a pre-existing file or directory on the host
// machine that is directly exposed to the container. This is generally
// used for system agents or other privileged things that are allowed
// to see the host machine. Most containers will NOT need this.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
type ThanosRulerSpecVolumesHostPathPatchArgs struct {
	// path of the directory on the host.
	// If the path is a symlink, it will follow the link to the real path.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Path pulumi.StringPtrInput `pulumi:"path"`
	// type for HostPath Volume
	// Defaults to ""
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerSpecVolumesHostPathPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesHostPathPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesHostPathPatchArgs) ToThanosRulerSpecVolumesHostPathPatchOutput() ThanosRulerSpecVolumesHostPathPatchOutput {
	return i.ToThanosRulerSpecVolumesHostPathPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesHostPathPatchArgs) ToThanosRulerSpecVolumesHostPathPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesHostPathPatchOutput)
}

func (i ThanosRulerSpecVolumesHostPathPatchArgs) ToThanosRulerSpecVolumesHostPathPatchPtrOutput() ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesHostPathPatchArgs) ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesHostPathPatchOutput).ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesHostPathPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesHostPathPatchArgs, ThanosRulerSpecVolumesHostPathPatchPtr and ThanosRulerSpecVolumesHostPathPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesHostPathPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesHostPathPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesHostPathPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesHostPathPatchPtrOutput() ThanosRulerSpecVolumesHostPathPatchPtrOutput
	ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesHostPathPatchPtrOutput
}

type thanosRulerSpecVolumesHostPathPatchPtrType ThanosRulerSpecVolumesHostPathPatchArgs

func ThanosRulerSpecVolumesHostPathPatchPtr(v *ThanosRulerSpecVolumesHostPathPatchArgs) ThanosRulerSpecVolumesHostPathPatchPtrInput {
	return (*thanosRulerSpecVolumesHostPathPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesHostPathPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesHostPathPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesHostPathPatchPtrType) ToThanosRulerSpecVolumesHostPathPatchPtrOutput() ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesHostPathPatchPtrType) ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesHostPathPatchPtrOutput)
}

// hostPath represents a pre-existing file or directory on the host
// machine that is directly exposed to the container. This is generally
// used for system agents or other privileged things that are allowed
// to see the host machine. Most containers will NOT need this.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
type ThanosRulerSpecVolumesHostPathPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesHostPathPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesHostPathPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesHostPathPatchOutput) ToThanosRulerSpecVolumesHostPathPatchOutput() ThanosRulerSpecVolumesHostPathPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathPatchOutput) ToThanosRulerSpecVolumesHostPathPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathPatchOutput) ToThanosRulerSpecVolumesHostPathPatchPtrOutput() ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesHostPathPatchOutput) ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesHostPathPatch) *ThanosRulerSpecVolumesHostPathPatch {
		return &v
	}).(ThanosRulerSpecVolumesHostPathPatchPtrOutput)
}

// path of the directory on the host.
// If the path is a symlink, it will follow the link to the real path.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesHostPathPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// type for HostPath Volume
// Defaults to ""
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesHostPathPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesHostPathPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesHostPathPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesHostPathPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesHostPathPatchPtrOutput) ToThanosRulerSpecVolumesHostPathPatchPtrOutput() ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathPatchPtrOutput) ToThanosRulerSpecVolumesHostPathPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesHostPathPatchPtrOutput) Elem() ThanosRulerSpecVolumesHostPathPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesHostPathPatch) ThanosRulerSpecVolumesHostPathPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesHostPathPatch
		return ret
	}).(ThanosRulerSpecVolumesHostPathPatchOutput)
}

// path of the directory on the host.
// If the path is a symlink, it will follow the link to the real path.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesHostPathPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// type for HostPath Volume
// Defaults to ""
// More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
func (o ThanosRulerSpecVolumesHostPathPatchPtrOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesHostPathPatch) *string {
		if v == nil {
			return nil
		}
		return v.Type
	}).(pulumi.StringPtrOutput)
}

// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
// The volume is resolved at pod startup depending on which PullPolicy value is provided:
//
// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
//
// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
// The volume will be mounted read-only (ro) and non-executable files (noexec).
// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
type ThanosRulerSpecVolumesImage struct {
	// Policy for pulling OCI objects. Possible values are:
	// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
	// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
	// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	PullPolicy *string `pulumi:"pullPolicy"`
	// Required: Image or artifact reference to be used.
	// Behaves in the same way as pod.spec.containers[*].image.
	// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// This field is optional to allow higher level config management to default or override
	// container images in workload controllers like Deployments and StatefulSets.
	Reference *string `pulumi:"reference"`
}

// ThanosRulerSpecVolumesImageInput is an input type that accepts ThanosRulerSpecVolumesImageArgs and ThanosRulerSpecVolumesImageOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesImageInput` via:
//
//	ThanosRulerSpecVolumesImageArgs{...}
type ThanosRulerSpecVolumesImageInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesImageOutput() ThanosRulerSpecVolumesImageOutput
	ToThanosRulerSpecVolumesImageOutputWithContext(context.Context) ThanosRulerSpecVolumesImageOutput
}

// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
// The volume is resolved at pod startup depending on which PullPolicy value is provided:
//
// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
//
// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
// The volume will be mounted read-only (ro) and non-executable files (noexec).
// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
type ThanosRulerSpecVolumesImageArgs struct {
	// Policy for pulling OCI objects. Possible values are:
	// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
	// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
	// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	PullPolicy pulumi.StringPtrInput `pulumi:"pullPolicy"`
	// Required: Image or artifact reference to be used.
	// Behaves in the same way as pod.spec.containers[*].image.
	// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// This field is optional to allow higher level config management to default or override
	// container images in workload controllers like Deployments and StatefulSets.
	Reference pulumi.StringPtrInput `pulumi:"reference"`
}

func (ThanosRulerSpecVolumesImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesImage)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesImageArgs) ToThanosRulerSpecVolumesImageOutput() ThanosRulerSpecVolumesImageOutput {
	return i.ToThanosRulerSpecVolumesImageOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesImageArgs) ToThanosRulerSpecVolumesImageOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesImageOutput)
}

func (i ThanosRulerSpecVolumesImageArgs) ToThanosRulerSpecVolumesImagePtrOutput() ThanosRulerSpecVolumesImagePtrOutput {
	return i.ToThanosRulerSpecVolumesImagePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesImageArgs) ToThanosRulerSpecVolumesImagePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesImageOutput).ToThanosRulerSpecVolumesImagePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesImagePtrInput is an input type that accepts ThanosRulerSpecVolumesImageArgs, ThanosRulerSpecVolumesImagePtr and ThanosRulerSpecVolumesImagePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesImagePtrInput` via:
//
//	        ThanosRulerSpecVolumesImageArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesImagePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesImagePtrOutput() ThanosRulerSpecVolumesImagePtrOutput
	ToThanosRulerSpecVolumesImagePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesImagePtrOutput
}

type thanosRulerSpecVolumesImagePtrType ThanosRulerSpecVolumesImageArgs

func ThanosRulerSpecVolumesImagePtr(v *ThanosRulerSpecVolumesImageArgs) ThanosRulerSpecVolumesImagePtrInput {
	return (*thanosRulerSpecVolumesImagePtrType)(v)
}

func (*thanosRulerSpecVolumesImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesImage)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesImagePtrType) ToThanosRulerSpecVolumesImagePtrOutput() ThanosRulerSpecVolumesImagePtrOutput {
	return i.ToThanosRulerSpecVolumesImagePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesImagePtrType) ToThanosRulerSpecVolumesImagePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesImagePtrOutput)
}

// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
// The volume is resolved at pod startup depending on which PullPolicy value is provided:
//
// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
//
// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
// The volume will be mounted read-only (ro) and non-executable files (noexec).
// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
type ThanosRulerSpecVolumesImageOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesImage)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesImageOutput) ToThanosRulerSpecVolumesImageOutput() ThanosRulerSpecVolumesImageOutput {
	return o
}

func (o ThanosRulerSpecVolumesImageOutput) ToThanosRulerSpecVolumesImageOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImageOutput {
	return o
}

func (o ThanosRulerSpecVolumesImageOutput) ToThanosRulerSpecVolumesImagePtrOutput() ThanosRulerSpecVolumesImagePtrOutput {
	return o.ToThanosRulerSpecVolumesImagePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesImageOutput) ToThanosRulerSpecVolumesImagePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesImage) *ThanosRulerSpecVolumesImage {
		return &v
	}).(ThanosRulerSpecVolumesImagePtrOutput)
}

// Policy for pulling OCI objects. Possible values are:
// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
func (o ThanosRulerSpecVolumesImageOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesImage) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

// Required: Image or artifact reference to be used.
// Behaves in the same way as pod.spec.containers[*].image.
// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
// More info: https://kubernetes.io/docs/concepts/containers/images
// This field is optional to allow higher level config management to default or override
// container images in workload controllers like Deployments and StatefulSets.
func (o ThanosRulerSpecVolumesImageOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesImage) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesImagePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesImage)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesImagePtrOutput) ToThanosRulerSpecVolumesImagePtrOutput() ThanosRulerSpecVolumesImagePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesImagePtrOutput) ToThanosRulerSpecVolumesImagePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesImagePtrOutput) Elem() ThanosRulerSpecVolumesImageOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesImage) ThanosRulerSpecVolumesImage {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesImage
		return ret
	}).(ThanosRulerSpecVolumesImageOutput)
}

// Policy for pulling OCI objects. Possible values are:
// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
func (o ThanosRulerSpecVolumesImagePtrOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesImage) *string {
		if v == nil {
			return nil
		}
		return v.PullPolicy
	}).(pulumi.StringPtrOutput)
}

// Required: Image or artifact reference to be used.
// Behaves in the same way as pod.spec.containers[*].image.
// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
// More info: https://kubernetes.io/docs/concepts/containers/images
// This field is optional to allow higher level config management to default or override
// container images in workload controllers like Deployments and StatefulSets.
func (o ThanosRulerSpecVolumesImagePtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesImage) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
// The volume is resolved at pod startup depending on which PullPolicy value is provided:
//
// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
//
// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
// The volume will be mounted read-only (ro) and non-executable files (noexec).
// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
type ThanosRulerSpecVolumesImagePatch struct {
	// Policy for pulling OCI objects. Possible values are:
	// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
	// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
	// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	PullPolicy *string `pulumi:"pullPolicy"`
	// Required: Image or artifact reference to be used.
	// Behaves in the same way as pod.spec.containers[*].image.
	// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// This field is optional to allow higher level config management to default or override
	// container images in workload controllers like Deployments and StatefulSets.
	Reference *string `pulumi:"reference"`
}

// ThanosRulerSpecVolumesImagePatchInput is an input type that accepts ThanosRulerSpecVolumesImagePatchArgs and ThanosRulerSpecVolumesImagePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesImagePatchInput` via:
//
//	ThanosRulerSpecVolumesImagePatchArgs{...}
type ThanosRulerSpecVolumesImagePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesImagePatchOutput() ThanosRulerSpecVolumesImagePatchOutput
	ToThanosRulerSpecVolumesImagePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesImagePatchOutput
}

// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
// The volume is resolved at pod startup depending on which PullPolicy value is provided:
//
// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
//
// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
// The volume will be mounted read-only (ro) and non-executable files (noexec).
// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
type ThanosRulerSpecVolumesImagePatchArgs struct {
	// Policy for pulling OCI objects. Possible values are:
	// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
	// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
	// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
	// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
	PullPolicy pulumi.StringPtrInput `pulumi:"pullPolicy"`
	// Required: Image or artifact reference to be used.
	// Behaves in the same way as pod.spec.containers[*].image.
	// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
	// More info: https://kubernetes.io/docs/concepts/containers/images
	// This field is optional to allow higher level config management to default or override
	// container images in workload controllers like Deployments and StatefulSets.
	Reference pulumi.StringPtrInput `pulumi:"reference"`
}

func (ThanosRulerSpecVolumesImagePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesImagePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesImagePatchArgs) ToThanosRulerSpecVolumesImagePatchOutput() ThanosRulerSpecVolumesImagePatchOutput {
	return i.ToThanosRulerSpecVolumesImagePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesImagePatchArgs) ToThanosRulerSpecVolumesImagePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesImagePatchOutput)
}

func (i ThanosRulerSpecVolumesImagePatchArgs) ToThanosRulerSpecVolumesImagePatchPtrOutput() ThanosRulerSpecVolumesImagePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesImagePatchArgs) ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesImagePatchOutput).ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesImagePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesImagePatchArgs, ThanosRulerSpecVolumesImagePatchPtr and ThanosRulerSpecVolumesImagePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesImagePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesImagePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesImagePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesImagePatchPtrOutput() ThanosRulerSpecVolumesImagePatchPtrOutput
	ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesImagePatchPtrOutput
}

type thanosRulerSpecVolumesImagePatchPtrType ThanosRulerSpecVolumesImagePatchArgs

func ThanosRulerSpecVolumesImagePatchPtr(v *ThanosRulerSpecVolumesImagePatchArgs) ThanosRulerSpecVolumesImagePatchPtrInput {
	return (*thanosRulerSpecVolumesImagePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesImagePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesImagePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesImagePatchPtrType) ToThanosRulerSpecVolumesImagePatchPtrOutput() ThanosRulerSpecVolumesImagePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesImagePatchPtrType) ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesImagePatchPtrOutput)
}

// image represents an OCI object (a container image or artifact) pulled and mounted on the kubelet's host machine.
// The volume is resolved at pod startup depending on which PullPolicy value is provided:
//
// - Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// - Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// - IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
//
// The volume gets re-resolved if the pod gets deleted and recreated, which means that new remote content will become available on pod recreation.
// A failure to resolve or pull the image during pod startup will block containers from starting and may add significant latency. Failures will be retried using normal volume backoff and will be reported on the pod reason and message.
// The types of objects that may be mounted by this volume are defined by the container runtime implementation on a host machine and at minimum must include all valid types supported by the container image field.
// The OCI object gets mounted in a single directory (spec.containers[*].volumeMounts.mountPath) by merging the manifest layers in the same way as for container images.
// The volume will be mounted read-only (ro) and non-executable files (noexec).
// Sub path mounts for containers are not supported (spec.containers[*].volumeMounts.subpath).
// The field spec.securityContext.fsGroupChangePolicy has no effect on this volume type.
type ThanosRulerSpecVolumesImagePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesImagePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesImagePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesImagePatchOutput) ToThanosRulerSpecVolumesImagePatchOutput() ThanosRulerSpecVolumesImagePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesImagePatchOutput) ToThanosRulerSpecVolumesImagePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesImagePatchOutput) ToThanosRulerSpecVolumesImagePatchPtrOutput() ThanosRulerSpecVolumesImagePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesImagePatchOutput) ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesImagePatch) *ThanosRulerSpecVolumesImagePatch {
		return &v
	}).(ThanosRulerSpecVolumesImagePatchPtrOutput)
}

// Policy for pulling OCI objects. Possible values are:
// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
func (o ThanosRulerSpecVolumesImagePatchOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesImagePatch) *string { return v.PullPolicy }).(pulumi.StringPtrOutput)
}

// Required: Image or artifact reference to be used.
// Behaves in the same way as pod.spec.containers[*].image.
// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
// More info: https://kubernetes.io/docs/concepts/containers/images
// This field is optional to allow higher level config management to default or override
// container images in workload controllers like Deployments and StatefulSets.
func (o ThanosRulerSpecVolumesImagePatchOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesImagePatch) *string { return v.Reference }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesImagePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesImagePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesImagePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesImagePatchPtrOutput) ToThanosRulerSpecVolumesImagePatchPtrOutput() ThanosRulerSpecVolumesImagePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesImagePatchPtrOutput) ToThanosRulerSpecVolumesImagePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesImagePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesImagePatchPtrOutput) Elem() ThanosRulerSpecVolumesImagePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesImagePatch) ThanosRulerSpecVolumesImagePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesImagePatch
		return ret
	}).(ThanosRulerSpecVolumesImagePatchOutput)
}

// Policy for pulling OCI objects. Possible values are:
// Always: the kubelet always attempts to pull the reference. Container creation will fail If the pull fails.
// Never: the kubelet never pulls the reference and only uses a local image or artifact. Container creation will fail if the reference isn't present.
// IfNotPresent: the kubelet pulls if the reference isn't already present on disk. Container creation will fail if the reference isn't present and the pull fails.
// Defaults to Always if :latest tag is specified, or IfNotPresent otherwise.
func (o ThanosRulerSpecVolumesImagePatchPtrOutput) PullPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesImagePatch) *string {
		if v == nil {
			return nil
		}
		return v.PullPolicy
	}).(pulumi.StringPtrOutput)
}

// Required: Image or artifact reference to be used.
// Behaves in the same way as pod.spec.containers[*].image.
// Pull secrets will be assembled in the same way as for the container image by looking up node credentials, SA image pull secrets, and pod spec image pull secrets.
// More info: https://kubernetes.io/docs/concepts/containers/images
// This field is optional to allow higher level config management to default or override
// container images in workload controllers like Deployments and StatefulSets.
func (o ThanosRulerSpecVolumesImagePatchPtrOutput) Reference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesImagePatch) *string {
		if v == nil {
			return nil
		}
		return v.Reference
	}).(pulumi.StringPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// More info: https://examples.k8s.io/volumes/iscsi/README.md
type ThanosRulerSpecVolumesIscsi struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name.
	// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
	// <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn *string `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport.
	// Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun *int `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	ReadOnly  *bool                                 `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesIscsiSecretRef `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	TargetPortal *string `pulumi:"targetPortal"`
}

// ThanosRulerSpecVolumesIscsiInput is an input type that accepts ThanosRulerSpecVolumesIscsiArgs and ThanosRulerSpecVolumesIscsiOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiInput` via:
//
//	ThanosRulerSpecVolumesIscsiArgs{...}
type ThanosRulerSpecVolumesIscsiInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiOutput() ThanosRulerSpecVolumesIscsiOutput
	ToThanosRulerSpecVolumesIscsiOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiOutput
}

// iscsi represents an ISCSI Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// More info: https://examples.k8s.io/volumes/iscsi/README.md
type ThanosRulerSpecVolumesIscsiArgs struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name.
	// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
	// <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn pulumi.StringPtrInput `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport.
	// Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	ReadOnly  pulumi.BoolPtrInput                          `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesIscsiSecretRefPtrInput `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringPtrInput `pulumi:"targetPortal"`
}

func (ThanosRulerSpecVolumesIscsiArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsi)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesIscsiArgs) ToThanosRulerSpecVolumesIscsiOutput() ThanosRulerSpecVolumesIscsiOutput {
	return i.ToThanosRulerSpecVolumesIscsiOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiArgs) ToThanosRulerSpecVolumesIscsiOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiOutput)
}

func (i ThanosRulerSpecVolumesIscsiArgs) ToThanosRulerSpecVolumesIscsiPtrOutput() ThanosRulerSpecVolumesIscsiPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiArgs) ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiOutput).ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesIscsiPtrInput is an input type that accepts ThanosRulerSpecVolumesIscsiArgs, ThanosRulerSpecVolumesIscsiPtr and ThanosRulerSpecVolumesIscsiPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiPtrInput` via:
//
//	        ThanosRulerSpecVolumesIscsiArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesIscsiPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiPtrOutput() ThanosRulerSpecVolumesIscsiPtrOutput
	ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiPtrOutput
}

type thanosRulerSpecVolumesIscsiPtrType ThanosRulerSpecVolumesIscsiArgs

func ThanosRulerSpecVolumesIscsiPtr(v *ThanosRulerSpecVolumesIscsiArgs) ThanosRulerSpecVolumesIscsiPtrInput {
	return (*thanosRulerSpecVolumesIscsiPtrType)(v)
}

func (*thanosRulerSpecVolumesIscsiPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsi)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesIscsiPtrType) ToThanosRulerSpecVolumesIscsiPtrOutput() ThanosRulerSpecVolumesIscsiPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesIscsiPtrType) ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// More info: https://examples.k8s.io/volumes/iscsi/README.md
type ThanosRulerSpecVolumesIscsiOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsi)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiOutput) ToThanosRulerSpecVolumesIscsiOutput() ThanosRulerSpecVolumesIscsiOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiOutput) ToThanosRulerSpecVolumesIscsiOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiOutput) ToThanosRulerSpecVolumesIscsiPtrOutput() ThanosRulerSpecVolumesIscsiPtrOutput {
	return o.ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesIscsiOutput) ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesIscsi) *ThanosRulerSpecVolumesIscsi {
		return &v
	}).(ThanosRulerSpecVolumesIscsiPtrOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ThanosRulerSpecVolumesIscsiOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ThanosRulerSpecVolumesIscsiOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ThanosRulerSpecVolumesIscsiOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name.
// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
// <target portal>:<volume name> will be created for the connection.
func (o ThanosRulerSpecVolumesIscsiOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ThanosRulerSpecVolumesIscsiOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *string { return v.Iqn }).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport.
// Defaults to 'default' (tcp).
func (o ThanosRulerSpecVolumesIscsiOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ThanosRulerSpecVolumesIscsiOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
func (o ThanosRulerSpecVolumesIscsiOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesIscsiOutput) SecretRef() ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *ThanosRulerSpecVolumesIscsiSecretRef { return v.SecretRef }).(ThanosRulerSpecVolumesIscsiSecretRefPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsi) *string { return v.TargetPortal }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesIscsiPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsi)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiPtrOutput) ToThanosRulerSpecVolumesIscsiPtrOutput() ThanosRulerSpecVolumesIscsiPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiPtrOutput) ToThanosRulerSpecVolumesIscsiPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiPtrOutput) Elem() ThanosRulerSpecVolumesIscsiOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) ThanosRulerSpecVolumesIscsi {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesIscsi
		return ret
	}).(ThanosRulerSpecVolumesIscsiOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ThanosRulerSpecVolumesIscsiPtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ThanosRulerSpecVolumesIscsiPtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ThanosRulerSpecVolumesIscsiPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name.
// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
// <target portal>:<volume name> will be created for the connection.
func (o ThanosRulerSpecVolumesIscsiPtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ThanosRulerSpecVolumesIscsiPtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport.
// Defaults to 'default' (tcp).
func (o ThanosRulerSpecVolumesIscsiPtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ThanosRulerSpecVolumesIscsiPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiPtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
func (o ThanosRulerSpecVolumesIscsiPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesIscsiPtrOutput) SecretRef() ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *ThanosRulerSpecVolumesIscsiSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesIscsiSecretRefPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiPtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsi) *string {
		if v == nil {
			return nil
		}
		return v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// More info: https://examples.k8s.io/volumes/iscsi/README.md
type ThanosRulerSpecVolumesIscsiPatch struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery *bool `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession *bool `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType *string `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name.
	// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
	// <target portal>:<volume name> will be created for the connection.
	InitiatorName *string `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn *string `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport.
	// Defaults to 'default' (tcp).
	IscsiInterface *string `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun *int `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	Portals []string `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	ReadOnly  *bool                                      `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesIscsiSecretRefPatch `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	TargetPortal *string `pulumi:"targetPortal"`
}

// ThanosRulerSpecVolumesIscsiPatchInput is an input type that accepts ThanosRulerSpecVolumesIscsiPatchArgs and ThanosRulerSpecVolumesIscsiPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiPatchInput` via:
//
//	ThanosRulerSpecVolumesIscsiPatchArgs{...}
type ThanosRulerSpecVolumesIscsiPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiPatchOutput() ThanosRulerSpecVolumesIscsiPatchOutput
	ToThanosRulerSpecVolumesIscsiPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiPatchOutput
}

// iscsi represents an ISCSI Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// More info: https://examples.k8s.io/volumes/iscsi/README.md
type ThanosRulerSpecVolumesIscsiPatchArgs struct {
	// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
	ChapAuthDiscovery pulumi.BoolPtrInput `pulumi:"chapAuthDiscovery"`
	// chapAuthSession defines whether support iSCSI Session CHAP authentication
	ChapAuthSession pulumi.BoolPtrInput `pulumi:"chapAuthSession"`
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// initiatorName is the custom iSCSI Initiator Name.
	// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
	// <target portal>:<volume name> will be created for the connection.
	InitiatorName pulumi.StringPtrInput `pulumi:"initiatorName"`
	// iqn is the target iSCSI Qualified Name.
	Iqn pulumi.StringPtrInput `pulumi:"iqn"`
	// iscsiInterface is the interface Name that uses an iSCSI transport.
	// Defaults to 'default' (tcp).
	IscsiInterface pulumi.StringPtrInput `pulumi:"iscsiInterface"`
	// lun represents iSCSI Target Lun number.
	Lun pulumi.IntPtrInput `pulumi:"lun"`
	// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	Portals pulumi.StringArrayInput `pulumi:"portals"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	ReadOnly  pulumi.BoolPtrInput                               `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesIscsiSecretRefPatchPtrInput `pulumi:"secretRef"`
	// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
	// is other than default (typically TCP ports 860 and 3260).
	TargetPortal pulumi.StringPtrInput `pulumi:"targetPortal"`
}

func (ThanosRulerSpecVolumesIscsiPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsiPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesIscsiPatchArgs) ToThanosRulerSpecVolumesIscsiPatchOutput() ThanosRulerSpecVolumesIscsiPatchOutput {
	return i.ToThanosRulerSpecVolumesIscsiPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiPatchArgs) ToThanosRulerSpecVolumesIscsiPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiPatchOutput)
}

func (i ThanosRulerSpecVolumesIscsiPatchArgs) ToThanosRulerSpecVolumesIscsiPatchPtrOutput() ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiPatchArgs) ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiPatchOutput).ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesIscsiPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesIscsiPatchArgs, ThanosRulerSpecVolumesIscsiPatchPtr and ThanosRulerSpecVolumesIscsiPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesIscsiPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesIscsiPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiPatchPtrOutput() ThanosRulerSpecVolumesIscsiPatchPtrOutput
	ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiPatchPtrOutput
}

type thanosRulerSpecVolumesIscsiPatchPtrType ThanosRulerSpecVolumesIscsiPatchArgs

func ThanosRulerSpecVolumesIscsiPatchPtr(v *ThanosRulerSpecVolumesIscsiPatchArgs) ThanosRulerSpecVolumesIscsiPatchPtrInput {
	return (*thanosRulerSpecVolumesIscsiPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesIscsiPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsiPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesIscsiPatchPtrType) ToThanosRulerSpecVolumesIscsiPatchPtrOutput() ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesIscsiPatchPtrType) ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiPatchPtrOutput)
}

// iscsi represents an ISCSI Disk resource that is attached to a
// kubelet's host machine and then exposed to the pod.
// More info: https://examples.k8s.io/volumes/iscsi/README.md
type ThanosRulerSpecVolumesIscsiPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsiPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiPatchOutput) ToThanosRulerSpecVolumesIscsiPatchOutput() ThanosRulerSpecVolumesIscsiPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiPatchOutput) ToThanosRulerSpecVolumesIscsiPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiPatchOutput) ToThanosRulerSpecVolumesIscsiPatchPtrOutput() ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesIscsiPatchOutput) ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesIscsiPatch) *ThanosRulerSpecVolumesIscsiPatch {
		return &v
	}).(ThanosRulerSpecVolumesIscsiPatchPtrOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ThanosRulerSpecVolumesIscsiPatchOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *bool { return v.ChapAuthDiscovery }).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ThanosRulerSpecVolumesIscsiPatchOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *bool { return v.ChapAuthSession }).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ThanosRulerSpecVolumesIscsiPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name.
// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
// <target portal>:<volume name> will be created for the connection.
func (o ThanosRulerSpecVolumesIscsiPatchOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *string { return v.InitiatorName }).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ThanosRulerSpecVolumesIscsiPatchOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *string { return v.Iqn }).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport.
// Defaults to 'default' (tcp).
func (o ThanosRulerSpecVolumesIscsiPatchOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *string { return v.IscsiInterface }).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ThanosRulerSpecVolumesIscsiPatchOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *int { return v.Lun }).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiPatchOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) []string { return v.Portals }).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
func (o ThanosRulerSpecVolumesIscsiPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesIscsiPatchOutput) SecretRef() ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *ThanosRulerSpecVolumesIscsiSecretRefPatch {
		return v.SecretRef
	}).(ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiPatchOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiPatch) *string { return v.TargetPortal }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesIscsiPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsiPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) ToThanosRulerSpecVolumesIscsiPatchPtrOutput() ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) ToThanosRulerSpecVolumesIscsiPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) Elem() ThanosRulerSpecVolumesIscsiPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) ThanosRulerSpecVolumesIscsiPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesIscsiPatch
		return ret
	}).(ThanosRulerSpecVolumesIscsiPatchOutput)
}

// chapAuthDiscovery defines whether support iSCSI Discovery CHAP authentication
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) ChapAuthDiscovery() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthDiscovery
	}).(pulumi.BoolPtrOutput)
}

// chapAuthSession defines whether support iSCSI Session CHAP authentication
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) ChapAuthSession() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ChapAuthSession
	}).(pulumi.BoolPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// initiatorName is the custom iSCSI Initiator Name.
// If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface
// <target portal>:<volume name> will be created for the connection.
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) InitiatorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *string {
		if v == nil {
			return nil
		}
		return v.InitiatorName
	}).(pulumi.StringPtrOutput)
}

// iqn is the target iSCSI Qualified Name.
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) Iqn() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *string {
		if v == nil {
			return nil
		}
		return v.Iqn
	}).(pulumi.StringPtrOutput)
}

// iscsiInterface is the interface Name that uses an iSCSI transport.
// Defaults to 'default' (tcp).
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) IscsiInterface() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *string {
		if v == nil {
			return nil
		}
		return v.IscsiInterface
	}).(pulumi.StringPtrOutput)
}

// lun represents iSCSI Target Lun number.
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) Lun() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *int {
		if v == nil {
			return nil
		}
		return v.Lun
	}).(pulumi.IntPtrOutput)
}

// portals is the iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) Portals() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) []string {
		if v == nil {
			return nil
		}
		return v.Portals
	}).(pulumi.StringArrayOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) SecretRef() ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *ThanosRulerSpecVolumesIscsiSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput)
}

// targetPortal is iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port
// is other than default (typically TCP ports 860 and 3260).
func (o ThanosRulerSpecVolumesIscsiPatchPtrOutput) TargetPortal() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiPatch) *string {
		if v == nil {
			return nil
		}
		return v.TargetPortal
	}).(pulumi.StringPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type ThanosRulerSpecVolumesIscsiSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesIscsiSecretRefInput is an input type that accepts ThanosRulerSpecVolumesIscsiSecretRefArgs and ThanosRulerSpecVolumesIscsiSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiSecretRefInput` via:
//
//	ThanosRulerSpecVolumesIscsiSecretRefArgs{...}
type ThanosRulerSpecVolumesIscsiSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiSecretRefOutput() ThanosRulerSpecVolumesIscsiSecretRefOutput
	ToThanosRulerSpecVolumesIscsiSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiSecretRefOutput
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type ThanosRulerSpecVolumesIscsiSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesIscsiSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesIscsiSecretRefArgs) ToThanosRulerSpecVolumesIscsiSecretRefOutput() ThanosRulerSpecVolumesIscsiSecretRefOutput {
	return i.ToThanosRulerSpecVolumesIscsiSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiSecretRefArgs) ToThanosRulerSpecVolumesIscsiSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiSecretRefOutput)
}

func (i ThanosRulerSpecVolumesIscsiSecretRefArgs) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiSecretRefArgs) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiSecretRefOutput).ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesIscsiSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesIscsiSecretRefArgs, ThanosRulerSpecVolumesIscsiSecretRefPtr and ThanosRulerSpecVolumesIscsiSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesIscsiSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesIscsiSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiSecretRefPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPtrOutput
	ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiSecretRefPtrOutput
}

type thanosRulerSpecVolumesIscsiSecretRefPtrType ThanosRulerSpecVolumesIscsiSecretRefArgs

func ThanosRulerSpecVolumesIscsiSecretRefPtr(v *ThanosRulerSpecVolumesIscsiSecretRefArgs) ThanosRulerSpecVolumesIscsiSecretRefPtrInput {
	return (*thanosRulerSpecVolumesIscsiSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesIscsiSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesIscsiSecretRefPtrType) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesIscsiSecretRefPtrType) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiSecretRefPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type ThanosRulerSpecVolumesIscsiSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiSecretRefOutput) ToThanosRulerSpecVolumesIscsiSecretRefOutput() ThanosRulerSpecVolumesIscsiSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefOutput) ToThanosRulerSpecVolumesIscsiSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefOutput) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesIscsiSecretRefOutput) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesIscsiSecretRef) *ThanosRulerSpecVolumesIscsiSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesIscsiSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesIscsiSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesIscsiSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsiSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPtrOutput) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPtrOutput) ToThanosRulerSpecVolumesIscsiSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesIscsiSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiSecretRef) ThanosRulerSpecVolumesIscsiSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesIscsiSecretRef
		return ret
	}).(ThanosRulerSpecVolumesIscsiSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesIscsiSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type ThanosRulerSpecVolumesIscsiSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesIscsiSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesIscsiSecretRefPatchArgs and ThanosRulerSpecVolumesIscsiSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesIscsiSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesIscsiSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiSecretRefPatchOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchOutput
	ToThanosRulerSpecVolumesIscsiSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchOutput
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type ThanosRulerSpecVolumesIscsiSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesIscsiSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesIscsiSecretRefPatchArgs) ToThanosRulerSpecVolumesIscsiSecretRefPatchOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesIscsiSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiSecretRefPatchArgs) ToThanosRulerSpecVolumesIscsiSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesIscsiSecretRefPatchArgs) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesIscsiSecretRefPatchArgs) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiSecretRefPatchOutput).ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesIscsiSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesIscsiSecretRefPatchArgs, ThanosRulerSpecVolumesIscsiSecretRefPatchPtr and ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesIscsiSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesIscsiSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesIscsiSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesIscsiSecretRefPatchPtrType ThanosRulerSpecVolumesIscsiSecretRefPatchArgs

func ThanosRulerSpecVolumesIscsiSecretRefPatchPtr(v *ThanosRulerSpecVolumesIscsiSecretRefPatchArgs) ThanosRulerSpecVolumesIscsiSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesIscsiSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesIscsiSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsiSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesIscsiSecretRefPatchPtrType) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesIscsiSecretRefPatchPtrType) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput)
}

// secretRef is the CHAP Secret for iSCSI target and initiator authentication
type ThanosRulerSpecVolumesIscsiSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPatchOutput) ToThanosRulerSpecVolumesIscsiSecretRefPatchOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPatchOutput) ToThanosRulerSpecVolumesIscsiSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPatchOutput) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPatchOutput) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesIscsiSecretRefPatch) *ThanosRulerSpecVolumesIscsiSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesIscsiSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesIscsiSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesIscsiSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput() ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesIscsiSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiSecretRefPatch) ThanosRulerSpecVolumesIscsiSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesIscsiSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesIscsiSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesIscsiSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type ThanosRulerSpecVolumesNfs struct {
	// path that is exported by the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path *string `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server *string `pulumi:"server"`
}

// ThanosRulerSpecVolumesNfsInput is an input type that accepts ThanosRulerSpecVolumesNfsArgs and ThanosRulerSpecVolumesNfsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesNfsInput` via:
//
//	ThanosRulerSpecVolumesNfsArgs{...}
type ThanosRulerSpecVolumesNfsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesNfsOutput() ThanosRulerSpecVolumesNfsOutput
	ToThanosRulerSpecVolumesNfsOutputWithContext(context.Context) ThanosRulerSpecVolumesNfsOutput
}

// nfs represents an NFS mount on the host that shares a pod's lifetime
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type ThanosRulerSpecVolumesNfsArgs struct {
	// path that is exported by the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (ThanosRulerSpecVolumesNfsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesNfs)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesNfsArgs) ToThanosRulerSpecVolumesNfsOutput() ThanosRulerSpecVolumesNfsOutput {
	return i.ToThanosRulerSpecVolumesNfsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesNfsArgs) ToThanosRulerSpecVolumesNfsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesNfsOutput)
}

func (i ThanosRulerSpecVolumesNfsArgs) ToThanosRulerSpecVolumesNfsPtrOutput() ThanosRulerSpecVolumesNfsPtrOutput {
	return i.ToThanosRulerSpecVolumesNfsPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesNfsArgs) ToThanosRulerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesNfsOutput).ToThanosRulerSpecVolumesNfsPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesNfsPtrInput is an input type that accepts ThanosRulerSpecVolumesNfsArgs, ThanosRulerSpecVolumesNfsPtr and ThanosRulerSpecVolumesNfsPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesNfsPtrInput` via:
//
//	        ThanosRulerSpecVolumesNfsArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesNfsPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesNfsPtrOutput() ThanosRulerSpecVolumesNfsPtrOutput
	ToThanosRulerSpecVolumesNfsPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesNfsPtrOutput
}

type thanosRulerSpecVolumesNfsPtrType ThanosRulerSpecVolumesNfsArgs

func ThanosRulerSpecVolumesNfsPtr(v *ThanosRulerSpecVolumesNfsArgs) ThanosRulerSpecVolumesNfsPtrInput {
	return (*thanosRulerSpecVolumesNfsPtrType)(v)
}

func (*thanosRulerSpecVolumesNfsPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesNfs)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesNfsPtrType) ToThanosRulerSpecVolumesNfsPtrOutput() ThanosRulerSpecVolumesNfsPtrOutput {
	return i.ToThanosRulerSpecVolumesNfsPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesNfsPtrType) ToThanosRulerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesNfsPtrOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type ThanosRulerSpecVolumesNfsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesNfsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesNfs)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesNfsOutput) ToThanosRulerSpecVolumesNfsOutput() ThanosRulerSpecVolumesNfsOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsOutput) ToThanosRulerSpecVolumesNfsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsOutput) ToThanosRulerSpecVolumesNfsPtrOutput() ThanosRulerSpecVolumesNfsPtrOutput {
	return o.ToThanosRulerSpecVolumesNfsPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesNfsOutput) ToThanosRulerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesNfs) *ThanosRulerSpecVolumesNfs {
		return &v
	}).(ThanosRulerSpecVolumesNfsPtrOutput)
}

// path that is exported by the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesNfs) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesNfs) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesNfs) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesNfsPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesNfsPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesNfs)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesNfsPtrOutput) ToThanosRulerSpecVolumesNfsPtrOutput() ThanosRulerSpecVolumesNfsPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsPtrOutput) ToThanosRulerSpecVolumesNfsPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsPtrOutput) Elem() ThanosRulerSpecVolumesNfsOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfs) ThanosRulerSpecVolumesNfs {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesNfs
		return ret
	}).(ThanosRulerSpecVolumesNfsOutput)
}

// path that is exported by the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfs) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfs) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfs) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type ThanosRulerSpecVolumesNfsPatch struct {
	// path that is exported by the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path *string `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly *bool `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server *string `pulumi:"server"`
}

// ThanosRulerSpecVolumesNfsPatchInput is an input type that accepts ThanosRulerSpecVolumesNfsPatchArgs and ThanosRulerSpecVolumesNfsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesNfsPatchInput` via:
//
//	ThanosRulerSpecVolumesNfsPatchArgs{...}
type ThanosRulerSpecVolumesNfsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesNfsPatchOutput() ThanosRulerSpecVolumesNfsPatchOutput
	ToThanosRulerSpecVolumesNfsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesNfsPatchOutput
}

// nfs represents an NFS mount on the host that shares a pod's lifetime
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type ThanosRulerSpecVolumesNfsPatchArgs struct {
	// path that is exported by the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Path pulumi.StringPtrInput `pulumi:"path"`
	// readOnly here will force the NFS export to be mounted with read-only permissions.
	// Defaults to false.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// server is the hostname or IP address of the NFS server.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
	Server pulumi.StringPtrInput `pulumi:"server"`
}

func (ThanosRulerSpecVolumesNfsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesNfsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesNfsPatchArgs) ToThanosRulerSpecVolumesNfsPatchOutput() ThanosRulerSpecVolumesNfsPatchOutput {
	return i.ToThanosRulerSpecVolumesNfsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesNfsPatchArgs) ToThanosRulerSpecVolumesNfsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesNfsPatchOutput)
}

func (i ThanosRulerSpecVolumesNfsPatchArgs) ToThanosRulerSpecVolumesNfsPatchPtrOutput() ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesNfsPatchArgs) ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesNfsPatchOutput).ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesNfsPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesNfsPatchArgs, ThanosRulerSpecVolumesNfsPatchPtr and ThanosRulerSpecVolumesNfsPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesNfsPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesNfsPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesNfsPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesNfsPatchPtrOutput() ThanosRulerSpecVolumesNfsPatchPtrOutput
	ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesNfsPatchPtrOutput
}

type thanosRulerSpecVolumesNfsPatchPtrType ThanosRulerSpecVolumesNfsPatchArgs

func ThanosRulerSpecVolumesNfsPatchPtr(v *ThanosRulerSpecVolumesNfsPatchArgs) ThanosRulerSpecVolumesNfsPatchPtrInput {
	return (*thanosRulerSpecVolumesNfsPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesNfsPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesNfsPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesNfsPatchPtrType) ToThanosRulerSpecVolumesNfsPatchPtrOutput() ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesNfsPatchPtrType) ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesNfsPatchPtrOutput)
}

// nfs represents an NFS mount on the host that shares a pod's lifetime
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
type ThanosRulerSpecVolumesNfsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesNfsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesNfsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesNfsPatchOutput) ToThanosRulerSpecVolumesNfsPatchOutput() ThanosRulerSpecVolumesNfsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsPatchOutput) ToThanosRulerSpecVolumesNfsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsPatchOutput) ToThanosRulerSpecVolumesNfsPatchPtrOutput() ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesNfsPatchOutput) ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesNfsPatch) *ThanosRulerSpecVolumesNfsPatch {
		return &v
	}).(ThanosRulerSpecVolumesNfsPatchPtrOutput)
}

// path that is exported by the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesNfsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesNfsPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPatchOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesNfsPatch) *string { return v.Server }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesNfsPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesNfsPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesNfsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesNfsPatchPtrOutput) ToThanosRulerSpecVolumesNfsPatchPtrOutput() ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsPatchPtrOutput) ToThanosRulerSpecVolumesNfsPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesNfsPatchPtrOutput) Elem() ThanosRulerSpecVolumesNfsPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfsPatch) ThanosRulerSpecVolumesNfsPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesNfsPatch
		return ret
	}).(ThanosRulerSpecVolumesNfsPatchOutput)
}

// path that is exported by the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the NFS export to be mounted with read-only permissions.
// Defaults to false.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfsPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// server is the hostname or IP address of the NFS server.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
func (o ThanosRulerSpecVolumesNfsPatchPtrOutput) Server() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesNfsPatch) *string {
		if v == nil {
			return nil
		}
		return v.Server
	}).(pulumi.StringPtrOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type ThanosRulerSpecVolumesPatch struct {
	AwsElasticBlockStore *ThanosRulerSpecVolumesAwsElasticBlockStorePatch `pulumi:"awsElasticBlockStore"`
	AzureDisk            *ThanosRulerSpecVolumesAzureDiskPatch            `pulumi:"azureDisk"`
	AzureFile            *ThanosRulerSpecVolumesAzureFilePatch            `pulumi:"azureFile"`
	Cephfs               *ThanosRulerSpecVolumesCephfsPatch               `pulumi:"cephfs"`
	Cinder               *ThanosRulerSpecVolumesCinderPatch               `pulumi:"cinder"`
	ConfigMap            *ThanosRulerSpecVolumesConfigMapPatch            `pulumi:"configMap"`
	Csi                  *ThanosRulerSpecVolumesCsiPatch                  `pulumi:"csi"`
	DownwardAPI          *ThanosRulerSpecVolumesDownwardAPIPatch          `pulumi:"downwardAPI"`
	EmptyDir             *ThanosRulerSpecVolumesEmptyDirPatch             `pulumi:"emptyDir"`
	Ephemeral            *ThanosRulerSpecVolumesEphemeralPatch            `pulumi:"ephemeral"`
	Fc                   *ThanosRulerSpecVolumesFcPatch                   `pulumi:"fc"`
	FlexVolume           *ThanosRulerSpecVolumesFlexVolumePatch           `pulumi:"flexVolume"`
	Flocker              *ThanosRulerSpecVolumesFlockerPatch              `pulumi:"flocker"`
	GcePersistentDisk    *ThanosRulerSpecVolumesGcePersistentDiskPatch    `pulumi:"gcePersistentDisk"`
	GitRepo              *ThanosRulerSpecVolumesGitRepoPatch              `pulumi:"gitRepo"`
	Glusterfs            *ThanosRulerSpecVolumesGlusterfsPatch            `pulumi:"glusterfs"`
	HostPath             *ThanosRulerSpecVolumesHostPathPatch             `pulumi:"hostPath"`
	Image                *ThanosRulerSpecVolumesImagePatch                `pulumi:"image"`
	Iscsi                *ThanosRulerSpecVolumesIscsiPatch                `pulumi:"iscsi"`
	// name of the volume.
	// Must be a DNS_LABEL and unique within the pod.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name                  *string                                           `pulumi:"name"`
	Nfs                   *ThanosRulerSpecVolumesNfsPatch                   `pulumi:"nfs"`
	PersistentVolumeClaim *ThanosRulerSpecVolumesPersistentVolumeClaimPatch `pulumi:"persistentVolumeClaim"`
	PhotonPersistentDisk  *ThanosRulerSpecVolumesPhotonPersistentDiskPatch  `pulumi:"photonPersistentDisk"`
	PortworxVolume        *ThanosRulerSpecVolumesPortworxVolumePatch        `pulumi:"portworxVolume"`
	Projected             *ThanosRulerSpecVolumesProjectedPatch             `pulumi:"projected"`
	Quobyte               *ThanosRulerSpecVolumesQuobytePatch               `pulumi:"quobyte"`
	Rbd                   *ThanosRulerSpecVolumesRbdPatch                   `pulumi:"rbd"`
	ScaleIO               *ThanosRulerSpecVolumesScaleIOPatch               `pulumi:"scaleIO"`
	Secret                *ThanosRulerSpecVolumesSecretPatch                `pulumi:"secret"`
	Storageos             *ThanosRulerSpecVolumesStorageosPatch             `pulumi:"storageos"`
	VsphereVolume         *ThanosRulerSpecVolumesVsphereVolumePatch         `pulumi:"vsphereVolume"`
}

// ThanosRulerSpecVolumesPatchInput is an input type that accepts ThanosRulerSpecVolumesPatchArgs and ThanosRulerSpecVolumesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPatchInput` via:
//
//	ThanosRulerSpecVolumesPatchArgs{...}
type ThanosRulerSpecVolumesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPatchOutput() ThanosRulerSpecVolumesPatchOutput
	ToThanosRulerSpecVolumesPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesPatchOutput
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type ThanosRulerSpecVolumesPatchArgs struct {
	AwsElasticBlockStore ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrInput `pulumi:"awsElasticBlockStore"`
	AzureDisk            ThanosRulerSpecVolumesAzureDiskPatchPtrInput            `pulumi:"azureDisk"`
	AzureFile            ThanosRulerSpecVolumesAzureFilePatchPtrInput            `pulumi:"azureFile"`
	Cephfs               ThanosRulerSpecVolumesCephfsPatchPtrInput               `pulumi:"cephfs"`
	Cinder               ThanosRulerSpecVolumesCinderPatchPtrInput               `pulumi:"cinder"`
	ConfigMap            ThanosRulerSpecVolumesConfigMapPatchPtrInput            `pulumi:"configMap"`
	Csi                  ThanosRulerSpecVolumesCsiPatchPtrInput                  `pulumi:"csi"`
	DownwardAPI          ThanosRulerSpecVolumesDownwardAPIPatchPtrInput          `pulumi:"downwardAPI"`
	EmptyDir             ThanosRulerSpecVolumesEmptyDirPatchPtrInput             `pulumi:"emptyDir"`
	Ephemeral            ThanosRulerSpecVolumesEphemeralPatchPtrInput            `pulumi:"ephemeral"`
	Fc                   ThanosRulerSpecVolumesFcPatchPtrInput                   `pulumi:"fc"`
	FlexVolume           ThanosRulerSpecVolumesFlexVolumePatchPtrInput           `pulumi:"flexVolume"`
	Flocker              ThanosRulerSpecVolumesFlockerPatchPtrInput              `pulumi:"flocker"`
	GcePersistentDisk    ThanosRulerSpecVolumesGcePersistentDiskPatchPtrInput    `pulumi:"gcePersistentDisk"`
	GitRepo              ThanosRulerSpecVolumesGitRepoPatchPtrInput              `pulumi:"gitRepo"`
	Glusterfs            ThanosRulerSpecVolumesGlusterfsPatchPtrInput            `pulumi:"glusterfs"`
	HostPath             ThanosRulerSpecVolumesHostPathPatchPtrInput             `pulumi:"hostPath"`
	Image                ThanosRulerSpecVolumesImagePatchPtrInput                `pulumi:"image"`
	Iscsi                ThanosRulerSpecVolumesIscsiPatchPtrInput                `pulumi:"iscsi"`
	// name of the volume.
	// Must be a DNS_LABEL and unique within the pod.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name                  pulumi.StringPtrInput                                    `pulumi:"name"`
	Nfs                   ThanosRulerSpecVolumesNfsPatchPtrInput                   `pulumi:"nfs"`
	PersistentVolumeClaim ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrInput `pulumi:"persistentVolumeClaim"`
	PhotonPersistentDisk  ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrInput  `pulumi:"photonPersistentDisk"`
	PortworxVolume        ThanosRulerSpecVolumesPortworxVolumePatchPtrInput        `pulumi:"portworxVolume"`
	Projected             ThanosRulerSpecVolumesProjectedPatchPtrInput             `pulumi:"projected"`
	Quobyte               ThanosRulerSpecVolumesQuobytePatchPtrInput               `pulumi:"quobyte"`
	Rbd                   ThanosRulerSpecVolumesRbdPatchPtrInput                   `pulumi:"rbd"`
	ScaleIO               ThanosRulerSpecVolumesScaleIOPatchPtrInput               `pulumi:"scaleIO"`
	Secret                ThanosRulerSpecVolumesSecretPatchPtrInput                `pulumi:"secret"`
	Storageos             ThanosRulerSpecVolumesStorageosPatchPtrInput             `pulumi:"storageos"`
	VsphereVolume         ThanosRulerSpecVolumesVsphereVolumePatchPtrInput         `pulumi:"vsphereVolume"`
}

func (ThanosRulerSpecVolumesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPatchArgs) ToThanosRulerSpecVolumesPatchOutput() ThanosRulerSpecVolumesPatchOutput {
	return i.ToThanosRulerSpecVolumesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPatchArgs) ToThanosRulerSpecVolumesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPatchOutput)
}

// ThanosRulerSpecVolumesPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesPatchArray and ThanosRulerSpecVolumesPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesPatchArray{ ThanosRulerSpecVolumesPatchArgs{...} }
type ThanosRulerSpecVolumesPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPatchArrayOutput() ThanosRulerSpecVolumesPatchArrayOutput
	ToThanosRulerSpecVolumesPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesPatchArrayOutput
}

type ThanosRulerSpecVolumesPatchArray []ThanosRulerSpecVolumesPatchInput

func (ThanosRulerSpecVolumesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPatchArray) ToThanosRulerSpecVolumesPatchArrayOutput() ThanosRulerSpecVolumesPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPatchArray) ToThanosRulerSpecVolumesPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPatchArrayOutput)
}

// Volume represents a named volume in a pod that may be accessed by any container in the pod.
type ThanosRulerSpecVolumesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPatchOutput) ToThanosRulerSpecVolumesPatchOutput() ThanosRulerSpecVolumesPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPatchOutput) ToThanosRulerSpecVolumesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPatchOutput) AwsElasticBlockStore() ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesAwsElasticBlockStorePatch {
		return v.AwsElasticBlockStore
	}).(ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) AzureDisk() ThanosRulerSpecVolumesAzureDiskPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesAzureDiskPatch { return v.AzureDisk }).(ThanosRulerSpecVolumesAzureDiskPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) AzureFile() ThanosRulerSpecVolumesAzureFilePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesAzureFilePatch { return v.AzureFile }).(ThanosRulerSpecVolumesAzureFilePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Cephfs() ThanosRulerSpecVolumesCephfsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesCephfsPatch { return v.Cephfs }).(ThanosRulerSpecVolumesCephfsPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Cinder() ThanosRulerSpecVolumesCinderPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesCinderPatch { return v.Cinder }).(ThanosRulerSpecVolumesCinderPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) ConfigMap() ThanosRulerSpecVolumesConfigMapPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesConfigMapPatch { return v.ConfigMap }).(ThanosRulerSpecVolumesConfigMapPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Csi() ThanosRulerSpecVolumesCsiPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesCsiPatch { return v.Csi }).(ThanosRulerSpecVolumesCsiPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) DownwardAPI() ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesDownwardAPIPatch { return v.DownwardAPI }).(ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) EmptyDir() ThanosRulerSpecVolumesEmptyDirPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesEmptyDirPatch { return v.EmptyDir }).(ThanosRulerSpecVolumesEmptyDirPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Ephemeral() ThanosRulerSpecVolumesEphemeralPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesEphemeralPatch { return v.Ephemeral }).(ThanosRulerSpecVolumesEphemeralPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Fc() ThanosRulerSpecVolumesFcPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesFcPatch { return v.Fc }).(ThanosRulerSpecVolumesFcPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) FlexVolume() ThanosRulerSpecVolumesFlexVolumePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesFlexVolumePatch { return v.FlexVolume }).(ThanosRulerSpecVolumesFlexVolumePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Flocker() ThanosRulerSpecVolumesFlockerPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesFlockerPatch { return v.Flocker }).(ThanosRulerSpecVolumesFlockerPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) GcePersistentDisk() ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesGcePersistentDiskPatch {
		return v.GcePersistentDisk
	}).(ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) GitRepo() ThanosRulerSpecVolumesGitRepoPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesGitRepoPatch { return v.GitRepo }).(ThanosRulerSpecVolumesGitRepoPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Glusterfs() ThanosRulerSpecVolumesGlusterfsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesGlusterfsPatch { return v.Glusterfs }).(ThanosRulerSpecVolumesGlusterfsPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) HostPath() ThanosRulerSpecVolumesHostPathPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesHostPathPatch { return v.HostPath }).(ThanosRulerSpecVolumesHostPathPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Image() ThanosRulerSpecVolumesImagePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesImagePatch { return v.Image }).(ThanosRulerSpecVolumesImagePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Iscsi() ThanosRulerSpecVolumesIscsiPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesIscsiPatch { return v.Iscsi }).(ThanosRulerSpecVolumesIscsiPatchPtrOutput)
}

// name of the volume.
// Must be a DNS_LABEL and unique within the pod.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Nfs() ThanosRulerSpecVolumesNfsPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesNfsPatch { return v.Nfs }).(ThanosRulerSpecVolumesNfsPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) PersistentVolumeClaim() ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesPersistentVolumeClaimPatch {
		return v.PersistentVolumeClaim
	}).(ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) PhotonPersistentDisk() ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesPhotonPersistentDiskPatch {
		return v.PhotonPersistentDisk
	}).(ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) PortworxVolume() ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesPortworxVolumePatch {
		return v.PortworxVolume
	}).(ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Projected() ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesProjectedPatch { return v.Projected }).(ThanosRulerSpecVolumesProjectedPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Quobyte() ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesQuobytePatch { return v.Quobyte }).(ThanosRulerSpecVolumesQuobytePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Rbd() ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesRbdPatch { return v.Rbd }).(ThanosRulerSpecVolumesRbdPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) ScaleIO() ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesScaleIOPatch { return v.ScaleIO }).(ThanosRulerSpecVolumesScaleIOPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Secret() ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesSecretPatch { return v.Secret }).(ThanosRulerSpecVolumesSecretPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) Storageos() ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesStorageosPatch { return v.Storageos }).(ThanosRulerSpecVolumesStorageosPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesPatchOutput) VsphereVolume() ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPatch) *ThanosRulerSpecVolumesVsphereVolumePatch { return v.VsphereVolume }).(ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput)
}

type ThanosRulerSpecVolumesPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPatchArrayOutput) ToThanosRulerSpecVolumesPatchArrayOutput() ThanosRulerSpecVolumesPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesPatchArrayOutput) ToThanosRulerSpecVolumesPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesPatch {
		return vs[0].([]ThanosRulerSpecVolumesPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesPatchOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a
// PersistentVolumeClaim in the same namespace.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecVolumesPersistentVolumeClaim struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName *string `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts.
	// Default false.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesPersistentVolumeClaimInput is an input type that accepts ThanosRulerSpecVolumesPersistentVolumeClaimArgs and ThanosRulerSpecVolumesPersistentVolumeClaimOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPersistentVolumeClaimInput` via:
//
//	ThanosRulerSpecVolumesPersistentVolumeClaimArgs{...}
type ThanosRulerSpecVolumesPersistentVolumeClaimInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPersistentVolumeClaimOutput() ThanosRulerSpecVolumesPersistentVolumeClaimOutput
	ToThanosRulerSpecVolumesPersistentVolumeClaimOutputWithContext(context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimOutput
}

// persistentVolumeClaimVolumeSource represents a reference to a
// PersistentVolumeClaim in the same namespace.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecVolumesPersistentVolumeClaimArgs struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName pulumi.StringPtrInput `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts.
	// Default false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesPersistentVolumeClaimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimOutput() ThanosRulerSpecVolumesPersistentVolumeClaimOutput {
	return i.ToThanosRulerSpecVolumesPersistentVolumeClaimOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPersistentVolumeClaimOutput)
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return i.ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPersistentVolumeClaimOutput).ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesPersistentVolumeClaimPtrInput is an input type that accepts ThanosRulerSpecVolumesPersistentVolumeClaimArgs, ThanosRulerSpecVolumesPersistentVolumeClaimPtr and ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPersistentVolumeClaimPtrInput` via:
//
//	        ThanosRulerSpecVolumesPersistentVolumeClaimArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesPersistentVolumeClaimPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput
	ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput
}

type thanosRulerSpecVolumesPersistentVolumeClaimPtrType ThanosRulerSpecVolumesPersistentVolumeClaimArgs

func ThanosRulerSpecVolumesPersistentVolumeClaimPtr(v *ThanosRulerSpecVolumesPersistentVolumeClaimArgs) ThanosRulerSpecVolumesPersistentVolumeClaimPtrInput {
	return (*thanosRulerSpecVolumesPersistentVolumeClaimPtrType)(v)
}

func (*thanosRulerSpecVolumesPersistentVolumeClaimPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesPersistentVolumeClaimPtrType) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return i.ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesPersistentVolumeClaimPtrType) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a
// PersistentVolumeClaim in the same namespace.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecVolumesPersistentVolumeClaimOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPersistentVolumeClaimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimOutput() ThanosRulerSpecVolumesPersistentVolumeClaimOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o.ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesPersistentVolumeClaim) *ThanosRulerSpecVolumesPersistentVolumeClaim {
		return &v
	}).(ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o ThanosRulerSpecVolumesPersistentVolumeClaimOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPersistentVolumeClaim) *string { return v.ClaimName }).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts.
// Default false.
func (o ThanosRulerSpecVolumesPersistentVolumeClaimOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPersistentVolumeClaim) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPersistentVolumeClaim)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput) Elem() ThanosRulerSpecVolumesPersistentVolumeClaimOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPersistentVolumeClaim) ThanosRulerSpecVolumesPersistentVolumeClaim {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesPersistentVolumeClaim
		return ret
	}).(ThanosRulerSpecVolumesPersistentVolumeClaimOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPersistentVolumeClaim) *string {
		if v == nil {
			return nil
		}
		return v.ClaimName
	}).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts.
// Default false.
func (o ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPersistentVolumeClaim) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a
// PersistentVolumeClaim in the same namespace.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecVolumesPersistentVolumeClaimPatch struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName *string `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts.
	// Default false.
	ReadOnly *bool `pulumi:"readOnly"`
}

// ThanosRulerSpecVolumesPersistentVolumeClaimPatchInput is an input type that accepts ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs and ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPersistentVolumeClaimPatchInput` via:
//
//	ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs{...}
type ThanosRulerSpecVolumesPersistentVolumeClaimPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput
	ToThanosRulerSpecVolumesPersistentVolumeClaimPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput
}

// persistentVolumeClaimVolumeSource represents a reference to a
// PersistentVolumeClaim in the same namespace.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs struct {
	// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
	// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
	ClaimName pulumi.StringPtrInput `pulumi:"claimName"`
	// readOnly Will force the ReadOnly setting in VolumeMounts.
	// Default false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
}

func (ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaimPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput {
	return i.ToThanosRulerSpecVolumesPersistentVolumeClaimPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput)
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput).ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs, ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtr and ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput
	ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput
}

type thanosRulerSpecVolumesPersistentVolumeClaimPatchPtrType ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs

func ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtr(v *ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs) ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrInput {
	return (*thanosRulerSpecVolumesPersistentVolumeClaimPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesPersistentVolumeClaimPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPersistentVolumeClaimPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesPersistentVolumeClaimPatchPtrType) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesPersistentVolumeClaimPatchPtrType) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput)
}

// persistentVolumeClaimVolumeSource represents a reference to a
// PersistentVolumeClaim in the same namespace.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
type ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaimPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesPersistentVolumeClaimPatch) *ThanosRulerSpecVolumesPersistentVolumeClaimPatch {
		return &v
	}).(ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPersistentVolumeClaimPatch) *string { return v.ClaimName }).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts.
// Default false.
func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPersistentVolumeClaimPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPersistentVolumeClaimPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput() ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput) ToThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput) Elem() ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPersistentVolumeClaimPatch) ThanosRulerSpecVolumesPersistentVolumeClaimPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesPersistentVolumeClaimPatch
		return ret
	}).(ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput)
}

// claimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume.
// More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput) ClaimName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPersistentVolumeClaimPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClaimName
	}).(pulumi.StringPtrOutput)
}

// readOnly Will force the ReadOnly setting in VolumeMounts.
// Default false.
func (o ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPersistentVolumeClaimPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
type ThanosRulerSpecVolumesPhotonPersistentDisk struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID *string `pulumi:"pdID"`
}

// ThanosRulerSpecVolumesPhotonPersistentDiskInput is an input type that accepts ThanosRulerSpecVolumesPhotonPersistentDiskArgs and ThanosRulerSpecVolumesPhotonPersistentDiskOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPhotonPersistentDiskInput` via:
//
//	ThanosRulerSpecVolumesPhotonPersistentDiskArgs{...}
type ThanosRulerSpecVolumesPhotonPersistentDiskInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPhotonPersistentDiskOutput() ThanosRulerSpecVolumesPhotonPersistentDiskOutput
	ToThanosRulerSpecVolumesPhotonPersistentDiskOutputWithContext(context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskOutput
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
type ThanosRulerSpecVolumesPhotonPersistentDiskArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID pulumi.StringPtrInput `pulumi:"pdID"`
}

func (ThanosRulerSpecVolumesPhotonPersistentDiskArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskOutput() ThanosRulerSpecVolumesPhotonPersistentDiskOutput {
	return i.ToThanosRulerSpecVolumesPhotonPersistentDiskOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPhotonPersistentDiskOutput)
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return i.ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPhotonPersistentDiskOutput).ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesPhotonPersistentDiskPtrInput is an input type that accepts ThanosRulerSpecVolumesPhotonPersistentDiskArgs, ThanosRulerSpecVolumesPhotonPersistentDiskPtr and ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPhotonPersistentDiskPtrInput` via:
//
//	        ThanosRulerSpecVolumesPhotonPersistentDiskArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesPhotonPersistentDiskPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput
	ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput
}

type thanosRulerSpecVolumesPhotonPersistentDiskPtrType ThanosRulerSpecVolumesPhotonPersistentDiskArgs

func ThanosRulerSpecVolumesPhotonPersistentDiskPtr(v *ThanosRulerSpecVolumesPhotonPersistentDiskArgs) ThanosRulerSpecVolumesPhotonPersistentDiskPtrInput {
	return (*thanosRulerSpecVolumesPhotonPersistentDiskPtrType)(v)
}

func (*thanosRulerSpecVolumesPhotonPersistentDiskPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesPhotonPersistentDiskPtrType) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return i.ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesPhotonPersistentDiskPtrType) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
type ThanosRulerSpecVolumesPhotonPersistentDiskOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPhotonPersistentDiskOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskOutput() ThanosRulerSpecVolumesPhotonPersistentDiskOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o.ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesPhotonPersistentDisk) *ThanosRulerSpecVolumesPhotonPersistentDisk {
		return &v
	}).(ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPhotonPersistentDiskOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPhotonPersistentDisk) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o ThanosRulerSpecVolumesPhotonPersistentDiskOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPhotonPersistentDisk) *string { return v.PdID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPhotonPersistentDisk)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput) Elem() ThanosRulerSpecVolumesPhotonPersistentDiskOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPhotonPersistentDisk) ThanosRulerSpecVolumesPhotonPersistentDisk {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesPhotonPersistentDisk
		return ret
	}).(ThanosRulerSpecVolumesPhotonPersistentDiskOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPhotonPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPhotonPersistentDisk) *string {
		if v == nil {
			return nil
		}
		return v.PdID
	}).(pulumi.StringPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
type ThanosRulerSpecVolumesPhotonPersistentDiskPatch struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID *string `pulumi:"pdID"`
}

// ThanosRulerSpecVolumesPhotonPersistentDiskPatchInput is an input type that accepts ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs and ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPhotonPersistentDiskPatchInput` via:
//
//	ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs{...}
type ThanosRulerSpecVolumesPhotonPersistentDiskPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput
	ToThanosRulerSpecVolumesPhotonPersistentDiskPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
type ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// pdID is the ID that identifies Photon Controller persistent disk
	PdID pulumi.StringPtrInput `pulumi:"pdID"`
}

func (ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDiskPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput {
	return i.ToThanosRulerSpecVolumesPhotonPersistentDiskPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput)
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput).ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs, ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtr and ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput
	ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput
}

type thanosRulerSpecVolumesPhotonPersistentDiskPatchPtrType ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs

func ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtr(v *ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs) ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrInput {
	return (*thanosRulerSpecVolumesPhotonPersistentDiskPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesPhotonPersistentDiskPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPhotonPersistentDiskPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesPhotonPersistentDiskPatchPtrType) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesPhotonPersistentDiskPatchPtrType) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput)
}

// photonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine.
// Deprecated: PhotonPersistentDisk is deprecated and the in-tree photonPersistentDisk type is no longer supported.
type ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDiskPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesPhotonPersistentDiskPatch) *ThanosRulerSpecVolumesPhotonPersistentDiskPatch {
		return &v
	}).(ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPhotonPersistentDiskPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPhotonPersistentDiskPatch) *string { return v.PdID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPhotonPersistentDiskPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput() ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput) ToThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput) Elem() ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPhotonPersistentDiskPatch) ThanosRulerSpecVolumesPhotonPersistentDiskPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesPhotonPersistentDiskPatch
		return ret
	}).(ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPhotonPersistentDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// pdID is the ID that identifies Photon Controller persistent disk
func (o ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput) PdID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPhotonPersistentDiskPatch) *string {
		if v == nil {
			return nil
		}
		return v.PdID
	}).(pulumi.StringPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
// is on.
type ThanosRulerSpecVolumesPortworxVolume struct {
	// fSType represents the filesystem type to mount
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID *string `pulumi:"volumeID"`
}

// ThanosRulerSpecVolumesPortworxVolumeInput is an input type that accepts ThanosRulerSpecVolumesPortworxVolumeArgs and ThanosRulerSpecVolumesPortworxVolumeOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPortworxVolumeInput` via:
//
//	ThanosRulerSpecVolumesPortworxVolumeArgs{...}
type ThanosRulerSpecVolumesPortworxVolumeInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPortworxVolumeOutput() ThanosRulerSpecVolumesPortworxVolumeOutput
	ToThanosRulerSpecVolumesPortworxVolumeOutputWithContext(context.Context) ThanosRulerSpecVolumesPortworxVolumeOutput
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
// is on.
type ThanosRulerSpecVolumesPortworxVolumeArgs struct {
	// fSType represents the filesystem type to mount
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (ThanosRulerSpecVolumesPortworxVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPortworxVolumeArgs) ToThanosRulerSpecVolumesPortworxVolumeOutput() ThanosRulerSpecVolumesPortworxVolumeOutput {
	return i.ToThanosRulerSpecVolumesPortworxVolumeOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPortworxVolumeArgs) ToThanosRulerSpecVolumesPortworxVolumeOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPortworxVolumeOutput)
}

func (i ThanosRulerSpecVolumesPortworxVolumeArgs) ToThanosRulerSpecVolumesPortworxVolumePtrOutput() ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return i.ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPortworxVolumeArgs) ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPortworxVolumeOutput).ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesPortworxVolumePtrInput is an input type that accepts ThanosRulerSpecVolumesPortworxVolumeArgs, ThanosRulerSpecVolumesPortworxVolumePtr and ThanosRulerSpecVolumesPortworxVolumePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPortworxVolumePtrInput` via:
//
//	        ThanosRulerSpecVolumesPortworxVolumeArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesPortworxVolumePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPortworxVolumePtrOutput() ThanosRulerSpecVolumesPortworxVolumePtrOutput
	ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesPortworxVolumePtrOutput
}

type thanosRulerSpecVolumesPortworxVolumePtrType ThanosRulerSpecVolumesPortworxVolumeArgs

func ThanosRulerSpecVolumesPortworxVolumePtr(v *ThanosRulerSpecVolumesPortworxVolumeArgs) ThanosRulerSpecVolumesPortworxVolumePtrInput {
	return (*thanosRulerSpecVolumesPortworxVolumePtrType)(v)
}

func (*thanosRulerSpecVolumesPortworxVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesPortworxVolumePtrType) ToThanosRulerSpecVolumesPortworxVolumePtrOutput() ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return i.ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesPortworxVolumePtrType) ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPortworxVolumePtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
// is on.
type ThanosRulerSpecVolumesPortworxVolumeOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPortworxVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPortworxVolumeOutput) ToThanosRulerSpecVolumesPortworxVolumeOutput() ThanosRulerSpecVolumesPortworxVolumeOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumeOutput) ToThanosRulerSpecVolumesPortworxVolumeOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumeOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumeOutput) ToThanosRulerSpecVolumesPortworxVolumePtrOutput() ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return o.ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesPortworxVolumeOutput) ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesPortworxVolume) *ThanosRulerSpecVolumesPortworxVolume {
		return &v
	}).(ThanosRulerSpecVolumesPortworxVolumePtrOutput)
}

// fSType represents the filesystem type to mount
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPortworxVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPortworxVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesPortworxVolumeOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPortworxVolume) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o ThanosRulerSpecVolumesPortworxVolumeOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPortworxVolume) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesPortworxVolumePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPortworxVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPortworxVolume)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPortworxVolumePtrOutput) ToThanosRulerSpecVolumesPortworxVolumePtrOutput() ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumePtrOutput) ToThanosRulerSpecVolumesPortworxVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumePtrOutput) Elem() ThanosRulerSpecVolumesPortworxVolumeOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolume) ThanosRulerSpecVolumesPortworxVolume {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesPortworxVolume
		return ret
	}).(ThanosRulerSpecVolumesPortworxVolumeOutput)
}

// fSType represents the filesystem type to mount
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPortworxVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesPortworxVolumePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolume) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o ThanosRulerSpecVolumesPortworxVolumePtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolume) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
// is on.
type ThanosRulerSpecVolumesPortworxVolumePatch struct {
	// fSType represents the filesystem type to mount
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly *bool `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID *string `pulumi:"volumeID"`
}

// ThanosRulerSpecVolumesPortworxVolumePatchInput is an input type that accepts ThanosRulerSpecVolumesPortworxVolumePatchArgs and ThanosRulerSpecVolumesPortworxVolumePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPortworxVolumePatchInput` via:
//
//	ThanosRulerSpecVolumesPortworxVolumePatchArgs{...}
type ThanosRulerSpecVolumesPortworxVolumePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPortworxVolumePatchOutput() ThanosRulerSpecVolumesPortworxVolumePatchOutput
	ToThanosRulerSpecVolumesPortworxVolumePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesPortworxVolumePatchOutput
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
// is on.
type ThanosRulerSpecVolumesPortworxVolumePatchArgs struct {
	// fSType represents the filesystem type to mount
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// volumeID uniquely identifies a Portworx volume
	VolumeID pulumi.StringPtrInput `pulumi:"volumeID"`
}

func (ThanosRulerSpecVolumesPortworxVolumePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolumePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesPortworxVolumePatchArgs) ToThanosRulerSpecVolumesPortworxVolumePatchOutput() ThanosRulerSpecVolumesPortworxVolumePatchOutput {
	return i.ToThanosRulerSpecVolumesPortworxVolumePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPortworxVolumePatchArgs) ToThanosRulerSpecVolumesPortworxVolumePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPortworxVolumePatchOutput)
}

func (i ThanosRulerSpecVolumesPortworxVolumePatchArgs) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutput() ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesPortworxVolumePatchArgs) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPortworxVolumePatchOutput).ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesPortworxVolumePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesPortworxVolumePatchArgs, ThanosRulerSpecVolumesPortworxVolumePatchPtr and ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesPortworxVolumePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesPortworxVolumePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesPortworxVolumePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutput() ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput
	ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput
}

type thanosRulerSpecVolumesPortworxVolumePatchPtrType ThanosRulerSpecVolumesPortworxVolumePatchArgs

func ThanosRulerSpecVolumesPortworxVolumePatchPtr(v *ThanosRulerSpecVolumesPortworxVolumePatchArgs) ThanosRulerSpecVolumesPortworxVolumePatchPtrInput {
	return (*thanosRulerSpecVolumesPortworxVolumePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesPortworxVolumePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPortworxVolumePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesPortworxVolumePatchPtrType) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutput() ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesPortworxVolumePatchPtrType) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput)
}

// portworxVolume represents a portworx volume attached and mounted on kubelets host machine.
// Deprecated: PortworxVolume is deprecated. All operations for the in-tree portworxVolume type
// are redirected to the pxd.portworx.com CSI driver when the CSIMigrationPortworx feature-gate
// is on.
type ThanosRulerSpecVolumesPortworxVolumePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPortworxVolumePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolumePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPortworxVolumePatchOutput) ToThanosRulerSpecVolumesPortworxVolumePatchOutput() ThanosRulerSpecVolumesPortworxVolumePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumePatchOutput) ToThanosRulerSpecVolumesPortworxVolumePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumePatchOutput) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutput() ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesPortworxVolumePatchOutput) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesPortworxVolumePatch) *ThanosRulerSpecVolumesPortworxVolumePatch {
		return &v
	}).(ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput)
}

// fSType represents the filesystem type to mount
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPortworxVolumePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPortworxVolumePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesPortworxVolumePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPortworxVolumePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o ThanosRulerSpecVolumesPortworxVolumePatchOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesPortworxVolumePatch) *string { return v.VolumeID }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesPortworxVolumePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutput() ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput) ToThanosRulerSpecVolumesPortworxVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput) Elem() ThanosRulerSpecVolumesPortworxVolumePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolumePatch) ThanosRulerSpecVolumesPortworxVolumePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesPortworxVolumePatch
		return ret
	}).(ThanosRulerSpecVolumesPortworxVolumePatchOutput)
}

// fSType represents the filesystem type to mount
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolumePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// volumeID uniquely identifies a Portworx volume
func (o ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput) VolumeID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesPortworxVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeID
	}).(pulumi.StringPtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
type ThanosRulerSpecVolumesProjected struct {
	// defaultMode are the mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// sources is the list of volume projections. Each entry in this list
	// handles one source.
	Sources []ThanosRulerSpecVolumesProjectedSources `pulumi:"sources"`
}

// ThanosRulerSpecVolumesProjectedInput is an input type that accepts ThanosRulerSpecVolumesProjectedArgs and ThanosRulerSpecVolumesProjectedOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedInput` via:
//
//	ThanosRulerSpecVolumesProjectedArgs{...}
type ThanosRulerSpecVolumesProjectedInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedOutput() ThanosRulerSpecVolumesProjectedOutput
	ToThanosRulerSpecVolumesProjectedOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedOutput
}

// projected items for all in one resources secrets, configmaps, and downward API
type ThanosRulerSpecVolumesProjectedArgs struct {
	// defaultMode are the mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// sources is the list of volume projections. Each entry in this list
	// handles one source.
	Sources ThanosRulerSpecVolumesProjectedSourcesArrayInput `pulumi:"sources"`
}

func (ThanosRulerSpecVolumesProjectedArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjected)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedArgs) ToThanosRulerSpecVolumesProjectedOutput() ThanosRulerSpecVolumesProjectedOutput {
	return i.ToThanosRulerSpecVolumesProjectedOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedArgs) ToThanosRulerSpecVolumesProjectedOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedOutput)
}

func (i ThanosRulerSpecVolumesProjectedArgs) ToThanosRulerSpecVolumesProjectedPtrOutput() ThanosRulerSpecVolumesProjectedPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedArgs) ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedOutput).ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedArgs, ThanosRulerSpecVolumesProjectedPtr and ThanosRulerSpecVolumesProjectedPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedPtrOutput() ThanosRulerSpecVolumesProjectedPtrOutput
	ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedPtrOutput
}

type thanosRulerSpecVolumesProjectedPtrType ThanosRulerSpecVolumesProjectedArgs

func ThanosRulerSpecVolumesProjectedPtr(v *ThanosRulerSpecVolumesProjectedArgs) ThanosRulerSpecVolumesProjectedPtrInput {
	return (*thanosRulerSpecVolumesProjectedPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjected)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedPtrType) ToThanosRulerSpecVolumesProjectedPtrOutput() ThanosRulerSpecVolumesProjectedPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedPtrType) ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedPtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
type ThanosRulerSpecVolumesProjectedOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjected)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedOutput) ToThanosRulerSpecVolumesProjectedOutput() ThanosRulerSpecVolumesProjectedOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedOutput) ToThanosRulerSpecVolumesProjectedOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedOutput) ToThanosRulerSpecVolumesProjectedPtrOutput() ThanosRulerSpecVolumesProjectedPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedOutput) ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjected) *ThanosRulerSpecVolumesProjected {
		return &v
	}).(ThanosRulerSpecVolumesProjectedPtrOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjected) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections. Each entry in this list
// handles one source.
func (o ThanosRulerSpecVolumesProjectedOutput) Sources() ThanosRulerSpecVolumesProjectedSourcesArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjected) []ThanosRulerSpecVolumesProjectedSources { return v.Sources }).(ThanosRulerSpecVolumesProjectedSourcesArrayOutput)
}

type ThanosRulerSpecVolumesProjectedPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjected)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedPtrOutput) ToThanosRulerSpecVolumesProjectedPtrOutput() ThanosRulerSpecVolumesProjectedPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedPtrOutput) ToThanosRulerSpecVolumesProjectedPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedPtrOutput) Elem() ThanosRulerSpecVolumesProjectedOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjected) ThanosRulerSpecVolumesProjected {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjected
		return ret
	}).(ThanosRulerSpecVolumesProjectedOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjected) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections. Each entry in this list
// handles one source.
func (o ThanosRulerSpecVolumesProjectedPtrOutput) Sources() ThanosRulerSpecVolumesProjectedSourcesArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjected) []ThanosRulerSpecVolumesProjectedSources {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(ThanosRulerSpecVolumesProjectedSourcesArrayOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
type ThanosRulerSpecVolumesProjectedPatch struct {
	// defaultMode are the mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// sources is the list of volume projections. Each entry in this list
	// handles one source.
	Sources []ThanosRulerSpecVolumesProjectedSourcesPatch `pulumi:"sources"`
}

// ThanosRulerSpecVolumesProjectedPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedPatchArgs and ThanosRulerSpecVolumesProjectedPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedPatchArgs{...}
type ThanosRulerSpecVolumesProjectedPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedPatchOutput() ThanosRulerSpecVolumesProjectedPatchOutput
	ToThanosRulerSpecVolumesProjectedPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedPatchOutput
}

// projected items for all in one resources secrets, configmaps, and downward API
type ThanosRulerSpecVolumesProjectedPatchArgs struct {
	// defaultMode are the mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// sources is the list of volume projections. Each entry in this list
	// handles one source.
	Sources ThanosRulerSpecVolumesProjectedSourcesPatchArrayInput `pulumi:"sources"`
}

func (ThanosRulerSpecVolumesProjectedPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedPatchArgs) ToThanosRulerSpecVolumesProjectedPatchOutput() ThanosRulerSpecVolumesProjectedPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedPatchArgs) ToThanosRulerSpecVolumesProjectedPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedPatchArgs) ToThanosRulerSpecVolumesProjectedPatchPtrOutput() ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedPatchArgs) ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedPatchOutput).ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedPatchArgs, ThanosRulerSpecVolumesProjectedPatchPtr and ThanosRulerSpecVolumesProjectedPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedPatchPtrOutput() ThanosRulerSpecVolumesProjectedPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedPatchPtrType ThanosRulerSpecVolumesProjectedPatchArgs

func ThanosRulerSpecVolumesProjectedPatchPtr(v *ThanosRulerSpecVolumesProjectedPatchArgs) ThanosRulerSpecVolumesProjectedPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedPatchPtrType) ToThanosRulerSpecVolumesProjectedPatchPtrOutput() ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedPatchPtrType) ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedPatchPtrOutput)
}

// projected items for all in one resources secrets, configmaps, and downward API
type ThanosRulerSpecVolumesProjectedPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedPatchOutput) ToThanosRulerSpecVolumesProjectedPatchOutput() ThanosRulerSpecVolumesProjectedPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedPatchOutput) ToThanosRulerSpecVolumesProjectedPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedPatchOutput) ToThanosRulerSpecVolumesProjectedPatchPtrOutput() ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedPatchOutput) ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedPatch) *ThanosRulerSpecVolumesProjectedPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedPatchPtrOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedPatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedPatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections. Each entry in this list
// handles one source.
func (o ThanosRulerSpecVolumesProjectedPatchOutput) Sources() ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedPatch) []ThanosRulerSpecVolumesProjectedSourcesPatch {
		return v.Sources
	}).(ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput)
}

type ThanosRulerSpecVolumesProjectedPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedPatchPtrOutput) ToThanosRulerSpecVolumesProjectedPatchPtrOutput() ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedPatchPtrOutput) ToThanosRulerSpecVolumesProjectedPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedPatch) ThanosRulerSpecVolumesProjectedPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedPatchOutput)
}

// defaultMode are the mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedPatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedPatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// sources is the list of volume projections. Each entry in this list
// handles one source.
func (o ThanosRulerSpecVolumesProjectedPatchPtrOutput) Sources() ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedPatch) []ThanosRulerSpecVolumesProjectedSourcesPatch {
		if v == nil {
			return nil
		}
		return v.Sources
	}).(ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput)
}

// Projection that may be projected along with other supported volume types.
// Exactly one of these fields must be set.
type ThanosRulerSpecVolumesProjectedSources struct {
	ClusterTrustBundle  *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle  `pulumi:"clusterTrustBundle"`
	ConfigMap           *ThanosRulerSpecVolumesProjectedSourcesConfigMap           `pulumi:"configMap"`
	DownwardAPI         *ThanosRulerSpecVolumesProjectedSourcesDownwardAPI         `pulumi:"downwardAPI"`
	Secret              *ThanosRulerSpecVolumesProjectedSourcesSecret              `pulumi:"secret"`
	ServiceAccountToken *ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken `pulumi:"serviceAccountToken"`
}

// ThanosRulerSpecVolumesProjectedSourcesInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesArgs and ThanosRulerSpecVolumesProjectedSourcesOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesOutput() ThanosRulerSpecVolumesProjectedSourcesOutput
	ToThanosRulerSpecVolumesProjectedSourcesOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesOutput
}

// Projection that may be projected along with other supported volume types.
// Exactly one of these fields must be set.
type ThanosRulerSpecVolumesProjectedSourcesArgs struct {
	ClusterTrustBundle  ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrInput  `pulumi:"clusterTrustBundle"`
	ConfigMap           ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrInput           `pulumi:"configMap"`
	DownwardAPI         ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrInput         `pulumi:"downwardAPI"`
	Secret              ThanosRulerSpecVolumesProjectedSourcesSecretPtrInput              `pulumi:"secret"`
	ServiceAccountToken ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput `pulumi:"serviceAccountToken"`
}

func (ThanosRulerSpecVolumesProjectedSourcesArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSources)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesArgs) ToThanosRulerSpecVolumesProjectedSourcesOutput() ThanosRulerSpecVolumesProjectedSourcesOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesArgs) ToThanosRulerSpecVolumesProjectedSourcesOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesArray and ThanosRulerSpecVolumesProjectedSourcesArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesArray{ ThanosRulerSpecVolumesProjectedSourcesArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesArrayOutput() ThanosRulerSpecVolumesProjectedSourcesArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesArray []ThanosRulerSpecVolumesProjectedSourcesInput

func (ThanosRulerSpecVolumesProjectedSourcesArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSources)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesArray) ToThanosRulerSpecVolumesProjectedSourcesArrayOutput() ThanosRulerSpecVolumesProjectedSourcesArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesArray) ToThanosRulerSpecVolumesProjectedSourcesArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesArrayOutput)
}

// Projection that may be projected along with other supported volume types.
// Exactly one of these fields must be set.
type ThanosRulerSpecVolumesProjectedSourcesOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSources)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesOutput) ToThanosRulerSpecVolumesProjectedSourcesOutput() ThanosRulerSpecVolumesProjectedSourcesOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesOutput) ToThanosRulerSpecVolumesProjectedSourcesOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesOutput) ClusterTrustBundle() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSources) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle {
		return v.ClusterTrustBundle
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesOutput) ConfigMap() ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSources) *ThanosRulerSpecVolumesProjectedSourcesConfigMap {
		return v.ConfigMap
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesOutput) DownwardAPI() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSources) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPI {
		return v.DownwardAPI
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesOutput) Secret() ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSources) *ThanosRulerSpecVolumesProjectedSourcesSecret {
		return v.Secret
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesOutput) ServiceAccountToken() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSources) *ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken {
		return v.ServiceAccountToken
	}).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSources)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesArrayOutput() ThanosRulerSpecVolumesProjectedSourcesArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSources {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSources)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesOutput)
}

// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
// of ClusterTrustBundle objects in an auto-updating file.
//
// Alpha, gated by the ClusterTrustBundleProjection feature gate.
//
// ClusterTrustBundle objects can either be selected by name, or by the
// combination of signer name and a label selector.
//
// Kubelet performs aggressive normalization of the PEM contents written
// into the pod filesystem.  Esoteric PEM features such as inter-block
// comments and block headers are stripped.  Certificates are deduplicated.
// The ordering of certificates within the file is arbitrary, and Kubelet
// may change the order over time.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle struct {
	LabelSelector *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector `pulumi:"labelSelector"`
	// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
	// with signerName and labelSelector.
	Name *string `pulumi:"name"`
	// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
	// aren't available.  If using name, then the named ClusterTrustBundle is
	// allowed not to exist.  If using signerName, then the combination of
	// signerName and labelSelector is allowed to match zero
	// ClusterTrustBundles.
	Optional *bool `pulumi:"optional"`
	// Relative path from the volume root to write the bundle.
	Path *string `pulumi:"path"`
	// Select all ClusterTrustBundles that match this signer name.
	// Mutually-exclusive with name.  The contents of all selected
	// ClusterTrustBundles will be unified and deduplicated.
	SignerName *string `pulumi:"signerName"`
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput
}

// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
// of ClusterTrustBundle objects in an auto-updating file.
//
// Alpha, gated by the ClusterTrustBundleProjection feature gate.
//
// ClusterTrustBundle objects can either be selected by name, or by the
// combination of signer name and a label selector.
//
// Kubelet performs aggressive normalization of the PEM contents written
// into the pod filesystem.  Esoteric PEM features such as inter-block
// comments and block headers are stripped.  Certificates are deduplicated.
// The ordering of certificates within the file is arbitrary, and Kubelet
// may change the order over time.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs struct {
	LabelSelector ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrInput `pulumi:"labelSelector"`
	// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
	// with signerName and labelSelector.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
	// aren't available.  If using name, then the named ClusterTrustBundle is
	// allowed not to exist.  If using signerName, then the combination of
	// signerName and labelSelector is allowed to match zero
	// ClusterTrustBundles.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// Relative path from the volume root to write the bundle.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Select all ClusterTrustBundles that match this signer name.
	// Mutually-exclusive with name.  The contents of all selected
	// ClusterTrustBundles will be unified and deduplicated.
	SignerName pulumi.StringPtrInput `pulumi:"signerName"`
}

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput).ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs, ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtr and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrType ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs

func ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtr(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput)
}

// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
// of ClusterTrustBundle objects in an auto-updating file.
//
// Alpha, gated by the ClusterTrustBundleProjection feature gate.
//
// ClusterTrustBundle objects can either be selected by name, or by the
// combination of signer name and a label selector.
//
// Kubelet performs aggressive normalization of the PEM contents written
// into the pod filesystem.  Esoteric PEM features such as inter-block
// comments and block headers are stripped.  Certificates are deduplicated.
// The ordering of certificates within the file is arbitrary, and Kubelet
// may change the order over time.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) LabelSelector() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
		return v.LabelSelector
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput)
}

// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
// with signerName and labelSelector.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
// aren't available.  If using name, then the named ClusterTrustBundle is
// allowed not to exist.  If using signerName, then the combination of
// signerName and labelSelector is allowed to match zero
// ClusterTrustBundles.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// Relative path from the volume root to write the bundle.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Select all ClusterTrustBundles that match this signer name.
// Mutually-exclusive with name.  The contents of all selected
// ClusterTrustBundles will be unified and deduplicated.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *string { return v.SignerName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) LabelSelector() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput)
}

// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
// with signerName and labelSelector.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
// aren't available.  If using name, then the named ClusterTrustBundle is
// allowed not to exist.  If using signerName, then the combination of
// signerName and labelSelector is allowed to match zero
// ClusterTrustBundles.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Relative path from the volume root to write the bundle.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Select all ClusterTrustBundles that match this signer name.
// Mutually-exclusive with name.  The contents of all selected
// ClusterTrustBundles will be unified and deduplicated.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundle) *string {
		if v == nil {
			return nil
		}
		return v.SignerName
	}).(pulumi.StringPtrOutput)
}

// Select all ClusterTrustBundles that match this label selector.  Only has
// effect if signerName is set.  Mutually-exclusive with name.  If unset,
// interpreted as "match nothing".  If set but empty, interpreted as "match
// everything".
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput
}

// Select all ClusterTrustBundles that match this label selector.  Only has
// effect if signerName is set.  Mutually-exclusive with name.  If unset,
// interpreted as "match nothing".  If set but empty, interpreted as "match
// everything".
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput).ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs, ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtr and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrType ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs

func ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtr(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput)
}

// Select all ClusterTrustBundles that match this label selector.  Only has
// effect if signerName is set.  Mutually-exclusive with name.  If unset,
// interpreted as "match nothing".  If set but empty, interpreted as "match
// everything".
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput) MatchExpressions() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector) []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput) MatchExpressions() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector) []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelector) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArray and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArray{ ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArray []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsInput

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArray) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArray) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressions)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch struct {
	// key is the label key that the selector applies to.
	Key *string `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator *string `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values []string `pulumi:"values"`
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs struct {
	// key is the label key that the selector applies to.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// operator represents a key's relationship to a set of values.
	// Valid operators are In, NotIn, Exists and DoesNotExist.
	Operator pulumi.StringPtrInput `pulumi:"operator"`
	// values is an array of string values. If the operator is In or NotIn,
	// the values array must be non-empty. If the operator is Exists or DoesNotExist,
	// the values array must be empty. This array is replaced during a strategic
	// merge patch.
	Values pulumi.StringArrayInput `pulumi:"values"`
}

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArray and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArray{ ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArray []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchInput

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput)
}

// A label selector requirement is a selector that contains values, a key, and an operator that
// relates the key and values.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput {
	return o
}

// key is the label key that the selector applies to.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch) *string {
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// operator represents a key's relationship to a set of values.
// Valid operators are In, NotIn, Exists and DoesNotExist.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput) Operator() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch) *string {
		return v.Operator
	}).(pulumi.StringPtrOutput)
}

// values is an array of string values. If the operator is In or NotIn,
// the values array must be non-empty. If the operator is Exists or DoesNotExist,
// the values array must be empty. This array is replaced during a strategic
// merge patch.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput) Values() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch) []string {
		return v.Values
	}).(pulumi.StringArrayOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput)
}

// Select all ClusterTrustBundles that match this label selector.  Only has
// effect if signerName is set.  Mutually-exclusive with name.  If unset,
// interpreted as "match nothing".  If set but empty, interpreted as "match
// everything".
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels map[string]string `pulumi:"matchLabels"`
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput
}

// Select all ClusterTrustBundles that match this label selector.  Only has
// effect if signerName is set.  Mutually-exclusive with name.  If unset,
// interpreted as "match nothing".  If set but empty, interpreted as "match
// everything".
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs struct {
	// matchExpressions is a list of label selector requirements. The requirements are ANDed.
	MatchExpressions ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayInput `pulumi:"matchExpressions"`
	// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
	// map is equivalent to an element of matchExpressions, whose key field is "key", the
	// operator is "In", and the values array contains only "value". The requirements are ANDed.
	MatchLabels pulumi.StringMapInput `pulumi:"matchLabels"`
}

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput).ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs, ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtr and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrType ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs

func ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput)
}

// Select all ClusterTrustBundles that match this label selector.  Only has
// effect if signerName is set.  Mutually-exclusive with name.  If unset,
// interpreted as "match nothing".  If set but empty, interpreted as "match
// everything".
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput) MatchExpressions() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch) []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch) map[string]string {
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput)
}

// matchExpressions is a list of label selector requirements. The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput) MatchExpressions() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch) []ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatch {
		if v == nil {
			return nil
		}
		return v.MatchExpressions
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput)
}

// matchLabels is a map of {key,value} pairs. A single {key,value} in the matchLabels
// map is equivalent to an element of matchExpressions, whose key field is "key", the
// operator is "In", and the values array contains only "value". The requirements are ANDed.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput) MatchLabels() pulumi.StringMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch) map[string]string {
		if v == nil {
			return nil
		}
		return v.MatchLabels
	}).(pulumi.StringMapOutput)
}

// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
// of ClusterTrustBundle objects in an auto-updating file.
//
// Alpha, gated by the ClusterTrustBundleProjection feature gate.
//
// ClusterTrustBundle objects can either be selected by name, or by the
// combination of signer name and a label selector.
//
// Kubelet performs aggressive normalization of the PEM contents written
// into the pod filesystem.  Esoteric PEM features such as inter-block
// comments and block headers are stripped.  Certificates are deduplicated.
// The ordering of certificates within the file is arbitrary, and Kubelet
// may change the order over time.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch struct {
	LabelSelector *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch `pulumi:"labelSelector"`
	// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
	// with signerName and labelSelector.
	Name *string `pulumi:"name"`
	// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
	// aren't available.  If using name, then the named ClusterTrustBundle is
	// allowed not to exist.  If using signerName, then the combination of
	// signerName and labelSelector is allowed to match zero
	// ClusterTrustBundles.
	Optional *bool `pulumi:"optional"`
	// Relative path from the volume root to write the bundle.
	Path *string `pulumi:"path"`
	// Select all ClusterTrustBundles that match this signer name.
	// Mutually-exclusive with name.  The contents of all selected
	// ClusterTrustBundles will be unified and deduplicated.
	SignerName *string `pulumi:"signerName"`
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput
}

// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
// of ClusterTrustBundle objects in an auto-updating file.
//
// Alpha, gated by the ClusterTrustBundleProjection feature gate.
//
// ClusterTrustBundle objects can either be selected by name, or by the
// combination of signer name and a label selector.
//
// Kubelet performs aggressive normalization of the PEM contents written
// into the pod filesystem.  Esoteric PEM features such as inter-block
// comments and block headers are stripped.  Certificates are deduplicated.
// The ordering of certificates within the file is arbitrary, and Kubelet
// may change the order over time.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs struct {
	LabelSelector ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrInput `pulumi:"labelSelector"`
	// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
	// with signerName and labelSelector.
	Name pulumi.StringPtrInput `pulumi:"name"`
	// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
	// aren't available.  If using name, then the named ClusterTrustBundle is
	// allowed not to exist.  If using signerName, then the combination of
	// signerName and labelSelector is allowed to match zero
	// ClusterTrustBundles.
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// Relative path from the volume root to write the bundle.
	Path pulumi.StringPtrInput `pulumi:"path"`
	// Select all ClusterTrustBundles that match this signer name.
	// Mutually-exclusive with name.  The contents of all selected
	// ClusterTrustBundles will be unified and deduplicated.
	SignerName pulumi.StringPtrInput `pulumi:"signerName"`
}

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput).ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs, ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtr and ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrType ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs

func ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput)
}

// ClusterTrustBundle allows a pod to access the `.spec.trustBundle` field
// of ClusterTrustBundle objects in an auto-updating file.
//
// Alpha, gated by the ClusterTrustBundleProjection feature gate.
//
// ClusterTrustBundle objects can either be selected by name, or by the
// combination of signer name and a label selector.
//
// Kubelet performs aggressive normalization of the PEM contents written
// into the pod filesystem.  Esoteric PEM features such as inter-block
// comments and block headers are stripped.  Certificates are deduplicated.
// The ordering of certificates within the file is arbitrary, and Kubelet
// may change the order over time.
type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) LabelSelector() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
		return v.LabelSelector
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput)
}

// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
// with signerName and labelSelector.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
// aren't available.  If using name, then the named ClusterTrustBundle is
// allowed not to exist.  If using signerName, then the combination of
// signerName and labelSelector is allowed to match zero
// ClusterTrustBundles.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// Relative path from the volume root to write the bundle.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

// Select all ClusterTrustBundles that match this signer name.
// Mutually-exclusive with name.  The contents of all selected
// ClusterTrustBundles will be unified and deduplicated.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *string { return v.SignerName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) LabelSelector() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatch {
		if v == nil {
			return nil
		}
		return v.LabelSelector
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput)
}

// Select a single ClusterTrustBundle by object name.  Mutually-exclusive
// with signerName and labelSelector.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// If true, don't block pod startup if the referenced ClusterTrustBundle(s)
// aren't available.  If using name, then the named ClusterTrustBundle is
// allowed not to exist.  If using signerName, then the combination of
// signerName and labelSelector is allowed to match zero
// ClusterTrustBundles.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Relative path from the volume root to write the bundle.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// Select all ClusterTrustBundles that match this signer name.
// Mutually-exclusive with name.  The contents of all selected
// ClusterTrustBundles will be unified and deduplicated.
func (o ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput) SignerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch) *string {
		if v == nil {
			return nil
		}
		return v.SignerName
	}).(pulumi.StringPtrOutput)
}

// configMap information about the configMap data to project
type ThanosRulerSpecVolumesProjectedSourcesConfigMap struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesProjectedSourcesConfigMapItems `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMap and ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesConfigMap{ "key": ThanosRulerSpecVolumesProjectedSourcesConfigArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesConfigMapInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput
}

// configMap information about the configMap data to project
type ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayInput `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput).ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs, ThanosRulerSpecVolumesProjectedSourcesConfigMapPtr and ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesConfigMapPtrType ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs

func ThanosRulerSpecVolumesProjectedSourcesConfigMapPtr(v *ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs) ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesConfigMapPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesConfigMapPtrType) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesConfigMapPtrType) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput)
}

// configMap information about the configMap data to project
type ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesConfigMap) *ThanosRulerSpecVolumesProjectedSourcesConfigMap {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) Items() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMap) []ThanosRulerSpecVolumesProjectedSourcesConfigMapItems {
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMap) ThanosRulerSpecVolumesProjectedSourcesConfigMap {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesConfigMap
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput) Items() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMap) []ThanosRulerSpecVolumesProjectedSourcesConfigMapItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItems struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs and ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArray and ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArray{ ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArray []ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsInput

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArray) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArray) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapItems) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesConfigMapItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesConfigMapItems {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesConfigMapItems)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs and ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArray and ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArray{ ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArray []ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchInput

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput)
}

// configMap information about the configMap data to project
type ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs and ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput
}

// configMap information about the configMap data to project
type ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// ConfigMap will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the ConfigMap,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayInput `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional specify whether the ConfigMap or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput).ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs, ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtr and ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrType ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs

func ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput)
}

// configMap information about the configMap data to project
type ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) Items() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) []ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch {
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// ConfigMap will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the ConfigMap,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput) Items() ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) []ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional specify whether the ConfigMap or its keys must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPI struct {
	// Items is a list of DownwardAPIVolume file
	Items []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems `pulumi:"items"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput
}

// downwardAPI information about the downwardAPI data to project
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput `pulumi:"items"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput).ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs, ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtr and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrType ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs

func ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtr(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesDownwardAPI) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPI {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput) Items() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPI) []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems {
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPI)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPI) ThanosRulerSpecVolumesProjectedSourcesDownwardAPI {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesDownwardAPI
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput)
}

// Items is a list of DownwardAPIVolume file
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput) Items() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPI) []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems struct {
	FieldRef *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             *string                                                                 `pulumi:"path"`
	ResourceFieldRef *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef `pulumi:"resourceFieldRef"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs struct {
	FieldRef ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             pulumi.StringPtrInput                                                          `pulumi:"path"`
	ResourceFieldRef ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput `pulumi:"resourceFieldRef"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArray and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArray{ ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArray []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsInput

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArray) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArray) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) FieldRef() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
		return v.FieldRef
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value
// between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput) ResourceFieldRef() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
		return v.ResourceFieldRef
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItems)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath *string `pulumi:"fieldPath"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput).ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs, ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtr and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs

func ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtr(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *string { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *string { return v.FieldPath }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion *string `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath *string `pulumi:"fieldPath"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs struct {
	// Version of the schema the FieldPath is written in terms of, defaults to "v1".
	ApiVersion pulumi.StringPtrInput `pulumi:"apiVersion"`
	// Path of the field to select in the specified API version.
	FieldPath pulumi.StringPtrInput `pulumi:"fieldPath"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput).ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs, ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtr and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrType ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs

func ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Required: Selects a field of the pod: only annotations, labels, name, namespace and uid are supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch) *string {
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch) *string {
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput)
}

// Version of the schema the FieldPath is written in terms of, defaults to "v1".
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ApiVersion
	}).(pulumi.StringPtrOutput)
}

// Path of the field to select in the specified API version.
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput) FieldPath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.FieldPath
	}).(pulumi.StringPtrOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch struct {
	FieldRef *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             *string                                                                      `pulumi:"path"`
	ResourceFieldRef *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch `pulumi:"resourceFieldRef"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs struct {
	FieldRef ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrInput `pulumi:"fieldRef"`
	// Optional: mode bits used to set permissions on this file, must be an octal value
	// between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
	Path             pulumi.StringPtrInput                                                               `pulumi:"path"`
	ResourceFieldRef ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrInput `pulumi:"resourceFieldRef"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArray and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArray{ ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArray []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchInput

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput)
}

// DownwardAPIVolumeFile represents information to create the file containing the pod field
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput) FieldRef() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatch {
		return v.FieldRef
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput)
}

// Optional: mode bits used to set permissions on this file, must be an octal value
// between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput) ResourceFieldRef() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
		return v.ResourceFieldRef
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource *string `pulumi:"resource"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput).ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs, ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtr and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs

func ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtr(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) interface{} {
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRef) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch struct {
	// Container name: required for volumes, optional for env vars
	ContainerName *string `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor interface{} `pulumi:"divisor"`
	// Required: resource to select
	Resource *string `pulumi:"resource"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs struct {
	// Container name: required for volumes, optional for env vars
	ContainerName pulumi.StringPtrInput `pulumi:"containerName"`
	// Specifies the output format of the exposed resources, defaults to "1"
	Divisor pulumi.Input `pulumi:"divisor"`
	// Required: resource to select
	Resource pulumi.StringPtrInput `pulumi:"resource"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput).ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs, ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtr and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrType ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs

func ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

// Selects a resource of the container: only resources limits and requests
// (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) *string {
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) interface{} {
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) *string {
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput)
}

// Container name: required for volumes, optional for env vars
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput) ContainerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContainerName
	}).(pulumi.StringPtrOutput)
}

// Specifies the output format of the exposed resources, defaults to "1"
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Divisor() pulumi.AnyOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) interface{} {
		if v == nil {
			return nil
		}
		return v.Divisor
	}).(pulumi.AnyOutput)
}

// Required: resource to select
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput) Resource() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Resource
	}).(pulumi.StringPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch struct {
	// Items is a list of DownwardAPIVolume file
	Items []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch `pulumi:"items"`
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput
}

// downwardAPI information about the downwardAPI data to project
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs struct {
	// Items is a list of DownwardAPIVolume file
	Items ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayInput `pulumi:"items"`
}

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput).ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs, ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtr and ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrType ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs

func ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput)
}

// downwardAPI information about the downwardAPI data to project
type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput)
}

// Items is a list of DownwardAPIVolume file
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput) Items() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch) []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch) ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput)
}

// Items is a list of DownwardAPIVolume file
func (o ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput) Items() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch) []ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput)
}

// Projection that may be projected along with other supported volume types.
// Exactly one of these fields must be set.
type ThanosRulerSpecVolumesProjectedSourcesPatch struct {
	ClusterTrustBundle  *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch  `pulumi:"clusterTrustBundle"`
	ConfigMap           *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch           `pulumi:"configMap"`
	DownwardAPI         *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch         `pulumi:"downwardAPI"`
	Secret              *ThanosRulerSpecVolumesProjectedSourcesSecretPatch              `pulumi:"secret"`
	ServiceAccountToken *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch `pulumi:"serviceAccountToken"`
}

// ThanosRulerSpecVolumesProjectedSourcesPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesPatchArgs and ThanosRulerSpecVolumesProjectedSourcesPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesPatchOutput() ThanosRulerSpecVolumesProjectedSourcesPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesPatchOutput
}

// Projection that may be projected along with other supported volume types.
// Exactly one of these fields must be set.
type ThanosRulerSpecVolumesProjectedSourcesPatchArgs struct {
	ClusterTrustBundle  ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrInput  `pulumi:"clusterTrustBundle"`
	ConfigMap           ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrInput           `pulumi:"configMap"`
	DownwardAPI         ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrInput         `pulumi:"downwardAPI"`
	Secret              ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrInput              `pulumi:"secret"`
	ServiceAccountToken ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrInput `pulumi:"serviceAccountToken"`
}

func (ThanosRulerSpecVolumesProjectedSourcesPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesPatchOutput() ThanosRulerSpecVolumesProjectedSourcesPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesPatchOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesPatchArray and ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesPatchArray{ ThanosRulerSpecVolumesProjectedSourcesPatchArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesPatchArray []ThanosRulerSpecVolumesProjectedSourcesPatchInput

func (ThanosRulerSpecVolumesProjectedSourcesPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesPatchArray) ToThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesPatchArray) ToThanosRulerSpecVolumesProjectedSourcesPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput)
}

// Projection that may be projected along with other supported volume types.
// Exactly one of these fields must be set.
type ThanosRulerSpecVolumesProjectedSourcesPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesPatchOutput() ThanosRulerSpecVolumesProjectedSourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchOutput) ClusterTrustBundle() ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesPatch) *ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatch {
		return v.ClusterTrustBundle
	}).(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchOutput) ConfigMap() ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesPatch) *ThanosRulerSpecVolumesProjectedSourcesConfigMapPatch {
		return v.ConfigMap
	}).(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchOutput) DownwardAPI() ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesPatch) *ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatch {
		return v.DownwardAPI
	}).(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchOutput) Secret() ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesPatch) *ThanosRulerSpecVolumesProjectedSourcesSecretPatch {
		return v.Secret
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput)
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchOutput) ServiceAccountToken() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesPatch) *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch {
		return v.ServiceAccountToken
	}).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesPatch {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesPatchOutput)
}

// secret information about the secret data to project
type ThanosRulerSpecVolumesProjectedSourcesSecret struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesProjectedSourcesSecretItems `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecVolumesProjectedSourcesSecretInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretArgs and ThanosRulerSpecVolumesProjectedSourcesSecretOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesSecretArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesSecretInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretOutput() ThanosRulerSpecVolumesProjectedSourcesSecretOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretOutput
}

// secret information about the secret data to project
type ThanosRulerSpecVolumesProjectedSourcesSecretArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayInput `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecVolumesProjectedSourcesSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretOutput() ThanosRulerSpecVolumesProjectedSourcesSecretOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretOutput).ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesSecretPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretArgs, ThanosRulerSpecVolumesProjectedSourcesSecretPtr and ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesSecretArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesSecretPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesSecretPtrType ThanosRulerSpecVolumesProjectedSourcesSecretArgs

func ThanosRulerSpecVolumesProjectedSourcesSecretPtr(v *ThanosRulerSpecVolumesProjectedSourcesSecretArgs) ThanosRulerSpecVolumesProjectedSourcesSecretPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesSecretPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesSecretPtrType) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesSecretPtrType) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput)
}

// secret information about the secret data to project
type ThanosRulerSpecVolumesProjectedSourcesSecretOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretOutput() ThanosRulerSpecVolumesProjectedSourcesSecretOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesSecret) *ThanosRulerSpecVolumesProjectedSourcesSecret {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretOutput) Items() ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecret) []ThanosRulerSpecVolumesProjectedSourcesSecretItems {
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesSecret)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesSecretOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecret) ThanosRulerSpecVolumesProjectedSourcesSecret {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesSecret
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput) Items() ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecret) []ThanosRulerSpecVolumesProjectedSourcesSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesSecretItems struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesProjectedSourcesSecretItemsInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs and ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretItemsInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretItemsArray and ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesSecretItemsArray{ ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesSecretItemsArray []ThanosRulerSpecVolumesProjectedSourcesSecretItemsInput

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsArray) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsArray) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretItems) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesSecretItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesSecretItems {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesSecretItems)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs and ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput)
}

// ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArray and ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArray{ ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs{...} }
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput
}

type ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArray []ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchInput

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArray) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch {
		return vs[0].([]ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput)
}

// secret information about the secret data to project
type ThanosRulerSpecVolumesProjectedSourcesSecretPatch struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecVolumesProjectedSourcesSecretPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs and ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesSecretPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput
}

// secret information about the secret data to project
type ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs struct {
	// items if unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayInput `pulumi:"items"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// optional field specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput).ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs, ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtr and ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesSecretPatchPtrType ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs

func ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs) ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesSecretPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesSecretPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesSecretPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesSecretPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput)
}

// secret information about the secret data to project
type ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesSecretPatch) *ThanosRulerSpecVolumesProjectedSourcesSecretPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) Items() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretPatch) []ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch {
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesSecretPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecretPatch) ThanosRulerSpecVolumesProjectedSourcesSecretPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesSecretPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput)
}

// items if unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput) Items() ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecretPatch) []ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// optional field specify whether the Secret or its key must be defined
func (o ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesSecretPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken struct {
	// audience is the intended audience of the token. A recipient of a token
	// must identify itself with an identifier specified in the audience of the
	// token, and otherwise should reject the token. The audience defaults to the
	// identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service
	// account token. As the token approaches expiration, the kubelet volume
	// plugin will proactively rotate the service account token. The kubelet will
	// start trying to rotate the token if the token is older than 80 percent of
	// its time to live or if the token is older than 24 hours.Defaults to 1 hour
	// and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the
	// token into.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs and ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput
	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput
}

// serviceAccountToken is information about the serviceAccountToken data to project
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs struct {
	// audience is the intended audience of the token. A recipient of a token
	// must identify itself with an identifier specified in the audience of the
	// token, and otherwise should reject the token. The audience defaults to the
	// identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service
	// account token. As the token approaches expiration, the kubelet volume
	// plugin will proactively rotate the service account token. The kubelet will
	// start trying to rotate the token if the token is older than 80 percent of
	// its time to live or if the token is older than 24 hours.Defaults to 1 hour
	// and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the
	// token into.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput).ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs, ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtr and ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrType ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs

func ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtr(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrType) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrType) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) *ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput)
}

// audience is the intended audience of the token. A recipient of a token
// must identify itself with an identifier specified in the audience of the
// token, and otherwise should reject the token. The audience defaults to the
// identifier of the apiserver.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service
// account token. As the token approaches expiration, the kubelet volume
// plugin will proactively rotate the service account token. The kubelet will
// start trying to rotate the token if the token is older than 80 percent of
// its time to live or if the token is older than 24 hours.Defaults to 1 hour
// and must be at least 10 minutes.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) *int { return v.ExpirationSeconds }).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the
// token into.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput)
}

// audience is the intended audience of the token. A recipient of a token
// must identify itself with an identifier specified in the audience of the
// token, and otherwise should reject the token. The audience defaults to the
// identifier of the apiserver.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service
// account token. As the token approaches expiration, the kubelet volume
// plugin will proactively rotate the service account token. The kubelet will
// start trying to rotate the token if the token is older than 80 percent of
// its time to live or if the token is older than 24 hours.Defaults to 1 hour
// and must be at least 10 minutes.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the
// token into.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountToken) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch struct {
	// audience is the intended audience of the token. A recipient of a token
	// must identify itself with an identifier specified in the audience of the
	// token, and otherwise should reject the token. The audience defaults to the
	// identifier of the apiserver.
	Audience *string `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service
	// account token. As the token approaches expiration, the kubelet volume
	// plugin will proactively rotate the service account token. The kubelet will
	// start trying to rotate the token if the token is older than 80 percent of
	// its time to live or if the token is older than 24 hours.Defaults to 1 hour
	// and must be at least 10 minutes.
	ExpirationSeconds *int `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the
	// token into.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs and ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchInput` via:
//
//	ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs{...}
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput
	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput
}

// serviceAccountToken is information about the serviceAccountToken data to project
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs struct {
	// audience is the intended audience of the token. A recipient of a token
	// must identify itself with an identifier specified in the audience of the
	// token, and otherwise should reject the token. The audience defaults to the
	// identifier of the apiserver.
	Audience pulumi.StringPtrInput `pulumi:"audience"`
	// expirationSeconds is the requested duration of validity of the service
	// account token. As the token approaches expiration, the kubelet volume
	// plugin will proactively rotate the service account token. The kubelet will
	// start trying to rotate the token if the token is older than 80 percent of
	// its time to live or if the token is older than 24 hours.Defaults to 1 hour
	// and must be at least 10 minutes.
	ExpirationSeconds pulumi.IntPtrInput `pulumi:"expirationSeconds"`
	// path is the path relative to the mount point of the file to project the
	// token into.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput)
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput).ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs, ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtr and ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput
	ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput
}

type thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrType ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs

func ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtr(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrInput {
	return (*thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrType) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput)
}

// serviceAccountToken is information about the serviceAccountToken data to project
type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch {
		return &v
	}).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput)
}

// audience is the intended audience of the token. A recipient of a token
// must identify itself with an identifier specified in the audience of the
// token, and otherwise should reject the token. The audience defaults to the
// identifier of the apiserver.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) *string { return v.Audience }).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service
// account token. As the token approaches expiration, the kubelet volume
// plugin will proactively rotate the service account token. The kubelet will
// start trying to rotate the token if the token is older than 80 percent of
// its time to live or if the token is older than 24 hours.Defaults to 1 hour
// and must be at least 10 minutes.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) *int {
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the
// token into.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput) ToThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput) Elem() ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch
		return ret
	}).(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput)
}

// audience is the intended audience of the token. A recipient of a token
// must identify itself with an identifier specified in the audience of the
// token, and otherwise should reject the token. The audience defaults to the
// identifier of the apiserver.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput) Audience() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) *string {
		if v == nil {
			return nil
		}
		return v.Audience
	}).(pulumi.StringPtrOutput)
}

// expirationSeconds is the requested duration of validity of the service
// account token. As the token approaches expiration, the kubelet volume
// plugin will proactively rotate the service account token. The kubelet will
// start trying to rotate the token if the token is older than 80 percent of
// its time to live or if the token is older than 24 hours.Defaults to 1 hour
// and must be at least 10 minutes.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput) ExpirationSeconds() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) *int {
		if v == nil {
			return nil
		}
		return v.ExpirationSeconds
	}).(pulumi.IntPtrOutput)
}

// path is the path relative to the mount point of the file to project the
// token into.
func (o ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatch) *string {
		if v == nil {
			return nil
		}
		return v.Path
	}).(pulumi.StringPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
type ThanosRulerSpecVolumesQuobyte struct {
	// group to map volume access to
	// Default is no group
	Group *string `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
	// Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services
	// specified as a string as host:port pair (multiple entries are separated with commas)
	// which acts as the central registry for volumes
	Registry *string `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend
	// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `pulumi:"tenant"`
	// user to map volume access to
	// Defaults to serivceaccount user
	User *string `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume *string `pulumi:"volume"`
}

// ThanosRulerSpecVolumesQuobyteInput is an input type that accepts ThanosRulerSpecVolumesQuobyteArgs and ThanosRulerSpecVolumesQuobyteOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesQuobyteInput` via:
//
//	ThanosRulerSpecVolumesQuobyteArgs{...}
type ThanosRulerSpecVolumesQuobyteInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesQuobyteOutput() ThanosRulerSpecVolumesQuobyteOutput
	ToThanosRulerSpecVolumesQuobyteOutputWithContext(context.Context) ThanosRulerSpecVolumesQuobyteOutput
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
type ThanosRulerSpecVolumesQuobyteArgs struct {
	// group to map volume access to
	// Default is no group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
	// Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services
	// specified as a string as host:port pair (multiple entries are separated with commas)
	// which acts as the central registry for volumes
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend
	// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant pulumi.StringPtrInput `pulumi:"tenant"`
	// user to map volume access to
	// Defaults to serivceaccount user
	User pulumi.StringPtrInput `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume pulumi.StringPtrInput `pulumi:"volume"`
}

func (ThanosRulerSpecVolumesQuobyteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesQuobyte)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesQuobyteArgs) ToThanosRulerSpecVolumesQuobyteOutput() ThanosRulerSpecVolumesQuobyteOutput {
	return i.ToThanosRulerSpecVolumesQuobyteOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesQuobyteArgs) ToThanosRulerSpecVolumesQuobyteOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobyteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesQuobyteOutput)
}

func (i ThanosRulerSpecVolumesQuobyteArgs) ToThanosRulerSpecVolumesQuobytePtrOutput() ThanosRulerSpecVolumesQuobytePtrOutput {
	return i.ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesQuobyteArgs) ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesQuobyteOutput).ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesQuobytePtrInput is an input type that accepts ThanosRulerSpecVolumesQuobyteArgs, ThanosRulerSpecVolumesQuobytePtr and ThanosRulerSpecVolumesQuobytePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesQuobytePtrInput` via:
//
//	        ThanosRulerSpecVolumesQuobyteArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesQuobytePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesQuobytePtrOutput() ThanosRulerSpecVolumesQuobytePtrOutput
	ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesQuobytePtrOutput
}

type thanosRulerSpecVolumesQuobytePtrType ThanosRulerSpecVolumesQuobyteArgs

func ThanosRulerSpecVolumesQuobytePtr(v *ThanosRulerSpecVolumesQuobyteArgs) ThanosRulerSpecVolumesQuobytePtrInput {
	return (*thanosRulerSpecVolumesQuobytePtrType)(v)
}

func (*thanosRulerSpecVolumesQuobytePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesQuobyte)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesQuobytePtrType) ToThanosRulerSpecVolumesQuobytePtrOutput() ThanosRulerSpecVolumesQuobytePtrOutput {
	return i.ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesQuobytePtrType) ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesQuobytePtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
type ThanosRulerSpecVolumesQuobyteOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesQuobyteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesQuobyte)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesQuobyteOutput) ToThanosRulerSpecVolumesQuobyteOutput() ThanosRulerSpecVolumesQuobyteOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobyteOutput) ToThanosRulerSpecVolumesQuobyteOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobyteOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobyteOutput) ToThanosRulerSpecVolumesQuobytePtrOutput() ThanosRulerSpecVolumesQuobytePtrOutput {
	return o.ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesQuobyteOutput) ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesQuobyte) *ThanosRulerSpecVolumesQuobyte {
		return &v
	}).(ThanosRulerSpecVolumesQuobytePtrOutput)
}

// group to map volume access to
// Default is no group
func (o ThanosRulerSpecVolumesQuobyteOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobyte) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
// Defaults to false.
func (o ThanosRulerSpecVolumesQuobyteOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobyte) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services
// specified as a string as host:port pair (multiple entries are separated with commas)
// which acts as the central registry for volumes
func (o ThanosRulerSpecVolumesQuobyteOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobyte) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend
// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o ThanosRulerSpecVolumesQuobyteOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobyte) *string { return v.Tenant }).(pulumi.StringPtrOutput)
}

// user to map volume access to
// Defaults to serivceaccount user
func (o ThanosRulerSpecVolumesQuobyteOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobyte) *string { return v.User }).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o ThanosRulerSpecVolumesQuobyteOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobyte) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesQuobytePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesQuobytePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesQuobyte)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesQuobytePtrOutput) ToThanosRulerSpecVolumesQuobytePtrOutput() ThanosRulerSpecVolumesQuobytePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobytePtrOutput) ToThanosRulerSpecVolumesQuobytePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobytePtrOutput) Elem() ThanosRulerSpecVolumesQuobyteOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobyte) ThanosRulerSpecVolumesQuobyte {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesQuobyte
		return ret
	}).(ThanosRulerSpecVolumesQuobyteOutput)
}

// group to map volume access to
// Default is no group
func (o ThanosRulerSpecVolumesQuobytePtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
// Defaults to false.
func (o ThanosRulerSpecVolumesQuobytePtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobyte) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services
// specified as a string as host:port pair (multiple entries are separated with commas)
// which acts as the central registry for volumes
func (o ThanosRulerSpecVolumesQuobytePtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend
// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o ThanosRulerSpecVolumesQuobytePtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Tenant
	}).(pulumi.StringPtrOutput)
}

// user to map volume access to
// Defaults to serivceaccount user
func (o ThanosRulerSpecVolumesQuobytePtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o ThanosRulerSpecVolumesQuobytePtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobyte) *string {
		if v == nil {
			return nil
		}
		return v.Volume
	}).(pulumi.StringPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
type ThanosRulerSpecVolumesQuobytePatch struct {
	// group to map volume access to
	// Default is no group
	Group *string `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
	// Defaults to false.
	ReadOnly *bool `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services
	// specified as a string as host:port pair (multiple entries are separated with commas)
	// which acts as the central registry for volumes
	Registry *string `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend
	// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant *string `pulumi:"tenant"`
	// user to map volume access to
	// Defaults to serivceaccount user
	User *string `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume *string `pulumi:"volume"`
}

// ThanosRulerSpecVolumesQuobytePatchInput is an input type that accepts ThanosRulerSpecVolumesQuobytePatchArgs and ThanosRulerSpecVolumesQuobytePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesQuobytePatchInput` via:
//
//	ThanosRulerSpecVolumesQuobytePatchArgs{...}
type ThanosRulerSpecVolumesQuobytePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesQuobytePatchOutput() ThanosRulerSpecVolumesQuobytePatchOutput
	ToThanosRulerSpecVolumesQuobytePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesQuobytePatchOutput
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
type ThanosRulerSpecVolumesQuobytePatchArgs struct {
	// group to map volume access to
	// Default is no group
	Group pulumi.StringPtrInput `pulumi:"group"`
	// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
	// Defaults to false.
	ReadOnly pulumi.BoolPtrInput `pulumi:"readOnly"`
	// registry represents a single or multiple Quobyte Registry services
	// specified as a string as host:port pair (multiple entries are separated with commas)
	// which acts as the central registry for volumes
	Registry pulumi.StringPtrInput `pulumi:"registry"`
	// tenant owning the given Quobyte volume in the Backend
	// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
	Tenant pulumi.StringPtrInput `pulumi:"tenant"`
	// user to map volume access to
	// Defaults to serivceaccount user
	User pulumi.StringPtrInput `pulumi:"user"`
	// volume is a string that references an already created Quobyte volume by name.
	Volume pulumi.StringPtrInput `pulumi:"volume"`
}

func (ThanosRulerSpecVolumesQuobytePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesQuobytePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesQuobytePatchArgs) ToThanosRulerSpecVolumesQuobytePatchOutput() ThanosRulerSpecVolumesQuobytePatchOutput {
	return i.ToThanosRulerSpecVolumesQuobytePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesQuobytePatchArgs) ToThanosRulerSpecVolumesQuobytePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesQuobytePatchOutput)
}

func (i ThanosRulerSpecVolumesQuobytePatchArgs) ToThanosRulerSpecVolumesQuobytePatchPtrOutput() ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesQuobytePatchArgs) ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesQuobytePatchOutput).ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesQuobytePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesQuobytePatchArgs, ThanosRulerSpecVolumesQuobytePatchPtr and ThanosRulerSpecVolumesQuobytePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesQuobytePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesQuobytePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesQuobytePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesQuobytePatchPtrOutput() ThanosRulerSpecVolumesQuobytePatchPtrOutput
	ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesQuobytePatchPtrOutput
}

type thanosRulerSpecVolumesQuobytePatchPtrType ThanosRulerSpecVolumesQuobytePatchArgs

func ThanosRulerSpecVolumesQuobytePatchPtr(v *ThanosRulerSpecVolumesQuobytePatchArgs) ThanosRulerSpecVolumesQuobytePatchPtrInput {
	return (*thanosRulerSpecVolumesQuobytePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesQuobytePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesQuobytePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesQuobytePatchPtrType) ToThanosRulerSpecVolumesQuobytePatchPtrOutput() ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesQuobytePatchPtrType) ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesQuobytePatchPtrOutput)
}

// quobyte represents a Quobyte mount on the host that shares a pod's lifetime.
// Deprecated: Quobyte is deprecated and the in-tree quobyte type is no longer supported.
type ThanosRulerSpecVolumesQuobytePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesQuobytePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesQuobytePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesQuobytePatchOutput) ToThanosRulerSpecVolumesQuobytePatchOutput() ThanosRulerSpecVolumesQuobytePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobytePatchOutput) ToThanosRulerSpecVolumesQuobytePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobytePatchOutput) ToThanosRulerSpecVolumesQuobytePatchPtrOutput() ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesQuobytePatchOutput) ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesQuobytePatch) *ThanosRulerSpecVolumesQuobytePatch {
		return &v
	}).(ThanosRulerSpecVolumesQuobytePatchPtrOutput)
}

// group to map volume access to
// Default is no group
func (o ThanosRulerSpecVolumesQuobytePatchOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobytePatch) *string { return v.Group }).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
// Defaults to false.
func (o ThanosRulerSpecVolumesQuobytePatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobytePatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services
// specified as a string as host:port pair (multiple entries are separated with commas)
// which acts as the central registry for volumes
func (o ThanosRulerSpecVolumesQuobytePatchOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobytePatch) *string { return v.Registry }).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend
// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o ThanosRulerSpecVolumesQuobytePatchOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobytePatch) *string { return v.Tenant }).(pulumi.StringPtrOutput)
}

// user to map volume access to
// Defaults to serivceaccount user
func (o ThanosRulerSpecVolumesQuobytePatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobytePatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o ThanosRulerSpecVolumesQuobytePatchOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesQuobytePatch) *string { return v.Volume }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesQuobytePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesQuobytePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesQuobytePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) ToThanosRulerSpecVolumesQuobytePatchPtrOutput() ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) ToThanosRulerSpecVolumesQuobytePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesQuobytePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) Elem() ThanosRulerSpecVolumesQuobytePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobytePatch) ThanosRulerSpecVolumesQuobytePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesQuobytePatch
		return ret
	}).(ThanosRulerSpecVolumesQuobytePatchOutput)
}

// group to map volume access to
// Default is no group
func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) Group() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobytePatch) *string {
		if v == nil {
			return nil
		}
		return v.Group
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the Quobyte volume to be mounted with read-only permissions.
// Defaults to false.
func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobytePatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

// registry represents a single or multiple Quobyte Registry services
// specified as a string as host:port pair (multiple entries are separated with commas)
// which acts as the central registry for volumes
func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) Registry() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobytePatch) *string {
		if v == nil {
			return nil
		}
		return v.Registry
	}).(pulumi.StringPtrOutput)
}

// tenant owning the given Quobyte volume in the Backend
// Used with dynamically provisioned Quobyte volumes, value is set by the plugin
func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) Tenant() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobytePatch) *string {
		if v == nil {
			return nil
		}
		return v.Tenant
	}).(pulumi.StringPtrOutput)
}

// user to map volume access to
// Defaults to serivceaccount user
func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobytePatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// volume is a string that references an already created Quobyte volume by name.
func (o ThanosRulerSpecVolumesQuobytePatchPtrOutput) Volume() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesQuobytePatch) *string {
		if v == nil {
			return nil
		}
		return v.Volume
	}).(pulumi.StringPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
// More info: https://examples.k8s.io/volumes/rbd/README.md
type ThanosRulerSpecVolumesRbd struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `pulumi:"fsType"`
	// image is the rados image name.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image *string `pulumi:"image"`
	// keyring is the path to key ring for RBDUser.
	// Default is /etc/ceph/keyring.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// pool is the rados pool name.
	// Default is rbd.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly  *bool                               `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesRbdSecretRef `pulumi:"secretRef"`
	// user is the rados user name.
	// Default is admin.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// ThanosRulerSpecVolumesRbdInput is an input type that accepts ThanosRulerSpecVolumesRbdArgs and ThanosRulerSpecVolumesRbdOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdInput` via:
//
//	ThanosRulerSpecVolumesRbdArgs{...}
type ThanosRulerSpecVolumesRbdInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdOutput() ThanosRulerSpecVolumesRbdOutput
	ToThanosRulerSpecVolumesRbdOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdOutput
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
// More info: https://examples.k8s.io/volumes/rbd/README.md
type ThanosRulerSpecVolumesRbdArgs struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// image is the rados image name.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringPtrInput `pulumi:"image"`
	// keyring is the path to key ring for RBDUser.
	// Default is /etc/ceph/keyring.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// pool is the rados pool name.
	// Default is rbd.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly  pulumi.BoolPtrInput                        `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesRbdSecretRefPtrInput `pulumi:"secretRef"`
	// user is the rados user name.
	// Default is admin.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecVolumesRbdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbd)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesRbdArgs) ToThanosRulerSpecVolumesRbdOutput() ThanosRulerSpecVolumesRbdOutput {
	return i.ToThanosRulerSpecVolumesRbdOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdArgs) ToThanosRulerSpecVolumesRbdOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdOutput)
}

func (i ThanosRulerSpecVolumesRbdArgs) ToThanosRulerSpecVolumesRbdPtrOutput() ThanosRulerSpecVolumesRbdPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdArgs) ToThanosRulerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdOutput).ToThanosRulerSpecVolumesRbdPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesRbdPtrInput is an input type that accepts ThanosRulerSpecVolumesRbdArgs, ThanosRulerSpecVolumesRbdPtr and ThanosRulerSpecVolumesRbdPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdPtrInput` via:
//
//	        ThanosRulerSpecVolumesRbdArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesRbdPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdPtrOutput() ThanosRulerSpecVolumesRbdPtrOutput
	ToThanosRulerSpecVolumesRbdPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdPtrOutput
}

type thanosRulerSpecVolumesRbdPtrType ThanosRulerSpecVolumesRbdArgs

func ThanosRulerSpecVolumesRbdPtr(v *ThanosRulerSpecVolumesRbdArgs) ThanosRulerSpecVolumesRbdPtrInput {
	return (*thanosRulerSpecVolumesRbdPtrType)(v)
}

func (*thanosRulerSpecVolumesRbdPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbd)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesRbdPtrType) ToThanosRulerSpecVolumesRbdPtrOutput() ThanosRulerSpecVolumesRbdPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesRbdPtrType) ToThanosRulerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
// More info: https://examples.k8s.io/volumes/rbd/README.md
type ThanosRulerSpecVolumesRbdOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbd)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdOutput) ToThanosRulerSpecVolumesRbdOutput() ThanosRulerSpecVolumesRbdOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdOutput) ToThanosRulerSpecVolumesRbdOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdOutput) ToThanosRulerSpecVolumesRbdPtrOutput() ThanosRulerSpecVolumesRbdPtrOutput {
	return o.ToThanosRulerSpecVolumesRbdPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesRbdOutput) ToThanosRulerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesRbd) *ThanosRulerSpecVolumesRbd {
		return &v
	}).(ThanosRulerSpecVolumesRbdPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o ThanosRulerSpecVolumesRbdOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// image is the rados image name.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser.
// Default is /etc/ceph/keyring.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// pool is the rados pool name.
// Default is rbd.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesRbdOutput) SecretRef() ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) *ThanosRulerSpecVolumesRbdSecretRef { return v.SecretRef }).(ThanosRulerSpecVolumesRbdSecretRefPtrOutput)
}

// user is the rados user name.
// Default is admin.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbd) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesRbdPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbd)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdPtrOutput) ToThanosRulerSpecVolumesRbdPtrOutput() ThanosRulerSpecVolumesRbdPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdPtrOutput) ToThanosRulerSpecVolumesRbdPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdPtrOutput) Elem() ThanosRulerSpecVolumesRbdOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) ThanosRulerSpecVolumesRbd {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesRbd
		return ret
	}).(ThanosRulerSpecVolumesRbdOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o ThanosRulerSpecVolumesRbdPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// image is the rados image name.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser.
// Default is /etc/ceph/keyring.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// pool is the rados pool name.
// Default is rbd.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesRbdPtrOutput) SecretRef() ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) *ThanosRulerSpecVolumesRbdSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesRbdSecretRefPtrOutput)
}

// user is the rados user name.
// Default is admin.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbd) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
// More info: https://examples.k8s.io/volumes/rbd/README.md
type ThanosRulerSpecVolumesRbdPatch struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType *string `pulumi:"fsType"`
	// image is the rados image name.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image *string `pulumi:"image"`
	// keyring is the path to key ring for RBDUser.
	// Default is /etc/ceph/keyring.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring *string `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors []string `pulumi:"monitors"`
	// pool is the rados pool name.
	// Default is rbd.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool *string `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly  *bool                                    `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesRbdSecretRefPatch `pulumi:"secretRef"`
	// user is the rados user name.
	// Default is admin.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User *string `pulumi:"user"`
}

// ThanosRulerSpecVolumesRbdPatchInput is an input type that accepts ThanosRulerSpecVolumesRbdPatchArgs and ThanosRulerSpecVolumesRbdPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdPatchInput` via:
//
//	ThanosRulerSpecVolumesRbdPatchArgs{...}
type ThanosRulerSpecVolumesRbdPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdPatchOutput() ThanosRulerSpecVolumesRbdPatchOutput
	ToThanosRulerSpecVolumesRbdPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdPatchOutput
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
// More info: https://examples.k8s.io/volumes/rbd/README.md
type ThanosRulerSpecVolumesRbdPatchArgs struct {
	// fsType is the filesystem type of the volume that you want to mount.
	// Tip: Ensure that the filesystem type is supported by the host operating system.
	// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// image is the rados image name.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Image pulumi.StringPtrInput `pulumi:"image"`
	// keyring is the path to key ring for RBDUser.
	// Default is /etc/ceph/keyring.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Keyring pulumi.StringPtrInput `pulumi:"keyring"`
	// monitors is a collection of Ceph monitors.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Monitors pulumi.StringArrayInput `pulumi:"monitors"`
	// pool is the rados pool name.
	// Default is rbd.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	Pool pulumi.StringPtrInput `pulumi:"pool"`
	// readOnly here will force the ReadOnly setting in VolumeMounts.
	// Defaults to false.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	ReadOnly  pulumi.BoolPtrInput                             `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesRbdSecretRefPatchPtrInput `pulumi:"secretRef"`
	// user is the rados user name.
	// Default is admin.
	// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
	User pulumi.StringPtrInput `pulumi:"user"`
}

func (ThanosRulerSpecVolumesRbdPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbdPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesRbdPatchArgs) ToThanosRulerSpecVolumesRbdPatchOutput() ThanosRulerSpecVolumesRbdPatchOutput {
	return i.ToThanosRulerSpecVolumesRbdPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdPatchArgs) ToThanosRulerSpecVolumesRbdPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdPatchOutput)
}

func (i ThanosRulerSpecVolumesRbdPatchArgs) ToThanosRulerSpecVolumesRbdPatchPtrOutput() ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdPatchArgs) ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdPatchOutput).ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesRbdPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesRbdPatchArgs, ThanosRulerSpecVolumesRbdPatchPtr and ThanosRulerSpecVolumesRbdPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesRbdPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesRbdPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdPatchPtrOutput() ThanosRulerSpecVolumesRbdPatchPtrOutput
	ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdPatchPtrOutput
}

type thanosRulerSpecVolumesRbdPatchPtrType ThanosRulerSpecVolumesRbdPatchArgs

func ThanosRulerSpecVolumesRbdPatchPtr(v *ThanosRulerSpecVolumesRbdPatchArgs) ThanosRulerSpecVolumesRbdPatchPtrInput {
	return (*thanosRulerSpecVolumesRbdPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesRbdPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbdPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesRbdPatchPtrType) ToThanosRulerSpecVolumesRbdPatchPtrOutput() ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesRbdPatchPtrType) ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdPatchPtrOutput)
}

// rbd represents a Rados Block Device mount on the host that shares a pod's lifetime.
// Deprecated: RBD is deprecated and the in-tree rbd type is no longer supported.
// More info: https://examples.k8s.io/volumes/rbd/README.md
type ThanosRulerSpecVolumesRbdPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbdPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdPatchOutput) ToThanosRulerSpecVolumesRbdPatchOutput() ThanosRulerSpecVolumesRbdPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdPatchOutput) ToThanosRulerSpecVolumesRbdPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdPatchOutput) ToThanosRulerSpecVolumesRbdPatchPtrOutput() ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesRbdPatchOutput) ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesRbdPatch) *ThanosRulerSpecVolumesRbdPatch {
		return &v
	}).(ThanosRulerSpecVolumesRbdPatchPtrOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o ThanosRulerSpecVolumesRbdPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// image is the rados image name.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) *string { return v.Image }).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser.
// Default is /etc/ceph/keyring.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) *string { return v.Keyring }).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) []string { return v.Monitors }).(pulumi.StringArrayOutput)
}

// pool is the rados pool name.
// Default is rbd.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) *string { return v.Pool }).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesRbdPatchOutput) SecretRef() ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) *ThanosRulerSpecVolumesRbdSecretRefPatch { return v.SecretRef }).(ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput)
}

// user is the rados user name.
// Default is admin.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdPatch) *string { return v.User }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesRbdPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbdPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) ToThanosRulerSpecVolumesRbdPatchPtrOutput() ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) ToThanosRulerSpecVolumesRbdPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) Elem() ThanosRulerSpecVolumesRbdPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) ThanosRulerSpecVolumesRbdPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesRbdPatch
		return ret
	}).(ThanosRulerSpecVolumesRbdPatchOutput)
}

// fsType is the filesystem type of the volume that you want to mount.
// Tip: Ensure that the filesystem type is supported by the host operating system.
// Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd
func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// image is the rados image name.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) Image() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) *string {
		if v == nil {
			return nil
		}
		return v.Image
	}).(pulumi.StringPtrOutput)
}

// keyring is the path to key ring for RBDUser.
// Default is /etc/ceph/keyring.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) Keyring() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) *string {
		if v == nil {
			return nil
		}
		return v.Keyring
	}).(pulumi.StringPtrOutput)
}

// monitors is a collection of Ceph monitors.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) Monitors() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) []string {
		if v == nil {
			return nil
		}
		return v.Monitors
	}).(pulumi.StringArrayOutput)
}

// pool is the rados pool name.
// Default is rbd.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) Pool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) *string {
		if v == nil {
			return nil
		}
		return v.Pool
	}).(pulumi.StringPtrOutput)
}

// readOnly here will force the ReadOnly setting in VolumeMounts.
// Defaults to false.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) SecretRef() ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) *ThanosRulerSpecVolumesRbdSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput)
}

// user is the rados user name.
// Default is admin.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
func (o ThanosRulerSpecVolumesRbdPatchPtrOutput) User() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdPatch) *string {
		if v == nil {
			return nil
		}
		return v.User
	}).(pulumi.StringPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided
// overrides keyring.
// Default is nil.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type ThanosRulerSpecVolumesRbdSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesRbdSecretRefInput is an input type that accepts ThanosRulerSpecVolumesRbdSecretRefArgs and ThanosRulerSpecVolumesRbdSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdSecretRefInput` via:
//
//	ThanosRulerSpecVolumesRbdSecretRefArgs{...}
type ThanosRulerSpecVolumesRbdSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdSecretRefOutput() ThanosRulerSpecVolumesRbdSecretRefOutput
	ToThanosRulerSpecVolumesRbdSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdSecretRefOutput
}

// secretRef is name of the authentication secret for RBDUser. If provided
// overrides keyring.
// Default is nil.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type ThanosRulerSpecVolumesRbdSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesRbdSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesRbdSecretRefArgs) ToThanosRulerSpecVolumesRbdSecretRefOutput() ThanosRulerSpecVolumesRbdSecretRefOutput {
	return i.ToThanosRulerSpecVolumesRbdSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdSecretRefArgs) ToThanosRulerSpecVolumesRbdSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdSecretRefOutput)
}

func (i ThanosRulerSpecVolumesRbdSecretRefArgs) ToThanosRulerSpecVolumesRbdSecretRefPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdSecretRefArgs) ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdSecretRefOutput).ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesRbdSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesRbdSecretRefArgs, ThanosRulerSpecVolumesRbdSecretRefPtr and ThanosRulerSpecVolumesRbdSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesRbdSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesRbdSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdSecretRefPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPtrOutput
	ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdSecretRefPtrOutput
}

type thanosRulerSpecVolumesRbdSecretRefPtrType ThanosRulerSpecVolumesRbdSecretRefArgs

func ThanosRulerSpecVolumesRbdSecretRefPtr(v *ThanosRulerSpecVolumesRbdSecretRefArgs) ThanosRulerSpecVolumesRbdSecretRefPtrInput {
	return (*thanosRulerSpecVolumesRbdSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesRbdSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesRbdSecretRefPtrType) ToThanosRulerSpecVolumesRbdSecretRefPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesRbdSecretRefPtrType) ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdSecretRefPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided
// overrides keyring.
// Default is nil.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type ThanosRulerSpecVolumesRbdSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdSecretRefOutput) ToThanosRulerSpecVolumesRbdSecretRefOutput() ThanosRulerSpecVolumesRbdSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefOutput) ToThanosRulerSpecVolumesRbdSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefOutput) ToThanosRulerSpecVolumesRbdSecretRefPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesRbdSecretRefOutput) ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesRbdSecretRef) *ThanosRulerSpecVolumesRbdSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesRbdSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesRbdSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesRbdSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbdSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdSecretRefPtrOutput) ToThanosRulerSpecVolumesRbdSecretRefPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefPtrOutput) ToThanosRulerSpecVolumesRbdSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesRbdSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdSecretRef) ThanosRulerSpecVolumesRbdSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesRbdSecretRef
		return ret
	}).(ThanosRulerSpecVolumesRbdSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesRbdSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided
// overrides keyring.
// Default is nil.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type ThanosRulerSpecVolumesRbdSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesRbdSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesRbdSecretRefPatchArgs and ThanosRulerSpecVolumesRbdSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesRbdSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesRbdSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdSecretRefPatchOutput() ThanosRulerSpecVolumesRbdSecretRefPatchOutput
	ToThanosRulerSpecVolumesRbdSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchOutput
}

// secretRef is name of the authentication secret for RBDUser. If provided
// overrides keyring.
// Default is nil.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type ThanosRulerSpecVolumesRbdSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesRbdSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesRbdSecretRefPatchArgs) ToThanosRulerSpecVolumesRbdSecretRefPatchOutput() ThanosRulerSpecVolumesRbdSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesRbdSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdSecretRefPatchArgs) ToThanosRulerSpecVolumesRbdSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesRbdSecretRefPatchArgs) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesRbdSecretRefPatchArgs) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdSecretRefPatchOutput).ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesRbdSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesRbdSecretRefPatchArgs, ThanosRulerSpecVolumesRbdSecretRefPatchPtr and ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesRbdSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesRbdSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesRbdSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesRbdSecretRefPatchPtrType ThanosRulerSpecVolumesRbdSecretRefPatchArgs

func ThanosRulerSpecVolumesRbdSecretRefPatchPtr(v *ThanosRulerSpecVolumesRbdSecretRefPatchArgs) ThanosRulerSpecVolumesRbdSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesRbdSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesRbdSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbdSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesRbdSecretRefPatchPtrType) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesRbdSecretRefPatchPtrType) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput)
}

// secretRef is name of the authentication secret for RBDUser. If provided
// overrides keyring.
// Default is nil.
// More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
type ThanosRulerSpecVolumesRbdSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdSecretRefPatchOutput) ToThanosRulerSpecVolumesRbdSecretRefPatchOutput() ThanosRulerSpecVolumesRbdSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefPatchOutput) ToThanosRulerSpecVolumesRbdSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefPatchOutput) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesRbdSecretRefPatchOutput) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesRbdSecretRefPatch) *ThanosRulerSpecVolumesRbdSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesRbdSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesRbdSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesRbdSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput() ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesRbdSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesRbdSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdSecretRefPatch) ThanosRulerSpecVolumesRbdSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesRbdSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesRbdSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesRbdSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
type ThanosRulerSpecVolumesScaleIO struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs".
	// Default is "xfs".
	FsType *string `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway *string `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  *bool                                   `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesScaleIOSecretRef `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
	// Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System *string `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system
	// that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecVolumesScaleIOInput is an input type that accepts ThanosRulerSpecVolumesScaleIOArgs and ThanosRulerSpecVolumesScaleIOOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOInput` via:
//
//	ThanosRulerSpecVolumesScaleIOArgs{...}
type ThanosRulerSpecVolumesScaleIOInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOOutput() ThanosRulerSpecVolumesScaleIOOutput
	ToThanosRulerSpecVolumesScaleIOOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOOutput
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
type ThanosRulerSpecVolumesScaleIOArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs".
	// Default is "xfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  pulumi.BoolPtrInput                            `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesScaleIOSecretRefPtrInput `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
	// Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System pulumi.StringPtrInput `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system
	// that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecVolumesScaleIOArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIO)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesScaleIOArgs) ToThanosRulerSpecVolumesScaleIOOutput() ThanosRulerSpecVolumesScaleIOOutput {
	return i.ToThanosRulerSpecVolumesScaleIOOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOArgs) ToThanosRulerSpecVolumesScaleIOOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOOutput)
}

func (i ThanosRulerSpecVolumesScaleIOArgs) ToThanosRulerSpecVolumesScaleIOPtrOutput() ThanosRulerSpecVolumesScaleIOPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOArgs) ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOOutput).ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesScaleIOPtrInput is an input type that accepts ThanosRulerSpecVolumesScaleIOArgs, ThanosRulerSpecVolumesScaleIOPtr and ThanosRulerSpecVolumesScaleIOPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOPtrInput` via:
//
//	        ThanosRulerSpecVolumesScaleIOArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesScaleIOPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOPtrOutput() ThanosRulerSpecVolumesScaleIOPtrOutput
	ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOPtrOutput
}

type thanosRulerSpecVolumesScaleIOPtrType ThanosRulerSpecVolumesScaleIOArgs

func ThanosRulerSpecVolumesScaleIOPtr(v *ThanosRulerSpecVolumesScaleIOArgs) ThanosRulerSpecVolumesScaleIOPtrInput {
	return (*thanosRulerSpecVolumesScaleIOPtrType)(v)
}

func (*thanosRulerSpecVolumesScaleIOPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIO)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesScaleIOPtrType) ToThanosRulerSpecVolumesScaleIOPtrOutput() ThanosRulerSpecVolumesScaleIOPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesScaleIOPtrType) ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
type ThanosRulerSpecVolumesScaleIOOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIO)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOOutput) ToThanosRulerSpecVolumesScaleIOOutput() ThanosRulerSpecVolumesScaleIOOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOOutput) ToThanosRulerSpecVolumesScaleIOOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOOutput) ToThanosRulerSpecVolumesScaleIOPtrOutput() ThanosRulerSpecVolumesScaleIOPtrOutput {
	return o.ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesScaleIOOutput) ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesScaleIO) *ThanosRulerSpecVolumesScaleIO {
		return &v
	}).(ThanosRulerSpecVolumesScaleIOPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs".
// Default is "xfs".
func (o ThanosRulerSpecVolumesScaleIOOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ThanosRulerSpecVolumesScaleIOOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ThanosRulerSpecVolumesScaleIOOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesScaleIOOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesScaleIOOutput) SecretRef() ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *ThanosRulerSpecVolumesScaleIOSecretRef { return v.SecretRef }).(ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ThanosRulerSpecVolumesScaleIOOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
// Default is ThinProvisioned.
func (o ThanosRulerSpecVolumesScaleIOOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ThanosRulerSpecVolumesScaleIOOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ThanosRulerSpecVolumesScaleIOOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *string { return v.System }).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system
// that is associated with this volume source.
func (o ThanosRulerSpecVolumesScaleIOOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIO) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesScaleIOPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIO)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOPtrOutput) ToThanosRulerSpecVolumesScaleIOPtrOutput() ThanosRulerSpecVolumesScaleIOPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOPtrOutput) ToThanosRulerSpecVolumesScaleIOPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOPtrOutput) Elem() ThanosRulerSpecVolumesScaleIOOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) ThanosRulerSpecVolumesScaleIO {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesScaleIO
		return ret
	}).(ThanosRulerSpecVolumesScaleIOOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs".
// Default is "xfs".
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesScaleIOPtrOutput) SecretRef() ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *ThanosRulerSpecVolumesScaleIOSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
// Default is ThinProvisioned.
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.System
	}).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system
// that is associated with this volume source.
func (o ThanosRulerSpecVolumesScaleIOPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIO) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
type ThanosRulerSpecVolumesScaleIOPatch struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs".
	// Default is "xfs".
	FsType *string `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway *string `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain *string `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  *bool                                        `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesScaleIOSecretRefPatch `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled *bool `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
	// Default is ThinProvisioned.
	StorageMode *string `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool *string `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System *string `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system
	// that is associated with this volume source.
	VolumeName *string `pulumi:"volumeName"`
}

// ThanosRulerSpecVolumesScaleIOPatchInput is an input type that accepts ThanosRulerSpecVolumesScaleIOPatchArgs and ThanosRulerSpecVolumesScaleIOPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOPatchInput` via:
//
//	ThanosRulerSpecVolumesScaleIOPatchArgs{...}
type ThanosRulerSpecVolumesScaleIOPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOPatchOutput() ThanosRulerSpecVolumesScaleIOPatchOutput
	ToThanosRulerSpecVolumesScaleIOPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOPatchOutput
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
type ThanosRulerSpecVolumesScaleIOPatchArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs".
	// Default is "xfs".
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// gateway is the host address of the ScaleIO API Gateway.
	Gateway pulumi.StringPtrInput `pulumi:"gateway"`
	// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
	ProtectionDomain pulumi.StringPtrInput `pulumi:"protectionDomain"`
	// readOnly Defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  pulumi.BoolPtrInput                                 `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrInput `pulumi:"secretRef"`
	// sslEnabled Flag enable/disable SSL communication with Gateway, default false
	SslEnabled pulumi.BoolPtrInput `pulumi:"sslEnabled"`
	// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
	// Default is ThinProvisioned.
	StorageMode pulumi.StringPtrInput `pulumi:"storageMode"`
	// storagePool is the ScaleIO Storage Pool associated with the protection domain.
	StoragePool pulumi.StringPtrInput `pulumi:"storagePool"`
	// system is the name of the storage system as configured in ScaleIO.
	System pulumi.StringPtrInput `pulumi:"system"`
	// volumeName is the name of a volume already created in the ScaleIO system
	// that is associated with this volume source.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
}

func (ThanosRulerSpecVolumesScaleIOPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesScaleIOPatchArgs) ToThanosRulerSpecVolumesScaleIOPatchOutput() ThanosRulerSpecVolumesScaleIOPatchOutput {
	return i.ToThanosRulerSpecVolumesScaleIOPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOPatchArgs) ToThanosRulerSpecVolumesScaleIOPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOPatchOutput)
}

func (i ThanosRulerSpecVolumesScaleIOPatchArgs) ToThanosRulerSpecVolumesScaleIOPatchPtrOutput() ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOPatchArgs) ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOPatchOutput).ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesScaleIOPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesScaleIOPatchArgs, ThanosRulerSpecVolumesScaleIOPatchPtr and ThanosRulerSpecVolumesScaleIOPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesScaleIOPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesScaleIOPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOPatchPtrOutput() ThanosRulerSpecVolumesScaleIOPatchPtrOutput
	ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOPatchPtrOutput
}

type thanosRulerSpecVolumesScaleIOPatchPtrType ThanosRulerSpecVolumesScaleIOPatchArgs

func ThanosRulerSpecVolumesScaleIOPatchPtr(v *ThanosRulerSpecVolumesScaleIOPatchArgs) ThanosRulerSpecVolumesScaleIOPatchPtrInput {
	return (*thanosRulerSpecVolumesScaleIOPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesScaleIOPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIOPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesScaleIOPatchPtrType) ToThanosRulerSpecVolumesScaleIOPatchPtrOutput() ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesScaleIOPatchPtrType) ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOPatchPtrOutput)
}

// scaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
// Deprecated: ScaleIO is deprecated and the in-tree scaleIO type is no longer supported.
type ThanosRulerSpecVolumesScaleIOPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOPatchOutput) ToThanosRulerSpecVolumesScaleIOPatchOutput() ThanosRulerSpecVolumesScaleIOPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOPatchOutput) ToThanosRulerSpecVolumesScaleIOPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOPatchOutput) ToThanosRulerSpecVolumesScaleIOPatchPtrOutput() ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesScaleIOPatchOutput) ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesScaleIOPatch) *ThanosRulerSpecVolumesScaleIOPatch {
		return &v
	}).(ThanosRulerSpecVolumesScaleIOPatchPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs".
// Default is "xfs".
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *string { return v.Gateway }).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *string { return v.ProtectionDomain }).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesScaleIOPatchOutput) SecretRef() ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *ThanosRulerSpecVolumesScaleIOSecretRefPatch {
		return v.SecretRef
	}).(ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *bool { return v.SslEnabled }).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
// Default is ThinProvisioned.
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *string { return v.StorageMode }).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *string { return v.StoragePool }).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *string { return v.System }).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system
// that is associated with this volume source.
func (o ThanosRulerSpecVolumesScaleIOPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesScaleIOPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIOPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) ToThanosRulerSpecVolumesScaleIOPatchPtrOutput() ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) ToThanosRulerSpecVolumesScaleIOPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) Elem() ThanosRulerSpecVolumesScaleIOPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) ThanosRulerSpecVolumesScaleIOPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesScaleIOPatch
		return ret
	}).(ThanosRulerSpecVolumesScaleIOPatchOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs".
// Default is "xfs".
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// gateway is the host address of the ScaleIO API Gateway.
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) Gateway() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *string {
		if v == nil {
			return nil
		}
		return v.Gateway
	}).(pulumi.StringPtrOutput)
}

// protectionDomain is the name of the ScaleIO Protection Domain for the configured storage.
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) ProtectionDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *string {
		if v == nil {
			return nil
		}
		return v.ProtectionDomain
	}).(pulumi.StringPtrOutput)
}

// readOnly Defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) SecretRef() ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *ThanosRulerSpecVolumesScaleIOSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput)
}

// sslEnabled Flag enable/disable SSL communication with Gateway, default false
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) SslEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *bool {
		if v == nil {
			return nil
		}
		return v.SslEnabled
	}).(pulumi.BoolPtrOutput)
}

// storageMode indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.
// Default is ThinProvisioned.
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) StorageMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *string {
		if v == nil {
			return nil
		}
		return v.StorageMode
	}).(pulumi.StringPtrOutput)
}

// storagePool is the ScaleIO Storage Pool associated with the protection domain.
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) StoragePool() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *string {
		if v == nil {
			return nil
		}
		return v.StoragePool
	}).(pulumi.StringPtrOutput)
}

// system is the name of the storage system as configured in ScaleIO.
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) System() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *string {
		if v == nil {
			return nil
		}
		return v.System
	}).(pulumi.StringPtrOutput)
}

// volumeName is the name of a volume already created in the ScaleIO system
// that is associated with this volume source.
func (o ThanosRulerSpecVolumesScaleIOPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other
// sensitive information. If this is not provided, Login operation will fail.
type ThanosRulerSpecVolumesScaleIOSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesScaleIOSecretRefInput is an input type that accepts ThanosRulerSpecVolumesScaleIOSecretRefArgs and ThanosRulerSpecVolumesScaleIOSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOSecretRefInput` via:
//
//	ThanosRulerSpecVolumesScaleIOSecretRefArgs{...}
type ThanosRulerSpecVolumesScaleIOSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOSecretRefOutput() ThanosRulerSpecVolumesScaleIOSecretRefOutput
	ToThanosRulerSpecVolumesScaleIOSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOSecretRefOutput
}

// secretRef references to the secret for ScaleIO user and other
// sensitive information. If this is not provided, Login operation will fail.
type ThanosRulerSpecVolumesScaleIOSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesScaleIOSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefArgs) ToThanosRulerSpecVolumesScaleIOSecretRefOutput() ThanosRulerSpecVolumesScaleIOSecretRefOutput {
	return i.ToThanosRulerSpecVolumesScaleIOSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefArgs) ToThanosRulerSpecVolumesScaleIOSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOSecretRefOutput)
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefArgs) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefArgs) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOSecretRefOutput).ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesScaleIOSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesScaleIOSecretRefArgs, ThanosRulerSpecVolumesScaleIOSecretRefPtr and ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesScaleIOSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesScaleIOSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput
	ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput
}

type thanosRulerSpecVolumesScaleIOSecretRefPtrType ThanosRulerSpecVolumesScaleIOSecretRefArgs

func ThanosRulerSpecVolumesScaleIOSecretRefPtr(v *ThanosRulerSpecVolumesScaleIOSecretRefArgs) ThanosRulerSpecVolumesScaleIOSecretRefPtrInput {
	return (*thanosRulerSpecVolumesScaleIOSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesScaleIOSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesScaleIOSecretRefPtrType) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesScaleIOSecretRefPtrType) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other
// sensitive information. If this is not provided, Login operation will fail.
type ThanosRulerSpecVolumesScaleIOSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefOutput) ToThanosRulerSpecVolumesScaleIOSecretRefOutput() ThanosRulerSpecVolumesScaleIOSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefOutput) ToThanosRulerSpecVolumesScaleIOSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesScaleIOSecretRef) *ThanosRulerSpecVolumesScaleIOSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesScaleIOSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIOSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesScaleIOSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOSecretRef) ThanosRulerSpecVolumesScaleIOSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesScaleIOSecretRef
		return ret
	}).(ThanosRulerSpecVolumesScaleIOSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other
// sensitive information. If this is not provided, Login operation will fail.
type ThanosRulerSpecVolumesScaleIOSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesScaleIOSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs and ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesScaleIOSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOSecretRefPatchOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput
	ToThanosRulerSpecVolumesScaleIOSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput
}

// secretRef references to the secret for ScaleIO user and other
// sensitive information. If this is not provided, Login operation will fail.
type ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs) ToThanosRulerSpecVolumesScaleIOSecretRefPatchOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesScaleIOSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs) ToThanosRulerSpecVolumesScaleIOSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput).ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs, ThanosRulerSpecVolumesScaleIOSecretRefPatchPtr and ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesScaleIOSecretRefPatchPtrType ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs

func ThanosRulerSpecVolumesScaleIOSecretRefPatchPtr(v *ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs) ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesScaleIOSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesScaleIOSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIOSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesScaleIOSecretRefPatchPtrType) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesScaleIOSecretRefPatchPtrType) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput)
}

// secretRef references to the secret for ScaleIO user and other
// sensitive information. If this is not provided, Login operation will fail.
type ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPatchOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesScaleIOSecretRefPatch) *ThanosRulerSpecVolumesScaleIOSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesScaleIOSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesScaleIOSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput() ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOSecretRefPatch) ThanosRulerSpecVolumesScaleIOSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesScaleIOSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesScaleIOSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secret represents a secret that should populate this volume.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type ThanosRulerSpecVolumesSecret struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values
	// for mode bits. Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesSecretItems `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// ThanosRulerSpecVolumesSecretInput is an input type that accepts ThanosRulerSpecVolumesSecretArgs and ThanosRulerSpecVolumesSecretOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretInput` via:
//
//	ThanosRulerSpecVolumesSecretArgs{...}
type ThanosRulerSpecVolumesSecretInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretOutput() ThanosRulerSpecVolumesSecretOutput
	ToThanosRulerSpecVolumesSecretOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretOutput
}

// secret represents a secret that should populate this volume.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type ThanosRulerSpecVolumesSecretArgs struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values
	// for mode bits. Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesSecretItemsArrayInput `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ThanosRulerSpecVolumesSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecret)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesSecretArgs) ToThanosRulerSpecVolumesSecretOutput() ThanosRulerSpecVolumesSecretOutput {
	return i.ToThanosRulerSpecVolumesSecretOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretArgs) ToThanosRulerSpecVolumesSecretOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretOutput)
}

func (i ThanosRulerSpecVolumesSecretArgs) ToThanosRulerSpecVolumesSecretPtrOutput() ThanosRulerSpecVolumesSecretPtrOutput {
	return i.ToThanosRulerSpecVolumesSecretPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretArgs) ToThanosRulerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretOutput).ToThanosRulerSpecVolumesSecretPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesSecretPtrInput is an input type that accepts ThanosRulerSpecVolumesSecretArgs, ThanosRulerSpecVolumesSecretPtr and ThanosRulerSpecVolumesSecretPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretPtrInput` via:
//
//	        ThanosRulerSpecVolumesSecretArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesSecretPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretPtrOutput() ThanosRulerSpecVolumesSecretPtrOutput
	ToThanosRulerSpecVolumesSecretPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretPtrOutput
}

type thanosRulerSpecVolumesSecretPtrType ThanosRulerSpecVolumesSecretArgs

func ThanosRulerSpecVolumesSecretPtr(v *ThanosRulerSpecVolumesSecretArgs) ThanosRulerSpecVolumesSecretPtrInput {
	return (*thanosRulerSpecVolumesSecretPtrType)(v)
}

func (*thanosRulerSpecVolumesSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesSecret)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesSecretPtrType) ToThanosRulerSpecVolumesSecretPtrOutput() ThanosRulerSpecVolumesSecretPtrOutput {
	return i.ToThanosRulerSpecVolumesSecretPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesSecretPtrType) ToThanosRulerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretPtrOutput)
}

// secret represents a secret that should populate this volume.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type ThanosRulerSpecVolumesSecretOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecret)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretOutput) ToThanosRulerSpecVolumesSecretOutput() ThanosRulerSpecVolumesSecretOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretOutput) ToThanosRulerSpecVolumesSecretOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretOutput) ToThanosRulerSpecVolumesSecretPtrOutput() ThanosRulerSpecVolumesSecretPtrOutput {
	return o.ToThanosRulerSpecVolumesSecretPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesSecretOutput) ToThanosRulerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesSecret) *ThanosRulerSpecVolumesSecret {
		return &v
	}).(ThanosRulerSpecVolumesSecretPtrOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values
// for mode bits. Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesSecretOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecret) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesSecretOutput) Items() ThanosRulerSpecVolumesSecretItemsArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecret) []ThanosRulerSpecVolumesSecretItems { return v.Items }).(ThanosRulerSpecVolumesSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o ThanosRulerSpecVolumesSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o ThanosRulerSpecVolumesSecretOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecret) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesSecretPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesSecret)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretPtrOutput) ToThanosRulerSpecVolumesSecretPtrOutput() ThanosRulerSpecVolumesSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretPtrOutput) ToThanosRulerSpecVolumesSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretPtrOutput) Elem() ThanosRulerSpecVolumesSecretOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecret) ThanosRulerSpecVolumesSecret {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesSecret
		return ret
	}).(ThanosRulerSpecVolumesSecretOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values
// for mode bits. Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesSecretPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecret) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesSecretPtrOutput) Items() ThanosRulerSpecVolumesSecretItemsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecret) []ThanosRulerSpecVolumesSecretItems {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesSecretItemsArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o ThanosRulerSpecVolumesSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o ThanosRulerSpecVolumesSecretPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecret) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesSecretItems struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesSecretItemsInput is an input type that accepts ThanosRulerSpecVolumesSecretItemsArgs and ThanosRulerSpecVolumesSecretItemsOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretItemsInput` via:
//
//	ThanosRulerSpecVolumesSecretItemsArgs{...}
type ThanosRulerSpecVolumesSecretItemsInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretItemsOutput() ThanosRulerSpecVolumesSecretItemsOutput
	ToThanosRulerSpecVolumesSecretItemsOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretItemsOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesSecretItemsArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesSecretItemsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecretItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesSecretItemsArgs) ToThanosRulerSpecVolumesSecretItemsOutput() ThanosRulerSpecVolumesSecretItemsOutput {
	return i.ToThanosRulerSpecVolumesSecretItemsOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretItemsArgs) ToThanosRulerSpecVolumesSecretItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretItemsOutput)
}

// ThanosRulerSpecVolumesSecretItemsArrayInput is an input type that accepts ThanosRulerSpecVolumesSecretItemsArray and ThanosRulerSpecVolumesSecretItemsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretItemsArrayInput` via:
//
//	ThanosRulerSpecVolumesSecretItemsArray{ ThanosRulerSpecVolumesSecretItemsArgs{...} }
type ThanosRulerSpecVolumesSecretItemsArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretItemsArrayOutput() ThanosRulerSpecVolumesSecretItemsArrayOutput
	ToThanosRulerSpecVolumesSecretItemsArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretItemsArrayOutput
}

type ThanosRulerSpecVolumesSecretItemsArray []ThanosRulerSpecVolumesSecretItemsInput

func (ThanosRulerSpecVolumesSecretItemsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesSecretItems)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesSecretItemsArray) ToThanosRulerSpecVolumesSecretItemsArrayOutput() ThanosRulerSpecVolumesSecretItemsArrayOutput {
	return i.ToThanosRulerSpecVolumesSecretItemsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretItemsArray) ToThanosRulerSpecVolumesSecretItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretItemsArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesSecretItemsOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretItemsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecretItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretItemsOutput) ToThanosRulerSpecVolumesSecretItemsOutput() ThanosRulerSpecVolumesSecretItemsOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretItemsOutput) ToThanosRulerSpecVolumesSecretItemsOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesSecretItemsOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretItems) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesSecretItemsOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretItems) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesSecretItemsOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretItems) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesSecretItemsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretItemsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesSecretItems)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretItemsArrayOutput) ToThanosRulerSpecVolumesSecretItemsArrayOutput() ThanosRulerSpecVolumesSecretItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretItemsArrayOutput) ToThanosRulerSpecVolumesSecretItemsArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretItemsArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesSecretItemsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesSecretItems {
		return vs[0].([]ThanosRulerSpecVolumesSecretItems)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesSecretItemsOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesSecretItemsPatch struct {
	// key is the key to project.
	Key *string `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode *int `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path *string `pulumi:"path"`
}

// ThanosRulerSpecVolumesSecretItemsPatchInput is an input type that accepts ThanosRulerSpecVolumesSecretItemsPatchArgs and ThanosRulerSpecVolumesSecretItemsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretItemsPatchInput` via:
//
//	ThanosRulerSpecVolumesSecretItemsPatchArgs{...}
type ThanosRulerSpecVolumesSecretItemsPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretItemsPatchOutput() ThanosRulerSpecVolumesSecretItemsPatchOutput
	ToThanosRulerSpecVolumesSecretItemsPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretItemsPatchOutput
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesSecretItemsPatchArgs struct {
	// key is the key to project.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// mode is Optional: mode bits used to set permissions on this file.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
	// If not specified, the volume defaultMode will be used.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	Mode pulumi.IntPtrInput `pulumi:"mode"`
	// path is the relative path of the file to map the key to.
	// May not be an absolute path.
	// May not contain the path element '..'.
	// May not start with the string '..'.
	Path pulumi.StringPtrInput `pulumi:"path"`
}

func (ThanosRulerSpecVolumesSecretItemsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecretItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesSecretItemsPatchArgs) ToThanosRulerSpecVolumesSecretItemsPatchOutput() ThanosRulerSpecVolumesSecretItemsPatchOutput {
	return i.ToThanosRulerSpecVolumesSecretItemsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretItemsPatchArgs) ToThanosRulerSpecVolumesSecretItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretItemsPatchOutput)
}

// ThanosRulerSpecVolumesSecretItemsPatchArrayInput is an input type that accepts ThanosRulerSpecVolumesSecretItemsPatchArray and ThanosRulerSpecVolumesSecretItemsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretItemsPatchArrayInput` via:
//
//	ThanosRulerSpecVolumesSecretItemsPatchArray{ ThanosRulerSpecVolumesSecretItemsPatchArgs{...} }
type ThanosRulerSpecVolumesSecretItemsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretItemsPatchArrayOutput() ThanosRulerSpecVolumesSecretItemsPatchArrayOutput
	ToThanosRulerSpecVolumesSecretItemsPatchArrayOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretItemsPatchArrayOutput
}

type ThanosRulerSpecVolumesSecretItemsPatchArray []ThanosRulerSpecVolumesSecretItemsPatchInput

func (ThanosRulerSpecVolumesSecretItemsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesSecretItemsPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesSecretItemsPatchArray) ToThanosRulerSpecVolumesSecretItemsPatchArrayOutput() ThanosRulerSpecVolumesSecretItemsPatchArrayOutput {
	return i.ToThanosRulerSpecVolumesSecretItemsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretItemsPatchArray) ToThanosRulerSpecVolumesSecretItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretItemsPatchArrayOutput)
}

// Maps a string key to a path within a volume.
type ThanosRulerSpecVolumesSecretItemsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretItemsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecretItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretItemsPatchOutput) ToThanosRulerSpecVolumesSecretItemsPatchOutput() ThanosRulerSpecVolumesSecretItemsPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretItemsPatchOutput) ToThanosRulerSpecVolumesSecretItemsPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsPatchOutput {
	return o
}

// key is the key to project.
func (o ThanosRulerSpecVolumesSecretItemsPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretItemsPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// mode is Optional: mode bits used to set permissions on this file.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
// If not specified, the volume defaultMode will be used.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesSecretItemsPatchOutput) Mode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretItemsPatch) *int { return v.Mode }).(pulumi.IntPtrOutput)
}

// path is the relative path of the file to map the key to.
// May not be an absolute path.
// May not contain the path element '..'.
// May not start with the string '..'.
func (o ThanosRulerSpecVolumesSecretItemsPatchOutput) Path() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretItemsPatch) *string { return v.Path }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesSecretItemsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretItemsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerSpecVolumesSecretItemsPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretItemsPatchArrayOutput) ToThanosRulerSpecVolumesSecretItemsPatchArrayOutput() ThanosRulerSpecVolumesSecretItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretItemsPatchArrayOutput) ToThanosRulerSpecVolumesSecretItemsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretItemsPatchArrayOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretItemsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerSpecVolumesSecretItemsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerSpecVolumesSecretItemsPatch {
		return vs[0].([]ThanosRulerSpecVolumesSecretItemsPatch)[vs[1].(int)]
	}).(ThanosRulerSpecVolumesSecretItemsPatchOutput)
}

// secret represents a secret that should populate this volume.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type ThanosRulerSpecVolumesSecretPatch struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values
	// for mode bits. Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode *int `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items []ThanosRulerSpecVolumesSecretItemsPatch `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional *bool `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName *string `pulumi:"secretName"`
}

// ThanosRulerSpecVolumesSecretPatchInput is an input type that accepts ThanosRulerSpecVolumesSecretPatchArgs and ThanosRulerSpecVolumesSecretPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretPatchInput` via:
//
//	ThanosRulerSpecVolumesSecretPatchArgs{...}
type ThanosRulerSpecVolumesSecretPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretPatchOutput() ThanosRulerSpecVolumesSecretPatchOutput
	ToThanosRulerSpecVolumesSecretPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretPatchOutput
}

// secret represents a secret that should populate this volume.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type ThanosRulerSpecVolumesSecretPatchArgs struct {
	// defaultMode is Optional: mode bits used to set permissions on created files by default.
	// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
	// YAML accepts both octal and decimal values, JSON requires decimal values
	// for mode bits. Defaults to 0644.
	// Directories within the path are not affected by this setting.
	// This might be in conflict with other options that affect the file
	// mode, like fsGroup, and the result can be other mode bits set.
	DefaultMode pulumi.IntPtrInput `pulumi:"defaultMode"`
	// items If unspecified, each key-value pair in the Data field of the referenced
	// Secret will be projected into the volume as a file whose name is the
	// key and content is the value. If specified, the listed keys will be
	// projected into the specified paths, and unlisted keys will not be
	// present. If a key is specified which is not present in the Secret,
	// the volume setup will error unless it is marked optional. Paths must be
	// relative and may not contain the '..' path or start with '..'.
	Items ThanosRulerSpecVolumesSecretItemsPatchArrayInput `pulumi:"items"`
	// optional field specify whether the Secret or its keys must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
	// secretName is the name of the secret in the pod's namespace to use.
	// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
	SecretName pulumi.StringPtrInput `pulumi:"secretName"`
}

func (ThanosRulerSpecVolumesSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecretPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesSecretPatchArgs) ToThanosRulerSpecVolumesSecretPatchOutput() ThanosRulerSpecVolumesSecretPatchOutput {
	return i.ToThanosRulerSpecVolumesSecretPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretPatchArgs) ToThanosRulerSpecVolumesSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretPatchOutput)
}

func (i ThanosRulerSpecVolumesSecretPatchArgs) ToThanosRulerSpecVolumesSecretPatchPtrOutput() ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesSecretPatchArgs) ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretPatchOutput).ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesSecretPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesSecretPatchArgs, ThanosRulerSpecVolumesSecretPatchPtr and ThanosRulerSpecVolumesSecretPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesSecretPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesSecretPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesSecretPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesSecretPatchPtrOutput() ThanosRulerSpecVolumesSecretPatchPtrOutput
	ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesSecretPatchPtrOutput
}

type thanosRulerSpecVolumesSecretPatchPtrType ThanosRulerSpecVolumesSecretPatchArgs

func ThanosRulerSpecVolumesSecretPatchPtr(v *ThanosRulerSpecVolumesSecretPatchArgs) ThanosRulerSpecVolumesSecretPatchPtrInput {
	return (*thanosRulerSpecVolumesSecretPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesSecretPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesSecretPatchPtrType) ToThanosRulerSpecVolumesSecretPatchPtrOutput() ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesSecretPatchPtrType) ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesSecretPatchPtrOutput)
}

// secret represents a secret that should populate this volume.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
type ThanosRulerSpecVolumesSecretPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretPatchOutput) ToThanosRulerSpecVolumesSecretPatchOutput() ThanosRulerSpecVolumesSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretPatchOutput) ToThanosRulerSpecVolumesSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretPatchOutput) ToThanosRulerSpecVolumesSecretPatchPtrOutput() ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesSecretPatchOutput) ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesSecretPatch) *ThanosRulerSpecVolumesSecretPatch {
		return &v
	}).(ThanosRulerSpecVolumesSecretPatchPtrOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values
// for mode bits. Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesSecretPatchOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretPatch) *int { return v.DefaultMode }).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesSecretPatchOutput) Items() ThanosRulerSpecVolumesSecretItemsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretPatch) []ThanosRulerSpecVolumesSecretItemsPatch { return v.Items }).(ThanosRulerSpecVolumesSecretItemsPatchArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o ThanosRulerSpecVolumesSecretPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o ThanosRulerSpecVolumesSecretPatchOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesSecretPatch) *string { return v.SecretName }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesSecretPatchPtrOutput) ToThanosRulerSpecVolumesSecretPatchPtrOutput() ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretPatchPtrOutput) ToThanosRulerSpecVolumesSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesSecretPatchPtrOutput) Elem() ThanosRulerSpecVolumesSecretPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecretPatch) ThanosRulerSpecVolumesSecretPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesSecretPatch
		return ret
	}).(ThanosRulerSpecVolumesSecretPatchOutput)
}

// defaultMode is Optional: mode bits used to set permissions on created files by default.
// Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511.
// YAML accepts both octal and decimal values, JSON requires decimal values
// for mode bits. Defaults to 0644.
// Directories within the path are not affected by this setting.
// This might be in conflict with other options that affect the file
// mode, like fsGroup, and the result can be other mode bits set.
func (o ThanosRulerSpecVolumesSecretPatchPtrOutput) DefaultMode() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecretPatch) *int {
		if v == nil {
			return nil
		}
		return v.DefaultMode
	}).(pulumi.IntPtrOutput)
}

// items If unspecified, each key-value pair in the Data field of the referenced
// Secret will be projected into the volume as a file whose name is the
// key and content is the value. If specified, the listed keys will be
// projected into the specified paths, and unlisted keys will not be
// present. If a key is specified which is not present in the Secret,
// the volume setup will error unless it is marked optional. Paths must be
// relative and may not contain the '..' path or start with '..'.
func (o ThanosRulerSpecVolumesSecretPatchPtrOutput) Items() ThanosRulerSpecVolumesSecretItemsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecretPatch) []ThanosRulerSpecVolumesSecretItemsPatch {
		if v == nil {
			return nil
		}
		return v.Items
	}).(ThanosRulerSpecVolumesSecretItemsPatchArrayOutput)
}

// optional field specify whether the Secret or its keys must be defined
func (o ThanosRulerSpecVolumesSecretPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecretPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// secretName is the name of the secret in the pod's namespace to use.
// More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
func (o ThanosRulerSpecVolumesSecretPatchPtrOutput) SecretName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.SecretName
	}).(pulumi.StringPtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
type ThanosRulerSpecVolumesStorageos struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  *bool                                     `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesStorageosSecretRef `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume
	// names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no
	// namespace is specified then the Pod's namespace will be used.  This allows the
	// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
	// Set VolumeName to any name to override the default behaviour.
	// Set to "default" if you are not using namespaces within StorageOS.
	// Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// ThanosRulerSpecVolumesStorageosInput is an input type that accepts ThanosRulerSpecVolumesStorageosArgs and ThanosRulerSpecVolumesStorageosOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosInput` via:
//
//	ThanosRulerSpecVolumesStorageosArgs{...}
type ThanosRulerSpecVolumesStorageosInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosOutput() ThanosRulerSpecVolumesStorageosOutput
	ToThanosRulerSpecVolumesStorageosOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosOutput
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
type ThanosRulerSpecVolumesStorageosArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  pulumi.BoolPtrInput                              `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesStorageosSecretRefPtrInput `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume
	// names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no
	// namespace is specified then the Pod's namespace will be used.  This allows the
	// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
	// Set VolumeName to any name to override the default behaviour.
	// Set to "default" if you are not using namespaces within StorageOS.
	// Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (ThanosRulerSpecVolumesStorageosArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageos)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesStorageosArgs) ToThanosRulerSpecVolumesStorageosOutput() ThanosRulerSpecVolumesStorageosOutput {
	return i.ToThanosRulerSpecVolumesStorageosOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosArgs) ToThanosRulerSpecVolumesStorageosOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosOutput)
}

func (i ThanosRulerSpecVolumesStorageosArgs) ToThanosRulerSpecVolumesStorageosPtrOutput() ThanosRulerSpecVolumesStorageosPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosArgs) ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosOutput).ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesStorageosPtrInput is an input type that accepts ThanosRulerSpecVolumesStorageosArgs, ThanosRulerSpecVolumesStorageosPtr and ThanosRulerSpecVolumesStorageosPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosPtrInput` via:
//
//	        ThanosRulerSpecVolumesStorageosArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesStorageosPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosPtrOutput() ThanosRulerSpecVolumesStorageosPtrOutput
	ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosPtrOutput
}

type thanosRulerSpecVolumesStorageosPtrType ThanosRulerSpecVolumesStorageosArgs

func ThanosRulerSpecVolumesStorageosPtr(v *ThanosRulerSpecVolumesStorageosArgs) ThanosRulerSpecVolumesStorageosPtrInput {
	return (*thanosRulerSpecVolumesStorageosPtrType)(v)
}

func (*thanosRulerSpecVolumesStorageosPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageos)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesStorageosPtrType) ToThanosRulerSpecVolumesStorageosPtrOutput() ThanosRulerSpecVolumesStorageosPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesStorageosPtrType) ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosPtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
type ThanosRulerSpecVolumesStorageosOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageos)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosOutput) ToThanosRulerSpecVolumesStorageosOutput() ThanosRulerSpecVolumesStorageosOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosOutput) ToThanosRulerSpecVolumesStorageosOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosOutput) ToThanosRulerSpecVolumesStorageosPtrOutput() ThanosRulerSpecVolumesStorageosPtrOutput {
	return o.ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesStorageosOutput) ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesStorageos) *ThanosRulerSpecVolumesStorageos {
		return &v
	}).(ThanosRulerSpecVolumesStorageosPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesStorageosOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageos) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesStorageosOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageos) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesStorageosOutput) SecretRef() ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageos) *ThanosRulerSpecVolumesStorageosSecretRef { return v.SecretRef }).(ThanosRulerSpecVolumesStorageosSecretRefPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume
// names are only unique within a namespace.
func (o ThanosRulerSpecVolumesStorageosOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageos) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no
// namespace is specified then the Pod's namespace will be used.  This allows the
// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
// Set VolumeName to any name to override the default behaviour.
// Set to "default" if you are not using namespaces within StorageOS.
// Namespaces that do not pre-exist within StorageOS will be created.
func (o ThanosRulerSpecVolumesStorageosOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageos) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesStorageosPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageos)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosPtrOutput) ToThanosRulerSpecVolumesStorageosPtrOutput() ThanosRulerSpecVolumesStorageosPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosPtrOutput) ToThanosRulerSpecVolumesStorageosPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosPtrOutput) Elem() ThanosRulerSpecVolumesStorageosOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageos) ThanosRulerSpecVolumesStorageos {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesStorageos
		return ret
	}).(ThanosRulerSpecVolumesStorageosOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesStorageosPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageos) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesStorageosPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageos) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesStorageosPtrOutput) SecretRef() ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageos) *ThanosRulerSpecVolumesStorageosSecretRef {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesStorageosSecretRefPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume
// names are only unique within a namespace.
func (o ThanosRulerSpecVolumesStorageosPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageos) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no
// namespace is specified then the Pod's namespace will be used.  This allows the
// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
// Set VolumeName to any name to override the default behaviour.
// Set to "default" if you are not using namespaces within StorageOS.
// Namespaces that do not pre-exist within StorageOS will be created.
func (o ThanosRulerSpecVolumesStorageosPtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageos) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
type ThanosRulerSpecVolumesStorageosPatch struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  *bool                                          `pulumi:"readOnly"`
	SecretRef *ThanosRulerSpecVolumesStorageosSecretRefPatch `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume
	// names are only unique within a namespace.
	VolumeName *string `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no
	// namespace is specified then the Pod's namespace will be used.  This allows the
	// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
	// Set VolumeName to any name to override the default behaviour.
	// Set to "default" if you are not using namespaces within StorageOS.
	// Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace *string `pulumi:"volumeNamespace"`
}

// ThanosRulerSpecVolumesStorageosPatchInput is an input type that accepts ThanosRulerSpecVolumesStorageosPatchArgs and ThanosRulerSpecVolumesStorageosPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosPatchInput` via:
//
//	ThanosRulerSpecVolumesStorageosPatchArgs{...}
type ThanosRulerSpecVolumesStorageosPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosPatchOutput() ThanosRulerSpecVolumesStorageosPatchOutput
	ToThanosRulerSpecVolumesStorageosPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosPatchOutput
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
type ThanosRulerSpecVolumesStorageosPatchArgs struct {
	// fsType is the filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// readOnly defaults to false (read/write). ReadOnly here will force
	// the ReadOnly setting in VolumeMounts.
	ReadOnly  pulumi.BoolPtrInput                                   `pulumi:"readOnly"`
	SecretRef ThanosRulerSpecVolumesStorageosSecretRefPatchPtrInput `pulumi:"secretRef"`
	// volumeName is the human-readable name of the StorageOS volume.  Volume
	// names are only unique within a namespace.
	VolumeName pulumi.StringPtrInput `pulumi:"volumeName"`
	// volumeNamespace specifies the scope of the volume within StorageOS.  If no
	// namespace is specified then the Pod's namespace will be used.  This allows the
	// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
	// Set VolumeName to any name to override the default behaviour.
	// Set to "default" if you are not using namespaces within StorageOS.
	// Namespaces that do not pre-exist within StorageOS will be created.
	VolumeNamespace pulumi.StringPtrInput `pulumi:"volumeNamespace"`
}

func (ThanosRulerSpecVolumesStorageosPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageosPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesStorageosPatchArgs) ToThanosRulerSpecVolumesStorageosPatchOutput() ThanosRulerSpecVolumesStorageosPatchOutput {
	return i.ToThanosRulerSpecVolumesStorageosPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosPatchArgs) ToThanosRulerSpecVolumesStorageosPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosPatchOutput)
}

func (i ThanosRulerSpecVolumesStorageosPatchArgs) ToThanosRulerSpecVolumesStorageosPatchPtrOutput() ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosPatchArgs) ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosPatchOutput).ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesStorageosPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesStorageosPatchArgs, ThanosRulerSpecVolumesStorageosPatchPtr and ThanosRulerSpecVolumesStorageosPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesStorageosPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesStorageosPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosPatchPtrOutput() ThanosRulerSpecVolumesStorageosPatchPtrOutput
	ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosPatchPtrOutput
}

type thanosRulerSpecVolumesStorageosPatchPtrType ThanosRulerSpecVolumesStorageosPatchArgs

func ThanosRulerSpecVolumesStorageosPatchPtr(v *ThanosRulerSpecVolumesStorageosPatchArgs) ThanosRulerSpecVolumesStorageosPatchPtrInput {
	return (*thanosRulerSpecVolumesStorageosPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesStorageosPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageosPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesStorageosPatchPtrType) ToThanosRulerSpecVolumesStorageosPatchPtrOutput() ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesStorageosPatchPtrType) ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosPatchPtrOutput)
}

// storageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
// Deprecated: StorageOS is deprecated and the in-tree storageos type is no longer supported.
type ThanosRulerSpecVolumesStorageosPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageosPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosPatchOutput) ToThanosRulerSpecVolumesStorageosPatchOutput() ThanosRulerSpecVolumesStorageosPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosPatchOutput) ToThanosRulerSpecVolumesStorageosPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosPatchOutput) ToThanosRulerSpecVolumesStorageosPatchPtrOutput() ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesStorageosPatchOutput) ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesStorageosPatch) *ThanosRulerSpecVolumesStorageosPatch {
		return &v
	}).(ThanosRulerSpecVolumesStorageosPatchPtrOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesStorageosPatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageosPatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesStorageosPatchOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageosPatch) *bool { return v.ReadOnly }).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesStorageosPatchOutput) SecretRef() ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageosPatch) *ThanosRulerSpecVolumesStorageosSecretRefPatch {
		return v.SecretRef
	}).(ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume
// names are only unique within a namespace.
func (o ThanosRulerSpecVolumesStorageosPatchOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageosPatch) *string { return v.VolumeName }).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no
// namespace is specified then the Pod's namespace will be used.  This allows the
// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
// Set VolumeName to any name to override the default behaviour.
// Set to "default" if you are not using namespaces within StorageOS.
// Namespaces that do not pre-exist within StorageOS will be created.
func (o ThanosRulerSpecVolumesStorageosPatchOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageosPatch) *string { return v.VolumeNamespace }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesStorageosPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageosPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) ToThanosRulerSpecVolumesStorageosPatchPtrOutput() ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) ToThanosRulerSpecVolumesStorageosPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) Elem() ThanosRulerSpecVolumesStorageosPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosPatch) ThanosRulerSpecVolumesStorageosPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesStorageosPatch
		return ret
	}).(ThanosRulerSpecVolumesStorageosPatchOutput)
}

// fsType is the filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosPatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// readOnly defaults to false (read/write). ReadOnly here will force
// the ReadOnly setting in VolumeMounts.
func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) ReadOnly() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosPatch) *bool {
		if v == nil {
			return nil
		}
		return v.ReadOnly
	}).(pulumi.BoolPtrOutput)
}

func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) SecretRef() ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosPatch) *ThanosRulerSpecVolumesStorageosSecretRefPatch {
		if v == nil {
			return nil
		}
		return v.SecretRef
	}).(ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput)
}

// volumeName is the human-readable name of the StorageOS volume.  Volume
// names are only unique within a namespace.
func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) VolumeName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeName
	}).(pulumi.StringPtrOutput)
}

// volumeNamespace specifies the scope of the volume within StorageOS.  If no
// namespace is specified then the Pod's namespace will be used.  This allows the
// Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
// Set VolumeName to any name to override the default behaviour.
// Set to "default" if you are not using namespaces within StorageOS.
// Namespaces that do not pre-exist within StorageOS will be created.
func (o ThanosRulerSpecVolumesStorageosPatchPtrOutput) VolumeNamespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosPatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumeNamespace
	}).(pulumi.StringPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API
// credentials.  If not specified, default values will be attempted.
type ThanosRulerSpecVolumesStorageosSecretRef struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesStorageosSecretRefInput is an input type that accepts ThanosRulerSpecVolumesStorageosSecretRefArgs and ThanosRulerSpecVolumesStorageosSecretRefOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosSecretRefInput` via:
//
//	ThanosRulerSpecVolumesStorageosSecretRefArgs{...}
type ThanosRulerSpecVolumesStorageosSecretRefInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosSecretRefOutput() ThanosRulerSpecVolumesStorageosSecretRefOutput
	ToThanosRulerSpecVolumesStorageosSecretRefOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosSecretRefOutput
}

// secretRef specifies the secret to use for obtaining the StorageOS API
// credentials.  If not specified, default values will be attempted.
type ThanosRulerSpecVolumesStorageosSecretRefArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesStorageosSecretRefArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesStorageosSecretRefArgs) ToThanosRulerSpecVolumesStorageosSecretRefOutput() ThanosRulerSpecVolumesStorageosSecretRefOutput {
	return i.ToThanosRulerSpecVolumesStorageosSecretRefOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosSecretRefArgs) ToThanosRulerSpecVolumesStorageosSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosSecretRefOutput)
}

func (i ThanosRulerSpecVolumesStorageosSecretRefArgs) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosSecretRefArgs) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosSecretRefOutput).ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesStorageosSecretRefPtrInput is an input type that accepts ThanosRulerSpecVolumesStorageosSecretRefArgs, ThanosRulerSpecVolumesStorageosSecretRefPtr and ThanosRulerSpecVolumesStorageosSecretRefPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosSecretRefPtrInput` via:
//
//	        ThanosRulerSpecVolumesStorageosSecretRefArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesStorageosSecretRefPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosSecretRefPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPtrOutput
	ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosSecretRefPtrOutput
}

type thanosRulerSpecVolumesStorageosSecretRefPtrType ThanosRulerSpecVolumesStorageosSecretRefArgs

func ThanosRulerSpecVolumesStorageosSecretRefPtr(v *ThanosRulerSpecVolumesStorageosSecretRefArgs) ThanosRulerSpecVolumesStorageosSecretRefPtrInput {
	return (*thanosRulerSpecVolumesStorageosSecretRefPtrType)(v)
}

func (*thanosRulerSpecVolumesStorageosSecretRefPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesStorageosSecretRefPtrType) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesStorageosSecretRefPtrType) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosSecretRefPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API
// credentials.  If not specified, default values will be attempted.
type ThanosRulerSpecVolumesStorageosSecretRefOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosSecretRefOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosSecretRefOutput) ToThanosRulerSpecVolumesStorageosSecretRefOutput() ThanosRulerSpecVolumesStorageosSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefOutput) ToThanosRulerSpecVolumesStorageosSecretRefOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefOutput) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesStorageosSecretRefOutput) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesStorageosSecretRef) *ThanosRulerSpecVolumesStorageosSecretRef {
		return &v
	}).(ThanosRulerSpecVolumesStorageosSecretRefPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesStorageosSecretRefOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageosSecretRef) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesStorageosSecretRefPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosSecretRefPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageosSecretRef)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPtrOutput) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPtrOutput) ToThanosRulerSpecVolumesStorageosSecretRefPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPtrOutput) Elem() ThanosRulerSpecVolumesStorageosSecretRefOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosSecretRef) ThanosRulerSpecVolumesStorageosSecretRef {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesStorageosSecretRef
		return ret
	}).(ThanosRulerSpecVolumesStorageosSecretRefOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesStorageosSecretRefPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosSecretRef) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API
// credentials.  If not specified, default values will be attempted.
type ThanosRulerSpecVolumesStorageosSecretRefPatch struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
}

// ThanosRulerSpecVolumesStorageosSecretRefPatchInput is an input type that accepts ThanosRulerSpecVolumesStorageosSecretRefPatchArgs and ThanosRulerSpecVolumesStorageosSecretRefPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosSecretRefPatchInput` via:
//
//	ThanosRulerSpecVolumesStorageosSecretRefPatchArgs{...}
type ThanosRulerSpecVolumesStorageosSecretRefPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosSecretRefPatchOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchOutput
	ToThanosRulerSpecVolumesStorageosSecretRefPatchOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchOutput
}

// secretRef specifies the secret to use for obtaining the StorageOS API
// credentials.  If not specified, default values will be attempted.
type ThanosRulerSpecVolumesStorageosSecretRefPatchArgs struct {
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
}

func (ThanosRulerSpecVolumesStorageosSecretRefPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRefPatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesStorageosSecretRefPatchArgs) ToThanosRulerSpecVolumesStorageosSecretRefPatchOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchOutput {
	return i.ToThanosRulerSpecVolumesStorageosSecretRefPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosSecretRefPatchArgs) ToThanosRulerSpecVolumesStorageosSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosSecretRefPatchOutput)
}

func (i ThanosRulerSpecVolumesStorageosSecretRefPatchArgs) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesStorageosSecretRefPatchArgs) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosSecretRefPatchOutput).ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesStorageosSecretRefPatchPtrInput is an input type that accepts ThanosRulerSpecVolumesStorageosSecretRefPatchArgs, ThanosRulerSpecVolumesStorageosSecretRefPatchPtr and ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesStorageosSecretRefPatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesStorageosSecretRefPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesStorageosSecretRefPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput
	ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput
}

type thanosRulerSpecVolumesStorageosSecretRefPatchPtrType ThanosRulerSpecVolumesStorageosSecretRefPatchArgs

func ThanosRulerSpecVolumesStorageosSecretRefPatchPtr(v *ThanosRulerSpecVolumesStorageosSecretRefPatchArgs) ThanosRulerSpecVolumesStorageosSecretRefPatchPtrInput {
	return (*thanosRulerSpecVolumesStorageosSecretRefPatchPtrType)(v)
}

func (*thanosRulerSpecVolumesStorageosSecretRefPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageosSecretRefPatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesStorageosSecretRefPatchPtrType) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return i.ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesStorageosSecretRefPatchPtrType) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput)
}

// secretRef specifies the secret to use for obtaining the StorageOS API
// credentials.  If not specified, default values will be attempted.
type ThanosRulerSpecVolumesStorageosSecretRefPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosSecretRefPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPatchOutput) ToThanosRulerSpecVolumesStorageosSecretRefPatchOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPatchOutput) ToThanosRulerSpecVolumesStorageosSecretRefPatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPatchOutput) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return o.ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPatchOutput) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesStorageosSecretRefPatch) *ThanosRulerSpecVolumesStorageosSecretRefPatch {
		return &v
	}).(ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesStorageosSecretRefPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesStorageosSecretRefPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesStorageosSecretRefPatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput() ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput) ToThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput) Elem() ThanosRulerSpecVolumesStorageosSecretRefPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosSecretRefPatch) ThanosRulerSpecVolumesStorageosSecretRefPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesStorageosSecretRefPatch
		return ret
	}).(ThanosRulerSpecVolumesStorageosSecretRefPatchOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesStorageosSecretRefPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
// are redirected to the csi.vsphere.vmware.com CSI driver.
type ThanosRulerSpecVolumesVsphereVolume struct {
	// fsType is filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath *string `pulumi:"volumePath"`
}

// ThanosRulerSpecVolumesVsphereVolumeInput is an input type that accepts ThanosRulerSpecVolumesVsphereVolumeArgs and ThanosRulerSpecVolumesVsphereVolumeOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesVsphereVolumeInput` via:
//
//	ThanosRulerSpecVolumesVsphereVolumeArgs{...}
type ThanosRulerSpecVolumesVsphereVolumeInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesVsphereVolumeOutput() ThanosRulerSpecVolumesVsphereVolumeOutput
	ToThanosRulerSpecVolumesVsphereVolumeOutputWithContext(context.Context) ThanosRulerSpecVolumesVsphereVolumeOutput
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
// are redirected to the csi.vsphere.vmware.com CSI driver.
type ThanosRulerSpecVolumesVsphereVolumeArgs struct {
	// fsType is filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID pulumi.StringPtrInput `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName pulumi.StringPtrInput `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath pulumi.StringPtrInput `pulumi:"volumePath"`
}

func (ThanosRulerSpecVolumesVsphereVolumeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesVsphereVolumeArgs) ToThanosRulerSpecVolumesVsphereVolumeOutput() ThanosRulerSpecVolumesVsphereVolumeOutput {
	return i.ToThanosRulerSpecVolumesVsphereVolumeOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesVsphereVolumeArgs) ToThanosRulerSpecVolumesVsphereVolumeOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesVsphereVolumeOutput)
}

func (i ThanosRulerSpecVolumesVsphereVolumeArgs) ToThanosRulerSpecVolumesVsphereVolumePtrOutput() ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return i.ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesVsphereVolumeArgs) ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesVsphereVolumeOutput).ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesVsphereVolumePtrInput is an input type that accepts ThanosRulerSpecVolumesVsphereVolumeArgs, ThanosRulerSpecVolumesVsphereVolumePtr and ThanosRulerSpecVolumesVsphereVolumePtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesVsphereVolumePtrInput` via:
//
//	        ThanosRulerSpecVolumesVsphereVolumeArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesVsphereVolumePtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesVsphereVolumePtrOutput() ThanosRulerSpecVolumesVsphereVolumePtrOutput
	ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(context.Context) ThanosRulerSpecVolumesVsphereVolumePtrOutput
}

type thanosRulerSpecVolumesVsphereVolumePtrType ThanosRulerSpecVolumesVsphereVolumeArgs

func ThanosRulerSpecVolumesVsphereVolumePtr(v *ThanosRulerSpecVolumesVsphereVolumeArgs) ThanosRulerSpecVolumesVsphereVolumePtrInput {
	return (*thanosRulerSpecVolumesVsphereVolumePtrType)(v)
}

func (*thanosRulerSpecVolumesVsphereVolumePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesVsphereVolumePtrType) ToThanosRulerSpecVolumesVsphereVolumePtrOutput() ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return i.ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesVsphereVolumePtrType) ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesVsphereVolumePtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
// are redirected to the csi.vsphere.vmware.com CSI driver.
type ThanosRulerSpecVolumesVsphereVolumeOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesVsphereVolumeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesVsphereVolumeOutput) ToThanosRulerSpecVolumesVsphereVolumeOutput() ThanosRulerSpecVolumesVsphereVolumeOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumeOutput) ToThanosRulerSpecVolumesVsphereVolumeOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumeOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumeOutput) ToThanosRulerSpecVolumesVsphereVolumePtrOutput() ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return o.ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesVsphereVolumeOutput) ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesVsphereVolume) *ThanosRulerSpecVolumesVsphereVolume {
		return &v
	}).(ThanosRulerSpecVolumesVsphereVolumePtrOutput)
}

// fsType is filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesVsphereVolumeOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolume) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o ThanosRulerSpecVolumesVsphereVolumeOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolume) *string { return v.StoragePolicyID }).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o ThanosRulerSpecVolumesVsphereVolumeOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolume) *string { return v.StoragePolicyName }).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o ThanosRulerSpecVolumesVsphereVolumeOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolume) *string { return v.VolumePath }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesVsphereVolumePtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesVsphereVolumePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesVsphereVolume)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesVsphereVolumePtrOutput) ToThanosRulerSpecVolumesVsphereVolumePtrOutput() ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumePtrOutput) ToThanosRulerSpecVolumesVsphereVolumePtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumePtrOutput) Elem() ThanosRulerSpecVolumesVsphereVolumeOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolume) ThanosRulerSpecVolumesVsphereVolume {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesVsphereVolume
		return ret
	}).(ThanosRulerSpecVolumesVsphereVolumeOutput)
}

// fsType is filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesVsphereVolumePtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o ThanosRulerSpecVolumesVsphereVolumePtrOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyID
	}).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o ThanosRulerSpecVolumesVsphereVolumePtrOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyName
	}).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o ThanosRulerSpecVolumesVsphereVolumePtrOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolume) *string {
		if v == nil {
			return nil
		}
		return v.VolumePath
	}).(pulumi.StringPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
// are redirected to the csi.vsphere.vmware.com CSI driver.
type ThanosRulerSpecVolumesVsphereVolumePatch struct {
	// fsType is filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType *string `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID *string `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName *string `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath *string `pulumi:"volumePath"`
}

// ThanosRulerSpecVolumesVsphereVolumePatchInput is an input type that accepts ThanosRulerSpecVolumesVsphereVolumePatchArgs and ThanosRulerSpecVolumesVsphereVolumePatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesVsphereVolumePatchInput` via:
//
//	ThanosRulerSpecVolumesVsphereVolumePatchArgs{...}
type ThanosRulerSpecVolumesVsphereVolumePatchInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesVsphereVolumePatchOutput() ThanosRulerSpecVolumesVsphereVolumePatchOutput
	ToThanosRulerSpecVolumesVsphereVolumePatchOutputWithContext(context.Context) ThanosRulerSpecVolumesVsphereVolumePatchOutput
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
// are redirected to the csi.vsphere.vmware.com CSI driver.
type ThanosRulerSpecVolumesVsphereVolumePatchArgs struct {
	// fsType is filesystem type to mount.
	// Must be a filesystem type supported by the host operating system.
	// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
	FsType pulumi.StringPtrInput `pulumi:"fsType"`
	// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
	StoragePolicyID pulumi.StringPtrInput `pulumi:"storagePolicyID"`
	// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
	StoragePolicyName pulumi.StringPtrInput `pulumi:"storagePolicyName"`
	// volumePath is the path that identifies vSphere volume vmdk
	VolumePath pulumi.StringPtrInput `pulumi:"volumePath"`
}

func (ThanosRulerSpecVolumesVsphereVolumePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolumePatch)(nil)).Elem()
}

func (i ThanosRulerSpecVolumesVsphereVolumePatchArgs) ToThanosRulerSpecVolumesVsphereVolumePatchOutput() ThanosRulerSpecVolumesVsphereVolumePatchOutput {
	return i.ToThanosRulerSpecVolumesVsphereVolumePatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesVsphereVolumePatchArgs) ToThanosRulerSpecVolumesVsphereVolumePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesVsphereVolumePatchOutput)
}

func (i ThanosRulerSpecVolumesVsphereVolumePatchArgs) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutput() ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecVolumesVsphereVolumePatchArgs) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesVsphereVolumePatchOutput).ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecVolumesVsphereVolumePatchPtrInput is an input type that accepts ThanosRulerSpecVolumesVsphereVolumePatchArgs, ThanosRulerSpecVolumesVsphereVolumePatchPtr and ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecVolumesVsphereVolumePatchPtrInput` via:
//
//	        ThanosRulerSpecVolumesVsphereVolumePatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecVolumesVsphereVolumePatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutput() ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput
	ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(context.Context) ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput
}

type thanosRulerSpecVolumesVsphereVolumePatchPtrType ThanosRulerSpecVolumesVsphereVolumePatchArgs

func ThanosRulerSpecVolumesVsphereVolumePatchPtr(v *ThanosRulerSpecVolumesVsphereVolumePatchArgs) ThanosRulerSpecVolumesVsphereVolumePatchPtrInput {
	return (*thanosRulerSpecVolumesVsphereVolumePatchPtrType)(v)
}

func (*thanosRulerSpecVolumesVsphereVolumePatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesVsphereVolumePatch)(nil)).Elem()
}

func (i *thanosRulerSpecVolumesVsphereVolumePatchPtrType) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutput() ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return i.ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecVolumesVsphereVolumePatchPtrType) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput)
}

// vsphereVolume represents a vSphere volume attached and mounted on kubelets host machine.
// Deprecated: VsphereVolume is deprecated. All operations for the in-tree vsphereVolume type
// are redirected to the csi.vsphere.vmware.com CSI driver.
type ThanosRulerSpecVolumesVsphereVolumePatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesVsphereVolumePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolumePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) ToThanosRulerSpecVolumesVsphereVolumePatchOutput() ThanosRulerSpecVolumesVsphereVolumePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) ToThanosRulerSpecVolumesVsphereVolumePatchOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePatchOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutput() ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return o.ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecVolumesVsphereVolumePatch) *ThanosRulerSpecVolumesVsphereVolumePatch {
		return &v
	}).(ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput)
}

// fsType is filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolumePatch) *string { return v.FsType }).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolumePatch) *string { return v.StoragePolicyID }).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolumePatch) *string { return v.StoragePolicyName }).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o ThanosRulerSpecVolumesVsphereVolumePatchOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecVolumesVsphereVolumePatch) *string { return v.VolumePath }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecVolumesVsphereVolumePatch)(nil)).Elem()
}

func (o ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutput() ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) ToThanosRulerSpecVolumesVsphereVolumePatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput {
	return o
}

func (o ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) Elem() ThanosRulerSpecVolumesVsphereVolumePatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolumePatch) ThanosRulerSpecVolumesVsphereVolumePatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecVolumesVsphereVolumePatch
		return ret
	}).(ThanosRulerSpecVolumesVsphereVolumePatchOutput)
}

// fsType is filesystem type to mount.
// Must be a filesystem type supported by the host operating system.
// Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
func (o ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) FsType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.FsType
	}).(pulumi.StringPtrOutput)
}

// storagePolicyID is the storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
func (o ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) StoragePolicyID() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyID
	}).(pulumi.StringPtrOutput)
}

// storagePolicyName is the storage Policy Based Management (SPBM) profile name.
func (o ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) StoragePolicyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.StoragePolicyName
	}).(pulumi.StringPtrOutput)
}

// volumePath is the path that identifies vSphere volume vmdk
func (o ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput) VolumePath() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecVolumesVsphereVolumePatch) *string {
		if v == nil {
			return nil
		}
		return v.VolumePath
	}).(pulumi.StringPtrOutput)
}

// Defines the configuration of the ThanosRuler web server.
type ThanosRulerSpecWeb struct {
	HttpConfig *ThanosRulerSpecWebHttpConfig `pulumi:"httpConfig"`
	TlsConfig  *ThanosRulerSpecWebTlsConfig  `pulumi:"tlsConfig"`
}

// ThanosRulerSpecWebInput is an input type that accepts ThanosRulerSpecWebArgs and ThanosRulerSpecWebOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebInput` via:
//
//	ThanosRulerSpecWebArgs{...}
type ThanosRulerSpecWebInput interface {
	pulumi.Input

	ToThanosRulerSpecWebOutput() ThanosRulerSpecWebOutput
	ToThanosRulerSpecWebOutputWithContext(context.Context) ThanosRulerSpecWebOutput
}

// Defines the configuration of the ThanosRuler web server.
type ThanosRulerSpecWebArgs struct {
	HttpConfig ThanosRulerSpecWebHttpConfigPtrInput `pulumi:"httpConfig"`
	TlsConfig  ThanosRulerSpecWebTlsConfigPtrInput  `pulumi:"tlsConfig"`
}

func (ThanosRulerSpecWebArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWeb)(nil)).Elem()
}

func (i ThanosRulerSpecWebArgs) ToThanosRulerSpecWebOutput() ThanosRulerSpecWebOutput {
	return i.ToThanosRulerSpecWebOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebArgs) ToThanosRulerSpecWebOutputWithContext(ctx context.Context) ThanosRulerSpecWebOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebOutput)
}

func (i ThanosRulerSpecWebArgs) ToThanosRulerSpecWebPtrOutput() ThanosRulerSpecWebPtrOutput {
	return i.ToThanosRulerSpecWebPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebArgs) ToThanosRulerSpecWebPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebOutput).ToThanosRulerSpecWebPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebPtrInput is an input type that accepts ThanosRulerSpecWebArgs, ThanosRulerSpecWebPtr and ThanosRulerSpecWebPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebPtrInput` via:
//
//	        ThanosRulerSpecWebArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebPtrOutput() ThanosRulerSpecWebPtrOutput
	ToThanosRulerSpecWebPtrOutputWithContext(context.Context) ThanosRulerSpecWebPtrOutput
}

type thanosRulerSpecWebPtrType ThanosRulerSpecWebArgs

func ThanosRulerSpecWebPtr(v *ThanosRulerSpecWebArgs) ThanosRulerSpecWebPtrInput {
	return (*thanosRulerSpecWebPtrType)(v)
}

func (*thanosRulerSpecWebPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWeb)(nil)).Elem()
}

func (i *thanosRulerSpecWebPtrType) ToThanosRulerSpecWebPtrOutput() ThanosRulerSpecWebPtrOutput {
	return i.ToThanosRulerSpecWebPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebPtrType) ToThanosRulerSpecWebPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebPtrOutput)
}

// Defines the configuration of the ThanosRuler web server.
type ThanosRulerSpecWebOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWeb)(nil)).Elem()
}

func (o ThanosRulerSpecWebOutput) ToThanosRulerSpecWebOutput() ThanosRulerSpecWebOutput {
	return o
}

func (o ThanosRulerSpecWebOutput) ToThanosRulerSpecWebOutputWithContext(ctx context.Context) ThanosRulerSpecWebOutput {
	return o
}

func (o ThanosRulerSpecWebOutput) ToThanosRulerSpecWebPtrOutput() ThanosRulerSpecWebPtrOutput {
	return o.ToThanosRulerSpecWebPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebOutput) ToThanosRulerSpecWebPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWeb) *ThanosRulerSpecWeb {
		return &v
	}).(ThanosRulerSpecWebPtrOutput)
}

func (o ThanosRulerSpecWebOutput) HttpConfig() ThanosRulerSpecWebHttpConfigPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWeb) *ThanosRulerSpecWebHttpConfig { return v.HttpConfig }).(ThanosRulerSpecWebHttpConfigPtrOutput)
}

func (o ThanosRulerSpecWebOutput) TlsConfig() ThanosRulerSpecWebTlsConfigPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWeb) *ThanosRulerSpecWebTlsConfig { return v.TlsConfig }).(ThanosRulerSpecWebTlsConfigPtrOutput)
}

type ThanosRulerSpecWebPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWeb)(nil)).Elem()
}

func (o ThanosRulerSpecWebPtrOutput) ToThanosRulerSpecWebPtrOutput() ThanosRulerSpecWebPtrOutput {
	return o
}

func (o ThanosRulerSpecWebPtrOutput) ToThanosRulerSpecWebPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPtrOutput {
	return o
}

func (o ThanosRulerSpecWebPtrOutput) Elem() ThanosRulerSpecWebOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWeb) ThanosRulerSpecWeb {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWeb
		return ret
	}).(ThanosRulerSpecWebOutput)
}

func (o ThanosRulerSpecWebPtrOutput) HttpConfig() ThanosRulerSpecWebHttpConfigPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWeb) *ThanosRulerSpecWebHttpConfig {
		if v == nil {
			return nil
		}
		return v.HttpConfig
	}).(ThanosRulerSpecWebHttpConfigPtrOutput)
}

func (o ThanosRulerSpecWebPtrOutput) TlsConfig() ThanosRulerSpecWebTlsConfigPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWeb) *ThanosRulerSpecWebTlsConfig {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(ThanosRulerSpecWebTlsConfigPtrOutput)
}

// Defines HTTP parameters for web server.
type ThanosRulerSpecWebHttpConfig struct {
	Headers *ThanosRulerSpecWebHttpConfigHeaders `pulumi:"headers"`
	// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
	// When TLSConfig is not configured, HTTP/2 will be disabled.
	// Whenever the value of the field changes, a rolling update will be triggered.
	Http2 *bool `pulumi:"http2"`
}

// ThanosRulerSpecWebHttpConfigInput is an input type that accepts ThanosRulerSpecWebHttpConfigArgs and ThanosRulerSpecWebHttpConfigOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigInput` via:
//
//	ThanosRulerSpecWebHttpConfigArgs{...}
type ThanosRulerSpecWebHttpConfigInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigOutput() ThanosRulerSpecWebHttpConfigOutput
	ToThanosRulerSpecWebHttpConfigOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigOutput
}

// Defines HTTP parameters for web server.
type ThanosRulerSpecWebHttpConfigArgs struct {
	Headers ThanosRulerSpecWebHttpConfigHeadersPtrInput `pulumi:"headers"`
	// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
	// When TLSConfig is not configured, HTTP/2 will be disabled.
	// Whenever the value of the field changes, a rolling update will be triggered.
	Http2 pulumi.BoolPtrInput `pulumi:"http2"`
}

func (ThanosRulerSpecWebHttpConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfig)(nil)).Elem()
}

func (i ThanosRulerSpecWebHttpConfigArgs) ToThanosRulerSpecWebHttpConfigOutput() ThanosRulerSpecWebHttpConfigOutput {
	return i.ToThanosRulerSpecWebHttpConfigOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigArgs) ToThanosRulerSpecWebHttpConfigOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigOutput)
}

func (i ThanosRulerSpecWebHttpConfigArgs) ToThanosRulerSpecWebHttpConfigPtrOutput() ThanosRulerSpecWebHttpConfigPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigArgs) ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigOutput).ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebHttpConfigPtrInput is an input type that accepts ThanosRulerSpecWebHttpConfigArgs, ThanosRulerSpecWebHttpConfigPtr and ThanosRulerSpecWebHttpConfigPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigPtrInput` via:
//
//	        ThanosRulerSpecWebHttpConfigArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebHttpConfigPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigPtrOutput() ThanosRulerSpecWebHttpConfigPtrOutput
	ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigPtrOutput
}

type thanosRulerSpecWebHttpConfigPtrType ThanosRulerSpecWebHttpConfigArgs

func ThanosRulerSpecWebHttpConfigPtr(v *ThanosRulerSpecWebHttpConfigArgs) ThanosRulerSpecWebHttpConfigPtrInput {
	return (*thanosRulerSpecWebHttpConfigPtrType)(v)
}

func (*thanosRulerSpecWebHttpConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfig)(nil)).Elem()
}

func (i *thanosRulerSpecWebHttpConfigPtrType) ToThanosRulerSpecWebHttpConfigPtrOutput() ThanosRulerSpecWebHttpConfigPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebHttpConfigPtrType) ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigPtrOutput)
}

// Defines HTTP parameters for web server.
type ThanosRulerSpecWebHttpConfigOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfig)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigOutput) ToThanosRulerSpecWebHttpConfigOutput() ThanosRulerSpecWebHttpConfigOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigOutput) ToThanosRulerSpecWebHttpConfigOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigOutput) ToThanosRulerSpecWebHttpConfigPtrOutput() ThanosRulerSpecWebHttpConfigPtrOutput {
	return o.ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebHttpConfigOutput) ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebHttpConfig) *ThanosRulerSpecWebHttpConfig {
		return &v
	}).(ThanosRulerSpecWebHttpConfigPtrOutput)
}

func (o ThanosRulerSpecWebHttpConfigOutput) Headers() ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfig) *ThanosRulerSpecWebHttpConfigHeaders { return v.Headers }).(ThanosRulerSpecWebHttpConfigHeadersPtrOutput)
}

// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
// When TLSConfig is not configured, HTTP/2 will be disabled.
// Whenever the value of the field changes, a rolling update will be triggered.
func (o ThanosRulerSpecWebHttpConfigOutput) Http2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfig) *bool { return v.Http2 }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebHttpConfigPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfig)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigPtrOutput) ToThanosRulerSpecWebHttpConfigPtrOutput() ThanosRulerSpecWebHttpConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigPtrOutput) ToThanosRulerSpecWebHttpConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigPtrOutput) Elem() ThanosRulerSpecWebHttpConfigOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfig) ThanosRulerSpecWebHttpConfig {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebHttpConfig
		return ret
	}).(ThanosRulerSpecWebHttpConfigOutput)
}

func (o ThanosRulerSpecWebHttpConfigPtrOutput) Headers() ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfig) *ThanosRulerSpecWebHttpConfigHeaders {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(ThanosRulerSpecWebHttpConfigHeadersPtrOutput)
}

// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
// When TLSConfig is not configured, HTTP/2 will be disabled.
// Whenever the value of the field changes, a rolling update will be triggered.
func (o ThanosRulerSpecWebHttpConfigPtrOutput) Http2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfig) *bool {
		if v == nil {
			return nil
		}
		return v.Http2
	}).(pulumi.BoolPtrOutput)
}

// List of headers that can be added to HTTP responses.
type ThanosRulerSpecWebHttpConfigHeaders struct {
	// Set the Content-Security-Policy header to HTTP responses.
	// Unset if blank.
	ContentSecurityPolicy *string `pulumi:"contentSecurityPolicy"`
	// Set the Strict-Transport-Security header to HTTP responses.
	// Unset if blank.
	// Please make sure that you use this with care as this header might force
	// browsers to load Prometheus and the other applications hosted on the same
	// domain and subdomains over HTTPS.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
	StrictTransportSecurity *string `pulumi:"strictTransportSecurity"`
	// Set the X-Content-Type-Options header to HTTP responses.
	// Unset if blank. Accepted value is nosniff.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
	XContentTypeOptions *string `pulumi:"xContentTypeOptions"`
	// Set the X-Frame-Options header to HTTP responses.
	// Unset if blank. Accepted values are deny and sameorigin.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
	XFrameOptions *string `pulumi:"xFrameOptions"`
	// Set the X-XSS-Protection header to all responses.
	// Unset if blank.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
	XXSSProtection *string `pulumi:"xXSSProtection"`
}

// ThanosRulerSpecWebHttpConfigHeadersInput is an input type that accepts ThanosRulerSpecWebHttpConfigHeadersArgs and ThanosRulerSpecWebHttpConfigHeadersOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigHeadersInput` via:
//
//	ThanosRulerSpecWebHttpConfigHeadersArgs{...}
type ThanosRulerSpecWebHttpConfigHeadersInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigHeadersOutput() ThanosRulerSpecWebHttpConfigHeadersOutput
	ToThanosRulerSpecWebHttpConfigHeadersOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigHeadersOutput
}

// List of headers that can be added to HTTP responses.
type ThanosRulerSpecWebHttpConfigHeadersArgs struct {
	// Set the Content-Security-Policy header to HTTP responses.
	// Unset if blank.
	ContentSecurityPolicy pulumi.StringPtrInput `pulumi:"contentSecurityPolicy"`
	// Set the Strict-Transport-Security header to HTTP responses.
	// Unset if blank.
	// Please make sure that you use this with care as this header might force
	// browsers to load Prometheus and the other applications hosted on the same
	// domain and subdomains over HTTPS.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
	StrictTransportSecurity pulumi.StringPtrInput `pulumi:"strictTransportSecurity"`
	// Set the X-Content-Type-Options header to HTTP responses.
	// Unset if blank. Accepted value is nosniff.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
	XContentTypeOptions pulumi.StringPtrInput `pulumi:"xContentTypeOptions"`
	// Set the X-Frame-Options header to HTTP responses.
	// Unset if blank. Accepted values are deny and sameorigin.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
	XFrameOptions pulumi.StringPtrInput `pulumi:"xFrameOptions"`
	// Set the X-XSS-Protection header to all responses.
	// Unset if blank.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
	XXSSProtection pulumi.StringPtrInput `pulumi:"xXSSProtection"`
}

func (ThanosRulerSpecWebHttpConfigHeadersArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeaders)(nil)).Elem()
}

func (i ThanosRulerSpecWebHttpConfigHeadersArgs) ToThanosRulerSpecWebHttpConfigHeadersOutput() ThanosRulerSpecWebHttpConfigHeadersOutput {
	return i.ToThanosRulerSpecWebHttpConfigHeadersOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigHeadersArgs) ToThanosRulerSpecWebHttpConfigHeadersOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigHeadersOutput)
}

func (i ThanosRulerSpecWebHttpConfigHeadersArgs) ToThanosRulerSpecWebHttpConfigHeadersPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigHeadersArgs) ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigHeadersOutput).ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebHttpConfigHeadersPtrInput is an input type that accepts ThanosRulerSpecWebHttpConfigHeadersArgs, ThanosRulerSpecWebHttpConfigHeadersPtr and ThanosRulerSpecWebHttpConfigHeadersPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigHeadersPtrInput` via:
//
//	        ThanosRulerSpecWebHttpConfigHeadersArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebHttpConfigHeadersPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigHeadersPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPtrOutput
	ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigHeadersPtrOutput
}

type thanosRulerSpecWebHttpConfigHeadersPtrType ThanosRulerSpecWebHttpConfigHeadersArgs

func ThanosRulerSpecWebHttpConfigHeadersPtr(v *ThanosRulerSpecWebHttpConfigHeadersArgs) ThanosRulerSpecWebHttpConfigHeadersPtrInput {
	return (*thanosRulerSpecWebHttpConfigHeadersPtrType)(v)
}

func (*thanosRulerSpecWebHttpConfigHeadersPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfigHeaders)(nil)).Elem()
}

func (i *thanosRulerSpecWebHttpConfigHeadersPtrType) ToThanosRulerSpecWebHttpConfigHeadersPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebHttpConfigHeadersPtrType) ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigHeadersPtrOutput)
}

// List of headers that can be added to HTTP responses.
type ThanosRulerSpecWebHttpConfigHeadersOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigHeadersOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeaders)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigHeadersOutput) ToThanosRulerSpecWebHttpConfigHeadersOutput() ThanosRulerSpecWebHttpConfigHeadersOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersOutput) ToThanosRulerSpecWebHttpConfigHeadersOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersOutput) ToThanosRulerSpecWebHttpConfigHeadersPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return o.ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebHttpConfigHeadersOutput) ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebHttpConfigHeaders) *ThanosRulerSpecWebHttpConfigHeaders {
		return &v
	}).(ThanosRulerSpecWebHttpConfigHeadersPtrOutput)
}

// Set the Content-Security-Policy header to HTTP responses.
// Unset if blank.
func (o ThanosRulerSpecWebHttpConfigHeadersOutput) ContentSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeaders) *string { return v.ContentSecurityPolicy }).(pulumi.StringPtrOutput)
}

// Set the Strict-Transport-Security header to HTTP responses.
// Unset if blank.
// Please make sure that you use this with care as this header might force
// browsers to load Prometheus and the other applications hosted on the same
// domain and subdomains over HTTPS.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
func (o ThanosRulerSpecWebHttpConfigHeadersOutput) StrictTransportSecurity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeaders) *string { return v.StrictTransportSecurity }).(pulumi.StringPtrOutput)
}

// Set the X-Content-Type-Options header to HTTP responses.
// Unset if blank. Accepted value is nosniff.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
func (o ThanosRulerSpecWebHttpConfigHeadersOutput) XContentTypeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeaders) *string { return v.XContentTypeOptions }).(pulumi.StringPtrOutput)
}

// Set the X-Frame-Options header to HTTP responses.
// Unset if blank. Accepted values are deny and sameorigin.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
func (o ThanosRulerSpecWebHttpConfigHeadersOutput) XFrameOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeaders) *string { return v.XFrameOptions }).(pulumi.StringPtrOutput)
}

// Set the X-XSS-Protection header to all responses.
// Unset if blank.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
func (o ThanosRulerSpecWebHttpConfigHeadersOutput) XXSSProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeaders) *string { return v.XXSSProtection }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecWebHttpConfigHeadersPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigHeadersPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfigHeaders)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) ToThanosRulerSpecWebHttpConfigHeadersPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) ToThanosRulerSpecWebHttpConfigHeadersPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) Elem() ThanosRulerSpecWebHttpConfigHeadersOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeaders) ThanosRulerSpecWebHttpConfigHeaders {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebHttpConfigHeaders
		return ret
	}).(ThanosRulerSpecWebHttpConfigHeadersOutput)
}

// Set the Content-Security-Policy header to HTTP responses.
// Unset if blank.
func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) ContentSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeaders) *string {
		if v == nil {
			return nil
		}
		return v.ContentSecurityPolicy
	}).(pulumi.StringPtrOutput)
}

// Set the Strict-Transport-Security header to HTTP responses.
// Unset if blank.
// Please make sure that you use this with care as this header might force
// browsers to load Prometheus and the other applications hosted on the same
// domain and subdomains over HTTPS.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) StrictTransportSecurity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeaders) *string {
		if v == nil {
			return nil
		}
		return v.StrictTransportSecurity
	}).(pulumi.StringPtrOutput)
}

// Set the X-Content-Type-Options header to HTTP responses.
// Unset if blank. Accepted value is nosniff.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) XContentTypeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeaders) *string {
		if v == nil {
			return nil
		}
		return v.XContentTypeOptions
	}).(pulumi.StringPtrOutput)
}

// Set the X-Frame-Options header to HTTP responses.
// Unset if blank. Accepted values are deny and sameorigin.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) XFrameOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeaders) *string {
		if v == nil {
			return nil
		}
		return v.XFrameOptions
	}).(pulumi.StringPtrOutput)
}

// Set the X-XSS-Protection header to all responses.
// Unset if blank.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
func (o ThanosRulerSpecWebHttpConfigHeadersPtrOutput) XXSSProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeaders) *string {
		if v == nil {
			return nil
		}
		return v.XXSSProtection
	}).(pulumi.StringPtrOutput)
}

// List of headers that can be added to HTTP responses.
type ThanosRulerSpecWebHttpConfigHeadersPatch struct {
	// Set the Content-Security-Policy header to HTTP responses.
	// Unset if blank.
	ContentSecurityPolicy *string `pulumi:"contentSecurityPolicy"`
	// Set the Strict-Transport-Security header to HTTP responses.
	// Unset if blank.
	// Please make sure that you use this with care as this header might force
	// browsers to load Prometheus and the other applications hosted on the same
	// domain and subdomains over HTTPS.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
	StrictTransportSecurity *string `pulumi:"strictTransportSecurity"`
	// Set the X-Content-Type-Options header to HTTP responses.
	// Unset if blank. Accepted value is nosniff.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
	XContentTypeOptions *string `pulumi:"xContentTypeOptions"`
	// Set the X-Frame-Options header to HTTP responses.
	// Unset if blank. Accepted values are deny and sameorigin.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
	XFrameOptions *string `pulumi:"xFrameOptions"`
	// Set the X-XSS-Protection header to all responses.
	// Unset if blank.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
	XXSSProtection *string `pulumi:"xXSSProtection"`
}

// ThanosRulerSpecWebHttpConfigHeadersPatchInput is an input type that accepts ThanosRulerSpecWebHttpConfigHeadersPatchArgs and ThanosRulerSpecWebHttpConfigHeadersPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigHeadersPatchInput` via:
//
//	ThanosRulerSpecWebHttpConfigHeadersPatchArgs{...}
type ThanosRulerSpecWebHttpConfigHeadersPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigHeadersPatchOutput() ThanosRulerSpecWebHttpConfigHeadersPatchOutput
	ToThanosRulerSpecWebHttpConfigHeadersPatchOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchOutput
}

// List of headers that can be added to HTTP responses.
type ThanosRulerSpecWebHttpConfigHeadersPatchArgs struct {
	// Set the Content-Security-Policy header to HTTP responses.
	// Unset if blank.
	ContentSecurityPolicy pulumi.StringPtrInput `pulumi:"contentSecurityPolicy"`
	// Set the Strict-Transport-Security header to HTTP responses.
	// Unset if blank.
	// Please make sure that you use this with care as this header might force
	// browsers to load Prometheus and the other applications hosted on the same
	// domain and subdomains over HTTPS.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
	StrictTransportSecurity pulumi.StringPtrInput `pulumi:"strictTransportSecurity"`
	// Set the X-Content-Type-Options header to HTTP responses.
	// Unset if blank. Accepted value is nosniff.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
	XContentTypeOptions pulumi.StringPtrInput `pulumi:"xContentTypeOptions"`
	// Set the X-Frame-Options header to HTTP responses.
	// Unset if blank. Accepted values are deny and sameorigin.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
	XFrameOptions pulumi.StringPtrInput `pulumi:"xFrameOptions"`
	// Set the X-XSS-Protection header to all responses.
	// Unset if blank.
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
	XXSSProtection pulumi.StringPtrInput `pulumi:"xXSSProtection"`
}

func (ThanosRulerSpecWebHttpConfigHeadersPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeadersPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebHttpConfigHeadersPatchArgs) ToThanosRulerSpecWebHttpConfigHeadersPatchOutput() ThanosRulerSpecWebHttpConfigHeadersPatchOutput {
	return i.ToThanosRulerSpecWebHttpConfigHeadersPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigHeadersPatchArgs) ToThanosRulerSpecWebHttpConfigHeadersPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigHeadersPatchOutput)
}

func (i ThanosRulerSpecWebHttpConfigHeadersPatchArgs) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigHeadersPatchArgs) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigHeadersPatchOutput).ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebHttpConfigHeadersPatchPtrInput is an input type that accepts ThanosRulerSpecWebHttpConfigHeadersPatchArgs, ThanosRulerSpecWebHttpConfigHeadersPatchPtr and ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigHeadersPatchPtrInput` via:
//
//	        ThanosRulerSpecWebHttpConfigHeadersPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebHttpConfigHeadersPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput
	ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput
}

type thanosRulerSpecWebHttpConfigHeadersPatchPtrType ThanosRulerSpecWebHttpConfigHeadersPatchArgs

func ThanosRulerSpecWebHttpConfigHeadersPatchPtr(v *ThanosRulerSpecWebHttpConfigHeadersPatchArgs) ThanosRulerSpecWebHttpConfigHeadersPatchPtrInput {
	return (*thanosRulerSpecWebHttpConfigHeadersPatchPtrType)(v)
}

func (*thanosRulerSpecWebHttpConfigHeadersPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfigHeadersPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebHttpConfigHeadersPatchPtrType) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebHttpConfigHeadersPatchPtrType) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput)
}

// List of headers that can be added to HTTP responses.
type ThanosRulerSpecWebHttpConfigHeadersPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigHeadersPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeadersPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) ToThanosRulerSpecWebHttpConfigHeadersPatchOutput() ThanosRulerSpecWebHttpConfigHeadersPatchOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) ToThanosRulerSpecWebHttpConfigHeadersPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return o.ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebHttpConfigHeadersPatch) *ThanosRulerSpecWebHttpConfigHeadersPatch {
		return &v
	}).(ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput)
}

// Set the Content-Security-Policy header to HTTP responses.
// Unset if blank.
func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) ContentSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeadersPatch) *string { return v.ContentSecurityPolicy }).(pulumi.StringPtrOutput)
}

// Set the Strict-Transport-Security header to HTTP responses.
// Unset if blank.
// Please make sure that you use this with care as this header might force
// browsers to load Prometheus and the other applications hosted on the same
// domain and subdomains over HTTPS.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) StrictTransportSecurity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeadersPatch) *string { return v.StrictTransportSecurity }).(pulumi.StringPtrOutput)
}

// Set the X-Content-Type-Options header to HTTP responses.
// Unset if blank. Accepted value is nosniff.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) XContentTypeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeadersPatch) *string { return v.XContentTypeOptions }).(pulumi.StringPtrOutput)
}

// Set the X-Frame-Options header to HTTP responses.
// Unset if blank. Accepted values are deny and sameorigin.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) XFrameOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeadersPatch) *string { return v.XFrameOptions }).(pulumi.StringPtrOutput)
}

// Set the X-XSS-Protection header to all responses.
// Unset if blank.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
func (o ThanosRulerSpecWebHttpConfigHeadersPatchOutput) XXSSProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigHeadersPatch) *string { return v.XXSSProtection }).(pulumi.StringPtrOutput)
}

type ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfigHeadersPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput() ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) ToThanosRulerSpecWebHttpConfigHeadersPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) Elem() ThanosRulerSpecWebHttpConfigHeadersPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeadersPatch) ThanosRulerSpecWebHttpConfigHeadersPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebHttpConfigHeadersPatch
		return ret
	}).(ThanosRulerSpecWebHttpConfigHeadersPatchOutput)
}

// Set the Content-Security-Policy header to HTTP responses.
// Unset if blank.
func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) ContentSecurityPolicy() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeadersPatch) *string {
		if v == nil {
			return nil
		}
		return v.ContentSecurityPolicy
	}).(pulumi.StringPtrOutput)
}

// Set the Strict-Transport-Security header to HTTP responses.
// Unset if blank.
// Please make sure that you use this with care as this header might force
// browsers to load Prometheus and the other applications hosted on the same
// domain and subdomains over HTTPS.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Strict-Transport-Security
func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) StrictTransportSecurity() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeadersPatch) *string {
		if v == nil {
			return nil
		}
		return v.StrictTransportSecurity
	}).(pulumi.StringPtrOutput)
}

// Set the X-Content-Type-Options header to HTTP responses.
// Unset if blank. Accepted value is nosniff.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Content-Type-Options
func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) XContentTypeOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeadersPatch) *string {
		if v == nil {
			return nil
		}
		return v.XContentTypeOptions
	}).(pulumi.StringPtrOutput)
}

// Set the X-Frame-Options header to HTTP responses.
// Unset if blank. Accepted values are deny and sameorigin.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options
func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) XFrameOptions() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeadersPatch) *string {
		if v == nil {
			return nil
		}
		return v.XFrameOptions
	}).(pulumi.StringPtrOutput)
}

// Set the X-XSS-Protection header to all responses.
// Unset if blank.
// https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-XSS-Protection
func (o ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput) XXSSProtection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigHeadersPatch) *string {
		if v == nil {
			return nil
		}
		return v.XXSSProtection
	}).(pulumi.StringPtrOutput)
}

// Defines HTTP parameters for web server.
type ThanosRulerSpecWebHttpConfigPatch struct {
	Headers *ThanosRulerSpecWebHttpConfigHeadersPatch `pulumi:"headers"`
	// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
	// When TLSConfig is not configured, HTTP/2 will be disabled.
	// Whenever the value of the field changes, a rolling update will be triggered.
	Http2 *bool `pulumi:"http2"`
}

// ThanosRulerSpecWebHttpConfigPatchInput is an input type that accepts ThanosRulerSpecWebHttpConfigPatchArgs and ThanosRulerSpecWebHttpConfigPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigPatchInput` via:
//
//	ThanosRulerSpecWebHttpConfigPatchArgs{...}
type ThanosRulerSpecWebHttpConfigPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigPatchOutput() ThanosRulerSpecWebHttpConfigPatchOutput
	ToThanosRulerSpecWebHttpConfigPatchOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigPatchOutput
}

// Defines HTTP parameters for web server.
type ThanosRulerSpecWebHttpConfigPatchArgs struct {
	Headers ThanosRulerSpecWebHttpConfigHeadersPatchPtrInput `pulumi:"headers"`
	// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
	// When TLSConfig is not configured, HTTP/2 will be disabled.
	// Whenever the value of the field changes, a rolling update will be triggered.
	Http2 pulumi.BoolPtrInput `pulumi:"http2"`
}

func (ThanosRulerSpecWebHttpConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfigPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebHttpConfigPatchArgs) ToThanosRulerSpecWebHttpConfigPatchOutput() ThanosRulerSpecWebHttpConfigPatchOutput {
	return i.ToThanosRulerSpecWebHttpConfigPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigPatchArgs) ToThanosRulerSpecWebHttpConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigPatchOutput)
}

func (i ThanosRulerSpecWebHttpConfigPatchArgs) ToThanosRulerSpecWebHttpConfigPatchPtrOutput() ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebHttpConfigPatchArgs) ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigPatchOutput).ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebHttpConfigPatchPtrInput is an input type that accepts ThanosRulerSpecWebHttpConfigPatchArgs, ThanosRulerSpecWebHttpConfigPatchPtr and ThanosRulerSpecWebHttpConfigPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebHttpConfigPatchPtrInput` via:
//
//	        ThanosRulerSpecWebHttpConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebHttpConfigPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebHttpConfigPatchPtrOutput() ThanosRulerSpecWebHttpConfigPatchPtrOutput
	ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebHttpConfigPatchPtrOutput
}

type thanosRulerSpecWebHttpConfigPatchPtrType ThanosRulerSpecWebHttpConfigPatchArgs

func ThanosRulerSpecWebHttpConfigPatchPtr(v *ThanosRulerSpecWebHttpConfigPatchArgs) ThanosRulerSpecWebHttpConfigPatchPtrInput {
	return (*thanosRulerSpecWebHttpConfigPatchPtrType)(v)
}

func (*thanosRulerSpecWebHttpConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfigPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebHttpConfigPatchPtrType) ToThanosRulerSpecWebHttpConfigPatchPtrOutput() ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return i.ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebHttpConfigPatchPtrType) ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebHttpConfigPatchPtrOutput)
}

// Defines HTTP parameters for web server.
type ThanosRulerSpecWebHttpConfigPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebHttpConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigPatchOutput) ToThanosRulerSpecWebHttpConfigPatchOutput() ThanosRulerSpecWebHttpConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigPatchOutput) ToThanosRulerSpecWebHttpConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigPatchOutput) ToThanosRulerSpecWebHttpConfigPatchPtrOutput() ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return o.ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebHttpConfigPatchOutput) ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebHttpConfigPatch) *ThanosRulerSpecWebHttpConfigPatch {
		return &v
	}).(ThanosRulerSpecWebHttpConfigPatchPtrOutput)
}

func (o ThanosRulerSpecWebHttpConfigPatchOutput) Headers() ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigPatch) *ThanosRulerSpecWebHttpConfigHeadersPatch { return v.Headers }).(ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput)
}

// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
// When TLSConfig is not configured, HTTP/2 will be disabled.
// Whenever the value of the field changes, a rolling update will be triggered.
func (o ThanosRulerSpecWebHttpConfigPatchOutput) Http2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebHttpConfigPatch) *bool { return v.Http2 }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebHttpConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebHttpConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebHttpConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebHttpConfigPatchPtrOutput) ToThanosRulerSpecWebHttpConfigPatchPtrOutput() ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigPatchPtrOutput) ToThanosRulerSpecWebHttpConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebHttpConfigPatchPtrOutput) Elem() ThanosRulerSpecWebHttpConfigPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigPatch) ThanosRulerSpecWebHttpConfigPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebHttpConfigPatch
		return ret
	}).(ThanosRulerSpecWebHttpConfigPatchOutput)
}

func (o ThanosRulerSpecWebHttpConfigPatchPtrOutput) Headers() ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigPatch) *ThanosRulerSpecWebHttpConfigHeadersPatch {
		if v == nil {
			return nil
		}
		return v.Headers
	}).(ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput)
}

// Enable HTTP/2 support. Note that HTTP/2 is only supported with TLS.
// When TLSConfig is not configured, HTTP/2 will be disabled.
// Whenever the value of the field changes, a rolling update will be triggered.
func (o ThanosRulerSpecWebHttpConfigPatchPtrOutput) Http2() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebHttpConfigPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Http2
	}).(pulumi.BoolPtrOutput)
}

// Defines the configuration of the ThanosRuler web server.
type ThanosRulerSpecWebPatch struct {
	HttpConfig *ThanosRulerSpecWebHttpConfigPatch `pulumi:"httpConfig"`
	TlsConfig  *ThanosRulerSpecWebTlsConfigPatch  `pulumi:"tlsConfig"`
}

// ThanosRulerSpecWebPatchInput is an input type that accepts ThanosRulerSpecWebPatchArgs and ThanosRulerSpecWebPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebPatchInput` via:
//
//	ThanosRulerSpecWebPatchArgs{...}
type ThanosRulerSpecWebPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebPatchOutput() ThanosRulerSpecWebPatchOutput
	ToThanosRulerSpecWebPatchOutputWithContext(context.Context) ThanosRulerSpecWebPatchOutput
}

// Defines the configuration of the ThanosRuler web server.
type ThanosRulerSpecWebPatchArgs struct {
	HttpConfig ThanosRulerSpecWebHttpConfigPatchPtrInput `pulumi:"httpConfig"`
	TlsConfig  ThanosRulerSpecWebTlsConfigPatchPtrInput  `pulumi:"tlsConfig"`
}

func (ThanosRulerSpecWebPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebPatchArgs) ToThanosRulerSpecWebPatchOutput() ThanosRulerSpecWebPatchOutput {
	return i.ToThanosRulerSpecWebPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebPatchArgs) ToThanosRulerSpecWebPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebPatchOutput)
}

func (i ThanosRulerSpecWebPatchArgs) ToThanosRulerSpecWebPatchPtrOutput() ThanosRulerSpecWebPatchPtrOutput {
	return i.ToThanosRulerSpecWebPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebPatchArgs) ToThanosRulerSpecWebPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebPatchOutput).ToThanosRulerSpecWebPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebPatchPtrInput is an input type that accepts ThanosRulerSpecWebPatchArgs, ThanosRulerSpecWebPatchPtr and ThanosRulerSpecWebPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebPatchPtrInput` via:
//
//	        ThanosRulerSpecWebPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebPatchPtrOutput() ThanosRulerSpecWebPatchPtrOutput
	ToThanosRulerSpecWebPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebPatchPtrOutput
}

type thanosRulerSpecWebPatchPtrType ThanosRulerSpecWebPatchArgs

func ThanosRulerSpecWebPatchPtr(v *ThanosRulerSpecWebPatchArgs) ThanosRulerSpecWebPatchPtrInput {
	return (*thanosRulerSpecWebPatchPtrType)(v)
}

func (*thanosRulerSpecWebPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebPatchPtrType) ToThanosRulerSpecWebPatchPtrOutput() ThanosRulerSpecWebPatchPtrOutput {
	return i.ToThanosRulerSpecWebPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebPatchPtrType) ToThanosRulerSpecWebPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebPatchPtrOutput)
}

// Defines the configuration of the ThanosRuler web server.
type ThanosRulerSpecWebPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebPatchOutput) ToThanosRulerSpecWebPatchOutput() ThanosRulerSpecWebPatchOutput {
	return o
}

func (o ThanosRulerSpecWebPatchOutput) ToThanosRulerSpecWebPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebPatchOutput {
	return o
}

func (o ThanosRulerSpecWebPatchOutput) ToThanosRulerSpecWebPatchPtrOutput() ThanosRulerSpecWebPatchPtrOutput {
	return o.ToThanosRulerSpecWebPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebPatchOutput) ToThanosRulerSpecWebPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebPatch) *ThanosRulerSpecWebPatch {
		return &v
	}).(ThanosRulerSpecWebPatchPtrOutput)
}

func (o ThanosRulerSpecWebPatchOutput) HttpConfig() ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebPatch) *ThanosRulerSpecWebHttpConfigPatch { return v.HttpConfig }).(ThanosRulerSpecWebHttpConfigPatchPtrOutput)
}

func (o ThanosRulerSpecWebPatchOutput) TlsConfig() ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebPatch) *ThanosRulerSpecWebTlsConfigPatch { return v.TlsConfig }).(ThanosRulerSpecWebTlsConfigPatchPtrOutput)
}

type ThanosRulerSpecWebPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebPatchPtrOutput) ToThanosRulerSpecWebPatchPtrOutput() ThanosRulerSpecWebPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebPatchPtrOutput) ToThanosRulerSpecWebPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebPatchPtrOutput) Elem() ThanosRulerSpecWebPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebPatch) ThanosRulerSpecWebPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebPatch
		return ret
	}).(ThanosRulerSpecWebPatchOutput)
}

func (o ThanosRulerSpecWebPatchPtrOutput) HttpConfig() ThanosRulerSpecWebHttpConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebPatch) *ThanosRulerSpecWebHttpConfigPatch {
		if v == nil {
			return nil
		}
		return v.HttpConfig
	}).(ThanosRulerSpecWebHttpConfigPatchPtrOutput)
}

func (o ThanosRulerSpecWebPatchPtrOutput) TlsConfig() ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebPatch) *ThanosRulerSpecWebTlsConfigPatch {
		if v == nil {
			return nil
		}
		return v.TlsConfig
	}).(ThanosRulerSpecWebTlsConfigPatchPtrOutput)
}

// Defines the TLS parameters for HTTPS.
type ThanosRulerSpecWebTlsConfig struct {
	Cert *ThanosRulerSpecWebTlsConfigCert `pulumi:"cert"`
	// Path to the TLS certificate file in the Prometheus container for the server.
	// Mutually exclusive with `cert`.
	CertFile *string `pulumi:"certFile"`
	// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
	// Go default cipher suites are used. Available cipher suites are documented
	// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
	CipherSuites []string `pulumi:"cipherSuites"`
	// Server policy for client authentication. Maps to ClientAuth Policies.
	// For more detail on clientAuth options:
	// https://golang.org/pkg/crypto/tls/#ClientAuthType
	ClientAuthType *string `pulumi:"clientAuthType"`
	// Path to the CA certificate file for client certificate authentication to the server.
	// Mutually exclusive with `client_ca`.
	ClientCAFile *string                              `pulumi:"clientCAFile"`
	Client_ca    *ThanosRulerSpecWebTlsConfigClientCa `pulumi:"client_ca"`
	// Elliptic curves that will be used in an ECDHE handshake, in preference
	// order. Available curves are documented in the go documentation:
	// https://golang.org/pkg/crypto/tls/#CurveID
	CurvePreferences []string `pulumi:"curvePreferences"`
	// Path to the TLS key file in the Prometheus container for the server.
	// Mutually exclusive with `keySecret`.
	KeyFile   *string                               `pulumi:"keyFile"`
	KeySecret *ThanosRulerSpecWebTlsConfigKeySecret `pulumi:"keySecret"`
	// Maximum TLS version that is acceptable. Defaults to TLS13.
	MaxVersion *string `pulumi:"maxVersion"`
	// Minimum TLS version that is acceptable. Defaults to TLS12.
	MinVersion *string `pulumi:"minVersion"`
	// Controls whether the server selects the
	// client's most preferred cipher suite, or the server's most preferred
	// cipher suite. If true then the server's preference, as expressed in
	// the order of elements in cipherSuites, is used.
	PreferServerCipherSuites *bool `pulumi:"preferServerCipherSuites"`
}

// ThanosRulerSpecWebTlsConfigInput is an input type that accepts ThanosRulerSpecWebTlsConfigArgs and ThanosRulerSpecWebTlsConfigOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigInput` via:
//
//	ThanosRulerSpecWebTlsConfigArgs{...}
type ThanosRulerSpecWebTlsConfigInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigOutput() ThanosRulerSpecWebTlsConfigOutput
	ToThanosRulerSpecWebTlsConfigOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigOutput
}

// Defines the TLS parameters for HTTPS.
type ThanosRulerSpecWebTlsConfigArgs struct {
	Cert ThanosRulerSpecWebTlsConfigCertPtrInput `pulumi:"cert"`
	// Path to the TLS certificate file in the Prometheus container for the server.
	// Mutually exclusive with `cert`.
	CertFile pulumi.StringPtrInput `pulumi:"certFile"`
	// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
	// Go default cipher suites are used. Available cipher suites are documented
	// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
	CipherSuites pulumi.StringArrayInput `pulumi:"cipherSuites"`
	// Server policy for client authentication. Maps to ClientAuth Policies.
	// For more detail on clientAuth options:
	// https://golang.org/pkg/crypto/tls/#ClientAuthType
	ClientAuthType pulumi.StringPtrInput `pulumi:"clientAuthType"`
	// Path to the CA certificate file for client certificate authentication to the server.
	// Mutually exclusive with `client_ca`.
	ClientCAFile pulumi.StringPtrInput                       `pulumi:"clientCAFile"`
	Client_ca    ThanosRulerSpecWebTlsConfigClientCaPtrInput `pulumi:"client_ca"`
	// Elliptic curves that will be used in an ECDHE handshake, in preference
	// order. Available curves are documented in the go documentation:
	// https://golang.org/pkg/crypto/tls/#CurveID
	CurvePreferences pulumi.StringArrayInput `pulumi:"curvePreferences"`
	// Path to the TLS key file in the Prometheus container for the server.
	// Mutually exclusive with `keySecret`.
	KeyFile   pulumi.StringPtrInput                        `pulumi:"keyFile"`
	KeySecret ThanosRulerSpecWebTlsConfigKeySecretPtrInput `pulumi:"keySecret"`
	// Maximum TLS version that is acceptable. Defaults to TLS13.
	MaxVersion pulumi.StringPtrInput `pulumi:"maxVersion"`
	// Minimum TLS version that is acceptable. Defaults to TLS12.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Controls whether the server selects the
	// client's most preferred cipher suite, or the server's most preferred
	// cipher suite. If true then the server's preference, as expressed in
	// the order of elements in cipherSuites, is used.
	PreferServerCipherSuites pulumi.BoolPtrInput `pulumi:"preferServerCipherSuites"`
}

func (ThanosRulerSpecWebTlsConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfig)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigArgs) ToThanosRulerSpecWebTlsConfigOutput() ThanosRulerSpecWebTlsConfigOutput {
	return i.ToThanosRulerSpecWebTlsConfigOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigArgs) ToThanosRulerSpecWebTlsConfigOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigOutput)
}

func (i ThanosRulerSpecWebTlsConfigArgs) ToThanosRulerSpecWebTlsConfigPtrOutput() ThanosRulerSpecWebTlsConfigPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigArgs) ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigOutput).ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigArgs, ThanosRulerSpecWebTlsConfigPtr and ThanosRulerSpecWebTlsConfigPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigPtrOutput() ThanosRulerSpecWebTlsConfigPtrOutput
	ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigPtrOutput
}

type thanosRulerSpecWebTlsConfigPtrType ThanosRulerSpecWebTlsConfigArgs

func ThanosRulerSpecWebTlsConfigPtr(v *ThanosRulerSpecWebTlsConfigArgs) ThanosRulerSpecWebTlsConfigPtrInput {
	return (*thanosRulerSpecWebTlsConfigPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfig)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigPtrType) ToThanosRulerSpecWebTlsConfigPtrOutput() ThanosRulerSpecWebTlsConfigPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigPtrType) ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigPtrOutput)
}

// Defines the TLS parameters for HTTPS.
type ThanosRulerSpecWebTlsConfigOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfig)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigOutput) ToThanosRulerSpecWebTlsConfigOutput() ThanosRulerSpecWebTlsConfigOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigOutput) ToThanosRulerSpecWebTlsConfigOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigOutput) ToThanosRulerSpecWebTlsConfigPtrOutput() ThanosRulerSpecWebTlsConfigPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigOutput) ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfig) *ThanosRulerSpecWebTlsConfig {
		return &v
	}).(ThanosRulerSpecWebTlsConfigPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigOutput) Cert() ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *ThanosRulerSpecWebTlsConfigCert { return v.Cert }).(ThanosRulerSpecWebTlsConfigCertPtrOutput)
}

// Path to the TLS certificate file in the Prometheus container for the server.
// Mutually exclusive with `cert`.
func (o ThanosRulerSpecWebTlsConfigOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *string { return v.CertFile }).(pulumi.StringPtrOutput)
}

// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
// Go default cipher suites are used. Available cipher suites are documented
// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
func (o ThanosRulerSpecWebTlsConfigOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) []string { return v.CipherSuites }).(pulumi.StringArrayOutput)
}

// Server policy for client authentication. Maps to ClientAuth Policies.
// For more detail on clientAuth options:
// https://golang.org/pkg/crypto/tls/#ClientAuthType
func (o ThanosRulerSpecWebTlsConfigOutput) ClientAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *string { return v.ClientAuthType }).(pulumi.StringPtrOutput)
}

// Path to the CA certificate file for client certificate authentication to the server.
// Mutually exclusive with `client_ca`.
func (o ThanosRulerSpecWebTlsConfigOutput) ClientCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *string { return v.ClientCAFile }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigOutput) Client_ca() ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *ThanosRulerSpecWebTlsConfigClientCa { return v.Client_ca }).(ThanosRulerSpecWebTlsConfigClientCaPtrOutput)
}

// Elliptic curves that will be used in an ECDHE handshake, in preference
// order. Available curves are documented in the go documentation:
// https://golang.org/pkg/crypto/tls/#CurveID
func (o ThanosRulerSpecWebTlsConfigOutput) CurvePreferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) []string { return v.CurvePreferences }).(pulumi.StringArrayOutput)
}

// Path to the TLS key file in the Prometheus container for the server.
// Mutually exclusive with `keySecret`.
func (o ThanosRulerSpecWebTlsConfigOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *string { return v.KeyFile }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigOutput) KeySecret() ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *ThanosRulerSpecWebTlsConfigKeySecret { return v.KeySecret }).(ThanosRulerSpecWebTlsConfigKeySecretPtrOutput)
}

// Maximum TLS version that is acceptable. Defaults to TLS13.
func (o ThanosRulerSpecWebTlsConfigOutput) MaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *string { return v.MaxVersion }).(pulumi.StringPtrOutput)
}

// Minimum TLS version that is acceptable. Defaults to TLS12.
func (o ThanosRulerSpecWebTlsConfigOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Controls whether the server selects the
// client's most preferred cipher suite, or the server's most preferred
// cipher suite. If true then the server's preference, as expressed in
// the order of elements in cipherSuites, is used.
func (o ThanosRulerSpecWebTlsConfigOutput) PreferServerCipherSuites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfig) *bool { return v.PreferServerCipherSuites }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfig)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigPtrOutput) ToThanosRulerSpecWebTlsConfigPtrOutput() ThanosRulerSpecWebTlsConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigPtrOutput) ToThanosRulerSpecWebTlsConfigPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigPtrOutput) Elem() ThanosRulerSpecWebTlsConfigOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) ThanosRulerSpecWebTlsConfig {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfig
		return ret
	}).(ThanosRulerSpecWebTlsConfigOutput)
}

func (o ThanosRulerSpecWebTlsConfigPtrOutput) Cert() ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *ThanosRulerSpecWebTlsConfigCert {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(ThanosRulerSpecWebTlsConfigCertPtrOutput)
}

// Path to the TLS certificate file in the Prometheus container for the server.
// Mutually exclusive with `cert`.
func (o ThanosRulerSpecWebTlsConfigPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.CertFile
	}).(pulumi.StringPtrOutput)
}

// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
// Go default cipher suites are used. Available cipher suites are documented
// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
func (o ThanosRulerSpecWebTlsConfigPtrOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) []string {
		if v == nil {
			return nil
		}
		return v.CipherSuites
	}).(pulumi.StringArrayOutput)
}

// Server policy for client authentication. Maps to ClientAuth Policies.
// For more detail on clientAuth options:
// https://golang.org/pkg/crypto/tls/#ClientAuthType
func (o ThanosRulerSpecWebTlsConfigPtrOutput) ClientAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientAuthType
	}).(pulumi.StringPtrOutput)
}

// Path to the CA certificate file for client certificate authentication to the server.
// Mutually exclusive with `client_ca`.
func (o ThanosRulerSpecWebTlsConfigPtrOutput) ClientCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.ClientCAFile
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigPtrOutput) Client_ca() ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *ThanosRulerSpecWebTlsConfigClientCa {
		if v == nil {
			return nil
		}
		return v.Client_ca
	}).(ThanosRulerSpecWebTlsConfigClientCaPtrOutput)
}

// Elliptic curves that will be used in an ECDHE handshake, in preference
// order. Available curves are documented in the go documentation:
// https://golang.org/pkg/crypto/tls/#CurveID
func (o ThanosRulerSpecWebTlsConfigPtrOutput) CurvePreferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) []string {
		if v == nil {
			return nil
		}
		return v.CurvePreferences
	}).(pulumi.StringArrayOutput)
}

// Path to the TLS key file in the Prometheus container for the server.
// Mutually exclusive with `keySecret`.
func (o ThanosRulerSpecWebTlsConfigPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.KeyFile
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigPtrOutput) KeySecret() ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *ThanosRulerSpecWebTlsConfigKeySecret {
		if v == nil {
			return nil
		}
		return v.KeySecret
	}).(ThanosRulerSpecWebTlsConfigKeySecretPtrOutput)
}

// Maximum TLS version that is acceptable. Defaults to TLS13.
func (o ThanosRulerSpecWebTlsConfigPtrOutput) MaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.MaxVersion
	}).(pulumi.StringPtrOutput)
}

// Minimum TLS version that is acceptable. Defaults to TLS12.
func (o ThanosRulerSpecWebTlsConfigPtrOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *string {
		if v == nil {
			return nil
		}
		return v.MinVersion
	}).(pulumi.StringPtrOutput)
}

// Controls whether the server selects the
// client's most preferred cipher suite, or the server's most preferred
// cipher suite. If true then the server's preference, as expressed in
// the order of elements in cipherSuites, is used.
func (o ThanosRulerSpecWebTlsConfigPtrOutput) PreferServerCipherSuites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfig) *bool {
		if v == nil {
			return nil
		}
		return v.PreferServerCipherSuites
	}).(pulumi.BoolPtrOutput)
}

// Contains the TLS certificate for the server.
type ThanosRulerSpecWebTlsConfigCert struct {
	ConfigMap *ThanosRulerSpecWebTlsConfigCertConfigMap `pulumi:"configMap"`
	Secret    *ThanosRulerSpecWebTlsConfigCertSecret    `pulumi:"secret"`
}

// ThanosRulerSpecWebTlsConfigCertInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertArgs and ThanosRulerSpecWebTlsConfigCertOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertInput` via:
//
//	ThanosRulerSpecWebTlsConfigCertArgs{...}
type ThanosRulerSpecWebTlsConfigCertInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertOutput() ThanosRulerSpecWebTlsConfigCertOutput
	ToThanosRulerSpecWebTlsConfigCertOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertOutput
}

// Contains the TLS certificate for the server.
type ThanosRulerSpecWebTlsConfigCertArgs struct {
	ConfigMap ThanosRulerSpecWebTlsConfigCertConfigMapPtrInput `pulumi:"configMap"`
	Secret    ThanosRulerSpecWebTlsConfigCertSecretPtrInput    `pulumi:"secret"`
}

func (ThanosRulerSpecWebTlsConfigCertArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCert)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigCertArgs) ToThanosRulerSpecWebTlsConfigCertOutput() ThanosRulerSpecWebTlsConfigCertOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertArgs) ToThanosRulerSpecWebTlsConfigCertOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertOutput)
}

func (i ThanosRulerSpecWebTlsConfigCertArgs) ToThanosRulerSpecWebTlsConfigCertPtrOutput() ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertArgs) ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertOutput).ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigCertPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertArgs, ThanosRulerSpecWebTlsConfigCertPtr and ThanosRulerSpecWebTlsConfigCertPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigCertArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigCertPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertPtrOutput() ThanosRulerSpecWebTlsConfigCertPtrOutput
	ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertPtrOutput
}

type thanosRulerSpecWebTlsConfigCertPtrType ThanosRulerSpecWebTlsConfigCertArgs

func ThanosRulerSpecWebTlsConfigCertPtr(v *ThanosRulerSpecWebTlsConfigCertArgs) ThanosRulerSpecWebTlsConfigCertPtrInput {
	return (*thanosRulerSpecWebTlsConfigCertPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigCertPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCert)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigCertPtrType) ToThanosRulerSpecWebTlsConfigCertPtrOutput() ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigCertPtrType) ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertPtrOutput)
}

// Contains the TLS certificate for the server.
type ThanosRulerSpecWebTlsConfigCertOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCert)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertOutput) ToThanosRulerSpecWebTlsConfigCertOutput() ThanosRulerSpecWebTlsConfigCertOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertOutput) ToThanosRulerSpecWebTlsConfigCertOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertOutput) ToThanosRulerSpecWebTlsConfigCertPtrOutput() ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigCertOutput) ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigCert) *ThanosRulerSpecWebTlsConfigCert {
		return &v
	}).(ThanosRulerSpecWebTlsConfigCertPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertOutput) ConfigMap() ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCert) *ThanosRulerSpecWebTlsConfigCertConfigMap { return v.ConfigMap }).(ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertOutput) Secret() ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCert) *ThanosRulerSpecWebTlsConfigCertSecret { return v.Secret }).(ThanosRulerSpecWebTlsConfigCertSecretPtrOutput)
}

type ThanosRulerSpecWebTlsConfigCertPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCert)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertPtrOutput) ToThanosRulerSpecWebTlsConfigCertPtrOutput() ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertPtrOutput) ToThanosRulerSpecWebTlsConfigCertPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertPtrOutput) Elem() ThanosRulerSpecWebTlsConfigCertOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCert) ThanosRulerSpecWebTlsConfigCert {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigCert
		return ret
	}).(ThanosRulerSpecWebTlsConfigCertOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertPtrOutput) ConfigMap() ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCert) *ThanosRulerSpecWebTlsConfigCertConfigMap {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertPtrOutput) Secret() ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCert) *ThanosRulerSpecWebTlsConfigCertSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ThanosRulerSpecWebTlsConfigCertSecretPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertConfigMap struct {
	// The key to select.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigCertConfigMapInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertConfigMap and ThanosRulerSpecWebTlsConfigCertConfigMapOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertConfigMapInput` via:
//
//	ThanosRulerSpecWebTlsConfigCertConfigMap{ "key": ThanosRulerSpecWebTlsConfigCertConfigArgs{...} }
type ThanosRulerSpecWebTlsConfigCertConfigMapInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertConfigMapOutput() ThanosRulerSpecWebTlsConfigCertConfigMapOutput
	ToThanosRulerSpecWebTlsConfigCertConfigMapOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapOutput
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertConfigMapArgs struct {
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigCertConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMap)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapOutput() ThanosRulerSpecWebTlsConfigCertConfigMapOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertConfigMapOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertConfigMapOutput)
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertConfigMapOutput).ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigCertConfigMapPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertConfigMapArgs, ThanosRulerSpecWebTlsConfigCertConfigMapPtr and ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertConfigMapPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigCertConfigMapArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigCertConfigMapPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput
	ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput
}

type thanosRulerSpecWebTlsConfigCertConfigMapPtrType ThanosRulerSpecWebTlsConfigCertConfigMapArgs

func ThanosRulerSpecWebTlsConfigCertConfigMapPtr(v *ThanosRulerSpecWebTlsConfigCertConfigMapArgs) ThanosRulerSpecWebTlsConfigCertConfigMapPtrInput {
	return (*thanosRulerSpecWebTlsConfigCertConfigMapPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigCertConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertConfigMap)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigCertConfigMapPtrType) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigCertConfigMapPtrType) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertConfigMapOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapOutput() ThanosRulerSpecWebTlsConfigCertConfigMapOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigCertConfigMap) *ThanosRulerSpecWebTlsConfigCertConfigMap {
		return &v
	}).(ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigCertConfigMapOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertConfigMap) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput) Elem() ThanosRulerSpecWebTlsConfigCertConfigMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMap) ThanosRulerSpecWebTlsConfigCertConfigMap {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigCertConfigMap
		return ret
	}).(ThanosRulerSpecWebTlsConfigCertConfigMapOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertConfigMapPatch struct {
	// The key to select.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigCertConfigMapPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs and ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertConfigMapPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs{...}
type ThanosRulerSpecWebTlsConfigCertConfigMapPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput
	ToThanosRulerSpecWebTlsConfigCertConfigMapPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs struct {
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMapPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertConfigMapPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput).ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs, ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtr and ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigCertConfigMapPatchPtrType ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs

func ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtr(v *ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs) ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigCertConfigMapPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigCertConfigMapPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertConfigMapPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigCertConfigMapPatchPtrType) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigCertConfigMapPatchPtrType) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigCertConfigMapPatch) *ThanosRulerSpecWebTlsConfigCertConfigMapPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertConfigMapPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertConfigMapPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertConfigMapPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput) ToThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMapPatch) ThanosRulerSpecWebTlsConfigCertConfigMapPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigCertConfigMapPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertConfigMapPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Contains the TLS certificate for the server.
type ThanosRulerSpecWebTlsConfigCertPatch struct {
	ConfigMap *ThanosRulerSpecWebTlsConfigCertConfigMapPatch `pulumi:"configMap"`
	Secret    *ThanosRulerSpecWebTlsConfigCertSecretPatch    `pulumi:"secret"`
}

// ThanosRulerSpecWebTlsConfigCertPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertPatchArgs and ThanosRulerSpecWebTlsConfigCertPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigCertPatchArgs{...}
type ThanosRulerSpecWebTlsConfigCertPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertPatchOutput() ThanosRulerSpecWebTlsConfigCertPatchOutput
	ToThanosRulerSpecWebTlsConfigCertPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertPatchOutput
}

// Contains the TLS certificate for the server.
type ThanosRulerSpecWebTlsConfigCertPatchArgs struct {
	ConfigMap ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrInput `pulumi:"configMap"`
	Secret    ThanosRulerSpecWebTlsConfigCertSecretPatchPtrInput    `pulumi:"secret"`
}

func (ThanosRulerSpecWebTlsConfigCertPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigCertPatchArgs) ToThanosRulerSpecWebTlsConfigCertPatchOutput() ThanosRulerSpecWebTlsConfigCertPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertPatchArgs) ToThanosRulerSpecWebTlsConfigCertPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigCertPatchArgs) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertPatchArgs) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertPatchOutput).ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigCertPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertPatchArgs, ThanosRulerSpecWebTlsConfigCertPatchPtr and ThanosRulerSpecWebTlsConfigCertPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigCertPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigCertPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigCertPatchPtrType ThanosRulerSpecWebTlsConfigCertPatchArgs

func ThanosRulerSpecWebTlsConfigCertPatchPtr(v *ThanosRulerSpecWebTlsConfigCertPatchArgs) ThanosRulerSpecWebTlsConfigCertPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigCertPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigCertPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigCertPatchPtrType) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigCertPatchPtrType) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertPatchPtrOutput)
}

// Contains the TLS certificate for the server.
type ThanosRulerSpecWebTlsConfigCertPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertPatchOutput) ToThanosRulerSpecWebTlsConfigCertPatchOutput() ThanosRulerSpecWebTlsConfigCertPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertPatchOutput) ToThanosRulerSpecWebTlsConfigCertPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertPatchOutput) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigCertPatchOutput) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigCertPatch) *ThanosRulerSpecWebTlsConfigCertPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigCertPatchPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertPatchOutput) ConfigMap() ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertPatch) *ThanosRulerSpecWebTlsConfigCertConfigMapPatch {
		return v.ConfigMap
	}).(ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertPatchOutput) Secret() ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertPatch) *ThanosRulerSpecWebTlsConfigCertSecretPatch {
		return v.Secret
	}).(ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput)
}

type ThanosRulerSpecWebTlsConfigCertPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertPatchPtrOutput) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertPatchPtrOutput) ToThanosRulerSpecWebTlsConfigCertPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigCertPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertPatch) ThanosRulerSpecWebTlsConfigCertPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigCertPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigCertPatchOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertPatchPtrOutput) ConfigMap() ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertPatch) *ThanosRulerSpecWebTlsConfigCertConfigMapPatch {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigCertPatchPtrOutput) Secret() ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertPatch) *ThanosRulerSpecWebTlsConfigCertSecretPatch {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertSecret struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigCertSecretInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertSecretArgs and ThanosRulerSpecWebTlsConfigCertSecretOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertSecretInput` via:
//
//	ThanosRulerSpecWebTlsConfigCertSecretArgs{...}
type ThanosRulerSpecWebTlsConfigCertSecretInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertSecretOutput() ThanosRulerSpecWebTlsConfigCertSecretOutput
	ToThanosRulerSpecWebTlsConfigCertSecretOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertSecretOutput
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertSecretArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigCertSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecret)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigCertSecretArgs) ToThanosRulerSpecWebTlsConfigCertSecretOutput() ThanosRulerSpecWebTlsConfigCertSecretOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertSecretOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertSecretArgs) ToThanosRulerSpecWebTlsConfigCertSecretOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertSecretOutput)
}

func (i ThanosRulerSpecWebTlsConfigCertSecretArgs) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertSecretArgs) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertSecretOutput).ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigCertSecretPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertSecretArgs, ThanosRulerSpecWebTlsConfigCertSecretPtr and ThanosRulerSpecWebTlsConfigCertSecretPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertSecretPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigCertSecretArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigCertSecretPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertSecretPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPtrOutput
	ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertSecretPtrOutput
}

type thanosRulerSpecWebTlsConfigCertSecretPtrType ThanosRulerSpecWebTlsConfigCertSecretArgs

func ThanosRulerSpecWebTlsConfigCertSecretPtr(v *ThanosRulerSpecWebTlsConfigCertSecretArgs) ThanosRulerSpecWebTlsConfigCertSecretPtrInput {
	return (*thanosRulerSpecWebTlsConfigCertSecretPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigCertSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertSecret)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigCertSecretPtrType) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigCertSecretPtrType) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertSecretPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertSecretOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecret)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertSecretOutput) ToThanosRulerSpecWebTlsConfigCertSecretOutput() ThanosRulerSpecWebTlsConfigCertSecretOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretOutput) ToThanosRulerSpecWebTlsConfigCertSecretOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretOutput) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigCertSecretOutput) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigCertSecret) *ThanosRulerSpecWebTlsConfigCertSecret {
		return &v
	}).(ThanosRulerSpecWebTlsConfigCertSecretPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigCertSecretOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertSecret) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigCertSecretPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertSecret)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPtrOutput) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPtrOutput) ToThanosRulerSpecWebTlsConfigCertSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPtrOutput) Elem() ThanosRulerSpecWebTlsConfigCertSecretOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecret) ThanosRulerSpecWebTlsConfigCertSecret {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigCertSecret
		return ret
	}).(ThanosRulerSpecWebTlsConfigCertSecretOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigCertSecretPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecret) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertSecretPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigCertSecretPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertSecretPatchArgs and ThanosRulerSpecWebTlsConfigCertSecretPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertSecretPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigCertSecretPatchArgs{...}
type ThanosRulerSpecWebTlsConfigCertSecretPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertSecretPatchOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchOutput
	ToThanosRulerSpecWebTlsConfigCertSecretPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchOutput
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertSecretPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigCertSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecretPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigCertSecretPatchArgs) ToThanosRulerSpecWebTlsConfigCertSecretPatchOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertSecretPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertSecretPatchArgs) ToThanosRulerSpecWebTlsConfigCertSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertSecretPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigCertSecretPatchArgs) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigCertSecretPatchArgs) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertSecretPatchOutput).ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigCertSecretPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigCertSecretPatchArgs, ThanosRulerSpecWebTlsConfigCertSecretPatchPtr and ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigCertSecretPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigCertSecretPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigCertSecretPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigCertSecretPatchPtrType ThanosRulerSpecWebTlsConfigCertSecretPatchArgs

func ThanosRulerSpecWebTlsConfigCertSecretPatchPtr(v *ThanosRulerSpecWebTlsConfigCertSecretPatchArgs) ThanosRulerSpecWebTlsConfigCertSecretPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigCertSecretPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigCertSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertSecretPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigCertSecretPatchPtrType) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigCertSecretPatchPtrType) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigCertSecretPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) ToThanosRulerSpecWebTlsConfigCertSecretPatchOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) ToThanosRulerSpecWebTlsConfigCertSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigCertSecretPatch) *ThanosRulerSpecWebTlsConfigCertSecretPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertSecretPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertSecretPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertSecretPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigCertSecretPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigCertSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput) ToThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigCertSecretPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecretPatch) ThanosRulerSpecWebTlsConfigCertSecretPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigCertSecretPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigCertSecretPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigCertSecretPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Contains the CA certificate for client certificate authentication to the server.
type ThanosRulerSpecWebTlsConfigClientCa struct {
	ConfigMap *ThanosRulerSpecWebTlsConfigClientCaConfigMap `pulumi:"configMap"`
	Secret    *ThanosRulerSpecWebTlsConfigClientCaSecret    `pulumi:"secret"`
}

// ThanosRulerSpecWebTlsConfigClientCaInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaArgs and ThanosRulerSpecWebTlsConfigClientCaOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaInput` via:
//
//	ThanosRulerSpecWebTlsConfigClientCaArgs{...}
type ThanosRulerSpecWebTlsConfigClientCaInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaOutput() ThanosRulerSpecWebTlsConfigClientCaOutput
	ToThanosRulerSpecWebTlsConfigClientCaOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaOutput
}

// Contains the CA certificate for client certificate authentication to the server.
type ThanosRulerSpecWebTlsConfigClientCaArgs struct {
	ConfigMap ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrInput `pulumi:"configMap"`
	Secret    ThanosRulerSpecWebTlsConfigClientCaSecretPtrInput    `pulumi:"secret"`
}

func (ThanosRulerSpecWebTlsConfigClientCaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCa)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigClientCaArgs) ToThanosRulerSpecWebTlsConfigClientCaOutput() ThanosRulerSpecWebTlsConfigClientCaOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaArgs) ToThanosRulerSpecWebTlsConfigClientCaOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaOutput)
}

func (i ThanosRulerSpecWebTlsConfigClientCaArgs) ToThanosRulerSpecWebTlsConfigClientCaPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaArgs) ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaOutput).ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigClientCaPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaArgs, ThanosRulerSpecWebTlsConfigClientCaPtr and ThanosRulerSpecWebTlsConfigClientCaPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigClientCaArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigClientCaPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPtrOutput
	ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaPtrOutput
}

type thanosRulerSpecWebTlsConfigClientCaPtrType ThanosRulerSpecWebTlsConfigClientCaArgs

func ThanosRulerSpecWebTlsConfigClientCaPtr(v *ThanosRulerSpecWebTlsConfigClientCaArgs) ThanosRulerSpecWebTlsConfigClientCaPtrInput {
	return (*thanosRulerSpecWebTlsConfigClientCaPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigClientCaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCa)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigClientCaPtrType) ToThanosRulerSpecWebTlsConfigClientCaPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigClientCaPtrType) ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaPtrOutput)
}

// Contains the CA certificate for client certificate authentication to the server.
type ThanosRulerSpecWebTlsConfigClientCaOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCa)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaOutput) ToThanosRulerSpecWebTlsConfigClientCaOutput() ThanosRulerSpecWebTlsConfigClientCaOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaOutput) ToThanosRulerSpecWebTlsConfigClientCaOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaOutput) ToThanosRulerSpecWebTlsConfigClientCaPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigClientCaOutput) ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigClientCa) *ThanosRulerSpecWebTlsConfigClientCa {
		return &v
	}).(ThanosRulerSpecWebTlsConfigClientCaPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaOutput) ConfigMap() ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCa) *ThanosRulerSpecWebTlsConfigClientCaConfigMap {
		return v.ConfigMap
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaOutput) Secret() ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCa) *ThanosRulerSpecWebTlsConfigClientCaSecret {
		return v.Secret
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput)
}

type ThanosRulerSpecWebTlsConfigClientCaPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCa)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaPtrOutput) Elem() ThanosRulerSpecWebTlsConfigClientCaOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCa) ThanosRulerSpecWebTlsConfigClientCa {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigClientCa
		return ret
	}).(ThanosRulerSpecWebTlsConfigClientCaOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaPtrOutput) ConfigMap() ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCa) *ThanosRulerSpecWebTlsConfigClientCaConfigMap {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaPtrOutput) Secret() ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCa) *ThanosRulerSpecWebTlsConfigClientCaSecret {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaConfigMap struct {
	// The key to select.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigClientCaConfigMapInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaConfigMap and ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaConfigMapInput` via:
//
//	ThanosRulerSpecWebTlsConfigClientCaConfigMap{ "key": ThanosRulerSpecWebTlsConfigClientCaConfigArgs{...} }
type ThanosRulerSpecWebTlsConfigClientCaConfigMapInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaConfigMapOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput
	ToThanosRulerSpecWebTlsConfigClientCaConfigMapOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs struct {
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMap)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaConfigMapOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput)
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput).ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs, ThanosRulerSpecWebTlsConfigClientCaConfigMapPtr and ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput
	ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput
}

type thanosRulerSpecWebTlsConfigClientCaConfigMapPtrType ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs

func ThanosRulerSpecWebTlsConfigClientCaConfigMapPtr(v *ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs) ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrInput {
	return (*thanosRulerSpecWebTlsConfigClientCaConfigMapPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigClientCaConfigMapPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaConfigMap)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigClientCaConfigMapPtrType) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigClientCaConfigMapPtrType) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigClientCaConfigMap) *ThanosRulerSpecWebTlsConfigClientCaConfigMap {
		return &v
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaConfigMap) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaConfigMap) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaConfigMap) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaConfigMap)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput) Elem() ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMap) ThanosRulerSpecWebTlsConfigClientCaConfigMap {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigClientCaConfigMap
		return ret
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMap) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMap) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch struct {
	// The key to select.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs and ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs{...}
type ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput
	ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs struct {
	// The key to select.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the ConfigMap or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput).ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs, ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtr and ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrType ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs

func ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtr(v *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrType) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrType) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput)
}

// ConfigMap containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput)
}

// The key to select.
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the ConfigMap or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Contains the CA certificate for client certificate authentication to the server.
type ThanosRulerSpecWebTlsConfigClientCaPatch struct {
	ConfigMap *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch `pulumi:"configMap"`
	Secret    *ThanosRulerSpecWebTlsConfigClientCaSecretPatch    `pulumi:"secret"`
}

// ThanosRulerSpecWebTlsConfigClientCaPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaPatchArgs and ThanosRulerSpecWebTlsConfigClientCaPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigClientCaPatchArgs{...}
type ThanosRulerSpecWebTlsConfigClientCaPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaPatchOutput() ThanosRulerSpecWebTlsConfigClientCaPatchOutput
	ToThanosRulerSpecWebTlsConfigClientCaPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchOutput
}

// Contains the CA certificate for client certificate authentication to the server.
type ThanosRulerSpecWebTlsConfigClientCaPatchArgs struct {
	ConfigMap ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrInput `pulumi:"configMap"`
	Secret    ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrInput    `pulumi:"secret"`
}

func (ThanosRulerSpecWebTlsConfigClientCaPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigClientCaPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaPatchOutput() ThanosRulerSpecWebTlsConfigClientCaPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigClientCaPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaPatchOutput).ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigClientCaPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaPatchArgs, ThanosRulerSpecWebTlsConfigClientCaPatchPtr and ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigClientCaPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigClientCaPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigClientCaPatchPtrType ThanosRulerSpecWebTlsConfigClientCaPatchArgs

func ThanosRulerSpecWebTlsConfigClientCaPatchPtr(v *ThanosRulerSpecWebTlsConfigClientCaPatchArgs) ThanosRulerSpecWebTlsConfigClientCaPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigClientCaPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigClientCaPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigClientCaPatchPtrType) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigClientCaPatchPtrType) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput)
}

// Contains the CA certificate for client certificate authentication to the server.
type ThanosRulerSpecWebTlsConfigClientCaPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaPatchOutput() ThanosRulerSpecWebTlsConfigClientCaPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigClientCaPatch) *ThanosRulerSpecWebTlsConfigClientCaPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchOutput) ConfigMap() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaPatch) *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch {
		return v.ConfigMap
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchOutput) Secret() ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaPatch) *ThanosRulerSpecWebTlsConfigClientCaSecretPatch {
		return v.Secret
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput)
}

type ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigClientCaPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaPatch) ThanosRulerSpecWebTlsConfigClientCaPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigClientCaPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigClientCaPatchOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput) ConfigMap() ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaPatch) *ThanosRulerSpecWebTlsConfigClientCaConfigMapPatch {
		if v == nil {
			return nil
		}
		return v.ConfigMap
	}).(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput) Secret() ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaPatch) *ThanosRulerSpecWebTlsConfigClientCaSecretPatch {
		if v == nil {
			return nil
		}
		return v.Secret
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaSecret struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigClientCaSecretInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaSecretArgs and ThanosRulerSpecWebTlsConfigClientCaSecretOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaSecretInput` via:
//
//	ThanosRulerSpecWebTlsConfigClientCaSecretArgs{...}
type ThanosRulerSpecWebTlsConfigClientCaSecretInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaSecretOutput() ThanosRulerSpecWebTlsConfigClientCaSecretOutput
	ToThanosRulerSpecWebTlsConfigClientCaSecretOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretOutput
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaSecretArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigClientCaSecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecret)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretOutput() ThanosRulerSpecWebTlsConfigClientCaSecretOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaSecretOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaSecretOutput)
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaSecretOutput).ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigClientCaSecretPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaSecretArgs, ThanosRulerSpecWebTlsConfigClientCaSecretPtr and ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaSecretPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigClientCaSecretArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigClientCaSecretPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput
	ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput
}

type thanosRulerSpecWebTlsConfigClientCaSecretPtrType ThanosRulerSpecWebTlsConfigClientCaSecretArgs

func ThanosRulerSpecWebTlsConfigClientCaSecretPtr(v *ThanosRulerSpecWebTlsConfigClientCaSecretArgs) ThanosRulerSpecWebTlsConfigClientCaSecretPtrInput {
	return (*thanosRulerSpecWebTlsConfigClientCaSecretPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigClientCaSecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaSecret)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigClientCaSecretPtrType) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigClientCaSecretPtrType) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaSecretOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaSecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecret)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretOutput() ThanosRulerSpecWebTlsConfigClientCaSecretOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigClientCaSecret) *ThanosRulerSpecWebTlsConfigClientCaSecret {
		return &v
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigClientCaSecretOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaSecret) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaSecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaSecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaSecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaSecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaSecret)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput) Elem() ThanosRulerSpecWebTlsConfigClientCaSecretOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecret) ThanosRulerSpecWebTlsConfigClientCaSecret {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigClientCaSecret
		return ret
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecret) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaSecretPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigClientCaSecretPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs and ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaSecretPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs{...}
type ThanosRulerSpecWebTlsConfigClientCaSecretPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput
	ToThanosRulerSpecWebTlsConfigClientCaSecretPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecretPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaSecretPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput).ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs, ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtr and ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigClientCaSecretPatchPtrType ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs

func ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtr(v *ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs) ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigClientCaSecretPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigClientCaSecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaSecretPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigClientCaSecretPatchPtrType) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigClientCaSecretPatchPtrType) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput)
}

// Secret containing data to use for the targets.
type ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigClientCaSecretPatch) *ThanosRulerSpecWebTlsConfigClientCaSecretPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaSecretPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaSecretPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigClientCaSecretPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigClientCaSecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput) ToThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecretPatch) ThanosRulerSpecWebTlsConfigClientCaSecretPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigClientCaSecretPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigClientCaSecretPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Secret containing the TLS key for the server.
type ThanosRulerSpecWebTlsConfigKeySecret struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigKeySecretInput is an input type that accepts ThanosRulerSpecWebTlsConfigKeySecretArgs and ThanosRulerSpecWebTlsConfigKeySecretOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigKeySecretInput` via:
//
//	ThanosRulerSpecWebTlsConfigKeySecretArgs{...}
type ThanosRulerSpecWebTlsConfigKeySecretInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigKeySecretOutput() ThanosRulerSpecWebTlsConfigKeySecretOutput
	ToThanosRulerSpecWebTlsConfigKeySecretOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigKeySecretOutput
}

// Secret containing the TLS key for the server.
type ThanosRulerSpecWebTlsConfigKeySecretArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigKeySecretArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecret)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigKeySecretArgs) ToThanosRulerSpecWebTlsConfigKeySecretOutput() ThanosRulerSpecWebTlsConfigKeySecretOutput {
	return i.ToThanosRulerSpecWebTlsConfigKeySecretOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigKeySecretArgs) ToThanosRulerSpecWebTlsConfigKeySecretOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigKeySecretOutput)
}

func (i ThanosRulerSpecWebTlsConfigKeySecretArgs) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigKeySecretArgs) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigKeySecretOutput).ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigKeySecretPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigKeySecretArgs, ThanosRulerSpecWebTlsConfigKeySecretPtr and ThanosRulerSpecWebTlsConfigKeySecretPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigKeySecretPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigKeySecretArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigKeySecretPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigKeySecretPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPtrOutput
	ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigKeySecretPtrOutput
}

type thanosRulerSpecWebTlsConfigKeySecretPtrType ThanosRulerSpecWebTlsConfigKeySecretArgs

func ThanosRulerSpecWebTlsConfigKeySecretPtr(v *ThanosRulerSpecWebTlsConfigKeySecretArgs) ThanosRulerSpecWebTlsConfigKeySecretPtrInput {
	return (*thanosRulerSpecWebTlsConfigKeySecretPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigKeySecretPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigKeySecret)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigKeySecretPtrType) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigKeySecretPtrType) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigKeySecretPtrOutput)
}

// Secret containing the TLS key for the server.
type ThanosRulerSpecWebTlsConfigKeySecretOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigKeySecretOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecret)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigKeySecretOutput) ToThanosRulerSpecWebTlsConfigKeySecretOutput() ThanosRulerSpecWebTlsConfigKeySecretOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretOutput) ToThanosRulerSpecWebTlsConfigKeySecretOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretOutput) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigKeySecretOutput) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigKeySecret) *ThanosRulerSpecWebTlsConfigKeySecret {
		return &v
	}).(ThanosRulerSpecWebTlsConfigKeySecretPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigKeySecretOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigKeySecret) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigKeySecretOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigKeySecret) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigKeySecretOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigKeySecret) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigKeySecretPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigKeySecretPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigKeySecret)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPtrOutput) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPtrOutput) ToThanosRulerSpecWebTlsConfigKeySecretPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPtrOutput) Elem() ThanosRulerSpecWebTlsConfigKeySecretOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecret) ThanosRulerSpecWebTlsConfigKeySecret {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigKeySecret
		return ret
	}).(ThanosRulerSpecWebTlsConfigKeySecretOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigKeySecretPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecret) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigKeySecretPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecret) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigKeySecretPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecret) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Secret containing the TLS key for the server.
type ThanosRulerSpecWebTlsConfigKeySecretPatch struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key *string `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name *string `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional *bool `pulumi:"optional"`
}

// ThanosRulerSpecWebTlsConfigKeySecretPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigKeySecretPatchArgs and ThanosRulerSpecWebTlsConfigKeySecretPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigKeySecretPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigKeySecretPatchArgs{...}
type ThanosRulerSpecWebTlsConfigKeySecretPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigKeySecretPatchOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchOutput
	ToThanosRulerSpecWebTlsConfigKeySecretPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchOutput
}

// Secret containing the TLS key for the server.
type ThanosRulerSpecWebTlsConfigKeySecretPatchArgs struct {
	// The key of the secret to select from.  Must be a valid secret key.
	Key pulumi.StringPtrInput `pulumi:"key"`
	// Name of the referent.
	// This field is effectively required, but due to backwards compatibility is
	// allowed to be empty. Instances of this type with an empty value here are
	// almost certainly wrong.
	// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
	Name pulumi.StringPtrInput `pulumi:"name"`
	// Specify whether the Secret or its key must be defined
	Optional pulumi.BoolPtrInput `pulumi:"optional"`
}

func (ThanosRulerSpecWebTlsConfigKeySecretPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecretPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigKeySecretPatchArgs) ToThanosRulerSpecWebTlsConfigKeySecretPatchOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigKeySecretPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigKeySecretPatchArgs) ToThanosRulerSpecWebTlsConfigKeySecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigKeySecretPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigKeySecretPatchArgs) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigKeySecretPatchArgs) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigKeySecretPatchOutput).ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigKeySecretPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigKeySecretPatchArgs, ThanosRulerSpecWebTlsConfigKeySecretPatchPtr and ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigKeySecretPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigKeySecretPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigKeySecretPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigKeySecretPatchPtrType ThanosRulerSpecWebTlsConfigKeySecretPatchArgs

func ThanosRulerSpecWebTlsConfigKeySecretPatchPtr(v *ThanosRulerSpecWebTlsConfigKeySecretPatchArgs) ThanosRulerSpecWebTlsConfigKeySecretPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigKeySecretPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigKeySecretPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigKeySecretPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigKeySecretPatchPtrType) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigKeySecretPatchPtrType) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput)
}

// Secret containing the TLS key for the server.
type ThanosRulerSpecWebTlsConfigKeySecretPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) ToThanosRulerSpecWebTlsConfigKeySecretPatchOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) ToThanosRulerSpecWebTlsConfigKeySecretPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigKeySecretPatch) *ThanosRulerSpecWebTlsConfigKeySecretPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigKeySecretPatch) *string { return v.Key }).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigKeySecretPatch) *string { return v.Name }).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigKeySecretPatchOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigKeySecretPatch) *bool { return v.Optional }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigKeySecretPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput() ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput) ToThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigKeySecretPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecretPatch) ThanosRulerSpecWebTlsConfigKeySecretPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigKeySecretPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigKeySecretPatchOutput)
}

// The key of the secret to select from.  Must be a valid secret key.
func (o ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput) Key() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Key
	}).(pulumi.StringPtrOutput)
}

// Name of the referent.
// This field is effectively required, but due to backwards compatibility is
// allowed to be empty. Instances of this type with an empty value here are
// almost certainly wrong.
// More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
func (o ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecretPatch) *string {
		if v == nil {
			return nil
		}
		return v.Name
	}).(pulumi.StringPtrOutput)
}

// Specify whether the Secret or its key must be defined
func (o ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput) Optional() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigKeySecretPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Optional
	}).(pulumi.BoolPtrOutput)
}

// Defines the TLS parameters for HTTPS.
type ThanosRulerSpecWebTlsConfigPatch struct {
	Cert *ThanosRulerSpecWebTlsConfigCertPatch `pulumi:"cert"`
	// Path to the TLS certificate file in the Prometheus container for the server.
	// Mutually exclusive with `cert`.
	CertFile *string `pulumi:"certFile"`
	// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
	// Go default cipher suites are used. Available cipher suites are documented
	// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
	CipherSuites []string `pulumi:"cipherSuites"`
	// Server policy for client authentication. Maps to ClientAuth Policies.
	// For more detail on clientAuth options:
	// https://golang.org/pkg/crypto/tls/#ClientAuthType
	ClientAuthType *string `pulumi:"clientAuthType"`
	// Path to the CA certificate file for client certificate authentication to the server.
	// Mutually exclusive with `client_ca`.
	ClientCAFile *string                                   `pulumi:"clientCAFile"`
	Client_ca    *ThanosRulerSpecWebTlsConfigClientCaPatch `pulumi:"client_ca"`
	// Elliptic curves that will be used in an ECDHE handshake, in preference
	// order. Available curves are documented in the go documentation:
	// https://golang.org/pkg/crypto/tls/#CurveID
	CurvePreferences []string `pulumi:"curvePreferences"`
	// Path to the TLS key file in the Prometheus container for the server.
	// Mutually exclusive with `keySecret`.
	KeyFile   *string                                    `pulumi:"keyFile"`
	KeySecret *ThanosRulerSpecWebTlsConfigKeySecretPatch `pulumi:"keySecret"`
	// Maximum TLS version that is acceptable. Defaults to TLS13.
	MaxVersion *string `pulumi:"maxVersion"`
	// Minimum TLS version that is acceptable. Defaults to TLS12.
	MinVersion *string `pulumi:"minVersion"`
	// Controls whether the server selects the
	// client's most preferred cipher suite, or the server's most preferred
	// cipher suite. If true then the server's preference, as expressed in
	// the order of elements in cipherSuites, is used.
	PreferServerCipherSuites *bool `pulumi:"preferServerCipherSuites"`
}

// ThanosRulerSpecWebTlsConfigPatchInput is an input type that accepts ThanosRulerSpecWebTlsConfigPatchArgs and ThanosRulerSpecWebTlsConfigPatchOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigPatchInput` via:
//
//	ThanosRulerSpecWebTlsConfigPatchArgs{...}
type ThanosRulerSpecWebTlsConfigPatchInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigPatchOutput() ThanosRulerSpecWebTlsConfigPatchOutput
	ToThanosRulerSpecWebTlsConfigPatchOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigPatchOutput
}

// Defines the TLS parameters for HTTPS.
type ThanosRulerSpecWebTlsConfigPatchArgs struct {
	Cert ThanosRulerSpecWebTlsConfigCertPatchPtrInput `pulumi:"cert"`
	// Path to the TLS certificate file in the Prometheus container for the server.
	// Mutually exclusive with `cert`.
	CertFile pulumi.StringPtrInput `pulumi:"certFile"`
	// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
	// Go default cipher suites are used. Available cipher suites are documented
	// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
	CipherSuites pulumi.StringArrayInput `pulumi:"cipherSuites"`
	// Server policy for client authentication. Maps to ClientAuth Policies.
	// For more detail on clientAuth options:
	// https://golang.org/pkg/crypto/tls/#ClientAuthType
	ClientAuthType pulumi.StringPtrInput `pulumi:"clientAuthType"`
	// Path to the CA certificate file for client certificate authentication to the server.
	// Mutually exclusive with `client_ca`.
	ClientCAFile pulumi.StringPtrInput                            `pulumi:"clientCAFile"`
	Client_ca    ThanosRulerSpecWebTlsConfigClientCaPatchPtrInput `pulumi:"client_ca"`
	// Elliptic curves that will be used in an ECDHE handshake, in preference
	// order. Available curves are documented in the go documentation:
	// https://golang.org/pkg/crypto/tls/#CurveID
	CurvePreferences pulumi.StringArrayInput `pulumi:"curvePreferences"`
	// Path to the TLS key file in the Prometheus container for the server.
	// Mutually exclusive with `keySecret`.
	KeyFile   pulumi.StringPtrInput                             `pulumi:"keyFile"`
	KeySecret ThanosRulerSpecWebTlsConfigKeySecretPatchPtrInput `pulumi:"keySecret"`
	// Maximum TLS version that is acceptable. Defaults to TLS13.
	MaxVersion pulumi.StringPtrInput `pulumi:"maxVersion"`
	// Minimum TLS version that is acceptable. Defaults to TLS12.
	MinVersion pulumi.StringPtrInput `pulumi:"minVersion"`
	// Controls whether the server selects the
	// client's most preferred cipher suite, or the server's most preferred
	// cipher suite. If true then the server's preference, as expressed in
	// the order of elements in cipherSuites, is used.
	PreferServerCipherSuites pulumi.BoolPtrInput `pulumi:"preferServerCipherSuites"`
}

func (ThanosRulerSpecWebTlsConfigPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigPatch)(nil)).Elem()
}

func (i ThanosRulerSpecWebTlsConfigPatchArgs) ToThanosRulerSpecWebTlsConfigPatchOutput() ThanosRulerSpecWebTlsConfigPatchOutput {
	return i.ToThanosRulerSpecWebTlsConfigPatchOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigPatchArgs) ToThanosRulerSpecWebTlsConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigPatchOutput)
}

func (i ThanosRulerSpecWebTlsConfigPatchArgs) ToThanosRulerSpecWebTlsConfigPatchPtrOutput() ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerSpecWebTlsConfigPatchArgs) ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigPatchOutput).ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(ctx)
}

// ThanosRulerSpecWebTlsConfigPatchPtrInput is an input type that accepts ThanosRulerSpecWebTlsConfigPatchArgs, ThanosRulerSpecWebTlsConfigPatchPtr and ThanosRulerSpecWebTlsConfigPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerSpecWebTlsConfigPatchPtrInput` via:
//
//	        ThanosRulerSpecWebTlsConfigPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerSpecWebTlsConfigPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerSpecWebTlsConfigPatchPtrOutput() ThanosRulerSpecWebTlsConfigPatchPtrOutput
	ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(context.Context) ThanosRulerSpecWebTlsConfigPatchPtrOutput
}

type thanosRulerSpecWebTlsConfigPatchPtrType ThanosRulerSpecWebTlsConfigPatchArgs

func ThanosRulerSpecWebTlsConfigPatchPtr(v *ThanosRulerSpecWebTlsConfigPatchArgs) ThanosRulerSpecWebTlsConfigPatchPtrInput {
	return (*thanosRulerSpecWebTlsConfigPatchPtrType)(v)
}

func (*thanosRulerSpecWebTlsConfigPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigPatch)(nil)).Elem()
}

func (i *thanosRulerSpecWebTlsConfigPatchPtrType) ToThanosRulerSpecWebTlsConfigPatchPtrOutput() ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return i.ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerSpecWebTlsConfigPatchPtrType) ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerSpecWebTlsConfigPatchPtrOutput)
}

// Defines the TLS parameters for HTTPS.
type ThanosRulerSpecWebTlsConfigPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerSpecWebTlsConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigPatchOutput) ToThanosRulerSpecWebTlsConfigPatchOutput() ThanosRulerSpecWebTlsConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigPatchOutput) ToThanosRulerSpecWebTlsConfigPatchOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPatchOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigPatchOutput) ToThanosRulerSpecWebTlsConfigPatchPtrOutput() ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return o.ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerSpecWebTlsConfigPatchOutput) ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerSpecWebTlsConfigPatch) *ThanosRulerSpecWebTlsConfigPatch {
		return &v
	}).(ThanosRulerSpecWebTlsConfigPatchPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigPatchOutput) Cert() ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *ThanosRulerSpecWebTlsConfigCertPatch { return v.Cert }).(ThanosRulerSpecWebTlsConfigCertPatchPtrOutput)
}

// Path to the TLS certificate file in the Prometheus container for the server.
// Mutually exclusive with `cert`.
func (o ThanosRulerSpecWebTlsConfigPatchOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *string { return v.CertFile }).(pulumi.StringPtrOutput)
}

// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
// Go default cipher suites are used. Available cipher suites are documented
// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
func (o ThanosRulerSpecWebTlsConfigPatchOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) []string { return v.CipherSuites }).(pulumi.StringArrayOutput)
}

// Server policy for client authentication. Maps to ClientAuth Policies.
// For more detail on clientAuth options:
// https://golang.org/pkg/crypto/tls/#ClientAuthType
func (o ThanosRulerSpecWebTlsConfigPatchOutput) ClientAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *string { return v.ClientAuthType }).(pulumi.StringPtrOutput)
}

// Path to the CA certificate file for client certificate authentication to the server.
// Mutually exclusive with `client_ca`.
func (o ThanosRulerSpecWebTlsConfigPatchOutput) ClientCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *string { return v.ClientCAFile }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigPatchOutput) Client_ca() ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *ThanosRulerSpecWebTlsConfigClientCaPatch { return v.Client_ca }).(ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput)
}

// Elliptic curves that will be used in an ECDHE handshake, in preference
// order. Available curves are documented in the go documentation:
// https://golang.org/pkg/crypto/tls/#CurveID
func (o ThanosRulerSpecWebTlsConfigPatchOutput) CurvePreferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) []string { return v.CurvePreferences }).(pulumi.StringArrayOutput)
}

// Path to the TLS key file in the Prometheus container for the server.
// Mutually exclusive with `keySecret`.
func (o ThanosRulerSpecWebTlsConfigPatchOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *string { return v.KeyFile }).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigPatchOutput) KeySecret() ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *ThanosRulerSpecWebTlsConfigKeySecretPatch {
		return v.KeySecret
	}).(ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput)
}

// Maximum TLS version that is acceptable. Defaults to TLS13.
func (o ThanosRulerSpecWebTlsConfigPatchOutput) MaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *string { return v.MaxVersion }).(pulumi.StringPtrOutput)
}

// Minimum TLS version that is acceptable. Defaults to TLS12.
func (o ThanosRulerSpecWebTlsConfigPatchOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *string { return v.MinVersion }).(pulumi.StringPtrOutput)
}

// Controls whether the server selects the
// client's most preferred cipher suite, or the server's most preferred
// cipher suite. If true then the server's preference, as expressed in
// the order of elements in cipherSuites, is used.
func (o ThanosRulerSpecWebTlsConfigPatchOutput) PreferServerCipherSuites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerSpecWebTlsConfigPatch) *bool { return v.PreferServerCipherSuites }).(pulumi.BoolPtrOutput)
}

type ThanosRulerSpecWebTlsConfigPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerSpecWebTlsConfigPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerSpecWebTlsConfigPatch)(nil)).Elem()
}

func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) ToThanosRulerSpecWebTlsConfigPatchPtrOutput() ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) ToThanosRulerSpecWebTlsConfigPatchPtrOutputWithContext(ctx context.Context) ThanosRulerSpecWebTlsConfigPatchPtrOutput {
	return o
}

func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) Elem() ThanosRulerSpecWebTlsConfigPatchOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) ThanosRulerSpecWebTlsConfigPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerSpecWebTlsConfigPatch
		return ret
	}).(ThanosRulerSpecWebTlsConfigPatchOutput)
}

func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) Cert() ThanosRulerSpecWebTlsConfigCertPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *ThanosRulerSpecWebTlsConfigCertPatch {
		if v == nil {
			return nil
		}
		return v.Cert
	}).(ThanosRulerSpecWebTlsConfigCertPatchPtrOutput)
}

// Path to the TLS certificate file in the Prometheus container for the server.
// Mutually exclusive with `cert`.
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) CertFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.CertFile
	}).(pulumi.StringPtrOutput)
}

// List of supported cipher suites for TLS versions up to TLS 1.2. If empty,
// Go default cipher suites are used. Available cipher suites are documented
// in the go documentation: https://golang.org/pkg/crypto/tls/#pkg-constants
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) CipherSuites() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) []string {
		if v == nil {
			return nil
		}
		return v.CipherSuites
	}).(pulumi.StringArrayOutput)
}

// Server policy for client authentication. Maps to ClientAuth Policies.
// For more detail on clientAuth options:
// https://golang.org/pkg/crypto/tls/#ClientAuthType
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) ClientAuthType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClientAuthType
	}).(pulumi.StringPtrOutput)
}

// Path to the CA certificate file for client certificate authentication to the server.
// Mutually exclusive with `client_ca`.
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) ClientCAFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.ClientCAFile
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) Client_ca() ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *ThanosRulerSpecWebTlsConfigClientCaPatch {
		if v == nil {
			return nil
		}
		return v.Client_ca
	}).(ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput)
}

// Elliptic curves that will be used in an ECDHE handshake, in preference
// order. Available curves are documented in the go documentation:
// https://golang.org/pkg/crypto/tls/#CurveID
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) CurvePreferences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) []string {
		if v == nil {
			return nil
		}
		return v.CurvePreferences
	}).(pulumi.StringArrayOutput)
}

// Path to the TLS key file in the Prometheus container for the server.
// Mutually exclusive with `keySecret`.
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) KeyFile() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.KeyFile
	}).(pulumi.StringPtrOutput)
}

func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) KeySecret() ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *ThanosRulerSpecWebTlsConfigKeySecretPatch {
		if v == nil {
			return nil
		}
		return v.KeySecret
	}).(ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput)
}

// Maximum TLS version that is acceptable. Defaults to TLS13.
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) MaxVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.MaxVersion
	}).(pulumi.StringPtrOutput)
}

// Minimum TLS version that is acceptable. Defaults to TLS12.
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) MinVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *string {
		if v == nil {
			return nil
		}
		return v.MinVersion
	}).(pulumi.StringPtrOutput)
}

// Controls whether the server selects the
// client's most preferred cipher suite, or the server's most preferred
// cipher suite. If true then the server's preference, as expressed in
// the order of elements in cipherSuites, is used.
func (o ThanosRulerSpecWebTlsConfigPatchPtrOutput) PreferServerCipherSuites() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerSpecWebTlsConfigPatch) *bool {
		if v == nil {
			return nil
		}
		return v.PreferServerCipherSuites
	}).(pulumi.BoolPtrOutput)
}

// Most recent observed status of the ThanosRuler cluster. Read-only.
// More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerStatus struct {
	// Total number of available pods (ready for at least minReadySeconds)
	// targeted by this ThanosRuler deployment.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// The current state of the ThanosRuler object.
	Conditions []ThanosRulerStatusConditions `pulumi:"conditions"`
	// Represents whether any actions on the underlying managed objects are
	// being performed. Only delete actions will be performed.
	Paused *bool `pulumi:"paused"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// (their labels match the selector).
	Replicas *int `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this ThanosRuler deployment.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// that have the desired version spec.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// ThanosRulerStatusInput is an input type that accepts ThanosRulerStatusArgs and ThanosRulerStatusOutput values.
// You can construct a concrete instance of `ThanosRulerStatusInput` via:
//
//	ThanosRulerStatusArgs{...}
type ThanosRulerStatusInput interface {
	pulumi.Input

	ToThanosRulerStatusOutput() ThanosRulerStatusOutput
	ToThanosRulerStatusOutputWithContext(context.Context) ThanosRulerStatusOutput
}

// Most recent observed status of the ThanosRuler cluster. Read-only.
// More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerStatusArgs struct {
	// Total number of available pods (ready for at least minReadySeconds)
	// targeted by this ThanosRuler deployment.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// The current state of the ThanosRuler object.
	Conditions ThanosRulerStatusConditionsArrayInput `pulumi:"conditions"`
	// Represents whether any actions on the underlying managed objects are
	// being performed. Only delete actions will be performed.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// (their labels match the selector).
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this ThanosRuler deployment.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// that have the desired version spec.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (ThanosRulerStatusArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatus)(nil)).Elem()
}

func (i ThanosRulerStatusArgs) ToThanosRulerStatusOutput() ThanosRulerStatusOutput {
	return i.ToThanosRulerStatusOutputWithContext(context.Background())
}

func (i ThanosRulerStatusArgs) ToThanosRulerStatusOutputWithContext(ctx context.Context) ThanosRulerStatusOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusOutput)
}

func (i ThanosRulerStatusArgs) ToThanosRulerStatusPtrOutput() ThanosRulerStatusPtrOutput {
	return i.ToThanosRulerStatusPtrOutputWithContext(context.Background())
}

func (i ThanosRulerStatusArgs) ToThanosRulerStatusPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusOutput).ToThanosRulerStatusPtrOutputWithContext(ctx)
}

// ThanosRulerStatusPtrInput is an input type that accepts ThanosRulerStatusArgs, ThanosRulerStatusPtr and ThanosRulerStatusPtrOutput values.
// You can construct a concrete instance of `ThanosRulerStatusPtrInput` via:
//
//	        ThanosRulerStatusArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerStatusPtrInput interface {
	pulumi.Input

	ToThanosRulerStatusPtrOutput() ThanosRulerStatusPtrOutput
	ToThanosRulerStatusPtrOutputWithContext(context.Context) ThanosRulerStatusPtrOutput
}

type thanosRulerStatusPtrType ThanosRulerStatusArgs

func ThanosRulerStatusPtr(v *ThanosRulerStatusArgs) ThanosRulerStatusPtrInput {
	return (*thanosRulerStatusPtrType)(v)
}

func (*thanosRulerStatusPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerStatus)(nil)).Elem()
}

func (i *thanosRulerStatusPtrType) ToThanosRulerStatusPtrOutput() ThanosRulerStatusPtrOutput {
	return i.ToThanosRulerStatusPtrOutputWithContext(context.Background())
}

func (i *thanosRulerStatusPtrType) ToThanosRulerStatusPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusPtrOutput)
}

// Most recent observed status of the ThanosRuler cluster. Read-only.
// More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerStatusOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatus)(nil)).Elem()
}

func (o ThanosRulerStatusOutput) ToThanosRulerStatusOutput() ThanosRulerStatusOutput {
	return o
}

func (o ThanosRulerStatusOutput) ToThanosRulerStatusOutputWithContext(ctx context.Context) ThanosRulerStatusOutput {
	return o
}

func (o ThanosRulerStatusOutput) ToThanosRulerStatusPtrOutput() ThanosRulerStatusPtrOutput {
	return o.ToThanosRulerStatusPtrOutputWithContext(context.Background())
}

func (o ThanosRulerStatusOutput) ToThanosRulerStatusPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerStatus) *ThanosRulerStatus {
		return &v
	}).(ThanosRulerStatusPtrOutput)
}

// Total number of available pods (ready for at least minReadySeconds)
// targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatus) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// The current state of the ThanosRuler object.
func (o ThanosRulerStatusOutput) Conditions() ThanosRulerStatusConditionsArrayOutput {
	return o.ApplyT(func(v ThanosRulerStatus) []ThanosRulerStatusConditions { return v.Conditions }).(ThanosRulerStatusConditionsArrayOutput)
}

// Represents whether any actions on the underlying managed objects are
// being performed. Only delete actions will be performed.
func (o ThanosRulerStatusOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatus) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// (their labels match the selector).
func (o ThanosRulerStatusOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatus) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatus) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// that have the desired version spec.
func (o ThanosRulerStatusOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatus) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type ThanosRulerStatusPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerStatus)(nil)).Elem()
}

func (o ThanosRulerStatusPtrOutput) ToThanosRulerStatusPtrOutput() ThanosRulerStatusPtrOutput {
	return o
}

func (o ThanosRulerStatusPtrOutput) ToThanosRulerStatusPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPtrOutput {
	return o
}

func (o ThanosRulerStatusPtrOutput) Elem() ThanosRulerStatusOutput {
	return o.ApplyT(func(v *ThanosRulerStatus) ThanosRulerStatus {
		if v != nil {
			return *v
		}
		var ret ThanosRulerStatus
		return ret
	}).(ThanosRulerStatusOutput)
}

// Total number of available pods (ready for at least minReadySeconds)
// targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatus) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// The current state of the ThanosRuler object.
func (o ThanosRulerStatusPtrOutput) Conditions() ThanosRulerStatusConditionsArrayOutput {
	return o.ApplyT(func(v *ThanosRulerStatus) []ThanosRulerStatusConditions {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ThanosRulerStatusConditionsArrayOutput)
}

// Represents whether any actions on the underlying managed objects are
// being performed. Only delete actions will be performed.
func (o ThanosRulerStatusPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatus) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// (their labels match the selector).
func (o ThanosRulerStatusPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatus) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatus) *int {
		if v == nil {
			return nil
		}
		return v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// that have the desired version spec.
func (o ThanosRulerStatusPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatus) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

// Condition represents the state of the resources associated with the
// Prometheus, Alertmanager or ThanosRuler resource.
type ThanosRulerStatusConditions struct {
	// lastTransitionTime is the time of the last update to the current status property.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details for the condition's last transition.
	Message *string `pulumi:"message"`
	// ObservedGeneration represents the .metadata.generation that the
	// condition was set based upon. For instance, if `.metadata.generation` is
	// currently 12, but the `.status.conditions[].observedGeneration` is 9, the
	// condition is out of date with respect to the current state of the
	// instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition.
	Status *string `pulumi:"status"`
	// Type of the condition being reported.
	Type *string `pulumi:"type"`
}

// ThanosRulerStatusConditionsInput is an input type that accepts ThanosRulerStatusConditionsArgs and ThanosRulerStatusConditionsOutput values.
// You can construct a concrete instance of `ThanosRulerStatusConditionsInput` via:
//
//	ThanosRulerStatusConditionsArgs{...}
type ThanosRulerStatusConditionsInput interface {
	pulumi.Input

	ToThanosRulerStatusConditionsOutput() ThanosRulerStatusConditionsOutput
	ToThanosRulerStatusConditionsOutputWithContext(context.Context) ThanosRulerStatusConditionsOutput
}

// Condition represents the state of the resources associated with the
// Prometheus, Alertmanager or ThanosRuler resource.
type ThanosRulerStatusConditionsArgs struct {
	// lastTransitionTime is the time of the last update to the current status property.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details for the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// ObservedGeneration represents the .metadata.generation that the
	// condition was set based upon. For instance, if `.metadata.generation` is
	// currently 12, but the `.status.conditions[].observedGeneration` is 9, the
	// condition is out of date with respect to the current state of the
	// instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of the condition being reported.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerStatusConditionsArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatusConditions)(nil)).Elem()
}

func (i ThanosRulerStatusConditionsArgs) ToThanosRulerStatusConditionsOutput() ThanosRulerStatusConditionsOutput {
	return i.ToThanosRulerStatusConditionsOutputWithContext(context.Background())
}

func (i ThanosRulerStatusConditionsArgs) ToThanosRulerStatusConditionsOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusConditionsOutput)
}

// ThanosRulerStatusConditionsArrayInput is an input type that accepts ThanosRulerStatusConditionsArray and ThanosRulerStatusConditionsArrayOutput values.
// You can construct a concrete instance of `ThanosRulerStatusConditionsArrayInput` via:
//
//	ThanosRulerStatusConditionsArray{ ThanosRulerStatusConditionsArgs{...} }
type ThanosRulerStatusConditionsArrayInput interface {
	pulumi.Input

	ToThanosRulerStatusConditionsArrayOutput() ThanosRulerStatusConditionsArrayOutput
	ToThanosRulerStatusConditionsArrayOutputWithContext(context.Context) ThanosRulerStatusConditionsArrayOutput
}

type ThanosRulerStatusConditionsArray []ThanosRulerStatusConditionsInput

func (ThanosRulerStatusConditionsArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerStatusConditions)(nil)).Elem()
}

func (i ThanosRulerStatusConditionsArray) ToThanosRulerStatusConditionsArrayOutput() ThanosRulerStatusConditionsArrayOutput {
	return i.ToThanosRulerStatusConditionsArrayOutputWithContext(context.Background())
}

func (i ThanosRulerStatusConditionsArray) ToThanosRulerStatusConditionsArrayOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusConditionsArrayOutput)
}

// Condition represents the state of the resources associated with the
// Prometheus, Alertmanager or ThanosRuler resource.
type ThanosRulerStatusConditionsOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusConditionsOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatusConditions)(nil)).Elem()
}

func (o ThanosRulerStatusConditionsOutput) ToThanosRulerStatusConditionsOutput() ThanosRulerStatusConditionsOutput {
	return o
}

func (o ThanosRulerStatusConditionsOutput) ToThanosRulerStatusConditionsOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsOutput {
	return o
}

// lastTransitionTime is the time of the last update to the current status property.
func (o ThanosRulerStatusConditionsOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditions) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details for the condition's last transition.
func (o ThanosRulerStatusConditionsOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditions) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ObservedGeneration represents the .metadata.generation that the
// condition was set based upon. For instance, if `.metadata.generation` is
// currently 12, but the `.status.conditions[].observedGeneration` is 9, the
// condition is out of date with respect to the current state of the
// instance.
func (o ThanosRulerStatusConditionsOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditions) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Reason for the condition's last transition.
func (o ThanosRulerStatusConditionsOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditions) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition.
func (o ThanosRulerStatusConditionsOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditions) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of the condition being reported.
func (o ThanosRulerStatusConditionsOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditions) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerStatusConditionsArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusConditionsArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerStatusConditions)(nil)).Elem()
}

func (o ThanosRulerStatusConditionsArrayOutput) ToThanosRulerStatusConditionsArrayOutput() ThanosRulerStatusConditionsArrayOutput {
	return o
}

func (o ThanosRulerStatusConditionsArrayOutput) ToThanosRulerStatusConditionsArrayOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsArrayOutput {
	return o
}

func (o ThanosRulerStatusConditionsArrayOutput) Index(i pulumi.IntInput) ThanosRulerStatusConditionsOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerStatusConditions {
		return vs[0].([]ThanosRulerStatusConditions)[vs[1].(int)]
	}).(ThanosRulerStatusConditionsOutput)
}

// Condition represents the state of the resources associated with the
// Prometheus, Alertmanager or ThanosRuler resource.
type ThanosRulerStatusConditionsPatch struct {
	// lastTransitionTime is the time of the last update to the current status property.
	LastTransitionTime *string `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details for the condition's last transition.
	Message *string `pulumi:"message"`
	// ObservedGeneration represents the .metadata.generation that the
	// condition was set based upon. For instance, if `.metadata.generation` is
	// currently 12, but the `.status.conditions[].observedGeneration` is 9, the
	// condition is out of date with respect to the current state of the
	// instance.
	ObservedGeneration *int `pulumi:"observedGeneration"`
	// Reason for the condition's last transition.
	Reason *string `pulumi:"reason"`
	// Status of the condition.
	Status *string `pulumi:"status"`
	// Type of the condition being reported.
	Type *string `pulumi:"type"`
}

// ThanosRulerStatusConditionsPatchInput is an input type that accepts ThanosRulerStatusConditionsPatchArgs and ThanosRulerStatusConditionsPatchOutput values.
// You can construct a concrete instance of `ThanosRulerStatusConditionsPatchInput` via:
//
//	ThanosRulerStatusConditionsPatchArgs{...}
type ThanosRulerStatusConditionsPatchInput interface {
	pulumi.Input

	ToThanosRulerStatusConditionsPatchOutput() ThanosRulerStatusConditionsPatchOutput
	ToThanosRulerStatusConditionsPatchOutputWithContext(context.Context) ThanosRulerStatusConditionsPatchOutput
}

// Condition represents the state of the resources associated with the
// Prometheus, Alertmanager or ThanosRuler resource.
type ThanosRulerStatusConditionsPatchArgs struct {
	// lastTransitionTime is the time of the last update to the current status property.
	LastTransitionTime pulumi.StringPtrInput `pulumi:"lastTransitionTime"`
	// Human-readable message indicating details for the condition's last transition.
	Message pulumi.StringPtrInput `pulumi:"message"`
	// ObservedGeneration represents the .metadata.generation that the
	// condition was set based upon. For instance, if `.metadata.generation` is
	// currently 12, but the `.status.conditions[].observedGeneration` is 9, the
	// condition is out of date with respect to the current state of the
	// instance.
	ObservedGeneration pulumi.IntPtrInput `pulumi:"observedGeneration"`
	// Reason for the condition's last transition.
	Reason pulumi.StringPtrInput `pulumi:"reason"`
	// Status of the condition.
	Status pulumi.StringPtrInput `pulumi:"status"`
	// Type of the condition being reported.
	Type pulumi.StringPtrInput `pulumi:"type"`
}

func (ThanosRulerStatusConditionsPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatusConditionsPatch)(nil)).Elem()
}

func (i ThanosRulerStatusConditionsPatchArgs) ToThanosRulerStatusConditionsPatchOutput() ThanosRulerStatusConditionsPatchOutput {
	return i.ToThanosRulerStatusConditionsPatchOutputWithContext(context.Background())
}

func (i ThanosRulerStatusConditionsPatchArgs) ToThanosRulerStatusConditionsPatchOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusConditionsPatchOutput)
}

// ThanosRulerStatusConditionsPatchArrayInput is an input type that accepts ThanosRulerStatusConditionsPatchArray and ThanosRulerStatusConditionsPatchArrayOutput values.
// You can construct a concrete instance of `ThanosRulerStatusConditionsPatchArrayInput` via:
//
//	ThanosRulerStatusConditionsPatchArray{ ThanosRulerStatusConditionsPatchArgs{...} }
type ThanosRulerStatusConditionsPatchArrayInput interface {
	pulumi.Input

	ToThanosRulerStatusConditionsPatchArrayOutput() ThanosRulerStatusConditionsPatchArrayOutput
	ToThanosRulerStatusConditionsPatchArrayOutputWithContext(context.Context) ThanosRulerStatusConditionsPatchArrayOutput
}

type ThanosRulerStatusConditionsPatchArray []ThanosRulerStatusConditionsPatchInput

func (ThanosRulerStatusConditionsPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerStatusConditionsPatch)(nil)).Elem()
}

func (i ThanosRulerStatusConditionsPatchArray) ToThanosRulerStatusConditionsPatchArrayOutput() ThanosRulerStatusConditionsPatchArrayOutput {
	return i.ToThanosRulerStatusConditionsPatchArrayOutputWithContext(context.Background())
}

func (i ThanosRulerStatusConditionsPatchArray) ToThanosRulerStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusConditionsPatchArrayOutput)
}

// Condition represents the state of the resources associated with the
// Prometheus, Alertmanager or ThanosRuler resource.
type ThanosRulerStatusConditionsPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusConditionsPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatusConditionsPatch)(nil)).Elem()
}

func (o ThanosRulerStatusConditionsPatchOutput) ToThanosRulerStatusConditionsPatchOutput() ThanosRulerStatusConditionsPatchOutput {
	return o
}

func (o ThanosRulerStatusConditionsPatchOutput) ToThanosRulerStatusConditionsPatchOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsPatchOutput {
	return o
}

// lastTransitionTime is the time of the last update to the current status property.
func (o ThanosRulerStatusConditionsPatchOutput) LastTransitionTime() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditionsPatch) *string { return v.LastTransitionTime }).(pulumi.StringPtrOutput)
}

// Human-readable message indicating details for the condition's last transition.
func (o ThanosRulerStatusConditionsPatchOutput) Message() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditionsPatch) *string { return v.Message }).(pulumi.StringPtrOutput)
}

// ObservedGeneration represents the .metadata.generation that the
// condition was set based upon. For instance, if `.metadata.generation` is
// currently 12, but the `.status.conditions[].observedGeneration` is 9, the
// condition is out of date with respect to the current state of the
// instance.
func (o ThanosRulerStatusConditionsPatchOutput) ObservedGeneration() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditionsPatch) *int { return v.ObservedGeneration }).(pulumi.IntPtrOutput)
}

// Reason for the condition's last transition.
func (o ThanosRulerStatusConditionsPatchOutput) Reason() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditionsPatch) *string { return v.Reason }).(pulumi.StringPtrOutput)
}

// Status of the condition.
func (o ThanosRulerStatusConditionsPatchOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditionsPatch) *string { return v.Status }).(pulumi.StringPtrOutput)
}

// Type of the condition being reported.
func (o ThanosRulerStatusConditionsPatchOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusConditionsPatch) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type ThanosRulerStatusConditionsPatchArrayOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusConditionsPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ThanosRulerStatusConditionsPatch)(nil)).Elem()
}

func (o ThanosRulerStatusConditionsPatchArrayOutput) ToThanosRulerStatusConditionsPatchArrayOutput() ThanosRulerStatusConditionsPatchArrayOutput {
	return o
}

func (o ThanosRulerStatusConditionsPatchArrayOutput) ToThanosRulerStatusConditionsPatchArrayOutputWithContext(ctx context.Context) ThanosRulerStatusConditionsPatchArrayOutput {
	return o
}

func (o ThanosRulerStatusConditionsPatchArrayOutput) Index(i pulumi.IntInput) ThanosRulerStatusConditionsPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ThanosRulerStatusConditionsPatch {
		return vs[0].([]ThanosRulerStatusConditionsPatch)[vs[1].(int)]
	}).(ThanosRulerStatusConditionsPatchOutput)
}

// Most recent observed status of the ThanosRuler cluster. Read-only.
// More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerStatusPatch struct {
	// Total number of available pods (ready for at least minReadySeconds)
	// targeted by this ThanosRuler deployment.
	AvailableReplicas *int `pulumi:"availableReplicas"`
	// The current state of the ThanosRuler object.
	Conditions []ThanosRulerStatusConditionsPatch `pulumi:"conditions"`
	// Represents whether any actions on the underlying managed objects are
	// being performed. Only delete actions will be performed.
	Paused *bool `pulumi:"paused"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// (their labels match the selector).
	Replicas *int `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this ThanosRuler deployment.
	UnavailableReplicas *int `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// that have the desired version spec.
	UpdatedReplicas *int `pulumi:"updatedReplicas"`
}

// ThanosRulerStatusPatchInput is an input type that accepts ThanosRulerStatusPatchArgs and ThanosRulerStatusPatchOutput values.
// You can construct a concrete instance of `ThanosRulerStatusPatchInput` via:
//
//	ThanosRulerStatusPatchArgs{...}
type ThanosRulerStatusPatchInput interface {
	pulumi.Input

	ToThanosRulerStatusPatchOutput() ThanosRulerStatusPatchOutput
	ToThanosRulerStatusPatchOutputWithContext(context.Context) ThanosRulerStatusPatchOutput
}

// Most recent observed status of the ThanosRuler cluster. Read-only.
// More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerStatusPatchArgs struct {
	// Total number of available pods (ready for at least minReadySeconds)
	// targeted by this ThanosRuler deployment.
	AvailableReplicas pulumi.IntPtrInput `pulumi:"availableReplicas"`
	// The current state of the ThanosRuler object.
	Conditions ThanosRulerStatusConditionsPatchArrayInput `pulumi:"conditions"`
	// Represents whether any actions on the underlying managed objects are
	// being performed. Only delete actions will be performed.
	Paused pulumi.BoolPtrInput `pulumi:"paused"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// (their labels match the selector).
	Replicas pulumi.IntPtrInput `pulumi:"replicas"`
	// Total number of unavailable pods targeted by this ThanosRuler deployment.
	UnavailableReplicas pulumi.IntPtrInput `pulumi:"unavailableReplicas"`
	// Total number of non-terminated pods targeted by this ThanosRuler deployment
	// that have the desired version spec.
	UpdatedReplicas pulumi.IntPtrInput `pulumi:"updatedReplicas"`
}

func (ThanosRulerStatusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatusPatch)(nil)).Elem()
}

func (i ThanosRulerStatusPatchArgs) ToThanosRulerStatusPatchOutput() ThanosRulerStatusPatchOutput {
	return i.ToThanosRulerStatusPatchOutputWithContext(context.Background())
}

func (i ThanosRulerStatusPatchArgs) ToThanosRulerStatusPatchOutputWithContext(ctx context.Context) ThanosRulerStatusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusPatchOutput)
}

func (i ThanosRulerStatusPatchArgs) ToThanosRulerStatusPatchPtrOutput() ThanosRulerStatusPatchPtrOutput {
	return i.ToThanosRulerStatusPatchPtrOutputWithContext(context.Background())
}

func (i ThanosRulerStatusPatchArgs) ToThanosRulerStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusPatchOutput).ToThanosRulerStatusPatchPtrOutputWithContext(ctx)
}

// ThanosRulerStatusPatchPtrInput is an input type that accepts ThanosRulerStatusPatchArgs, ThanosRulerStatusPatchPtr and ThanosRulerStatusPatchPtrOutput values.
// You can construct a concrete instance of `ThanosRulerStatusPatchPtrInput` via:
//
//	        ThanosRulerStatusPatchArgs{...}
//
//	or:
//
//	        nil
type ThanosRulerStatusPatchPtrInput interface {
	pulumi.Input

	ToThanosRulerStatusPatchPtrOutput() ThanosRulerStatusPatchPtrOutput
	ToThanosRulerStatusPatchPtrOutputWithContext(context.Context) ThanosRulerStatusPatchPtrOutput
}

type thanosRulerStatusPatchPtrType ThanosRulerStatusPatchArgs

func ThanosRulerStatusPatchPtr(v *ThanosRulerStatusPatchArgs) ThanosRulerStatusPatchPtrInput {
	return (*thanosRulerStatusPatchPtrType)(v)
}

func (*thanosRulerStatusPatchPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerStatusPatch)(nil)).Elem()
}

func (i *thanosRulerStatusPatchPtrType) ToThanosRulerStatusPatchPtrOutput() ThanosRulerStatusPatchPtrOutput {
	return i.ToThanosRulerStatusPatchPtrOutputWithContext(context.Background())
}

func (i *thanosRulerStatusPatchPtrType) ToThanosRulerStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPatchPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ThanosRulerStatusPatchPtrOutput)
}

// Most recent observed status of the ThanosRuler cluster. Read-only.
// More info:
// https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
type ThanosRulerStatusPatchOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ThanosRulerStatusPatch)(nil)).Elem()
}

func (o ThanosRulerStatusPatchOutput) ToThanosRulerStatusPatchOutput() ThanosRulerStatusPatchOutput {
	return o
}

func (o ThanosRulerStatusPatchOutput) ToThanosRulerStatusPatchOutputWithContext(ctx context.Context) ThanosRulerStatusPatchOutput {
	return o
}

func (o ThanosRulerStatusPatchOutput) ToThanosRulerStatusPatchPtrOutput() ThanosRulerStatusPatchPtrOutput {
	return o.ToThanosRulerStatusPatchPtrOutputWithContext(context.Background())
}

func (o ThanosRulerStatusPatchOutput) ToThanosRulerStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPatchPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v ThanosRulerStatusPatch) *ThanosRulerStatusPatch {
		return &v
	}).(ThanosRulerStatusPatchPtrOutput)
}

// Total number of available pods (ready for at least minReadySeconds)
// targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusPatchOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusPatch) *int { return v.AvailableReplicas }).(pulumi.IntPtrOutput)
}

// The current state of the ThanosRuler object.
func (o ThanosRulerStatusPatchOutput) Conditions() ThanosRulerStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v ThanosRulerStatusPatch) []ThanosRulerStatusConditionsPatch { return v.Conditions }).(ThanosRulerStatusConditionsPatchArrayOutput)
}

// Represents whether any actions on the underlying managed objects are
// being performed. Only delete actions will be performed.
func (o ThanosRulerStatusPatchOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusPatch) *bool { return v.Paused }).(pulumi.BoolPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// (their labels match the selector).
func (o ThanosRulerStatusPatchOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusPatch) *int { return v.Replicas }).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusPatchOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusPatch) *int { return v.UnavailableReplicas }).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// that have the desired version spec.
func (o ThanosRulerStatusPatchOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v ThanosRulerStatusPatch) *int { return v.UpdatedReplicas }).(pulumi.IntPtrOutput)
}

type ThanosRulerStatusPatchPtrOutput struct{ *pulumi.OutputState }

func (ThanosRulerStatusPatchPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ThanosRulerStatusPatch)(nil)).Elem()
}

func (o ThanosRulerStatusPatchPtrOutput) ToThanosRulerStatusPatchPtrOutput() ThanosRulerStatusPatchPtrOutput {
	return o
}

func (o ThanosRulerStatusPatchPtrOutput) ToThanosRulerStatusPatchPtrOutputWithContext(ctx context.Context) ThanosRulerStatusPatchPtrOutput {
	return o
}

func (o ThanosRulerStatusPatchPtrOutput) Elem() ThanosRulerStatusPatchOutput {
	return o.ApplyT(func(v *ThanosRulerStatusPatch) ThanosRulerStatusPatch {
		if v != nil {
			return *v
		}
		var ret ThanosRulerStatusPatch
		return ret
	}).(ThanosRulerStatusPatchOutput)
}

// Total number of available pods (ready for at least minReadySeconds)
// targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusPatchPtrOutput) AvailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.AvailableReplicas
	}).(pulumi.IntPtrOutput)
}

// The current state of the ThanosRuler object.
func (o ThanosRulerStatusPatchPtrOutput) Conditions() ThanosRulerStatusConditionsPatchArrayOutput {
	return o.ApplyT(func(v *ThanosRulerStatusPatch) []ThanosRulerStatusConditionsPatch {
		if v == nil {
			return nil
		}
		return v.Conditions
	}).(ThanosRulerStatusConditionsPatchArrayOutput)
}

// Represents whether any actions on the underlying managed objects are
// being performed. Only delete actions will be performed.
func (o ThanosRulerStatusPatchPtrOutput) Paused() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatusPatch) *bool {
		if v == nil {
			return nil
		}
		return v.Paused
	}).(pulumi.BoolPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// (their labels match the selector).
func (o ThanosRulerStatusPatchPtrOutput) Replicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.Replicas
	}).(pulumi.IntPtrOutput)
}

// Total number of unavailable pods targeted by this ThanosRuler deployment.
func (o ThanosRulerStatusPatchPtrOutput) UnavailableReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.UnavailableReplicas
	}).(pulumi.IntPtrOutput)
}

// Total number of non-terminated pods targeted by this ThanosRuler deployment
// that have the desired version spec.
func (o ThanosRulerStatusPatchPtrOutput) UpdatedReplicas() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *ThanosRulerStatusPatch) *int {
		if v == nil {
			return nil
		}
		return v.UpdatedReplicas
	}).(pulumi.IntPtrOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeGrpcPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeGrpcPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbePatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbePatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocketInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeTcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicyInput)(nil)).Elem(), ThanosRulerSpecInitContainersResizePolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicyArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersResizePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicyPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersResizePolicyPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResizePolicyPatchArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersResizePolicyPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaimsInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaimsArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaimsPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesClaimsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesClaimsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesClaimsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersResourcesPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfileInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextAppArmorProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilitiesInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextCapabilitiesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfileInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptionsInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbePtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExecInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExecPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeExecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExecPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeExecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeExecPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeExecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpcInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeGrpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpcPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeGrpcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpcPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeGrpcPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeHttpGetPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbePatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbePatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocketInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeTcpSocketArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrInput)(nil)).Elem(), ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevicesInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeDevicesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevicesArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeDevicesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevicesPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeDevicesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeDevicesPatchArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeDevicesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMountsInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeMountsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMountsArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeMountsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMountsPatchInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeMountsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecInitContainersVolumeMountsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecInitContainersVolumeMountsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecObjectStorageConfigInput)(nil)).Elem(), ThanosRulerSpecObjectStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecObjectStorageConfigPtrInput)(nil)).Elem(), ThanosRulerSpecObjectStorageConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecObjectStorageConfigPatchInput)(nil)).Elem(), ThanosRulerSpecObjectStorageConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecObjectStorageConfigPatchPtrInput)(nil)).Elem(), ThanosRulerSpecObjectStorageConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPatchInput)(nil)).Elem(), ThanosRulerSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPatchPtrInput)(nil)).Elem(), ThanosRulerSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPodMetadataInput)(nil)).Elem(), ThanosRulerSpecPodMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPodMetadataPtrInput)(nil)).Elem(), ThanosRulerSpecPodMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPodMetadataPatchInput)(nil)).Elem(), ThanosRulerSpecPodMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPodMetadataPatchPtrInput)(nil)).Elem(), ThanosRulerSpecPodMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforceInput)(nil)).Elem(), ThanosRulerSpecPrometheusRulesExcludedFromEnforceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayInput)(nil)).Elem(), ThanosRulerSpecPrometheusRulesExcludedFromEnforceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchInput)(nil)).Elem(), ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayInput)(nil)).Elem(), ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecQueryConfigInput)(nil)).Elem(), ThanosRulerSpecQueryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecQueryConfigPtrInput)(nil)).Elem(), ThanosRulerSpecQueryConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecQueryConfigPatchInput)(nil)).Elem(), ThanosRulerSpecQueryConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecQueryConfigPatchPtrInput)(nil)).Elem(), ThanosRulerSpecQueryConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesInput)(nil)).Elem(), ThanosRulerSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesPtrInput)(nil)).Elem(), ThanosRulerSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesClaimsInput)(nil)).Elem(), ThanosRulerSpecResourcesClaimsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesClaimsArrayInput)(nil)).Elem(), ThanosRulerSpecResourcesClaimsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesClaimsPatchInput)(nil)).Elem(), ThanosRulerSpecResourcesClaimsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesClaimsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecResourcesClaimsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesPatchInput)(nil)).Elem(), ThanosRulerSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecResourcesPatchPtrInput)(nil)).Elem(), ThanosRulerSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorPtrInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorPatchInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleNamespaceSelectorPatchPtrInput)(nil)).Elem(), ThanosRulerSpecRuleNamespaceSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorPtrInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressionsInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressionsArrayInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressionsPatchInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorPatchInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecRuleSelectorPatchPtrInput)(nil)).Elem(), ThanosRulerSpecRuleSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextInput)(nil)).Elem(), ThanosRulerSpecSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfileInput)(nil)).Elem(), ThanosRulerSpecSecurityContextAppArmorProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfilePtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextAppArmorProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfilePatchInput)(nil)).Elem(), ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextAppArmorProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextPatchInput)(nil)).Elem(), ThanosRulerSpecSecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextPatchPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptionsInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptionsPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeLinuxOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptionsPatchInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeLinuxOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfileInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfilePtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeccompProfileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfilePatchInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeccompProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSeccompProfilePatchPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSeccompProfilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctlsInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSysctlsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctlsArrayInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSysctlsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctlsPatchInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSysctlsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextSysctlsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecSecurityContextSysctlsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptionsInput)(nil)).Elem(), ThanosRulerSpecSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptionsPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextWindowsOptionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptionsPatchInput)(nil)).Elem(), ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrInput)(nil)).Elem(), ThanosRulerSpecSecurityContextWindowsOptionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageInput)(nil)).Elem(), ThanosRulerSpecStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStoragePtrInput)(nil)).Elem(), ThanosRulerSpecStorageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEmptyDirInput)(nil)).Elem(), ThanosRulerSpecStorageEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEmptyDirPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEmptyDirPatchInput)(nil)).Elem(), ThanosRulerSpecStorageEmptyDirPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEmptyDirPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEmptyDirPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralPatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStoragePatchInput)(nil)).Elem(), ThanosRulerSpecStoragePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStoragePatchPtrInput)(nil)).Elem(), ThanosRulerSpecStoragePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplatePtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadataInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateMetadataArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplatePatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrInput)(nil)).Elem(), ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTolerationsInput)(nil)).Elem(), ThanosRulerSpecTolerationsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTolerationsArrayInput)(nil)).Elem(), ThanosRulerSpecTolerationsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTolerationsPatchInput)(nil)).Elem(), ThanosRulerSpecTolerationsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTolerationsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecTolerationsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsArrayInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsPatchInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTopologySpreadConstraintsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecTopologySpreadConstraintsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTracingConfigInput)(nil)).Elem(), ThanosRulerSpecTracingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTracingConfigPtrInput)(nil)).Elem(), ThanosRulerSpecTracingConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTracingConfigPatchInput)(nil)).Elem(), ThanosRulerSpecTracingConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecTracingConfigPatchPtrInput)(nil)).Elem(), ThanosRulerSpecTracingConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumeMountsInput)(nil)).Elem(), ThanosRulerSpecVolumeMountsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumeMountsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumeMountsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumeMountsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumeMountsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumeMountsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumeMountsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesInput)(nil)).Elem(), ThanosRulerSpecVolumesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStoreInput)(nil)).Elem(), ThanosRulerSpecVolumesAwsElasticBlockStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStorePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesAwsElasticBlockStoreArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStorePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesAwsElasticBlockStorePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureDiskInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureDiskPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureDiskPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureDiskPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureDiskPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureDiskPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureFileInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureFilePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureFileArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureFilePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureFilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesAzureFilePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesAzureFilePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCephfsSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCephfsSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCinderSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCinderSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItemsInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItemsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItemsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapItemsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesConfigMapPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiNodePublishSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesCsiPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesCsiPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRefInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesDownwardAPIPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesDownwardAPIPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDirInput)(nil)).Elem(), ThanosRulerSpecVolumesEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDirPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEmptyDirArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDirPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEmptyDirPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEmptyDirPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEmptyDirPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFcInput)(nil)).Elem(), ThanosRulerSpecVolumesFcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFcPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFcArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFcPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesFcPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFcPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFcPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumeSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumeSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFlexVolumeSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlockerInput)(nil)).Elem(), ThanosRulerSpecVolumesFlockerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlockerPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFlockerArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlockerPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesFlockerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesFlockerPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesFlockerPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDiskInput)(nil)).Elem(), ThanosRulerSpecVolumesGcePersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDiskPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesGcePersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDiskPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesGcePersistentDiskPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGcePersistentDiskPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesGcePersistentDiskPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGitRepoInput)(nil)).Elem(), ThanosRulerSpecVolumesGitRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGitRepoPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesGitRepoArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGitRepoPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesGitRepoPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGitRepoPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesGitRepoPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfsInput)(nil)).Elem(), ThanosRulerSpecVolumesGlusterfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfsPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesGlusterfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesGlusterfsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesGlusterfsPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesGlusterfsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesHostPathInput)(nil)).Elem(), ThanosRulerSpecVolumesHostPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesHostPathPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesHostPathArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesHostPathPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesHostPathPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesHostPathPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesHostPathPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesImageInput)(nil)).Elem(), ThanosRulerSpecVolumesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesImagePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesImageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesImagePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesImagePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesImagePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesImagePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesIscsiSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesIscsiSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesNfsInput)(nil)).Elem(), ThanosRulerSpecVolumesNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesNfsPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesNfsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesNfsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesNfsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesNfsPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesNfsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaimInput)(nil)).Elem(), ThanosRulerSpecVolumesPersistentVolumeClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaimPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesPersistentVolumeClaimArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaimPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesPersistentVolumeClaimPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDiskInput)(nil)).Elem(), ThanosRulerSpecVolumesPhotonPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDiskPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesPhotonPersistentDiskArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDiskPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesPhotonPersistentDiskPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolumeInput)(nil)).Elem(), ThanosRulerSpecVolumesPortworxVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolumePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesPortworxVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolumePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesPortworxVolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesPortworxVolumePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesPortworxVolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItemsInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesQuobyteInput)(nil)).Elem(), ThanosRulerSpecVolumesQuobyteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesQuobytePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesQuobyteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesQuobytePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesQuobytePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesQuobytePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesQuobytePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesRbdSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesRbdSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesScaleIOSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretItemsInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretItemsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretItemsArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretItemsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretItemsPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretItemsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretItemsPatchArrayInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretItemsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesSecretPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRefInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRefPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosSecretRefArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRefPatchInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesStorageosSecretRefPatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesStorageosSecretRefPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolumeInput)(nil)).Elem(), ThanosRulerSpecVolumesVsphereVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolumePtrInput)(nil)).Elem(), ThanosRulerSpecVolumesVsphereVolumeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolumePatchInput)(nil)).Elem(), ThanosRulerSpecVolumesVsphereVolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecVolumesVsphereVolumePatchPtrInput)(nil)).Elem(), ThanosRulerSpecVolumesVsphereVolumePatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebInput)(nil)).Elem(), ThanosRulerSpecWebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebPtrInput)(nil)).Elem(), ThanosRulerSpecWebArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigPtrInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeadersInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeadersPtrInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigHeadersArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeadersPatchInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigHeadersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigHeadersPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigHeadersPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigPatchInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebHttpConfigPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebHttpConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebPatchInput)(nil)).Elem(), ThanosRulerSpecWebPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMapInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMapPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMapPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecretInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecretPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecretPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigCertSecretPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigCertSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMapInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaConfigMapArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecretInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecretPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaSecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecretPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigClientCaSecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecretInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigKeySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecretPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigKeySecretArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecretPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigKeySecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigKeySecretPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigKeySecretPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigPatchInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerSpecWebTlsConfigPatchPtrInput)(nil)).Elem(), ThanosRulerSpecWebTlsConfigPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusInput)(nil)).Elem(), ThanosRulerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusPtrInput)(nil)).Elem(), ThanosRulerStatusArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusConditionsInput)(nil)).Elem(), ThanosRulerStatusConditionsArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusConditionsArrayInput)(nil)).Elem(), ThanosRulerStatusConditionsArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusConditionsPatchInput)(nil)).Elem(), ThanosRulerStatusConditionsPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusConditionsPatchArrayInput)(nil)).Elem(), ThanosRulerStatusConditionsPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusPatchInput)(nil)).Elem(), ThanosRulerStatusPatchArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ThanosRulerStatusPatchPtrInput)(nil)).Elem(), ThanosRulerStatusPatchArgs{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeGrpcPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetHttpHeadersPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeHttpGetPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersReadinessProbeTcpSocketPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResizePolicyOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResizePolicyArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResizePolicyPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResizePolicyPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesClaimsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesClaimsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesClaimsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextAppArmorProfileOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextAppArmorProfilePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextCapabilitiesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextCapabilitiesPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeLinuxOptionsPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeccompProfileOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextSeccompProfilePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersSecurityContextWindowsOptionsPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeExecOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeExecPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeExecPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeExecPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeGrpcOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeGrpcPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeGrpcPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeGrpcPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetHttpHeadersPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeHttpGetPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeTcpSocketOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeTcpSocketPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersStartupProbeTcpSocketPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeDevicesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeDevicesArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeDevicesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeDevicesPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeMountsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeMountsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeMountsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecInitContainersVolumeMountsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecObjectStorageConfigOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecObjectStorageConfigPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecObjectStorageConfigPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecObjectStorageConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPodMetadataOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPodMetadataPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPodMetadataPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPodMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPrometheusRulesExcludedFromEnforceOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPrometheusRulesExcludedFromEnforceArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecPrometheusRulesExcludedFromEnforcePatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecQueryConfigOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecQueryConfigPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecQueryConfigPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecQueryConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesClaimsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesClaimsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesClaimsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesClaimsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleNamespaceSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecRuleSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextAppArmorProfileOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextAppArmorProfilePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextAppArmorProfilePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextAppArmorProfilePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeLinuxOptionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeLinuxOptionsPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeLinuxOptionsPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeccompProfileOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeccompProfilePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeccompProfilePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSeccompProfilePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSysctlsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSysctlsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSysctlsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextSysctlsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextWindowsOptionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextWindowsOptionsPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextWindowsOptionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecSecurityContextWindowsOptionsPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStoragePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEmptyDirOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEmptyDirPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEmptyDirPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEmptyDirPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplatePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStoragePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStoragePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplatePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateMetadataOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateMetadataPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplatePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplatePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateSpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusModifyVolumeStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecStorageVolumeClaimTemplateStatusPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTolerationsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTolerationsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTolerationsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTolerationsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsLabelSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTopologySpreadConstraintsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTracingConfigOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTracingConfigPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTracingConfigPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecTracingConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumeMountsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumeMountsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumeMountsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumeMountsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAwsElasticBlockStoreOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAwsElasticBlockStorePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAwsElasticBlockStorePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAwsElasticBlockStorePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureDiskOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureDiskPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureDiskPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureDiskPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureFileOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureFilePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureFilePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesAzureFilePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCephfsSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCinderSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapItemsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapItemsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesConfigMapPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiNodePublishSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiNodePublishSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiNodePublishSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesCsiPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsFieldRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIItemsResourceFieldRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesDownwardAPIPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEmptyDirOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEmptyDirPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEmptyDirPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEmptyDirPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplatePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourcePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecDataSourceRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecResourcesPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesEphemeralVolumeClaimTemplateSpecSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFcOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFcPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFcPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFcPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumeOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumeSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumeSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlexVolumeSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlockerOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlockerPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlockerPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesFlockerPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGcePersistentDiskOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGcePersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGcePersistentDiskPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGcePersistentDiskPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGitRepoOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGitRepoPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGitRepoPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGitRepoPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGlusterfsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGlusterfsPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGlusterfsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesGlusterfsPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesHostPathOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesHostPathPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesHostPathPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesHostPathPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesImageOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesImagePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesImagePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesImagePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesIscsiSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesNfsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesNfsPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesNfsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesNfsPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPersistentVolumeClaimOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPersistentVolumeClaimPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPersistentVolumeClaimPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPersistentVolumeClaimPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPhotonPersistentDiskOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPhotonPersistentDiskPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPhotonPersistentDiskPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPhotonPersistentDiskPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPortworxVolumeOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPortworxVolumePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPortworxVolumePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesPortworxVolumePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorMatchExpressionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundleLabelSelectorPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesClusterTrustBundlePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesConfigMapPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsFieldRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIItemsResourceFieldRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesDownwardAPIPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretItemsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesProjectedSourcesServiceAccountTokenPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesQuobyteOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesQuobytePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesQuobytePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesQuobytePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesRbdSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesScaleIOSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretItemsOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretItemsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretItemsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretItemsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosSecretRefOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosSecretRefPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosSecretRefPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesStorageosSecretRefPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesVsphereVolumeOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesVsphereVolumePtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesVsphereVolumePatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecVolumesVsphereVolumePatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigHeadersOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigHeadersPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigHeadersPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigHeadersPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebHttpConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertConfigMapOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertConfigMapPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertConfigMapPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertConfigMapPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertSecretOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertSecretPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertSecretPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigCertSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaConfigMapOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaConfigMapPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaConfigMapPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaSecretOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaSecretPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaSecretPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigClientCaSecretPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigKeySecretOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigKeySecretPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigKeySecretPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigKeySecretPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerSpecWebTlsConfigPatchPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusPtrOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusConditionsOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusConditionsArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusConditionsPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusConditionsPatchArrayOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusPatchOutput{})
	pulumi.RegisterOutputType(ThanosRulerStatusPatchPtrOutput{})
}
