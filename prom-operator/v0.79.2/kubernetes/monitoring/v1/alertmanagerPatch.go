// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The `Alertmanager` custom resource definition (CRD) defines a desired [Alertmanager](https://prometheus.io/docs/alerting) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage and many more.
//
// For each `Alertmanager` resource, the Operator deploys a `StatefulSet` in the same namespace. When there are two or more configured replicas, the Operator runs the Alertmanager instances in high-availability mode.
//
// The resource defines via label and namespace selectors which `AlertmanagerConfig` objects should be associated to the deployed Alertmanager instances.
type AlertmanagerPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput  `pulumi:"metadata"`
	Spec     AlertmanagerSpecPatchPtrOutput   `pulumi:"spec"`
	Status   AlertmanagerStatusPatchPtrOutput `pulumi:"status"`
}

// NewAlertmanagerPatch registers a new resource with the given unique name, arguments, and options.
func NewAlertmanagerPatch(ctx *pulumi.Context,
	name string, args *AlertmanagerPatchArgs, opts ...pulumi.ResourceOption) (*AlertmanagerPatch, error) {
	if args == nil {
		args = &AlertmanagerPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("Alertmanager")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource AlertmanagerPatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:AlertmanagerPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertmanagerPatch gets an existing AlertmanagerPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertmanagerPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertmanagerPatchState, opts ...pulumi.ResourceOption) (*AlertmanagerPatch, error) {
	var resource AlertmanagerPatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:AlertmanagerPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlertmanagerPatch resources.
type alertmanagerPatchState struct {
}

type AlertmanagerPatchState struct {
}

func (AlertmanagerPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertmanagerPatchState)(nil)).Elem()
}

type alertmanagerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *AlertmanagerSpecPatch  `pulumi:"spec"`
}

// The set of arguments for constructing a AlertmanagerPatch resource.
type AlertmanagerPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     AlertmanagerSpecPatchPtrInput
}

func (AlertmanagerPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertmanagerPatchArgs)(nil)).Elem()
}

type AlertmanagerPatchInput interface {
	pulumi.Input

	ToAlertmanagerPatchOutput() AlertmanagerPatchOutput
	ToAlertmanagerPatchOutputWithContext(ctx context.Context) AlertmanagerPatchOutput
}

func (*AlertmanagerPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerPatch)(nil)).Elem()
}

func (i *AlertmanagerPatch) ToAlertmanagerPatchOutput() AlertmanagerPatchOutput {
	return i.ToAlertmanagerPatchOutputWithContext(context.Background())
}

func (i *AlertmanagerPatch) ToAlertmanagerPatchOutputWithContext(ctx context.Context) AlertmanagerPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerPatchOutput)
}

// AlertmanagerPatchArrayInput is an input type that accepts AlertmanagerPatchArray and AlertmanagerPatchArrayOutput values.
// You can construct a concrete instance of `AlertmanagerPatchArrayInput` via:
//
//	AlertmanagerPatchArray{ AlertmanagerPatchArgs{...} }
type AlertmanagerPatchArrayInput interface {
	pulumi.Input

	ToAlertmanagerPatchArrayOutput() AlertmanagerPatchArrayOutput
	ToAlertmanagerPatchArrayOutputWithContext(context.Context) AlertmanagerPatchArrayOutput
}

type AlertmanagerPatchArray []AlertmanagerPatchInput

func (AlertmanagerPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertmanagerPatch)(nil)).Elem()
}

func (i AlertmanagerPatchArray) ToAlertmanagerPatchArrayOutput() AlertmanagerPatchArrayOutput {
	return i.ToAlertmanagerPatchArrayOutputWithContext(context.Background())
}

func (i AlertmanagerPatchArray) ToAlertmanagerPatchArrayOutputWithContext(ctx context.Context) AlertmanagerPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerPatchArrayOutput)
}

// AlertmanagerPatchMapInput is an input type that accepts AlertmanagerPatchMap and AlertmanagerPatchMapOutput values.
// You can construct a concrete instance of `AlertmanagerPatchMapInput` via:
//
//	AlertmanagerPatchMap{ "key": AlertmanagerPatchArgs{...} }
type AlertmanagerPatchMapInput interface {
	pulumi.Input

	ToAlertmanagerPatchMapOutput() AlertmanagerPatchMapOutput
	ToAlertmanagerPatchMapOutputWithContext(context.Context) AlertmanagerPatchMapOutput
}

type AlertmanagerPatchMap map[string]AlertmanagerPatchInput

func (AlertmanagerPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertmanagerPatch)(nil)).Elem()
}

func (i AlertmanagerPatchMap) ToAlertmanagerPatchMapOutput() AlertmanagerPatchMapOutput {
	return i.ToAlertmanagerPatchMapOutputWithContext(context.Background())
}

func (i AlertmanagerPatchMap) ToAlertmanagerPatchMapOutputWithContext(ctx context.Context) AlertmanagerPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerPatchMapOutput)
}

type AlertmanagerPatchOutput struct{ *pulumi.OutputState }

func (AlertmanagerPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlertmanagerPatch)(nil)).Elem()
}

func (o AlertmanagerPatchOutput) ToAlertmanagerPatchOutput() AlertmanagerPatchOutput {
	return o
}

func (o AlertmanagerPatchOutput) ToAlertmanagerPatchOutputWithContext(ctx context.Context) AlertmanagerPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertmanagerPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertmanagerPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AlertmanagerPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AlertmanagerPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *AlertmanagerPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o AlertmanagerPatchOutput) Spec() AlertmanagerSpecPatchPtrOutput {
	return o.ApplyT(func(v *AlertmanagerPatch) AlertmanagerSpecPatchPtrOutput { return v.Spec }).(AlertmanagerSpecPatchPtrOutput)
}

func (o AlertmanagerPatchOutput) Status() AlertmanagerStatusPatchPtrOutput {
	return o.ApplyT(func(v *AlertmanagerPatch) AlertmanagerStatusPatchPtrOutput { return v.Status }).(AlertmanagerStatusPatchPtrOutput)
}

type AlertmanagerPatchArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlertmanagerPatch)(nil)).Elem()
}

func (o AlertmanagerPatchArrayOutput) ToAlertmanagerPatchArrayOutput() AlertmanagerPatchArrayOutput {
	return o
}

func (o AlertmanagerPatchArrayOutput) ToAlertmanagerPatchArrayOutputWithContext(ctx context.Context) AlertmanagerPatchArrayOutput {
	return o
}

func (o AlertmanagerPatchArrayOutput) Index(i pulumi.IntInput) AlertmanagerPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlertmanagerPatch {
		return vs[0].([]*AlertmanagerPatch)[vs[1].(int)]
	}).(AlertmanagerPatchOutput)
}

type AlertmanagerPatchMapOutput struct{ *pulumi.OutputState }

func (AlertmanagerPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlertmanagerPatch)(nil)).Elem()
}

func (o AlertmanagerPatchMapOutput) ToAlertmanagerPatchMapOutput() AlertmanagerPatchMapOutput {
	return o
}

func (o AlertmanagerPatchMapOutput) ToAlertmanagerPatchMapOutputWithContext(ctx context.Context) AlertmanagerPatchMapOutput {
	return o
}

func (o AlertmanagerPatchMapOutput) MapIndex(k pulumi.StringInput) AlertmanagerPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlertmanagerPatch {
		return vs[0].(map[string]*AlertmanagerPatch)[vs[1].(string)]
	}).(AlertmanagerPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertmanagerPatchInput)(nil)).Elem(), &AlertmanagerPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertmanagerPatchArrayInput)(nil)).Elem(), AlertmanagerPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertmanagerPatchMapInput)(nil)).Elem(), AlertmanagerPatchMap{})
	pulumi.RegisterOutputType(AlertmanagerPatchOutput{})
	pulumi.RegisterOutputType(AlertmanagerPatchArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerPatchMapOutput{})
}
