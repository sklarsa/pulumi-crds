// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The `Prometheus` custom resource definition (CRD) defines a desired [Prometheus](https://prometheus.io/docs/prometheus) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage, and Alertmanagers where firing alerts should be sent and many more.
//
// For each `Prometheus` resource, the Operator deploys one or several `StatefulSet` objects in the same namespace. The number of StatefulSets is equal to the number of shards which is 1 by default.
//
// The resource defines via label and namespace selectors which `ServiceMonitor`, `PodMonitor`, `Probe` and `PrometheusRule` objects should be associated to the deployed Prometheus instances.
//
// The Operator continuously reconciles the scrape and rules configuration and a sidecar container running in the Prometheus pods triggers a reload of the configuration when needed.
type PrometheusPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PrometheusSpecPatchPtrOutput    `pulumi:"spec"`
	Status   PrometheusStatusPatchPtrOutput  `pulumi:"status"`
}

// NewPrometheusPatch registers a new resource with the given unique name, arguments, and options.
func NewPrometheusPatch(ctx *pulumi.Context,
	name string, args *PrometheusPatchArgs, opts ...pulumi.ResourceOption) (*PrometheusPatch, error) {
	if args == nil {
		args = &PrometheusPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("Prometheus")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PrometheusPatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:PrometheusPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrometheusPatch gets an existing PrometheusPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrometheusPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrometheusPatchState, opts ...pulumi.ResourceOption) (*PrometheusPatch, error) {
	var resource PrometheusPatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:PrometheusPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrometheusPatch resources.
type prometheusPatchState struct {
}

type PrometheusPatchState struct {
}

func (PrometheusPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusPatchState)(nil)).Elem()
}

type prometheusPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PrometheusSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a PrometheusPatch resource.
type PrometheusPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PrometheusSpecPatchPtrInput
}

func (PrometheusPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusPatchArgs)(nil)).Elem()
}

type PrometheusPatchInput interface {
	pulumi.Input

	ToPrometheusPatchOutput() PrometheusPatchOutput
	ToPrometheusPatchOutputWithContext(ctx context.Context) PrometheusPatchOutput
}

func (*PrometheusPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusPatch)(nil)).Elem()
}

func (i *PrometheusPatch) ToPrometheusPatchOutput() PrometheusPatchOutput {
	return i.ToPrometheusPatchOutputWithContext(context.Background())
}

func (i *PrometheusPatch) ToPrometheusPatchOutputWithContext(ctx context.Context) PrometheusPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusPatchOutput)
}

// PrometheusPatchArrayInput is an input type that accepts PrometheusPatchArray and PrometheusPatchArrayOutput values.
// You can construct a concrete instance of `PrometheusPatchArrayInput` via:
//
//	PrometheusPatchArray{ PrometheusPatchArgs{...} }
type PrometheusPatchArrayInput interface {
	pulumi.Input

	ToPrometheusPatchArrayOutput() PrometheusPatchArrayOutput
	ToPrometheusPatchArrayOutputWithContext(context.Context) PrometheusPatchArrayOutput
}

type PrometheusPatchArray []PrometheusPatchInput

func (PrometheusPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusPatch)(nil)).Elem()
}

func (i PrometheusPatchArray) ToPrometheusPatchArrayOutput() PrometheusPatchArrayOutput {
	return i.ToPrometheusPatchArrayOutputWithContext(context.Background())
}

func (i PrometheusPatchArray) ToPrometheusPatchArrayOutputWithContext(ctx context.Context) PrometheusPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusPatchArrayOutput)
}

// PrometheusPatchMapInput is an input type that accepts PrometheusPatchMap and PrometheusPatchMapOutput values.
// You can construct a concrete instance of `PrometheusPatchMapInput` via:
//
//	PrometheusPatchMap{ "key": PrometheusPatchArgs{...} }
type PrometheusPatchMapInput interface {
	pulumi.Input

	ToPrometheusPatchMapOutput() PrometheusPatchMapOutput
	ToPrometheusPatchMapOutputWithContext(context.Context) PrometheusPatchMapOutput
}

type PrometheusPatchMap map[string]PrometheusPatchInput

func (PrometheusPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusPatch)(nil)).Elem()
}

func (i PrometheusPatchMap) ToPrometheusPatchMapOutput() PrometheusPatchMapOutput {
	return i.ToPrometheusPatchMapOutputWithContext(context.Background())
}

func (i PrometheusPatchMap) ToPrometheusPatchMapOutputWithContext(ctx context.Context) PrometheusPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusPatchMapOutput)
}

type PrometheusPatchOutput struct{ *pulumi.OutputState }

func (PrometheusPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusPatch)(nil)).Elem()
}

func (o PrometheusPatchOutput) ToPrometheusPatchOutput() PrometheusPatchOutput {
	return o
}

func (o PrometheusPatchOutput) ToPrometheusPatchOutputWithContext(ctx context.Context) PrometheusPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PrometheusPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PrometheusPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PrometheusPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PrometheusPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PrometheusPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PrometheusPatchOutput) Spec() PrometheusSpecPatchPtrOutput {
	return o.ApplyT(func(v *PrometheusPatch) PrometheusSpecPatchPtrOutput { return v.Spec }).(PrometheusSpecPatchPtrOutput)
}

func (o PrometheusPatchOutput) Status() PrometheusStatusPatchPtrOutput {
	return o.ApplyT(func(v *PrometheusPatch) PrometheusStatusPatchPtrOutput { return v.Status }).(PrometheusStatusPatchPtrOutput)
}

type PrometheusPatchArrayOutput struct{ *pulumi.OutputState }

func (PrometheusPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusPatch)(nil)).Elem()
}

func (o PrometheusPatchArrayOutput) ToPrometheusPatchArrayOutput() PrometheusPatchArrayOutput {
	return o
}

func (o PrometheusPatchArrayOutput) ToPrometheusPatchArrayOutputWithContext(ctx context.Context) PrometheusPatchArrayOutput {
	return o
}

func (o PrometheusPatchArrayOutput) Index(i pulumi.IntInput) PrometheusPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrometheusPatch {
		return vs[0].([]*PrometheusPatch)[vs[1].(int)]
	}).(PrometheusPatchOutput)
}

type PrometheusPatchMapOutput struct{ *pulumi.OutputState }

func (PrometheusPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusPatch)(nil)).Elem()
}

func (o PrometheusPatchMapOutput) ToPrometheusPatchMapOutput() PrometheusPatchMapOutput {
	return o
}

func (o PrometheusPatchMapOutput) ToPrometheusPatchMapOutputWithContext(ctx context.Context) PrometheusPatchMapOutput {
	return o
}

func (o PrometheusPatchMapOutput) MapIndex(k pulumi.StringInput) PrometheusPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrometheusPatch {
		return vs[0].(map[string]*PrometheusPatch)[vs[1].(string)]
	}).(PrometheusPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusPatchInput)(nil)).Elem(), &PrometheusPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusPatchArrayInput)(nil)).Elem(), PrometheusPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusPatchMapInput)(nil)).Elem(), PrometheusPatchMap{})
	pulumi.RegisterOutputType(PrometheusPatchOutput{})
	pulumi.RegisterOutputType(PrometheusPatchArrayOutput{})
	pulumi.RegisterOutputType(PrometheusPatchMapOutput{})
}
