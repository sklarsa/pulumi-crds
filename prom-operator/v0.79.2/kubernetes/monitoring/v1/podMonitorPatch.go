// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The `PodMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of pods.
// Among other things, it allows to specify:
// * The pods to scrape via label selectors.
// * The container ports to scrape.
// * Authentication credentials to use.
// * Target and metric relabeling.
//
// `Prometheus` and `PrometheusAgent` objects select `PodMonitor` objects using label and namespace selectors.
type PodMonitorPatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     PodMonitorSpecPatchPtrOutput    `pulumi:"spec"`
}

// NewPodMonitorPatch registers a new resource with the given unique name, arguments, and options.
func NewPodMonitorPatch(ctx *pulumi.Context,
	name string, args *PodMonitorPatchArgs, opts ...pulumi.ResourceOption) (*PodMonitorPatch, error) {
	if args == nil {
		args = &PodMonitorPatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("PodMonitor")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PodMonitorPatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:PodMonitorPatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPodMonitorPatch gets an existing PodMonitorPatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPodMonitorPatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PodMonitorPatchState, opts ...pulumi.ResourceOption) (*PodMonitorPatch, error) {
	var resource PodMonitorPatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:PodMonitorPatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PodMonitorPatch resources.
type podMonitorPatchState struct {
}

type PodMonitorPatchState struct {
}

func (PodMonitorPatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*podMonitorPatchState)(nil)).Elem()
}

type podMonitorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *PodMonitorSpecPatch    `pulumi:"spec"`
}

// The set of arguments for constructing a PodMonitorPatch resource.
type PodMonitorPatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     PodMonitorSpecPatchPtrInput
}

func (PodMonitorPatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*podMonitorPatchArgs)(nil)).Elem()
}

type PodMonitorPatchInput interface {
	pulumi.Input

	ToPodMonitorPatchOutput() PodMonitorPatchOutput
	ToPodMonitorPatchOutputWithContext(ctx context.Context) PodMonitorPatchOutput
}

func (*PodMonitorPatch) ElementType() reflect.Type {
	return reflect.TypeOf((**PodMonitorPatch)(nil)).Elem()
}

func (i *PodMonitorPatch) ToPodMonitorPatchOutput() PodMonitorPatchOutput {
	return i.ToPodMonitorPatchOutputWithContext(context.Background())
}

func (i *PodMonitorPatch) ToPodMonitorPatchOutputWithContext(ctx context.Context) PodMonitorPatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorPatchOutput)
}

// PodMonitorPatchArrayInput is an input type that accepts PodMonitorPatchArray and PodMonitorPatchArrayOutput values.
// You can construct a concrete instance of `PodMonitorPatchArrayInput` via:
//
//	PodMonitorPatchArray{ PodMonitorPatchArgs{...} }
type PodMonitorPatchArrayInput interface {
	pulumi.Input

	ToPodMonitorPatchArrayOutput() PodMonitorPatchArrayOutput
	ToPodMonitorPatchArrayOutputWithContext(context.Context) PodMonitorPatchArrayOutput
}

type PodMonitorPatchArray []PodMonitorPatchInput

func (PodMonitorPatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodMonitorPatch)(nil)).Elem()
}

func (i PodMonitorPatchArray) ToPodMonitorPatchArrayOutput() PodMonitorPatchArrayOutput {
	return i.ToPodMonitorPatchArrayOutputWithContext(context.Background())
}

func (i PodMonitorPatchArray) ToPodMonitorPatchArrayOutputWithContext(ctx context.Context) PodMonitorPatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorPatchArrayOutput)
}

// PodMonitorPatchMapInput is an input type that accepts PodMonitorPatchMap and PodMonitorPatchMapOutput values.
// You can construct a concrete instance of `PodMonitorPatchMapInput` via:
//
//	PodMonitorPatchMap{ "key": PodMonitorPatchArgs{...} }
type PodMonitorPatchMapInput interface {
	pulumi.Input

	ToPodMonitorPatchMapOutput() PodMonitorPatchMapOutput
	ToPodMonitorPatchMapOutputWithContext(context.Context) PodMonitorPatchMapOutput
}

type PodMonitorPatchMap map[string]PodMonitorPatchInput

func (PodMonitorPatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodMonitorPatch)(nil)).Elem()
}

func (i PodMonitorPatchMap) ToPodMonitorPatchMapOutput() PodMonitorPatchMapOutput {
	return i.ToPodMonitorPatchMapOutputWithContext(context.Background())
}

func (i PodMonitorPatchMap) ToPodMonitorPatchMapOutputWithContext(ctx context.Context) PodMonitorPatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorPatchMapOutput)
}

type PodMonitorPatchOutput struct{ *pulumi.OutputState }

func (PodMonitorPatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodMonitorPatch)(nil)).Elem()
}

func (o PodMonitorPatchOutput) ToPodMonitorPatchOutput() PodMonitorPatchOutput {
	return o
}

func (o PodMonitorPatchOutput) ToPodMonitorPatchOutputWithContext(ctx context.Context) PodMonitorPatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodMonitorPatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodMonitorPatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodMonitorPatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *PodMonitorPatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodMonitorPatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *PodMonitorPatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o PodMonitorPatchOutput) Spec() PodMonitorSpecPatchPtrOutput {
	return o.ApplyT(func(v *PodMonitorPatch) PodMonitorSpecPatchPtrOutput { return v.Spec }).(PodMonitorSpecPatchPtrOutput)
}

type PodMonitorPatchArrayOutput struct{ *pulumi.OutputState }

func (PodMonitorPatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodMonitorPatch)(nil)).Elem()
}

func (o PodMonitorPatchArrayOutput) ToPodMonitorPatchArrayOutput() PodMonitorPatchArrayOutput {
	return o
}

func (o PodMonitorPatchArrayOutput) ToPodMonitorPatchArrayOutputWithContext(ctx context.Context) PodMonitorPatchArrayOutput {
	return o
}

func (o PodMonitorPatchArrayOutput) Index(i pulumi.IntInput) PodMonitorPatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PodMonitorPatch {
		return vs[0].([]*PodMonitorPatch)[vs[1].(int)]
	}).(PodMonitorPatchOutput)
}

type PodMonitorPatchMapOutput struct{ *pulumi.OutputState }

func (PodMonitorPatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodMonitorPatch)(nil)).Elem()
}

func (o PodMonitorPatchMapOutput) ToPodMonitorPatchMapOutput() PodMonitorPatchMapOutput {
	return o
}

func (o PodMonitorPatchMapOutput) ToPodMonitorPatchMapOutputWithContext(ctx context.Context) PodMonitorPatchMapOutput {
	return o
}

func (o PodMonitorPatchMapOutput) MapIndex(k pulumi.StringInput) PodMonitorPatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PodMonitorPatch {
		return vs[0].(map[string]*PodMonitorPatch)[vs[1].(string)]
	}).(PodMonitorPatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorPatchInput)(nil)).Elem(), &PodMonitorPatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorPatchArrayInput)(nil)).Elem(), PodMonitorPatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorPatchMapInput)(nil)).Elem(), PodMonitorPatchMap{})
	pulumi.RegisterOutputType(PodMonitorPatchOutput{})
	pulumi.RegisterOutputType(PodMonitorPatchArrayOutput{})
	pulumi.RegisterOutputType(PodMonitorPatchMapOutput{})
}
