// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ProbeList is a list of Probe
type ProbeList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of probes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ProbeTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewProbeList registers a new resource with the given unique name, arguments, and options.
func NewProbeList(ctx *pulumi.Context,
	name string, args *ProbeListArgs, opts ...pulumi.ResourceOption) (*ProbeList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("ProbeList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProbeList
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:ProbeList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProbeList gets an existing ProbeList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProbeList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProbeListState, opts ...pulumi.ResourceOption) (*ProbeList, error) {
	var resource ProbeList
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:ProbeList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProbeList resources.
type probeListState struct {
}

type ProbeListState struct {
}

func (ProbeListState) ElementType() reflect.Type {
	return reflect.TypeOf((*probeListState)(nil)).Elem()
}

type probeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of probes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ProbeType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ProbeList resource.
type ProbeListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of probes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ProbeTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ProbeListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*probeListArgs)(nil)).Elem()
}

type ProbeListInput interface {
	pulumi.Input

	ToProbeListOutput() ProbeListOutput
	ToProbeListOutputWithContext(ctx context.Context) ProbeListOutput
}

func (*ProbeList) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeList)(nil)).Elem()
}

func (i *ProbeList) ToProbeListOutput() ProbeListOutput {
	return i.ToProbeListOutputWithContext(context.Background())
}

func (i *ProbeList) ToProbeListOutputWithContext(ctx context.Context) ProbeListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeListOutput)
}

// ProbeListArrayInput is an input type that accepts ProbeListArray and ProbeListArrayOutput values.
// You can construct a concrete instance of `ProbeListArrayInput` via:
//
//	ProbeListArray{ ProbeListArgs{...} }
type ProbeListArrayInput interface {
	pulumi.Input

	ToProbeListArrayOutput() ProbeListArrayOutput
	ToProbeListArrayOutputWithContext(context.Context) ProbeListArrayOutput
}

type ProbeListArray []ProbeListInput

func (ProbeListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProbeList)(nil)).Elem()
}

func (i ProbeListArray) ToProbeListArrayOutput() ProbeListArrayOutput {
	return i.ToProbeListArrayOutputWithContext(context.Background())
}

func (i ProbeListArray) ToProbeListArrayOutputWithContext(ctx context.Context) ProbeListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeListArrayOutput)
}

// ProbeListMapInput is an input type that accepts ProbeListMap and ProbeListMapOutput values.
// You can construct a concrete instance of `ProbeListMapInput` via:
//
//	ProbeListMap{ "key": ProbeListArgs{...} }
type ProbeListMapInput interface {
	pulumi.Input

	ToProbeListMapOutput() ProbeListMapOutput
	ToProbeListMapOutputWithContext(context.Context) ProbeListMapOutput
}

type ProbeListMap map[string]ProbeListInput

func (ProbeListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProbeList)(nil)).Elem()
}

func (i ProbeListMap) ToProbeListMapOutput() ProbeListMapOutput {
	return i.ToProbeListMapOutputWithContext(context.Background())
}

func (i ProbeListMap) ToProbeListMapOutputWithContext(ctx context.Context) ProbeListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbeListMapOutput)
}

type ProbeListOutput struct{ *pulumi.OutputState }

func (ProbeListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbeList)(nil)).Elem()
}

func (o ProbeListOutput) ToProbeListOutput() ProbeListOutput {
	return o
}

func (o ProbeListOutput) ToProbeListOutputWithContext(ctx context.Context) ProbeListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProbeListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ProbeList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of probes. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ProbeListOutput) Items() ProbeTypeArrayOutput {
	return o.ApplyT(func(v *ProbeList) ProbeTypeArrayOutput { return v.Items }).(ProbeTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProbeListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ProbeList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProbeListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ProbeList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ProbeListArrayOutput struct{ *pulumi.OutputState }

func (ProbeListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProbeList)(nil)).Elem()
}

func (o ProbeListArrayOutput) ToProbeListArrayOutput() ProbeListArrayOutput {
	return o
}

func (o ProbeListArrayOutput) ToProbeListArrayOutputWithContext(ctx context.Context) ProbeListArrayOutput {
	return o
}

func (o ProbeListArrayOutput) Index(i pulumi.IntInput) ProbeListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProbeList {
		return vs[0].([]*ProbeList)[vs[1].(int)]
	}).(ProbeListOutput)
}

type ProbeListMapOutput struct{ *pulumi.OutputState }

func (ProbeListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProbeList)(nil)).Elem()
}

func (o ProbeListMapOutput) ToProbeListMapOutput() ProbeListMapOutput {
	return o
}

func (o ProbeListMapOutput) ToProbeListMapOutputWithContext(ctx context.Context) ProbeListMapOutput {
	return o
}

func (o ProbeListMapOutput) MapIndex(k pulumi.StringInput) ProbeListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProbeList {
		return vs[0].(map[string]*ProbeList)[vs[1].(string)]
	}).(ProbeListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeListInput)(nil)).Elem(), &ProbeList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeListArrayInput)(nil)).Elem(), ProbeListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbeListMapInput)(nil)).Elem(), ProbeListMap{})
	pulumi.RegisterOutputType(ProbeListOutput{})
	pulumi.RegisterOutputType(ProbeListArrayOutput{})
	pulumi.RegisterOutputType(ProbeListMapOutput{})
}
