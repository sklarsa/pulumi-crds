// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// PrometheusRuleList is a list of PrometheusRule
type PrometheusRuleList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of prometheusrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PrometheusRuleTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewPrometheusRuleList registers a new resource with the given unique name, arguments, and options.
func NewPrometheusRuleList(ctx *pulumi.Context,
	name string, args *PrometheusRuleListArgs, opts ...pulumi.ResourceOption) (*PrometheusRuleList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("PrometheusRuleList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PrometheusRuleList
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:PrometheusRuleList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrometheusRuleList gets an existing PrometheusRuleList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrometheusRuleList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrometheusRuleListState, opts ...pulumi.ResourceOption) (*PrometheusRuleList, error) {
	var resource PrometheusRuleList
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:PrometheusRuleList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrometheusRuleList resources.
type prometheusRuleListState struct {
}

type PrometheusRuleListState struct {
}

func (PrometheusRuleListState) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusRuleListState)(nil)).Elem()
}

type prometheusRuleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of prometheusrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []PrometheusRuleType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a PrometheusRuleList resource.
type PrometheusRuleListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of prometheusrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items PrometheusRuleTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (PrometheusRuleListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*prometheusRuleListArgs)(nil)).Elem()
}

type PrometheusRuleListInput interface {
	pulumi.Input

	ToPrometheusRuleListOutput() PrometheusRuleListOutput
	ToPrometheusRuleListOutputWithContext(ctx context.Context) PrometheusRuleListOutput
}

func (*PrometheusRuleList) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusRuleList)(nil)).Elem()
}

func (i *PrometheusRuleList) ToPrometheusRuleListOutput() PrometheusRuleListOutput {
	return i.ToPrometheusRuleListOutputWithContext(context.Background())
}

func (i *PrometheusRuleList) ToPrometheusRuleListOutputWithContext(ctx context.Context) PrometheusRuleListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusRuleListOutput)
}

// PrometheusRuleListArrayInput is an input type that accepts PrometheusRuleListArray and PrometheusRuleListArrayOutput values.
// You can construct a concrete instance of `PrometheusRuleListArrayInput` via:
//
//	PrometheusRuleListArray{ PrometheusRuleListArgs{...} }
type PrometheusRuleListArrayInput interface {
	pulumi.Input

	ToPrometheusRuleListArrayOutput() PrometheusRuleListArrayOutput
	ToPrometheusRuleListArrayOutputWithContext(context.Context) PrometheusRuleListArrayOutput
}

type PrometheusRuleListArray []PrometheusRuleListInput

func (PrometheusRuleListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusRuleList)(nil)).Elem()
}

func (i PrometheusRuleListArray) ToPrometheusRuleListArrayOutput() PrometheusRuleListArrayOutput {
	return i.ToPrometheusRuleListArrayOutputWithContext(context.Background())
}

func (i PrometheusRuleListArray) ToPrometheusRuleListArrayOutputWithContext(ctx context.Context) PrometheusRuleListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusRuleListArrayOutput)
}

// PrometheusRuleListMapInput is an input type that accepts PrometheusRuleListMap and PrometheusRuleListMapOutput values.
// You can construct a concrete instance of `PrometheusRuleListMapInput` via:
//
//	PrometheusRuleListMap{ "key": PrometheusRuleListArgs{...} }
type PrometheusRuleListMapInput interface {
	pulumi.Input

	ToPrometheusRuleListMapOutput() PrometheusRuleListMapOutput
	ToPrometheusRuleListMapOutputWithContext(context.Context) PrometheusRuleListMapOutput
}

type PrometheusRuleListMap map[string]PrometheusRuleListInput

func (PrometheusRuleListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusRuleList)(nil)).Elem()
}

func (i PrometheusRuleListMap) ToPrometheusRuleListMapOutput() PrometheusRuleListMapOutput {
	return i.ToPrometheusRuleListMapOutputWithContext(context.Background())
}

func (i PrometheusRuleListMap) ToPrometheusRuleListMapOutputWithContext(ctx context.Context) PrometheusRuleListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrometheusRuleListMapOutput)
}

type PrometheusRuleListOutput struct{ *pulumi.OutputState }

func (PrometheusRuleListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrometheusRuleList)(nil)).Elem()
}

func (o PrometheusRuleListOutput) ToPrometheusRuleListOutput() PrometheusRuleListOutput {
	return o
}

func (o PrometheusRuleListOutput) ToPrometheusRuleListOutputWithContext(ctx context.Context) PrometheusRuleListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PrometheusRuleListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PrometheusRuleList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of prometheusrules. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o PrometheusRuleListOutput) Items() PrometheusRuleTypeArrayOutput {
	return o.ApplyT(func(v *PrometheusRuleList) PrometheusRuleTypeArrayOutput { return v.Items }).(PrometheusRuleTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PrometheusRuleListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PrometheusRuleList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PrometheusRuleListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *PrometheusRuleList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type PrometheusRuleListArrayOutput struct{ *pulumi.OutputState }

func (PrometheusRuleListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrometheusRuleList)(nil)).Elem()
}

func (o PrometheusRuleListArrayOutput) ToPrometheusRuleListArrayOutput() PrometheusRuleListArrayOutput {
	return o
}

func (o PrometheusRuleListArrayOutput) ToPrometheusRuleListArrayOutputWithContext(ctx context.Context) PrometheusRuleListArrayOutput {
	return o
}

func (o PrometheusRuleListArrayOutput) Index(i pulumi.IntInput) PrometheusRuleListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrometheusRuleList {
		return vs[0].([]*PrometheusRuleList)[vs[1].(int)]
	}).(PrometheusRuleListOutput)
}

type PrometheusRuleListMapOutput struct{ *pulumi.OutputState }

func (PrometheusRuleListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrometheusRuleList)(nil)).Elem()
}

func (o PrometheusRuleListMapOutput) ToPrometheusRuleListMapOutput() PrometheusRuleListMapOutput {
	return o
}

func (o PrometheusRuleListMapOutput) ToPrometheusRuleListMapOutputWithContext(ctx context.Context) PrometheusRuleListMapOutput {
	return o
}

func (o PrometheusRuleListMapOutput) MapIndex(k pulumi.StringInput) PrometheusRuleListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrometheusRuleList {
		return vs[0].(map[string]*PrometheusRuleList)[vs[1].(string)]
	}).(PrometheusRuleListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusRuleListInput)(nil)).Elem(), &PrometheusRuleList{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusRuleListArrayInput)(nil)).Elem(), PrometheusRuleListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrometheusRuleListMapInput)(nil)).Elem(), PrometheusRuleListMap{})
	pulumi.RegisterOutputType(PrometheusRuleListOutput{})
	pulumi.RegisterOutputType(PrometheusRuleListArrayOutput{})
	pulumi.RegisterOutputType(PrometheusRuleListMapOutput{})
}
