// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	"errors"
	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ServiceMonitorList is a list of ServiceMonitor
type ServiceMonitorList struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// List of servicemonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ServiceMonitorTypeArrayOutput `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaOutput `pulumi:"metadata"`
}

// NewServiceMonitorList registers a new resource with the given unique name, arguments, and options.
func NewServiceMonitorList(ctx *pulumi.Context,
	name string, args *ServiceMonitorListArgs, opts ...pulumi.ResourceOption) (*ServiceMonitorList, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Items == nil {
		return nil, errors.New("invalid value for required argument 'Items'")
	}
	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("ServiceMonitorList")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ServiceMonitorList
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:ServiceMonitorList", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetServiceMonitorList gets an existing ServiceMonitorList resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetServiceMonitorList(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ServiceMonitorListState, opts ...pulumi.ResourceOption) (*ServiceMonitorList, error) {
	var resource ServiceMonitorList
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:ServiceMonitorList", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ServiceMonitorList resources.
type serviceMonitorListState struct {
}

type ServiceMonitorListState struct {
}

func (ServiceMonitorListState) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceMonitorListState)(nil)).Elem()
}

type serviceMonitorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// List of servicemonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items []ServiceMonitorType `pulumi:"items"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata *metav1.ListMeta `pulumi:"metadata"`
}

// The set of arguments for constructing a ServiceMonitorList resource.
type ServiceMonitorListArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// List of servicemonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
	Items ServiceMonitorTypeArrayInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Metadata metav1.ListMetaPtrInput
}

func (ServiceMonitorListArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*serviceMonitorListArgs)(nil)).Elem()
}

type ServiceMonitorListInput interface {
	pulumi.Input

	ToServiceMonitorListOutput() ServiceMonitorListOutput
	ToServiceMonitorListOutputWithContext(ctx context.Context) ServiceMonitorListOutput
}

func (*ServiceMonitorList) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMonitorList)(nil)).Elem()
}

func (i *ServiceMonitorList) ToServiceMonitorListOutput() ServiceMonitorListOutput {
	return i.ToServiceMonitorListOutputWithContext(context.Background())
}

func (i *ServiceMonitorList) ToServiceMonitorListOutputWithContext(ctx context.Context) ServiceMonitorListOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorListOutput)
}

// ServiceMonitorListArrayInput is an input type that accepts ServiceMonitorListArray and ServiceMonitorListArrayOutput values.
// You can construct a concrete instance of `ServiceMonitorListArrayInput` via:
//
//	ServiceMonitorListArray{ ServiceMonitorListArgs{...} }
type ServiceMonitorListArrayInput interface {
	pulumi.Input

	ToServiceMonitorListArrayOutput() ServiceMonitorListArrayOutput
	ToServiceMonitorListArrayOutputWithContext(context.Context) ServiceMonitorListArrayOutput
}

type ServiceMonitorListArray []ServiceMonitorListInput

func (ServiceMonitorListArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceMonitorList)(nil)).Elem()
}

func (i ServiceMonitorListArray) ToServiceMonitorListArrayOutput() ServiceMonitorListArrayOutput {
	return i.ToServiceMonitorListArrayOutputWithContext(context.Background())
}

func (i ServiceMonitorListArray) ToServiceMonitorListArrayOutputWithContext(ctx context.Context) ServiceMonitorListArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorListArrayOutput)
}

// ServiceMonitorListMapInput is an input type that accepts ServiceMonitorListMap and ServiceMonitorListMapOutput values.
// You can construct a concrete instance of `ServiceMonitorListMapInput` via:
//
//	ServiceMonitorListMap{ "key": ServiceMonitorListArgs{...} }
type ServiceMonitorListMapInput interface {
	pulumi.Input

	ToServiceMonitorListMapOutput() ServiceMonitorListMapOutput
	ToServiceMonitorListMapOutputWithContext(context.Context) ServiceMonitorListMapOutput
}

type ServiceMonitorListMap map[string]ServiceMonitorListInput

func (ServiceMonitorListMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceMonitorList)(nil)).Elem()
}

func (i ServiceMonitorListMap) ToServiceMonitorListMapOutput() ServiceMonitorListMapOutput {
	return i.ToServiceMonitorListMapOutputWithContext(context.Background())
}

func (i ServiceMonitorListMap) ToServiceMonitorListMapOutputWithContext(ctx context.Context) ServiceMonitorListMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ServiceMonitorListMapOutput)
}

type ServiceMonitorListOutput struct{ *pulumi.OutputState }

func (ServiceMonitorListOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ServiceMonitorList)(nil)).Elem()
}

func (o ServiceMonitorListOutput) ToServiceMonitorListOutput() ServiceMonitorListOutput {
	return o
}

func (o ServiceMonitorListOutput) ToServiceMonitorListOutputWithContext(ctx context.Context) ServiceMonitorListOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ServiceMonitorListOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceMonitorList) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// List of servicemonitors. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md
func (o ServiceMonitorListOutput) Items() ServiceMonitorTypeArrayOutput {
	return o.ApplyT(func(v *ServiceMonitorList) ServiceMonitorTypeArrayOutput { return v.Items }).(ServiceMonitorTypeArrayOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceMonitorListOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *ServiceMonitorList) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard list metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ServiceMonitorListOutput) Metadata() metav1.ListMetaOutput {
	return o.ApplyT(func(v *ServiceMonitorList) metav1.ListMetaOutput { return v.Metadata }).(metav1.ListMetaOutput)
}

type ServiceMonitorListArrayOutput struct{ *pulumi.OutputState }

func (ServiceMonitorListArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ServiceMonitorList)(nil)).Elem()
}

func (o ServiceMonitorListArrayOutput) ToServiceMonitorListArrayOutput() ServiceMonitorListArrayOutput {
	return o
}

func (o ServiceMonitorListArrayOutput) ToServiceMonitorListArrayOutputWithContext(ctx context.Context) ServiceMonitorListArrayOutput {
	return o
}

func (o ServiceMonitorListArrayOutput) Index(i pulumi.IntInput) ServiceMonitorListOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ServiceMonitorList {
		return vs[0].([]*ServiceMonitorList)[vs[1].(int)]
	}).(ServiceMonitorListOutput)
}

type ServiceMonitorListMapOutput struct{ *pulumi.OutputState }

func (ServiceMonitorListMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ServiceMonitorList)(nil)).Elem()
}

func (o ServiceMonitorListMapOutput) ToServiceMonitorListMapOutput() ServiceMonitorListMapOutput {
	return o
}

func (o ServiceMonitorListMapOutput) ToServiceMonitorListMapOutputWithContext(ctx context.Context) ServiceMonitorListMapOutput {
	return o
}

func (o ServiceMonitorListMapOutput) MapIndex(k pulumi.StringInput) ServiceMonitorListOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ServiceMonitorList {
		return vs[0].(map[string]*ServiceMonitorList)[vs[1].(string)]
	}).(ServiceMonitorListOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorListInput)(nil)).Elem(), &ServiceMonitorList{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorListArrayInput)(nil)).Elem(), ServiceMonitorListArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ServiceMonitorListMapInput)(nil)).Elem(), ServiceMonitorListMap{})
	pulumi.RegisterOutputType(ServiceMonitorListOutput{})
	pulumi.RegisterOutputType(ServiceMonitorListArrayOutput{})
	pulumi.RegisterOutputType(ServiceMonitorListMapOutput{})
}
