// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `Alertmanager` custom resource definition (CRD) defines a desired [Alertmanager](https://prometheus.io/docs/alerting) setup to run in a Kubernetes cluster. It allows to specify many options such as the number of replicas, persistent storage and many more.
//
// For each `Alertmanager` resource, the Operator deploys a `StatefulSet` in the same namespace. When there are two or more configured replicas, the Operator runs the Alertmanager instances in high-availability mode.
//
// The resource defines via label and namespace selectors which `AlertmanagerConfig` objects should be associated to the deployed Alertmanager instances.
type Alertmanager struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput     `pulumi:"metadata"`
	Spec     AlertmanagerSpecOutput      `pulumi:"spec"`
	Status   AlertmanagerStatusPtrOutput `pulumi:"status"`
}

// NewAlertmanager registers a new resource with the given unique name, arguments, and options.
func NewAlertmanager(ctx *pulumi.Context,
	name string, args *AlertmanagerArgs, opts ...pulumi.ResourceOption) (*Alertmanager, error) {
	if args == nil {
		args = &AlertmanagerArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("Alertmanager")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource Alertmanager
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:Alertmanager", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlertmanager gets an existing Alertmanager resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlertmanager(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlertmanagerState, opts ...pulumi.ResourceOption) (*Alertmanager, error) {
	var resource Alertmanager
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:Alertmanager", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Alertmanager resources.
type alertmanagerState struct {
}

type AlertmanagerState struct {
}

func (AlertmanagerState) ElementType() reflect.Type {
	return reflect.TypeOf((*alertmanagerState)(nil)).Elem()
}

type alertmanagerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *AlertmanagerSpec  `pulumi:"spec"`
}

// The set of arguments for constructing a Alertmanager resource.
type AlertmanagerArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     AlertmanagerSpecPtrInput
}

func (AlertmanagerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*alertmanagerArgs)(nil)).Elem()
}

type AlertmanagerInput interface {
	pulumi.Input

	ToAlertmanagerOutput() AlertmanagerOutput
	ToAlertmanagerOutputWithContext(ctx context.Context) AlertmanagerOutput
}

func (*Alertmanager) ElementType() reflect.Type {
	return reflect.TypeOf((**Alertmanager)(nil)).Elem()
}

func (i *Alertmanager) ToAlertmanagerOutput() AlertmanagerOutput {
	return i.ToAlertmanagerOutputWithContext(context.Background())
}

func (i *Alertmanager) ToAlertmanagerOutputWithContext(ctx context.Context) AlertmanagerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerOutput)
}

// AlertmanagerArrayInput is an input type that accepts AlertmanagerArray and AlertmanagerArrayOutput values.
// You can construct a concrete instance of `AlertmanagerArrayInput` via:
//
//	AlertmanagerArray{ AlertmanagerArgs{...} }
type AlertmanagerArrayInput interface {
	pulumi.Input

	ToAlertmanagerArrayOutput() AlertmanagerArrayOutput
	ToAlertmanagerArrayOutputWithContext(context.Context) AlertmanagerArrayOutput
}

type AlertmanagerArray []AlertmanagerInput

func (AlertmanagerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alertmanager)(nil)).Elem()
}

func (i AlertmanagerArray) ToAlertmanagerArrayOutput() AlertmanagerArrayOutput {
	return i.ToAlertmanagerArrayOutputWithContext(context.Background())
}

func (i AlertmanagerArray) ToAlertmanagerArrayOutputWithContext(ctx context.Context) AlertmanagerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerArrayOutput)
}

// AlertmanagerMapInput is an input type that accepts AlertmanagerMap and AlertmanagerMapOutput values.
// You can construct a concrete instance of `AlertmanagerMapInput` via:
//
//	AlertmanagerMap{ "key": AlertmanagerArgs{...} }
type AlertmanagerMapInput interface {
	pulumi.Input

	ToAlertmanagerMapOutput() AlertmanagerMapOutput
	ToAlertmanagerMapOutputWithContext(context.Context) AlertmanagerMapOutput
}

type AlertmanagerMap map[string]AlertmanagerInput

func (AlertmanagerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alertmanager)(nil)).Elem()
}

func (i AlertmanagerMap) ToAlertmanagerMapOutput() AlertmanagerMapOutput {
	return i.ToAlertmanagerMapOutputWithContext(context.Background())
}

func (i AlertmanagerMap) ToAlertmanagerMapOutputWithContext(ctx context.Context) AlertmanagerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlertmanagerMapOutput)
}

type AlertmanagerOutput struct{ *pulumi.OutputState }

func (AlertmanagerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**Alertmanager)(nil)).Elem()
}

func (o AlertmanagerOutput) ToAlertmanagerOutput() AlertmanagerOutput {
	return o
}

func (o AlertmanagerOutput) ToAlertmanagerOutputWithContext(ctx context.Context) AlertmanagerOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o AlertmanagerOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *Alertmanager) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o AlertmanagerOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *Alertmanager) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o AlertmanagerOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *Alertmanager) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o AlertmanagerOutput) Spec() AlertmanagerSpecOutput {
	return o.ApplyT(func(v *Alertmanager) AlertmanagerSpecOutput { return v.Spec }).(AlertmanagerSpecOutput)
}

func (o AlertmanagerOutput) Status() AlertmanagerStatusPtrOutput {
	return o.ApplyT(func(v *Alertmanager) AlertmanagerStatusPtrOutput { return v.Status }).(AlertmanagerStatusPtrOutput)
}

type AlertmanagerArrayOutput struct{ *pulumi.OutputState }

func (AlertmanagerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*Alertmanager)(nil)).Elem()
}

func (o AlertmanagerArrayOutput) ToAlertmanagerArrayOutput() AlertmanagerArrayOutput {
	return o
}

func (o AlertmanagerArrayOutput) ToAlertmanagerArrayOutputWithContext(ctx context.Context) AlertmanagerArrayOutput {
	return o
}

func (o AlertmanagerArrayOutput) Index(i pulumi.IntInput) AlertmanagerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *Alertmanager {
		return vs[0].([]*Alertmanager)[vs[1].(int)]
	}).(AlertmanagerOutput)
}

type AlertmanagerMapOutput struct{ *pulumi.OutputState }

func (AlertmanagerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*Alertmanager)(nil)).Elem()
}

func (o AlertmanagerMapOutput) ToAlertmanagerMapOutput() AlertmanagerMapOutput {
	return o
}

func (o AlertmanagerMapOutput) ToAlertmanagerMapOutputWithContext(ctx context.Context) AlertmanagerMapOutput {
	return o
}

func (o AlertmanagerMapOutput) MapIndex(k pulumi.StringInput) AlertmanagerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *Alertmanager {
		return vs[0].(map[string]*Alertmanager)[vs[1].(string)]
	}).(AlertmanagerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlertmanagerInput)(nil)).Elem(), &Alertmanager{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertmanagerArrayInput)(nil)).Elem(), AlertmanagerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlertmanagerMapInput)(nil)).Elem(), AlertmanagerMap{})
	pulumi.RegisterOutputType(AlertmanagerOutput{})
	pulumi.RegisterOutputType(AlertmanagerArrayOutput{})
	pulumi.RegisterOutputType(AlertmanagerMapOutput{})
}
