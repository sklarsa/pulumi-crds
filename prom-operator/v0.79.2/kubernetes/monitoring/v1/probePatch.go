// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Patch resources are used to modify existing Kubernetes resources by using
// Server-Side Apply updates. The name of the resource must be specified, but all other properties are optional. More than
// one patch may be applied to the same resource, and a random FieldManager name will be used for each Patch resource.
// Conflicts will result in an error by default, but can be forced using the "pulumi.com/patchForce" annotation. See the
// [Server-Side Apply Docs](https://www.pulumi.com/registry/packages/kubernetes/how-to-guides/managing-resources-with-server-side-apply/) for
// additional information about using Server-Side Apply to manage Kubernetes resources with Pulumi.
// The `Probe` custom resource definition (CRD) defines how to scrape metrics from prober exporters such as the [blackbox exporter](https://github.com/prometheus/blackbox_exporter).
//
// The `Probe` resource needs 2 pieces of information:
// * The list of probed addresses which can be defined statically or by discovering Kubernetes Ingress objects.
// * The prober which exposes the availability of probed endpoints (over various protocols such HTTP, TCP, ICMP, ...) as Prometheus metrics.
//
// `Prometheus` and `PrometheusAgent` objects select `Probe` objects using label and namespace selectors.
type ProbePatch struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrOutput `pulumi:"metadata"`
	Spec     ProbeSpecPatchPtrOutput         `pulumi:"spec"`
}

// NewProbePatch registers a new resource with the given unique name, arguments, and options.
func NewProbePatch(ctx *pulumi.Context,
	name string, args *ProbePatchArgs, opts ...pulumi.ResourceOption) (*ProbePatch, error) {
	if args == nil {
		args = &ProbePatchArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("Probe")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource ProbePatch
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:ProbePatch", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetProbePatch gets an existing ProbePatch resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetProbePatch(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ProbePatchState, opts ...pulumi.ResourceOption) (*ProbePatch, error) {
	var resource ProbePatch
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:ProbePatch", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ProbePatch resources.
type probePatchState struct {
}

type ProbePatchState struct {
}

func (ProbePatchState) ElementType() reflect.Type {
	return reflect.TypeOf((*probePatchState)(nil)).Elem()
}

type probePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMetaPatch `pulumi:"metadata"`
	Spec     *ProbeSpecPatch         `pulumi:"spec"`
}

// The set of arguments for constructing a ProbePatch resource.
type ProbePatchArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPatchPtrInput
	Spec     ProbeSpecPatchPtrInput
}

func (ProbePatchArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*probePatchArgs)(nil)).Elem()
}

type ProbePatchInput interface {
	pulumi.Input

	ToProbePatchOutput() ProbePatchOutput
	ToProbePatchOutputWithContext(ctx context.Context) ProbePatchOutput
}

func (*ProbePatch) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbePatch)(nil)).Elem()
}

func (i *ProbePatch) ToProbePatchOutput() ProbePatchOutput {
	return i.ToProbePatchOutputWithContext(context.Background())
}

func (i *ProbePatch) ToProbePatchOutputWithContext(ctx context.Context) ProbePatchOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePatchOutput)
}

// ProbePatchArrayInput is an input type that accepts ProbePatchArray and ProbePatchArrayOutput values.
// You can construct a concrete instance of `ProbePatchArrayInput` via:
//
//	ProbePatchArray{ ProbePatchArgs{...} }
type ProbePatchArrayInput interface {
	pulumi.Input

	ToProbePatchArrayOutput() ProbePatchArrayOutput
	ToProbePatchArrayOutputWithContext(context.Context) ProbePatchArrayOutput
}

type ProbePatchArray []ProbePatchInput

func (ProbePatchArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProbePatch)(nil)).Elem()
}

func (i ProbePatchArray) ToProbePatchArrayOutput() ProbePatchArrayOutput {
	return i.ToProbePatchArrayOutputWithContext(context.Background())
}

func (i ProbePatchArray) ToProbePatchArrayOutputWithContext(ctx context.Context) ProbePatchArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePatchArrayOutput)
}

// ProbePatchMapInput is an input type that accepts ProbePatchMap and ProbePatchMapOutput values.
// You can construct a concrete instance of `ProbePatchMapInput` via:
//
//	ProbePatchMap{ "key": ProbePatchArgs{...} }
type ProbePatchMapInput interface {
	pulumi.Input

	ToProbePatchMapOutput() ProbePatchMapOutput
	ToProbePatchMapOutputWithContext(context.Context) ProbePatchMapOutput
}

type ProbePatchMap map[string]ProbePatchInput

func (ProbePatchMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProbePatch)(nil)).Elem()
}

func (i ProbePatchMap) ToProbePatchMapOutput() ProbePatchMapOutput {
	return i.ToProbePatchMapOutputWithContext(context.Background())
}

func (i ProbePatchMap) ToProbePatchMapOutputWithContext(ctx context.Context) ProbePatchMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ProbePatchMapOutput)
}

type ProbePatchOutput struct{ *pulumi.OutputState }

func (ProbePatchOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ProbePatch)(nil)).Elem()
}

func (o ProbePatchOutput) ToProbePatchOutput() ProbePatchOutput {
	return o
}

func (o ProbePatchOutput) ToProbePatchOutputWithContext(ctx context.Context) ProbePatchOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o ProbePatchOutput) ApiVersion() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbePatch) pulumi.StringPtrOutput { return v.ApiVersion }).(pulumi.StringPtrOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o ProbePatchOutput) Kind() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *ProbePatch) pulumi.StringPtrOutput { return v.Kind }).(pulumi.StringPtrOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o ProbePatchOutput) Metadata() metav1.ObjectMetaPatchPtrOutput {
	return o.ApplyT(func(v *ProbePatch) metav1.ObjectMetaPatchPtrOutput { return v.Metadata }).(metav1.ObjectMetaPatchPtrOutput)
}

func (o ProbePatchOutput) Spec() ProbeSpecPatchPtrOutput {
	return o.ApplyT(func(v *ProbePatch) ProbeSpecPatchPtrOutput { return v.Spec }).(ProbeSpecPatchPtrOutput)
}

type ProbePatchArrayOutput struct{ *pulumi.OutputState }

func (ProbePatchArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ProbePatch)(nil)).Elem()
}

func (o ProbePatchArrayOutput) ToProbePatchArrayOutput() ProbePatchArrayOutput {
	return o
}

func (o ProbePatchArrayOutput) ToProbePatchArrayOutputWithContext(ctx context.Context) ProbePatchArrayOutput {
	return o
}

func (o ProbePatchArrayOutput) Index(i pulumi.IntInput) ProbePatchOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ProbePatch {
		return vs[0].([]*ProbePatch)[vs[1].(int)]
	}).(ProbePatchOutput)
}

type ProbePatchMapOutput struct{ *pulumi.OutputState }

func (ProbePatchMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ProbePatch)(nil)).Elem()
}

func (o ProbePatchMapOutput) ToProbePatchMapOutput() ProbePatchMapOutput {
	return o
}

func (o ProbePatchMapOutput) ToProbePatchMapOutputWithContext(ctx context.Context) ProbePatchMapOutput {
	return o
}

func (o ProbePatchMapOutput) MapIndex(k pulumi.StringInput) ProbePatchOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ProbePatch {
		return vs[0].(map[string]*ProbePatch)[vs[1].(string)]
	}).(ProbePatchOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePatchInput)(nil)).Elem(), &ProbePatch{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePatchArrayInput)(nil)).Elem(), ProbePatchArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ProbePatchMapInput)(nil)).Elem(), ProbePatchMap{})
	pulumi.RegisterOutputType(ProbePatchOutput{})
	pulumi.RegisterOutputType(ProbePatchArrayOutput{})
	pulumi.RegisterOutputType(ProbePatchMapOutput{})
}
