// Code generated by crd2pulumi DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package v1

import (
	"context"
	"reflect"

	metav1 "github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/meta/v1"
	"github.com/pulumi/pulumi-kubernetes/sdk/v4/go/kubernetes/utilities"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The `PodMonitor` custom resource definition (CRD) defines how `Prometheus` and `PrometheusAgent` can scrape metrics from a group of pods.
// Among other things, it allows to specify:
// * The pods to scrape via label selectors.
// * The container ports to scrape.
// * Authentication credentials to use.
// * Target and metric relabeling.
//
// `Prometheus` and `PrometheusAgent` objects select `PodMonitor` objects using label and namespace selectors.
type PodMonitor struct {
	pulumi.CustomResourceState

	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringOutput `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringOutput `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaOutput `pulumi:"metadata"`
	Spec     PodMonitorSpecOutput    `pulumi:"spec"`
}

// NewPodMonitor registers a new resource with the given unique name, arguments, and options.
func NewPodMonitor(ctx *pulumi.Context,
	name string, args *PodMonitorArgs, opts ...pulumi.ResourceOption) (*PodMonitor, error) {
	if args == nil {
		args = &PodMonitorArgs{}
	}

	args.ApiVersion = pulumi.StringPtr("monitoring.coreos.com/v1")
	args.Kind = pulumi.StringPtr("PodMonitor")
	opts = utilities.PkgResourceDefaultOpts(opts)
	var resource PodMonitor
	err := ctx.RegisterResource("kubernetes:monitoring.coreos.com/v1:PodMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPodMonitor gets an existing PodMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPodMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PodMonitorState, opts ...pulumi.ResourceOption) (*PodMonitor, error) {
	var resource PodMonitor
	err := ctx.ReadResource("kubernetes:monitoring.coreos.com/v1:PodMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PodMonitor resources.
type podMonitorState struct {
}

type PodMonitorState struct {
}

func (PodMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*podMonitorState)(nil)).Elem()
}

type podMonitorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion *string `pulumi:"apiVersion"`
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind *string `pulumi:"kind"`
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata *metav1.ObjectMeta `pulumi:"metadata"`
	Spec     *PodMonitorSpec    `pulumi:"spec"`
}

// The set of arguments for constructing a PodMonitor resource.
type PodMonitorArgs struct {
	// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
	ApiVersion pulumi.StringPtrInput
	// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
	Kind pulumi.StringPtrInput
	// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
	Metadata metav1.ObjectMetaPtrInput
	Spec     PodMonitorSpecPtrInput
}

func (PodMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*podMonitorArgs)(nil)).Elem()
}

type PodMonitorInput interface {
	pulumi.Input

	ToPodMonitorOutput() PodMonitorOutput
	ToPodMonitorOutputWithContext(ctx context.Context) PodMonitorOutput
}

func (*PodMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((**PodMonitor)(nil)).Elem()
}

func (i *PodMonitor) ToPodMonitorOutput() PodMonitorOutput {
	return i.ToPodMonitorOutputWithContext(context.Background())
}

func (i *PodMonitor) ToPodMonitorOutputWithContext(ctx context.Context) PodMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorOutput)
}

// PodMonitorArrayInput is an input type that accepts PodMonitorArray and PodMonitorArrayOutput values.
// You can construct a concrete instance of `PodMonitorArrayInput` via:
//
//	PodMonitorArray{ PodMonitorArgs{...} }
type PodMonitorArrayInput interface {
	pulumi.Input

	ToPodMonitorArrayOutput() PodMonitorArrayOutput
	ToPodMonitorArrayOutputWithContext(context.Context) PodMonitorArrayOutput
}

type PodMonitorArray []PodMonitorInput

func (PodMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodMonitor)(nil)).Elem()
}

func (i PodMonitorArray) ToPodMonitorArrayOutput() PodMonitorArrayOutput {
	return i.ToPodMonitorArrayOutputWithContext(context.Background())
}

func (i PodMonitorArray) ToPodMonitorArrayOutputWithContext(ctx context.Context) PodMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorArrayOutput)
}

// PodMonitorMapInput is an input type that accepts PodMonitorMap and PodMonitorMapOutput values.
// You can construct a concrete instance of `PodMonitorMapInput` via:
//
//	PodMonitorMap{ "key": PodMonitorArgs{...} }
type PodMonitorMapInput interface {
	pulumi.Input

	ToPodMonitorMapOutput() PodMonitorMapOutput
	ToPodMonitorMapOutputWithContext(context.Context) PodMonitorMapOutput
}

type PodMonitorMap map[string]PodMonitorInput

func (PodMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodMonitor)(nil)).Elem()
}

func (i PodMonitorMap) ToPodMonitorMapOutput() PodMonitorMapOutput {
	return i.ToPodMonitorMapOutputWithContext(context.Background())
}

func (i PodMonitorMap) ToPodMonitorMapOutputWithContext(ctx context.Context) PodMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PodMonitorMapOutput)
}

type PodMonitorOutput struct{ *pulumi.OutputState }

func (PodMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PodMonitor)(nil)).Elem()
}

func (o PodMonitorOutput) ToPodMonitorOutput() PodMonitorOutput {
	return o
}

func (o PodMonitorOutput) ToPodMonitorOutputWithContext(ctx context.Context) PodMonitorOutput {
	return o
}

// APIVersion defines the versioned schema of this representation of an object. Servers should convert recognized schemas to the latest internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources
func (o PodMonitorOutput) ApiVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *PodMonitor) pulumi.StringOutput { return v.ApiVersion }).(pulumi.StringOutput)
}

// Kind is a string value representing the REST resource this object represents. Servers may infer this from the endpoint the client submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
func (o PodMonitorOutput) Kind() pulumi.StringOutput {
	return o.ApplyT(func(v *PodMonitor) pulumi.StringOutput { return v.Kind }).(pulumi.StringOutput)
}

// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
func (o PodMonitorOutput) Metadata() metav1.ObjectMetaOutput {
	return o.ApplyT(func(v *PodMonitor) metav1.ObjectMetaOutput { return v.Metadata }).(metav1.ObjectMetaOutput)
}

func (o PodMonitorOutput) Spec() PodMonitorSpecOutput {
	return o.ApplyT(func(v *PodMonitor) PodMonitorSpecOutput { return v.Spec }).(PodMonitorSpecOutput)
}

type PodMonitorArrayOutput struct{ *pulumi.OutputState }

func (PodMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PodMonitor)(nil)).Elem()
}

func (o PodMonitorArrayOutput) ToPodMonitorArrayOutput() PodMonitorArrayOutput {
	return o
}

func (o PodMonitorArrayOutput) ToPodMonitorArrayOutputWithContext(ctx context.Context) PodMonitorArrayOutput {
	return o
}

func (o PodMonitorArrayOutput) Index(i pulumi.IntInput) PodMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PodMonitor {
		return vs[0].([]*PodMonitor)[vs[1].(int)]
	}).(PodMonitorOutput)
}

type PodMonitorMapOutput struct{ *pulumi.OutputState }

func (PodMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PodMonitor)(nil)).Elem()
}

func (o PodMonitorMapOutput) ToPodMonitorMapOutput() PodMonitorMapOutput {
	return o
}

func (o PodMonitorMapOutput) ToPodMonitorMapOutputWithContext(ctx context.Context) PodMonitorMapOutput {
	return o
}

func (o PodMonitorMapOutput) MapIndex(k pulumi.StringInput) PodMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PodMonitor {
		return vs[0].(map[string]*PodMonitor)[vs[1].(string)]
	}).(PodMonitorOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorInput)(nil)).Elem(), &PodMonitor{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorArrayInput)(nil)).Elem(), PodMonitorArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PodMonitorMapInput)(nil)).Elem(), PodMonitorMap{})
	pulumi.RegisterOutputType(PodMonitorOutput{})
	pulumi.RegisterOutputType(PodMonitorArrayOutput{})
	pulumi.RegisterOutputType(PodMonitorMapOutput{})
}
